

Microchip Technology PIC18 PRO Macro Assembler V1.37 build -260352376 
                                                                                               Wed May 11 14:28:34 2016

Microchip Technology Omniscient Code Generator v1.37 (PRO mode) build 201603110536
     1                           	processor	18F252
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	eeprom_data,global,class=EEDATA,delta=1
     6                           	psect	idataCOMRAM,global,class=CODE,delta=1
     7                           	psect	idataBANK0,global,class=CODE,delta=1
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    70                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    71                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    72                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    73                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    74                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    75  0000                     
    76                           	psect	eeprom_data
    77  F00000  11 0A 80 0F 80 FF 01 04 	db	17,10,128,15,128,255,1,4	;# 
    78  F00008  10 03 FF 15 17 09 0B 06 	db	16,3,255,21,23,9,11,6	;# 
    79  F00010  09 00 01 30 20 00 00 00 	db	9,0,1,48,32,0,0,0	;# 
    80  0000                     
    81                           	psect	idataCOMRAM
    82  002BD4                     __pidataCOMRAM:
    83                           	opt stack 0
    84                           
    85                           ;initializer for _curEventNum
    86  002BD4  FF                 	db	255
    87                           
    88                           ;initializer for _currentAlarmedEventNum
    89  002BD5  FF                 	db	255
    90                           
    91                           ;initializer for _globalHours
    92  002BD6  FF                 	db	255
    93                           
    94                           	psect	idataBANK0
    95  002BD0                     __pidataBANK0:
    96                           	opt stack 0
    97                           
    98                           ;initializer for _buzzerOnOffDuration
    99  002BD0  0100               	dw	256
   100                           
   101                           ;initializer for _buzzerOnOffPeriod
   102  002BD2  0400               	dw	1024
   103                           
   104                           	psect	smallconst
   105  000600                     __psmallconst:
   106                           	opt stack 0
   107  000600  00                 	db	0
   108  000601                     _fctsupported:
   109                           	opt stack 0
   110  000601  01                 	db	1
   111  000602  02                 	db	2
   112  000603  03                 	db	3
   113  000604  04                 	db	4
   114  000605  05                 	db	5
   115  000606  06                 	db	6
   116  000607  0F                 	db	15
   117  000608  10                 	db	16
   118  000609  11                 	db	17
   119  00060A  15                 	db	21
   120  00060B                     __end_of_fctsupported:
   121                           	opt stack 0
   122  0000                     _CCP1CONbits	set	4029
   123  0000                     _CCPR1L	set	4030
   124  0000                     _EEADR	set	4009
   125  0000                     _EECON2	set	4007
   126  0000                     _EEDATA	set	4008
   127  0000                     _INTCON2bits	set	4081
   128  0000                     _INTCONbits	set	4082
   129  0000                     _IPR1bits	set	3999
   130  0000                     _LATA	set	3977
   131  0000                     _LATAbits	set	3977
   132  0000                     _LATB	set	3978
   133  0000                     _LATCbits	set	3979
   134  0000                     _PIE1bits	set	3997
   135  0000                     _PIR1bits	set	3998
   136  0000                     _PORTCbits	set	3970
   137  0000                     _PR2	set	4043
   138  0000                     _RCONbits	set	4048
   139  0000                     _RCREG	set	4014
   140  0000                     _RCSTA	set	4011
   141  0000                     _RCSTAbits	set	4011
   142  0000                     _SPBRG	set	4015
   143  0000                     _T0CONbits	set	4053
   144  0000                     _T1CONbits	set	4045
   145  0000                     _T2CONbits	set	4042
   146  0000                     _TMR0H	set	4055
   147  0000                     _TMR0L	set	4054
   148  0000                     _TMR1H	set	4047
   149  0000                     _TMR1L	set	4046
   150  0000                     _TRISAbits	set	3986
   151  0000                     _TRISB	set	3987
   152  0000                     _TRISCbits	set	3988
   153  0000                     _TXREG	set	4013
   154  0000                     _TXSTA	set	4012
   155  0000                     _TXSTAbits	set	4012
   156  0000                     _CARRY	set	32448
   157  0000                     _GIE	set	32663
   158  0000                     _RCIF	set	31989
   159  0000                     _RD	set	32048
   160  0000                     _TRMT	set	32097
   161  0000                     _WR	set	32049
   162  0000                     _WREN	set	32050
   163  00060B                     STR_3:
   164  00060B  54                 	db	84	;'T'
   165  00060C  61                 	db	97	;'a'
   166  00060D  62                 	db	98	;'b'
   167  00060E  6C                 	db	108	;'l'
   168  00060F  6F                 	db	111	;'o'
   169  000610  20                 	db	32
   170  000611  73                 	db	115	;'s'
   171  000612  20                 	db	32
   172  000613  72                 	db	114	;'r'
   173  000614  61                 	db	97	;'a'
   174  000615  73                 	db	115	;'s'
   175  000616  70                 	db	112	;'p'
   176  000617  69                 	db	105	;'i'
   177  000618  73                 	db	115	;'s'
   178  000619  61                 	db	97	;'a'
   179  00061A  6E                 	db	110	;'n'
   180  00061B  69                 	db	105	;'i'
   181  00061C  65                 	db	101	;'e'
   182  00061D  6D                 	db	109	;'m'
   183  00061E  20                 	db	32
   184  00061F  74                 	db	116	;'t'
   185  000620  75                 	db	117	;'u'
   186  000621  72                 	db	114	;'r'
   187  000622  6F                 	db	111	;'o'
   188  000623  00                 	db	0
   189                           
   190                           ; #config settings
   191  000624  00                 	db	0	; dummy byte at the end
   192  0000                     
   193                           	psect	cinit
   194  002514                     __pcinit:
   195                           	opt stack 0
   196  002514                     start_initialization:
   197                           	opt stack 0
   198  002514                     __initialization:
   199                           	opt stack 0
   200                           
   201                           ; Clear objects allocated to BANK2 (256 bytes)
   202  002514  EE02  F000         	lfsr	0,__pbssBANK2
   203  002518  EE11 F000          	lfsr	1,256
   204  00251C                     clear_0:
   205  00251C  6AEE               	clrf	postinc0,c
   206  00251E  50E5               	movf	postdec1,w,c
   207  002520  50E1               	movf	fsr1l,w,c
   208  002522  E1FC               	bnz	clear_0
   209  002524  50E2               	movf	fsr1h,w,c
   210  002526  E1FA               	bnz	clear_0
   211                           
   212                           ; Clear objects allocated to BANK1 (200 bytes)
   213  002528  EE01  F000         	lfsr	0,__pbssBANK1
   214  00252C  0EC8               	movlw	200
   215  00252E                     clear_1:
   216  00252E  6AEE               	clrf	postinc0,c
   217  002530  06E8               	decf	wreg,f,c
   218  002532  E1FD               	bnz	clear_1
   219                           
   220                           ; Clear objects allocated to BANK0 (91 bytes)
   221  002534  EE00  F080         	lfsr	0,__pbssBANK0
   222  002538  0E5B               	movlw	91
   223  00253A                     clear_2:
   224  00253A  6AEE               	clrf	postinc0,c
   225  00253C  06E8               	decf	wreg,f,c
   226  00253E  E1FD               	bnz	clear_2
   227                           
   228                           ; Clear objects allocated to COMRAM (6 bytes)
   229  002540  6A6E               	clrf	(__pbssCOMRAM+5)& (0+255),c
   230  002542  6A6D               	clrf	(__pbssCOMRAM+4)& (0+255),c
   231  002544  6A6C               	clrf	(__pbssCOMRAM+3)& (0+255),c
   232  002546  6A6B               	clrf	(__pbssCOMRAM+2)& (0+255),c
   233  002548  6A6A               	clrf	(__pbssCOMRAM+1)& (0+255),c
   234  00254A  6A69               	clrf	__pbssCOMRAM& (0+255),c
   235                           
   236                           ; Initialize objects allocated to BANK0 (4 bytes)
   237                           ; load TBLPTR registers with __pidataBANK0
   238  00254C  0ED0               	movlw	low __pidataBANK0
   239  00254E  6EF6               	movwf	tblptrl,c
   240  002550  0E2B               	movlw	high __pidataBANK0
   241  002552  6EF7               	movwf	tblptrh,c
   242  002554  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   243  002556  6EF8               	movwf	tblptru,c
   244  002558  EE00  F0F7         	lfsr	0,__pdataBANK0
   245  00255C  EE10 F004          	lfsr	1,4
   246  002560                     copy_data0:
   247  002560  0009               	tblrd		*+
   248  002562  CFF5 FFEE          	movff	tablat,postinc0
   249  002566  50E5               	movf	postdec1,w,c
   250  002568  50E1               	movf	fsr1l,w,c
   251  00256A  E1FA               	bnz	copy_data0
   252                           
   253                           ; Initialize objects allocated to COMRAM (3 bytes)
   254                           ; load TBLPTR registers with __pidataCOMRAM
   255  00256C  0ED4               	movlw	low __pidataCOMRAM
   256  00256E  6EF6               	movwf	tblptrl,c
   257  002570  0E2B               	movlw	high __pidataCOMRAM
   258  002572  6EF7               	movwf	tblptrh,c
   259  002574  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   260  002576  6EF8               	movwf	tblptru,c
   261  002578  0009               	tblrd		*+	;fetch initializer
   262  00257A  CFF5 F06F          	movff	tablat,__pdataCOMRAM
   263  00257E  0009               	tblrd		*+	;fetch initializer
   264  002580  CFF5 F070          	movff	tablat,__pdataCOMRAM+1
   265  002584  0009               	tblrd		*+	;fetch initializer
   266  002586  CFF5 F071          	movff	tablat,__pdataCOMRAM+2
   267  00258A                     end_of_initialization:
   268                           	opt stack 0
   269  00258A                     __end_of__initialization:
   270                           	opt stack 0
   271  00258A  9072               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   272  00258C  9272               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   273  00258E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   274  002590  6EF8               	movwf	tblptru,c
   275  002592  0100               	movlb	0
   276  002594  EF3A  F00B         	goto	_main	;jump to C main() function
   277                           tblptru	equ	0xFF8
   278                           tblptrh	equ	0xFF7
   279                           tblptrl	equ	0xFF6
   280                           tablat	equ	0xFF5
   281                           postinc0	equ	0xFEE
   282                           wreg	equ	0xFE8
   283                           postdec1	equ	0xFE5
   284                           fsr1h	equ	0xFE2
   285                           fsr1l	equ	0xFE1
   286                           
   287                           	psect	bssCOMRAM
   288  000069                     __pbssCOMRAM:
   289                           	opt stack 0
   290  000069                     _UartBufferLen:
   291                           	opt stack 0
   292  000069                     	ds	1
   293  00006A                     _UartBufferTail:
   294                           	opt stack 0
   295  00006A                     	ds	1
   296  00006B                     __u8BufferSize:
   297                           	opt stack 0
   298  00006B                     	ds	1
   299  00006C                     _blinkOn:
   300                           	opt stack 0
   301  00006C                     	ds	1
   302  00006D                     _eventCount:
   303                           	opt stack 0
   304  00006D                     	ds	1
   305  00006E                     _globalMinutes:
   306                           	opt stack 0
   307  00006E                     	ds	1
   308                           tblptru	equ	0xFF8
   309                           tblptrh	equ	0xFF7
   310                           tblptrl	equ	0xFF6
   311                           tablat	equ	0xFF5
   312                           postinc0	equ	0xFEE
   313                           wreg	equ	0xFE8
   314                           postdec1	equ	0xFE5
   315                           fsr1h	equ	0xFE2
   316                           fsr1l	equ	0xFE1
   317                           
   318                           	psect	dataCOMRAM
   319  00006F                     __pdataCOMRAM:
   320                           	opt stack 0
   321  00006F                     _curEventNum:
   322                           	opt stack 0
   323  00006F                     	ds	1
   324  000070                     _currentAlarmedEventNum:
   325                           	opt stack 0
   326  000070                     	ds	1
   327  000071                     _globalHours:
   328                           	opt stack 0
   329  000071                     	ds	1
   330                           tblptru	equ	0xFF8
   331                           tblptrh	equ	0xFF7
   332                           tblptrl	equ	0xFF6
   333                           tablat	equ	0xFF5
   334                           postinc0	equ	0xFEE
   335                           wreg	equ	0xFE8
   336                           postdec1	equ	0xFE5
   337                           fsr1h	equ	0xFE2
   338                           fsr1l	equ	0xFE1
   339                           
   340                           	psect	bssBANK0
   341  000080                     __pbssBANK0:
   342                           	opt stack 0
   343  000080                     _ledBlink:
   344                           	opt stack 0
   345  000080                     	ds	16
   346  000090                     _ledStatuses:
   347                           	opt stack 0
   348  000090                     	ds	16
   349  0000A0                     __u32time:
   350                           	opt stack 0
   351  0000A0                     	ds	4
   352  0000A4                     _diffTime:
   353                           	opt stack 0
   354  0000A4                     	ds	4
   355  0000A8                     _eventResetSecond:
   356                           	opt stack 0
   357  0000A8                     	ds	4
   358  0000AC                     _millisecondsFromStart:
   359                           	opt stack 0
   360  0000AC                     	ds	4
   361  0000B0                     _oldBlinkOnTime:
   362                           	opt stack 0
   363  0000B0                     	ds	4
   364  0000B4                     __MODBUSDiscreteInputs:
   365                           	opt stack 0
   366  0000B4                     	ds	2
   367  0000B6                     __lastAddress:
   368                           	opt stack 0
   369  0000B6                     	ds	2
   370  0000B8                     __lastCount:
   371                           	opt stack 0
   372  0000B8                     	ds	2
   373  0000BA                     _blinkDuration:
   374                           	opt stack 0
   375  0000BA                     	ds	2
   376  0000BC                     _blinkPeriod:
   377                           	opt stack 0
   378  0000BC                     	ds	2
   379  0000BE                     _IsBusserOn:
   380                           	opt stack 0
   381  0000BE                     	ds	1
   382  0000BF                     _UartBufferHead:
   383                           	opt stack 0
   384  0000BF                     	ds	1
   385  0000C0                     __6sCounter:
   386                           	opt stack 0
   387  0000C0                     	ds	1
   388  0000C1                     __holdingRegsCount:
   389                           	opt stack 0
   390  0000C1                     	ds	1
   391  0000C2                     __inputRegsCount:
   392                           	opt stack 0
   393  0000C2                     	ds	1
   394  0000C3                     __u8id:
   395                           	opt stack 0
   396  0000C3                     	ds	1
   397  0000C4                     __u8lastRec:
   398                           	opt stack 0
   399  0000C4                     	ds	1
   400  0000C5                     _buzzeEscaladeTime:
   401                           	opt stack 0
   402  0000C5                     	ds	1
   403  0000C6                     _buzzeLoudDuration:
   404                           	opt stack 0
   405  0000C6                     	ds	1
   406  0000C7                     _buzzeQuietDuration:
   407                           	opt stack 0
   408  0000C7                     	ds	1
   409  0000C8                     _buzzerAlarmPeriod:
   410                           	opt stack 0
   411  0000C8                     	ds	1
   412  0000C9                     _buzzerInfoPeriod:
   413                           	opt stack 0
   414  0000C9                     	ds	1
   415  0000CA                     _buzzerStartDurationDiv:
   416                           	opt stack 0
   417  0000CA                     	ds	1
   418  0000CB                     _curEventHour:
   419                           	opt stack 0
   420  0000CB                     	ds	1
   421  0000CC                     _curEventMinute:
   422                           	opt stack 0
   423  0000CC                     	ds	1
   424  0000CD                     _curEventType:
   425                           	opt stack 0
   426  0000CD                     	ds	1
   427  0000CE                     _currentLedBlock:
   428                           	opt stack 0
   429  0000CE                     	ds	1
   430  0000CF                     _eveningTimeHour:
   431                           	opt stack 0
   432  0000CF                     	ds	1
   433  0000D0                     _eventAcceptTime:
   434                           	opt stack 0
   435  0000D0                     	ds	1
   436  0000D1                     _morningTimeHour:
   437                           	opt stack 0
   438  0000D1                     	ds	1
   439  0000D2                     _nightEndHour:
   440                           	opt stack 0
   441  0000D2                     	ds	1
   442  0000D3                     _nightStartHour:
   443                           	opt stack 0
   444  0000D3                     	ds	1
   445  0000D4                     _currentTime:
   446                           	opt stack 0
   447  0000D4                     	ds	4
   448  0000D8                     __MODBUSCoils:
   449                           	opt stack 0
   450  0000D8                     	ds	2
   451  0000DA                     __lastCommand:
   452                           	opt stack 0
   453  0000DA                     	ds	1
   454                           tblptru	equ	0xFF8
   455                           tblptrh	equ	0xFF7
   456                           tblptrl	equ	0xFF6
   457                           tablat	equ	0xFF5
   458                           postinc0	equ	0xFEE
   459                           wreg	equ	0xFE8
   460                           postdec1	equ	0xFE5
   461                           fsr1h	equ	0xFE2
   462                           fsr1l	equ	0xFE1
   463                           
   464                           	psect	dataBANK0
   465  0000F7                     __pdataBANK0:
   466                           	opt stack 0
   467  0000F7                     _buzzerOnOffDuration:
   468                           	opt stack 0
   469  0000F7                     	ds	2
   470  0000F9                     _buzzerOnOffPeriod:
   471                           	opt stack 0
   472  0000F9                     	ds	2
   473                           tblptru	equ	0xFF8
   474                           tblptrh	equ	0xFF7
   475                           tblptrl	equ	0xFF6
   476                           tablat	equ	0xFF5
   477                           postinc0	equ	0xFEE
   478                           wreg	equ	0xFE8
   479                           postdec1	equ	0xFE5
   480                           fsr1h	equ	0xFE2
   481                           fsr1l	equ	0xFE1
   482                           
   483                           	psect	bssBANK1
   484  000100                     __pbssBANK1:
   485                           	opt stack 0
   486  000100                     __au8Buffer:
   487                           	opt stack 0
   488  000100                     	ds	140
   489  00018C                     __MODBUSHoldingRegs:
   490                           	opt stack 0
   491  00018C                     	ds	30
   492  0001AA                     __MODBUSInputRegs:
   493                           	opt stack 0
   494  0001AA                     	ds	30
   495                           tblptru	equ	0xFF8
   496                           tblptrh	equ	0xFF7
   497                           tblptrl	equ	0xFF6
   498                           tablat	equ	0xFF5
   499                           postinc0	equ	0xFEE
   500                           wreg	equ	0xFE8
   501                           postdec1	equ	0xFE5
   502                           fsr1h	equ	0xFE2
   503                           fsr1l	equ	0xFE1
   504                           
   505                           	psect	bssBANK2
   506  000200                     __pbssBANK2:
   507                           	opt stack 0
   508  000200                     _UartRingBuffer:
   509                           	opt stack 0
   510  000200                     	ds	256
   511                           tblptru	equ	0xFF8
   512                           tblptrh	equ	0xFF7
   513                           tblptrl	equ	0xFF6
   514                           tablat	equ	0xFF5
   515                           postinc0	equ	0xFEE
   516                           wreg	equ	0xFE8
   517                           postdec1	equ	0xFE5
   518                           fsr1h	equ	0xFE2
   519                           fsr1l	equ	0xFE1
   520                           
   521                           	psect	cstackBANK0
   522  0000DB                     __pcstackBANK0:
   523                           	opt stack 0
   524  0000DB                     io_poll@hourMin:
   525                           	opt stack 0
   526                           
   527                           ; 2 bytes @ 0x0
   528  0000DB                     	ds	2
   529  0000DD                     io_poll@daySec:
   530                           	opt stack 0
   531                           
   532                           ; 2 bytes @ 0x2
   533  0000DD                     	ds	2
   534  0000DF                     io_poll@yearMonth:
   535                           	opt stack 0
   536                           
   537                           ; 2 bytes @ 0x4
   538  0000DF                     	ds	2
   539  0000E1                     io_poll@eventEeAddr:
   540                           	opt stack 0
   541                           
   542                           ; 1 bytes @ 0x6
   543  0000E1                     	ds	1
   544  0000E2                     io_poll@v1:
   545                           	opt stack 0
   546                           
   547                           ; 1 bytes @ 0x7
   548  0000E2                     	ds	1
   549  0000E3                     io_poll@lastCommand:
   550                           	opt stack 0
   551                           
   552                           ; 1 bytes @ 0x8
   553  0000E3                     	ds	1
   554  0000E4                     io_poll@lastEndAddress:
   555                           	opt stack 0
   556                           
   557                           ; 2 bytes @ 0x9
   558  0000E4                     	ds	2
   559  0000E6                     io_poll@lastAddress:
   560                           	opt stack 0
   561                           
   562                           ; 2 bytes @ 0xB
   563  0000E6                     	ds	2
   564  0000E8                     main@lastMs:
   565                           	opt stack 0
   566                           
   567                           ; 4 bytes @ 0xD
   568  0000E8                     	ds	4
   569  0000EC                     main@oldBuzzerOnTime:
   570                           	opt stack 0
   571                           
   572                           ; 4 bytes @ 0x11
   573  0000EC                     	ds	4
   574  0000F0                     main@oldMinute:
   575                           	opt stack 0
   576                           
   577                           ; 1 bytes @ 0x15
   578  0000F0                     	ds	1
   579  0000F1                     main@hour:
   580                           	opt stack 0
   581                           
   582                           ; 1 bytes @ 0x16
   583  0000F1                     	ds	1
   584  0000F2                     main@curMs:
   585                           	opt stack 0
   586                           
   587                           ; 4 bytes @ 0x17
   588  0000F2                     	ds	4
   589  0000F6                     main@minute:
   590                           	opt stack 0
   591                           
   592                           ; 1 bytes @ 0x1B
   593  0000F6                     	ds	1
   594                           tblptru	equ	0xFF8
   595                           tblptrh	equ	0xFF7
   596                           tblptrl	equ	0xFF6
   597                           tablat	equ	0xFF5
   598                           postinc0	equ	0xFEE
   599                           wreg	equ	0xFE8
   600                           postdec1	equ	0xFE5
   601                           fsr1h	equ	0xFE2
   602                           fsr1l	equ	0xFE1
   603                           
   604                           	psect	cstackCOMRAM
   605  000001                     __pcstackCOMRAM:
   606                           	opt stack 0
   607  000001                     ??_low_isr:
   608  000001                     
   609                           ; 1 bytes @ 0x0
   610  000001                     	ds	5
   611  000006                     low_isr@c:
   612                           	opt stack 0
   613                           
   614                           ; 1 bytes @ 0x5
   615  000006                     	ds	1
   616  000007                     ?_ModbusCalcCRC:
   617                           	opt stack 0
   618  000007                     ?___lwdiv:
   619                           	opt stack 0
   620  000007                     ?___lwmod:
   621                           	opt stack 0
   622  000007                     ?_millis:
   623                           	opt stack 0
   624  000007                     PortRead@ret:
   625                           	opt stack 0
   626  000007                     getHourMin@min:
   627                           	opt stack 0
   628  000007                     SetHourMin@newMin:
   629                           	opt stack 0
   630  000007                     UpdateLedRegister@regIndex:
   631                           	opt stack 0
   632  000007                     SwitchOffAllLeds@i:
   633                           	opt stack 0
   634  000007                     LightLed@ledState:
   635                           	opt stack 0
   636  000007                     LightStatusLed@on:
   637                           	opt stack 0
   638  000007                     InitApp@i:
   639                           	opt stack 0
   640  000007                     SetTime@newTime:
   641                           	opt stack 0
   642  000007                     ModbusInit@u8serno:
   643                           	opt stack 0
   644  000007                     ModbusBuildException@u8exception:
   645                           	opt stack 0
   646  000007                     ModbusGetLastCommand@count:
   647                           	opt stack 0
   648  000007                     PortWrite@buf:
   649                           	opt stack 0
   650  000007                     SetBuzzerDuty@dc:
   651                           	opt stack 0
   652  000007                     ___lwdiv@dividend:
   653                           	opt stack 0
   654  000007                     ___lwmod@dividend:
   655                           	opt stack 0
   656                           
   657                           ; 2 bytes @ 0x6
   658  000007                     	ds	1
   659  000008                     ??_ModbusGetRxBuffer:
   660  000008                     ??_ProcessLightBlock:
   661  000008                     getHourMin@hour:
   662                           	opt stack 0
   663  000008                     SetHourMin@newHour:
   664                           	opt stack 0
   665  000008                     LightLed@blink:
   666                           	opt stack 0
   667  000008                     LightStatusLed@blink:
   668                           	opt stack 0
   669  000008                     ModbusInit@u8txenpin:
   670                           	opt stack 0
   671  000008                     ModbusBuildException@u8func:
   672                           	opt stack 0
   673                           
   674                           ; 1 bytes @ 0x7
   675  000008                     	ds	1
   676  000009                     ??_LoadNextEvent:
   677  000009                     ??_ModbusCalcCRC:
   678  000009                     ??_LightLed:
   679  000009                     ??_LightStatusLed:
   680  000009                     ??_SetBuzzerDuty:
   681  000009                     PortWrite@buflen:
   682                           	opt stack 0
   683  000009                     ModbusGetRxBuffer@bBuffOverflow:
   684                           	opt stack 0
   685  000009                     ModbusGetLastCommand@address:
   686                           	opt stack 0
   687  000009                     ___lwdiv@divisor:
   688                           	opt stack 0
   689  000009                     ___lwmod@divisor:
   690                           	opt stack 0
   691                           
   692                           ; 2 bytes @ 0x8
   693  000009                     	ds	1
   694  00000A                     PortWrite@i:
   695                           	opt stack 0
   696                           
   697                           ; 1 bytes @ 0x9
   698  00000A                     	ds	1
   699  00000B                     LoadNextEvent@v1:
   700                           	opt stack 0
   701  00000B                     ModbusInit@u8id:
   702                           	opt stack 0
   703  00000B                     ___lwdiv@counter:
   704                           	opt stack 0
   705  00000B                     ___lwmod@counter:
   706                           	opt stack 0
   707  00000B                     ModbusCalcCRC@temp2:
   708                           	opt stack 0
   709  00000B                     millis@ret:
   710                           	opt stack 0
   711                           
   712                           ; 4 bytes @ 0xA
   713  00000B                     	ds	1
   714  00000C                     ?_isleap:
   715                           	opt stack 0
   716  00000C                     LightLed@ledNum:
   717                           	opt stack 0
   718  00000C                     ProcessLightBlock@curMs:
   719                           	opt stack 0
   720  00000C                     LoadNextEvent@hour:
   721                           	opt stack 0
   722  00000C                     Modbus@u8serno:
   723                           	opt stack 0
   724  00000C                     ___lwdiv@quotient:
   725                           	opt stack 0
   726  00000C                     isleap@yr:
   727                           	opt stack 0
   728                           
   729                           ; 2 bytes @ 0xB
   730  00000C                     	ds	1
   731  00000D                     LightLed@ststusIndex:
   732                           	opt stack 0
   733  00000D                     LoadNextEvent@minute:
   734                           	opt stack 0
   735  00000D                     Modbus@u8txenpin:
   736                           	opt stack 0
   737  00000D                     ModbusCalcCRC@flag:
   738                           	opt stack 0
   739                           
   740                           ; 2 bytes @ 0xC
   741  00000D                     	ds	1
   742  00000E                     ??_isleap:
   743  00000E                     ?_months_to_days:
   744                           	opt stack 0
   745  00000E                     ?_years_to_days:
   746                           	opt stack 0
   747  00000E                     LightLed@statusShift:
   748                           	opt stack 0
   749  00000E                     LightStatusLed@row:
   750                           	opt stack 0
   751  00000E                     Modbus@u8id:
   752                           	opt stack 0
   753  00000E                     months_to_days@month:
   754                           	opt stack 0
   755  00000E                     years_to_days@yr:
   756                           	opt stack 0
   757                           
   758                           ; 2 bytes @ 0xD
   759  00000E                     	ds	1
   760  00000F                     ??_InitFromEeprom:
   761  00000F                     ??_ResetEvent:
   762  00000F                     ??_ProcessDiary:
   763  00000F                     ModbusCalcCRC@u8length:
   764                           	opt stack 0
   765  00000F                     _isleap$2090:
   766                           	opt stack 0
   767                           
   768                           ; 1 bytes @ 0xE
   769  00000F                     	ds	1
   770  000010                     ??_months_to_days:
   771  000010                     ModbusCalcCRC@i:
   772                           	opt stack 0
   773                           
   774                           ; 1 bytes @ 0xF
   775  000010                     	ds	1
   776  000011                     ResetEvent@state:
   777                           	opt stack 0
   778  000011                     ModbusCalcCRC@j:
   779                           	opt stack 0
   780                           
   781                           ; 1 bytes @ 0x10
   782  000011                     	ds	1
   783  000012                     ??_years_to_days:
   784  000012                     _ResetEvent$818:
   785                           	opt stack 0
   786  000012                     ModbusCalcCRC@temp:
   787                           	opt stack 0
   788                           
   789                           ; 2 bytes @ 0x11
   790  000012                     	ds	1
   791  000013                     ProcessDiary@hour:
   792                           	opt stack 0
   793                           
   794                           ; 1 bytes @ 0x12
   795  000013                     	ds	1
   796  000014                     ??_ModbusValidateRequest:
   797  000014                     ProcessDiary@minute:
   798                           	opt stack 0
   799  000014                     ModbusSendTxBuffer@u16crc:
   800                           	opt stack 0
   801                           
   802                           ; 2 bytes @ 0x13
   803  000014                     	ds	2
   804  000016                     ??_ModbusProcess_FC5:
   805  000016                     ??_ModbusProcess_FC15:
   806  000016                     ??_ModbusProcess_FC17:
   807  000016                     ??_ModbusProcess_FC21:
   808  000016                     ModbusProcess_FC1@regs:
   809                           	opt stack 0
   810  000016                     ModbusProcess_FC3@regs:
   811                           	opt stack 0
   812  000016                     ModbusProcess_FC6@regs:
   813                           	opt stack 0
   814  000016                     ModbusProcess_FC16@regs:
   815                           	opt stack 0
   816                           
   817                           ; 2 bytes @ 0x15
   818  000016                     	ds	1
   819  000017                     ModbusProcess_FC17@u8CopyBufferSize:
   820                           	opt stack 0
   821                           
   822                           ; 1 bytes @ 0x16
   823  000017                     	ds	1
   824  000018                     ??_ModbusProcess_FC1:
   825  000018                     ModbusProcess_FC3@u8size:
   826                           	opt stack 0
   827  000018                     ModbusProcess_FC6@u8size:
   828                           	opt stack 0
   829  000018                     ModbusProcess_FC16@u8size:
   830                           	opt stack 0
   831  000018                     ModbusProcess_FC17@i:
   832                           	opt stack 0
   833  000018                     ModbusProcess_FC21@requestDataLen:
   834                           	opt stack 0
   835  000018                     ModbusValidateRequest@startAddrBytes:
   836                           	opt stack 0
   837                           
   838                           ; 4 bytes @ 0x17
   839  000018                     	ds	1
   840  000019                     ??_ModbusProcess_FC3:
   841  000019                     ??_ModbusProcess_FC6:
   842  000019                     ??_ModbusProcess_FC16:
   843  000019                     ModbusProcess_FC21@u8CopyBufferSize:
   844                           	opt stack 0
   845                           
   846                           ; 1 bytes @ 0x18
   847  000019                     	ds	1
   848  00001A                     ModbusProcess_FC21@startAddrsBytes:
   849                           	opt stack 0
   850  00001A                     years_to_days@ret:
   851                           	opt stack 0
   852                           
   853                           ; 4 bytes @ 0x19
   854  00001A                     	ds	1
   855  00001B                     ModbusProcess_FC5@u8CopyBufferSize:
   856                           	opt stack 0
   857  00001B                     ModbusProcess_FC1@u16coil:
   858                           	opt stack 0
   859  00001B                     ModbusProcess_FC6@u16val:
   860                           	opt stack 0
   861  00001B                     ModbusProcess_FC15@u16coil:
   862                           	opt stack 0
   863                           
   864                           ; 2 bytes @ 0x1A
   865  00001B                     	ds	1
   866  00001C                     ModbusProcess_FC5@u16coil:
   867                           	opt stack 0
   868  00001C                     ModbusProcess_FC21@recLenBytes:
   869                           	opt stack 0
   870  00001C                     ModbusValidateRequest@recLenBytes:
   871                           	opt stack 0
   872                           
   873                           ; 4 bytes @ 0x1B
   874  00001C                     	ds	1
   875  00001D                     ModbusProcess_FC1@u8currentBit:
   876                           	opt stack 0
   877  00001D                     ModbusProcess_FC3@u8CopyBufferSize:
   878                           	opt stack 0
   879  00001D                     ModbusProcess_FC6@u8CopyBufferSize:
   880                           	opt stack 0
   881  00001D                     ModbusProcess_FC15@u8CopyBufferSize:
   882                           	opt stack 0
   883  00001D                     ModbusProcess_FC16@temp:
   884                           	opt stack 0
   885                           
   886                           ; 2 bytes @ 0x1C
   887  00001D                     	ds	1
   888  00001E                     ?_ymd_to_scalar:
   889                           	opt stack 0
   890  00001E                     ModbusProcess_FC1@u8CopyBufferSize:
   891                           	opt stack 0
   892  00001E                     ModbusProcess_FC5@u8currentBit:
   893                           	opt stack 0
   894  00001E                     ModbusProcess_FC15@bTemp:
   895                           	opt stack 0
   896  00001E                     ModbusProcess_FC21@i:
   897                           	opt stack 0
   898  00001E                     ModbusProcess_FC3@u16regsno:
   899                           	opt stack 0
   900  00001E                     ModbusProcess_FC6@u16add:
   901                           	opt stack 0
   902  00001E                     ymd_to_scalar@yr:
   903                           	opt stack 0
   904                           
   905                           ; 2 bytes @ 0x1D
   906  00001E                     	ds	1
   907  00001F                     ModbusProcess_FC1@u8bytesno:
   908                           	opt stack 0
   909  00001F                     ModbusProcess_FC5@regs:
   910                           	opt stack 0
   911  00001F                     ModbusProcess_FC15@u8frameByte:
   912                           	opt stack 0
   913  00001F                     ModbusProcess_FC16@u8CopyBufferSize:
   914                           	opt stack 0
   915                           
   916                           ; 1 bytes @ 0x1E
   917  00001F                     	ds	1
   918  000020                     ModbusProcess_FC3@u8StartAdd:
   919                           	opt stack 0
   920  000020                     ModbusValidateRequest@u16MsgCRC:
   921                           	opt stack 0
   922  000020                     ModbusProcess_FC1@u16StartCoil:
   923                           	opt stack 0
   924  000020                     ModbusProcess_FC15@u16StartCoil:
   925                           	opt stack 0
   926  000020                     ModbusProcess_FC16@u16StartAdd:
   927                           	opt stack 0
   928  000020                     ymd_to_scalar@mo:
   929                           	opt stack 0
   930                           
   931                           ; 2 bytes @ 0x1F
   932  000020                     	ds	1
   933  000021                     ModbusProcess_FC3@i:
   934                           	opt stack 0
   935                           
   936                           ; 1 bytes @ 0x20
   937  000021                     	ds	1
   938  000022                     ModbusValidateRequest@isSupported:
   939                           	opt stack 0
   940  000022                     ModbusProcess_FC16@u8regsno:
   941                           	opt stack 0
   942  000022                     ModbusProcess_FC1@u16currentCoil:
   943                           	opt stack 0
   944  000022                     ModbusProcess_FC15@u16Coilno:
   945                           	opt stack 0
   946  000022                     ymd_to_scalar@day:
   947                           	opt stack 0
   948                           
   949                           ; 2 bytes @ 0x21
   950  000022                     	ds	1
   951  000023                     ModbusProcess_FC16@i:
   952                           	opt stack 0
   953  000023                     ModbusValidateRequest@u16count:
   954                           	opt stack 0
   955                           
   956                           ; 2 bytes @ 0x22
   957  000023                     	ds	1
   958  000024                     ??_ymd_to_scalar:
   959  000024                     ModbusProcess_FC1@u8bitsno:
   960                           	opt stack 0
   961  000024                     ModbusProcess_FC15@u16currentCoil:
   962                           	opt stack 0
   963                           
   964                           ; 2 bytes @ 0x23
   965  000024                     	ds	1
   966  000025                     ModbusValidateRequest@i:
   967                           	opt stack 0
   968  000025                     ModbusProcess_FC1@u16Coilno:
   969                           	opt stack 0
   970                           
   971                           ; 2 bytes @ 0x24
   972  000025                     	ds	1
   973  000026                     ModbusValidateRequest@u8regs:
   974                           	opt stack 0
   975  000026                     ModbusProcess_FC15@u8currentBit:
   976                           	opt stack 0
   977                           
   978                           ; 1 bytes @ 0x25
   979  000026                     	ds	1
   980  000027                     ModbusProcess_FC15@regs:
   981                           	opt stack 0
   982  000027                     ModbusValidateRequest@u16regs:
   983                           	opt stack 0
   984                           
   985                           ; 2 bytes @ 0x26
   986  000027                     	ds	1
   987  000028                     ModbusProcess_FC15@u8bitsno:
   988                           	opt stack 0
   989  000028                     _ymd_to_scalar$2103:
   990                           	opt stack 0
   991                           
   992                           ; 2 bytes @ 0x27
   993  000028                     	ds	1
   994  000029                     ModbusPoll@discreteInputs:
   995                           	opt stack 0
   996                           
   997                           ; 2 bytes @ 0x28
   998  000029                     	ds	1
   999  00002A                     ymd_to_scalar@scalar:
  1000                           	opt stack 0
  1001                           
  1002                           ; 4 bytes @ 0x29
  1003  00002A                     	ds	1
  1004  00002B                     ModbusPoll@coils:
  1005                           	opt stack 0
  1006                           
  1007                           ; 1 bytes @ 0x2A
  1008  00002B                     	ds	1
  1009  00002C                     ModbusPoll@inputRegs:
  1010                           	opt stack 0
  1011                           
  1012                           ; 2 bytes @ 0x2B
  1013  00002C                     	ds	2
  1014  00002E                     ?_mktime:
  1015                           	opt stack 0
  1016  00002E                     ModbusPoll@inputRegsCount:
  1017                           	opt stack 0
  1018                           
  1019                           ; 1 bytes @ 0x2D
  1020  00002E                     	ds	1
  1021  00002F                     ModbusPoll@holdingRegs:
  1022                           	opt stack 0
  1023                           
  1024                           ; 2 bytes @ 0x2E
  1025  00002F                     	ds	2
  1026  000031                     ModbusPoll@holdingRegsCount:
  1027                           	opt stack 0
  1028                           
  1029                           ; 1 bytes @ 0x30
  1030  000031                     	ds	1
  1031  000032                     ??_mktime:
  1032  000032                     ModbusPoll@u8current:
  1033                           	opt stack 0
  1034                           
  1035                           ; 1 bytes @ 0x31
  1036  000032                     	ds	1
  1037  000033                     ModbusPoll@i8state:
  1038                           	opt stack 0
  1039                           
  1040                           ; 1 bytes @ 0x32
  1041  000033                     	ds	1
  1042  000034                     ModbusPoll@u8exception:
  1043                           	opt stack 0
  1044                           
  1045                           ; 1 bytes @ 0x33
  1046  000034                     	ds	12
  1047  000040                     mktime@tt:
  1048                           	opt stack 0
  1049                           
  1050                           ; 4 bytes @ 0x3F
  1051  000040                     	ds	4
  1052  000044                     mktime@timeptr:
  1053                           	opt stack 0
  1054                           
  1055                           ; 1 bytes @ 0x43
  1056  000044                     	ds	1
  1057  000045                     SetTimeFromRegs@daySec:
  1058                           	opt stack 0
  1059                           
  1060                           ; 1 bytes @ 0x44
  1061  000045                     	ds	1
  1062  000046                     SetTimeFromRegs@yearMonth:
  1063                           	opt stack 0
  1064                           
  1065                           ; 1 bytes @ 0x45
  1066  000046                     	ds	1
  1067  000047                     ??_SetTimeFromRegs:
  1068                           
  1069                           ; 1 bytes @ 0x46
  1070  000047                     	ds	2
  1071  000049                     SetTimeFromRegs@newRawTime:
  1072                           	opt stack 0
  1073                           
  1074                           ; 4 bytes @ 0x48
  1075  000049                     	ds	4
  1076  00004D                     SetTimeFromRegs@hourMin:
  1077                           	opt stack 0
  1078                           
  1079                           ; 1 bytes @ 0x4C
  1080  00004D                     	ds	1
  1081  00004E                     SetTimeFromRegs@newTime:
  1082                           	opt stack 0
  1083                           
  1084                           ; 18 bytes @ 0x4D
  1085  00004E                     	ds	18
  1086  000060                     ??_io_poll:
  1087                           
  1088                           ; 1 bytes @ 0x5F
  1089  000060                     	ds	4
  1090  000064                     ??_main:
  1091                           
  1092                           ; 1 bytes @ 0x63
  1093  000064                     	ds	5
  1094                           tblptru	equ	0xFF8
  1095                           tblptrh	equ	0xFF7
  1096                           tblptrl	equ	0xFF6
  1097                           tablat	equ	0xFF5
  1098                           postinc0	equ	0xFEE
  1099                           wreg	equ	0xFE8
  1100                           postdec1	equ	0xFE5
  1101                           fsr1h	equ	0xFE2
  1102                           fsr1l	equ	0xFE1
  1103                           
  1104 ;;
  1105 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
  1106 ;;
  1107 ;; *************** function _main *****************
  1108 ;; Defined at:
  1109 ;;		line 658 in file "main.c"
  1110 ;; Parameters:    Size  Location     Type
  1111 ;;		None
  1112 ;; Auto vars:     Size  Location     Type
  1113 ;;  minute          1   27[BANK0 ] unsigned char 
  1114 ;;  hour            1   22[BANK0 ] unsigned char 
  1115 ;;  curMs           4   23[BANK0 ] unsigned long 
  1116 ;;  oldBuzzerOnT    4   17[BANK0 ] unsigned long 
  1117 ;;  lastMs          4   13[BANK0 ] unsigned long 
  1118 ;;  oldMinute       1   21[BANK0 ] unsigned char 
  1119 ;; Return value:  Size  Location     Type
  1120 ;;                  1    wreg      void 
  1121 ;; Registers used:
  1122 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1123 ;; Tracked objects:
  1124 ;;		On entry : 0/0
  1125 ;;		On exit  : 0/0
  1126 ;;		Unchanged: 0/0
  1127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1128 ;;      Params:         0       0       0       0       0       0       0
  1129 ;;      Locals:         0      15       0       0       0       0       0
  1130 ;;      Temps:          5       0       0       0       0       0       0
  1131 ;;      Totals:         5      15       0       0       0       0       0
  1132 ;;Total ram usage:       20 bytes
  1133 ;; Hardware stack levels required when called:    8
  1134 ;; This function calls:
  1135 ;;		_AddSecond
  1136 ;;		_ConfigureOscillator
  1137 ;;		_GetTime
  1138 ;;		_InitApp
  1139 ;;		_InitFromEeprom
  1140 ;;		_LightStatusLed
  1141 ;;		_ModbusPoll
  1142 ;;		_ProcessDiary
  1143 ;;		_ProcessLightBlock
  1144 ;;		_ResetEvent
  1145 ;;		_SetBuzzerDuty
  1146 ;;		_getHourMin
  1147 ;;		_io_poll
  1148 ;;		_millis
  1149 ;;		_pwm_init
  1150 ;; This function is called by:
  1151 ;;		Startup code after reset
  1152 ;; This function uses a non-reentrant model
  1153 ;;
  1154                           
  1155                           	psect	text0
  1156  001674                     __ptext0:
  1157                           	opt stack 0
  1158  001674                     _main:
  1159                           	opt stack 23
  1160                           
  1161                           ;incstack = 0
  1162  001674  FFFF               	dw	65535
  1163                           
  1164                           ;main.c: 661: ConfigureOscillator();
  1165  001676  ECE5  F015         	call	_ConfigureOscillator	;wreg free
  1166                           
  1167                           ;main.c: 664: InitApp();
  1168  00167A  EC47  F012         	call	_InitApp	;wreg free
  1169                           
  1170                           ;main.c: 668: InitFromEeprom();
  1171  00167E  EC85  F00E         	call	_InitFromEeprom	;wreg free
  1172                           
  1173                           ;main.c: 677: unsigned long lastMs = millis();
  1174  001682  EC4F  F015         	call	_millis	;wreg free
  1175  001686  C007  F0E8         	movff	?_millis,main@lastMs
  1176  00168A  C008  F0E9         	movff	?_millis+1,main@lastMs+1
  1177  00168E  C009  F0EA         	movff	?_millis+2,main@lastMs+2
  1178  001692  C00A  F0EB         	movff	?_millis+3,main@lastMs+3
  1179                           
  1180                           ;main.c: 680: pwm_init();
  1181  001696  ECC5  F015         	call	_pwm_init	;wreg free
  1182                           
  1183                           ;main.c: 686: unsigned long oldBuzzerOnTime = 0;
  1184  00169A  0100               	movlb	0	; () banked
  1185  00169C  6BEC               	clrf	main@oldBuzzerOnTime& (0+255),b
  1186  00169E  6BED               	clrf	(main@oldBuzzerOnTime+1)& (0+255),b
  1187  0016A0  6BEE               	clrf	(main@oldBuzzerOnTime+2)& (0+255),b
  1188  0016A2  6BEF               	clrf	(main@oldBuzzerOnTime+3)& (0+255),b
  1189                           
  1190                           ; BSR set to: 0
  1191                           ;main.c: 687: uint8_t oldMinute = 0xff;
  1192  0016A4  69F0               	setf	main@oldMinute& (0+255),b
  1193                           
  1194                           ; BSR set to: 0
  1195                           ;main.c: 689: LightStatusLed(0x07, 1, 0);
  1196  0016A6  0E01               	movlw	1
  1197  0016A8  6E07               	movwf	LightStatusLed@on,c
  1198  0016AA  0E00               	movlw	0
  1199  0016AC  6E08               	movwf	LightStatusLed@blink,c
  1200  0016AE  0E07               	movlw	7
  1201  0016B0  EC05  F00F         	call	_LightStatusLed
  1202                           
  1203                           ;main.c: 690: LightStatusLed(0x05, 1, 1);
  1204  0016B4  0E01               	movlw	1
  1205  0016B6  6E07               	movwf	LightStatusLed@on,c
  1206  0016B8  6E08               	movwf	LightStatusLed@blink,c
  1207  0016BA  0E05               	movlw	5
  1208  0016BC  EC05  F00F         	call	_LightStatusLed
  1209  0016C0                     l6349:
  1210  0016C0  FFFF               	dw	65535	; assembler added errata NOP
  1211                           
  1212                           ;main.c: 692: {
  1213                           ;main.c: 693: unsigned long curMs = millis();
  1214  0016C2  EC4F  F015         	call	_millis	;wreg free
  1215  0016C6  C007  F0F2         	movff	?_millis,main@curMs
  1216  0016CA  C008  F0F3         	movff	?_millis+1,main@curMs+1
  1217  0016CE  C009  F0F4         	movff	?_millis+2,main@curMs+2
  1218  0016D2  C00A  F0F5         	movff	?_millis+3,main@curMs+3
  1219                           
  1220                           ;main.c: 694: ProcessLightBlock(&curMs);
  1221  0016D6  0EF2               	movlw	main@curMs& (0+255)
  1222  0016D8  ECC5  F007         	call	_ProcessLightBlock
  1223                           
  1224                           ; BSR set to: 0
  1225                           ;main.c: 698: if(currentAlarmedEventNum != 0xff)
  1226  0016DC  2870               	incf	_currentAlarmedEventNum,w,c
  1227  0016DE  E044               	bz	l380
  1228                           
  1229                           ; BSR set to: 0
  1230                           ;main.c: 699: {
  1231                           ;main.c: 700: diffTime = curMs - oldBuzzerOnTime;
  1232  0016E0  51EC               	movf	main@oldBuzzerOnTime& (0+255),w,b
  1233  0016E2  5DF2               	subwf	main@curMs& (0+255),w,b
  1234  0016E4  6FA4               	movwf	_diffTime& (0+255),b
  1235  0016E6  51ED               	movf	(main@oldBuzzerOnTime+1)& (0+255),w,b
  1236  0016E8  59F3               	subwfb	(main@curMs+1)& (0+255),w,b
  1237  0016EA  6FA5               	movwf	(_diffTime+1)& (0+255),b
  1238  0016EC  51EE               	movf	(main@oldBuzzerOnTime+2)& (0+255),w,b
  1239  0016EE  59F4               	subwfb	(main@curMs+2)& (0+255),w,b
  1240  0016F0  6FA6               	movwf	(_diffTime+2)& (0+255),b
  1241  0016F2  51EF               	movf	(main@oldBuzzerOnTime+3)& (0+255),w,b
  1242  0016F4  59F5               	subwfb	(main@curMs+3)& (0+255),w,b
  1243  0016F6  6FA7               	movwf	(_diffTime+3)& (0+255),b
  1244                           
  1245                           ;main.c: 701: if(diffTime > buzzerOnOffPeriod)
  1246  0016F8  51F9               	movf	_buzzerOnOffPeriod& (0+255),w,b
  1247  0016FA  6E64               	movwf	??_main& (0+255),c
  1248  0016FC  51FA               	movf	(_buzzerOnOffPeriod+1)& (0+255),w,b
  1249  0016FE  6E65               	movwf	(??_main+1)& (0+255),c
  1250  001700  6A66               	clrf	(??_main+2)& (0+255),c
  1251  001702  6A67               	clrf	(??_main+3)& (0+255),c
  1252  001704  51A4               	movf	_diffTime& (0+255),w,b
  1253  001706  5C64               	subwf	??_main,w,c
  1254  001708  51A5               	movf	(_diffTime+1)& (0+255),w,b
  1255  00170A  5865               	subwfb	??_main+1,w,c
  1256  00170C  51A6               	movf	(_diffTime+2)& (0+255),w,b
  1257  00170E  5866               	subwfb	??_main+2,w,c
  1258  001710  51A7               	movf	(_diffTime+3)& (0+255),w,b
  1259  001712  5867               	subwfb	??_main+3,w,c
  1260  001714  E215               	bc	l6369
  1261                           
  1262                           ; BSR set to: 0
  1263                           ;main.c: 702: {
  1264                           ;main.c: 703: SetBuzzerDuty(buzzeLoudDuration);
  1265  001716  C0C6  F007         	movff	_buzzeLoudDuration,SetBuzzerDuty@dc
  1266  00171A  6A08               	clrf	SetBuzzerDuty@dc+1,c
  1267  00171C  EC6E  F013         	call	_SetBuzzerDuty	;wreg free
  1268                           
  1269                           ;main.c: 704: PR2 = buzzerAlarmPeriod;
  1270  001720  C0C8  FFCB         	movff	_buzzerAlarmPeriod,4043	;volatile
  1271                           
  1272                           ;main.c: 705: TRISCbits.TRISC2 = 0; T2CONbits.TMR2ON = 1; IsBusserOn = 1;;
  1273  001724  9494               	bcf	3988,2,c	;volatile
  1274  001726  84CA               	bsf	4042,2,c	;volatile
  1275  001728  0E01               	movlw	1
  1276  00172A  0100               	movlb	0	; () banked
  1277  00172C  6FBE               	movwf	_IsBusserOn& (0+255),b
  1278                           
  1279                           ; BSR set to: 0
  1280                           ;main.c: 706: oldBuzzerOnTime = curMs;
  1281  00172E  C0F2  F0EC         	movff	main@curMs,main@oldBuzzerOnTime
  1282  001732  C0F3  F0ED         	movff	main@curMs+1,main@oldBuzzerOnTime+1
  1283  001736  C0F4  F0EE         	movff	main@curMs+2,main@oldBuzzerOnTime+2
  1284  00173A  C0F5  F0EF         	movff	main@curMs+3,main@oldBuzzerOnTime+3
  1285                           
  1286                           ;main.c: 707: }
  1287  00173E  D014               	goto	l380
  1288  001740                     l6369:
  1289                           
  1290                           ; BSR set to: 0
  1291                           ;main.c: 708: else if(IsBusserOn && diffTime > buzzerOnOffDuration)
  1292  001740  51BE               	movf	_IsBusserOn& (0+255),w,b
  1293  001742  E012               	bz	l380
  1294                           
  1295                           ; BSR set to: 0
  1296  001744  51F7               	movf	_buzzerOnOffDuration& (0+255),w,b
  1297  001746  6E64               	movwf	??_main& (0+255),c
  1298  001748  51F8               	movf	(_buzzerOnOffDuration+1)& (0+255),w,b
  1299  00174A  6E65               	movwf	(??_main+1)& (0+255),c
  1300  00174C  6A66               	clrf	(??_main+2)& (0+255),c
  1301  00174E  6A67               	clrf	(??_main+3)& (0+255),c
  1302  001750  51A4               	movf	_diffTime& (0+255),w,b
  1303  001752  5C64               	subwf	??_main,w,c
  1304  001754  51A5               	movf	(_diffTime+1)& (0+255),w,b
  1305  001756  5865               	subwfb	??_main+1,w,c
  1306  001758  51A6               	movf	(_diffTime+2)& (0+255),w,b
  1307  00175A  5866               	subwfb	??_main+2,w,c
  1308  00175C  51A7               	movf	(_diffTime+3)& (0+255),w,b
  1309  00175E  5867               	subwfb	??_main+3,w,c
  1310  001760  E203               	bc	l380
  1311                           
  1312                           ; BSR set to: 0
  1313                           ;main.c: 709: {
  1314                           ;main.c: 710: T2CONbits.TMR2ON = 0; TRISCbits.TRISC2 = 1; IsBusserOn = 0;;
  1315  001762  94CA               	bcf	4042,2,c	;volatile
  1316  001764  8494               	bsf	3988,2,c	;volatile
  1317  001766  6BBE               	clrf	_IsBusserOn& (0+255),b
  1318  001768                     l380:
  1319  001768  FFFF               	dw	65535	; assembler added errata NOP
  1320                           
  1321                           ; BSR set to: 0
  1322                           ;main.c: 711: }
  1323                           ;main.c: 712: }
  1324                           ;main.c: 715: if(PORTCbits.RC1 == 0)
  1325  00176A  B282               	btfsc	3970,1,c	;volatile
  1326  00176C  D005               	goto	l6379
  1327                           
  1328                           ; BSR set to: 0
  1329                           ;main.c: 716: {
  1330                           ;main.c: 718: if(currentAlarmedEventNum != 0xff)
  1331  00176E  2870               	incf	_currentAlarmedEventNum,w,c
  1332  001770  E003               	bz	l6379
  1333                           
  1334                           ; BSR set to: 0
  1335                           ;main.c: 719: {
  1336                           ;main.c: 720: ResetEvent(1);
  1337  001772  0E01               	movlw	1
  1338  001774  ECC8  F014         	call	_ResetEvent
  1339  001778                     l6379:
  1340  001778  FFFF               	dw	65535	; assembler added errata NOP
  1341                           
  1342                           ;main.c: 721: }
  1343                           ;main.c: 738: }
  1344                           ;main.c: 745: if(curMs - lastMs >= 1000)
  1345  00177A  0100               	movlb	0	; () banked
  1346  00177C  51E8               	movf	main@lastMs& (0+255),w,b
  1347  00177E  5DF2               	subwf	main@curMs& (0+255),w,b
  1348  001780  6E64               	movwf	??_main& (0+255),c
  1349  001782  51E9               	movf	(main@lastMs+1)& (0+255),w,b
  1350  001784  59F3               	subwfb	(main@curMs+1)& (0+255),w,b
  1351  001786  6E65               	movwf	(??_main+1)& (0+255),c
  1352  001788  51EA               	movf	(main@lastMs+2)& (0+255),w,b
  1353  00178A  59F4               	subwfb	(main@curMs+2)& (0+255),w,b
  1354  00178C  6E66               	movwf	(??_main+2)& (0+255),c
  1355  00178E  51EB               	movf	(main@lastMs+3)& (0+255),w,b
  1356  001790  59F5               	subwfb	(main@curMs+3)& (0+255),w,b
  1357  001792  6E67               	movwf	(??_main+3)& (0+255),c
  1358  001794  5067               	movf	??_main+3,w,c
  1359  001796  1066               	iorwf	??_main+2,w,c
  1360  001798  E105               	bnz	u6950
  1361  00179A  0EE8               	movlw	232
  1362  00179C  5C64               	subwf	??_main,w,c
  1363  00179E  0E03               	movlw	3
  1364  0017A0  5865               	subwfb	??_main+1,w,c
  1365  0017A2  E34A               	bnc	l6409
  1366  0017A4                     u6950:
  1367                           
  1368                           ; BSR set to: 0
  1369                           ;main.c: 746: {
  1370                           ;main.c: 747: AddSecond();
  1371  0017A4  ECCE  F015         	call	_AddSecond	;wreg free
  1372                           
  1373                           ; BSR set to: 0
  1374                           ;main.c: 749: if(currentAlarmedEventNum != 0xff && *GetTime() >= eventResetSecond)
  1375  0017A8  2870               	incf	_currentAlarmedEventNum,w,c
  1376  0017AA  E015               	bz	l6389
  1377                           
  1378                           ; BSR set to: 0
  1379  0017AC  ECDD  F015         	call	_GetTime	;wreg free
  1380  0017B0  6ED9               	movwf	fsr2l,c
  1381  0017B2  6ADA               	clrf	fsr2h,c
  1382  0017B4  0100               	movlb	0	; () banked
  1383  0017B6  51A8               	movf	_eventResetSecond& (0+255),w,b
  1384  0017B8  5CDE               	subwf	postinc2,w,c
  1385  0017BA  51A9               	movf	(_eventResetSecond+1)& (0+255),w,b
  1386  0017BC  58DE               	subwfb	postinc2,w,c
  1387  0017BE  51AA               	movf	(_eventResetSecond+2)& (0+255),w,b
  1388  0017C0  58DE               	subwfb	postinc2,w,c
  1389  0017C2  50DE               	movf	postinc2,w,c
  1390  0017C4  0A80               	xorlw	128
  1391  0017C6  6E68               	movwf	(??_main+4)& (0+255),c
  1392  0017C8  51AB               	movf	(_eventResetSecond+3)& (0+255),w,b
  1393  0017CA  0A80               	xorlw	128
  1394  0017CC  5868               	subwfb	(??_main+4)& (0+255),w,c
  1395  0017CE  E303               	bnc	l6389
  1396                           
  1397                           ; BSR set to: 0
  1398                           ;main.c: 750: {
  1399                           ;main.c: 751: ResetEvent(0);
  1400  0017D0  0E00               	movlw	0
  1401  0017D2  ECC8  F014         	call	_ResetEvent
  1402  0017D6                     l6389:
  1403                           
  1404                           ;main.c: 752: }
  1405                           ;main.c: 754: _MODBUSInputRegs[5] = *GetTime();
  1406  0017D6  ECDD  F015         	call	_GetTime	;wreg free
  1407  0017DA  6ED9               	movwf	fsr2l,c
  1408  0017DC  6ADA               	clrf	fsr2h,c
  1409  0017DE  CFDE F1B4          	movff	postinc2,__MODBUSInputRegs+10
  1410  0017E2  CFDD F1B5          	movff	postdec2,__MODBUSInputRegs+11
  1411                           
  1412                           ;main.c: 755: uint8_t hour = 0, minute = 0;
  1413  0017E6  0100               	movlb	0	; () banked
  1414  0017E8  6BF1               	clrf	main@hour& (0+255),b
  1415                           
  1416                           ; BSR set to: 0
  1417  0017EA  6BF6               	clrf	main@minute& (0+255),b
  1418                           
  1419                           ; BSR set to: 0
  1420                           ;main.c: 757: if(getHourMin(&hour, &minute) && oldMinute != minute)
  1421  0017EC  0EF6               	movlw	low main@minute
  1422  0017EE  6E07               	movwf	getHourMin@min,c
  1423  0017F0  0EF1               	movlw	main@hour& (0+255)
  1424  0017F2  EC39  F015         	call	_getHourMin
  1425  0017F6  0900               	iorlw	0
  1426  0017F8  E00F               	bz	l6405
  1427  0017FA  0100               	movlb	0	; () banked
  1428  0017FC  51F6               	movf	main@minute& (0+255),w,b
  1429  0017FE  19F0               	xorwf	main@oldMinute& (0+255),w,b
  1430  001800  E00B               	bz	l6405
  1431                           
  1432                           ; BSR set to: 0
  1433                           ;main.c: 758: {
  1434                           ;main.c: 759: _MODBUSInputRegs[1] = (((uint16_t)hour<<8)|minute);
  1435  001802  51F1               	movf	main@hour& (0+255),w,b
  1436  001804  6E64               	movwf	??_main& (0+255),c
  1437  001806  51F6               	movf	main@minute& (0+255),w,b
  1438  001808  0101               	movlb	1	; () banked
  1439  00180A  6FAC               	movwf	(__MODBUSInputRegs+2)& (0+255),b
  1440  00180C  C064  F1AD         	movff	??_main,__MODBUSInputRegs+3
  1441                           
  1442                           ; BSR set to: 1
  1443                           ;main.c: 761: oldMinute = minute;
  1444  001810  C0F6  F0F0         	movff	main@minute,main@oldMinute
  1445                           
  1446                           ; BSR set to: 1
  1447                           ;main.c: 762: ProcessDiary();
  1448  001814  EC49  F010         	call	_ProcessDiary	;wreg free
  1449  001818                     l6405:
  1450                           
  1451                           ;main.c: 763: }
  1452                           ;main.c: 765: _MODBUSInputRegs[4] = (((uint16_t)hour<<8)|minute);
  1453  001818  0100               	movlb	0	; () banked
  1454  00181A  51F1               	movf	main@hour& (0+255),w,b
  1455  00181C  6E64               	movwf	??_main& (0+255),c
  1456  00181E  51F6               	movf	main@minute& (0+255),w,b
  1457  001820  0101               	movlb	1	; () banked
  1458  001822  6FB2               	movwf	(__MODBUSInputRegs+8)& (0+255),b
  1459  001824  C064  F1B3         	movff	??_main,__MODBUSInputRegs+9
  1460                           
  1461                           ; BSR set to: 1
  1462                           ;main.c: 767: lastMs = curMs;
  1463  001828  C0F2  F0E8         	movff	main@curMs,main@lastMs
  1464  00182C  C0F3  F0E9         	movff	main@curMs+1,main@lastMs+1
  1465  001830  C0F4  F0EA         	movff	main@curMs+2,main@lastMs+2
  1466  001834  C0F5  F0EB         	movff	main@curMs+3,main@lastMs+3
  1467  001838                     l6409:
  1468                           
  1469                           ;main.c: 769: }
  1470                           ;main.c: 770: modbusState = ModbusPoll(_MODBUSDiscreteInputs, &_MODBUSCoils, _MODBUSInpu
      +                          tRegs, 15, _MODBUSHoldingRegs, 15);
  1471  001838  C0B4  F029         	movff	__MODBUSDiscreteInputs,ModbusPoll@discreteInputs
  1472  00183C  C0B5  F02A         	movff	__MODBUSDiscreteInputs+1,ModbusPoll@discreteInputs+1
  1473  001840  0ED8               	movlw	low __MODBUSCoils
  1474  001842  6E2B               	movwf	ModbusPoll@coils,c
  1475  001844  0EAA               	movlw	low __MODBUSInputRegs
  1476  001846  6E2C               	movwf	ModbusPoll@inputRegs,c
  1477  001848  0E01               	movlw	high __MODBUSInputRegs
  1478  00184A  6E2D               	movwf	ModbusPoll@inputRegs+1,c
  1479  00184C  0E0F               	movlw	15
  1480  00184E  6E2E               	movwf	ModbusPoll@inputRegsCount,c
  1481  001850  0E8C               	movlw	low __MODBUSHoldingRegs
  1482  001852  6E2F               	movwf	ModbusPoll@holdingRegs,c
  1483  001854  0E01               	movlw	high __MODBUSHoldingRegs
  1484  001856  6E30               	movwf	ModbusPoll@holdingRegs+1,c
  1485  001858  0E0F               	movlw	15
  1486  00185A  6E31               	movwf	ModbusPoll@holdingRegsCount,c
  1487  00185C  EC33  F00C         	call	_ModbusPoll	;wreg free
  1488                           
  1489                           ;main.c: 771: io_poll();
  1490  001860  EC13  F003         	call	_io_poll	;wreg free
  1491  001864  D72D               	goto	l6349
  1492  001866                     __end_of_main:
  1493                           	opt stack 0
  1494                           tblptru	equ	0xFF8
  1495                           tblptrh	equ	0xFF7
  1496                           tblptrl	equ	0xFF6
  1497                           tablat	equ	0xFF5
  1498                           postinc0	equ	0xFEE
  1499                           wreg	equ	0xFE8
  1500                           postdec1	equ	0xFE5
  1501                           fsr1h	equ	0xFE2
  1502                           fsr1l	equ	0xFE1
  1503                           postinc2	equ	0xFDE
  1504                           postdec2	equ	0xFDD
  1505                           fsr2h	equ	0xFDA
  1506                           fsr2l	equ	0xFD9
  1507                           
  1508 ;; *************** function _pwm_init *****************
  1509 ;; Defined at:
  1510 ;;		line 390 in file "main.c"
  1511 ;; Parameters:    Size  Location     Type
  1512 ;;		None
  1513 ;; Auto vars:     Size  Location     Type
  1514 ;;		None
  1515 ;; Return value:  Size  Location     Type
  1516 ;;                  1    wreg      void 
  1517 ;; Registers used:
  1518 ;;		wreg, status,2
  1519 ;; Tracked objects:
  1520 ;;		On entry : 0/0
  1521 ;;		On exit  : 0/0
  1522 ;;		Unchanged: 0/0
  1523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1524 ;;      Params:         0       0       0       0       0       0       0
  1525 ;;      Locals:         0       0       0       0       0       0       0
  1526 ;;      Temps:          0       0       0       0       0       0       0
  1527 ;;      Totals:         0       0       0       0       0       0       0
  1528 ;;Total ram usage:        0 bytes
  1529 ;; Hardware stack levels used:    1
  1530 ;; Hardware stack levels required when called:    2
  1531 ;; This function calls:
  1532 ;;		Nothing
  1533 ;; This function is called by:
  1534 ;;		_main
  1535 ;; This function uses a non-reentrant model
  1536 ;;
  1537                           
  1538                           	psect	text1
  1539  002B8A                     __ptext1:
  1540                           	opt stack 0
  1541  002B8A                     _pwm_init:
  1542                           	opt stack 28
  1543                           
  1544                           ;incstack = 0
  1545  002B8A  FFFF               	dw	65535
  1546                           
  1547                           ;main.c: 402: CCP1CONbits.CCP1M = 0x0f;
  1548  002B8C  0E0F               	movlw	15
  1549  002B8E  12BD               	iorwf	4029,f,c	;volatile
  1550                           
  1551                           ;main.c: 407: PR2 = 255;
  1552  002B90  68CB               	setf	4043,c	;volatile
  1553                           
  1554                           ;main.c: 410: T2CONbits.T2CKPS1 = 1;
  1555  002B92  82CA               	bsf	4042,1,c	;volatile
  1556                           
  1557                           ;main.c: 411: T2CONbits.T2CKPS0 = 0;
  1558  002B94  90CA               	bcf	4042,0,c	;volatile
  1559                           
  1560                           ;main.c: 414: TRISCbits.RC2 = 0;
  1561  002B96  9494               	bcf	3988,2,c	;volatile
  1562  002B98  0012               	return		;funcret
  1563  002B9A  FFFF               	dw	65535	; errata NOP
  1564  002B9C                     __end_of_pwm_init:
  1565                           	opt stack 0
  1566                           tblptru	equ	0xFF8
  1567                           tblptrh	equ	0xFF7
  1568                           tblptrl	equ	0xFF6
  1569                           tablat	equ	0xFF5
  1570                           postinc0	equ	0xFEE
  1571                           wreg	equ	0xFE8
  1572                           postdec1	equ	0xFE5
  1573                           fsr1h	equ	0xFE2
  1574                           fsr1l	equ	0xFE1
  1575                           postinc2	equ	0xFDE
  1576                           postdec2	equ	0xFDD
  1577                           fsr2h	equ	0xFDA
  1578                           fsr2l	equ	0xFD9
  1579                           
  1580 ;; *************** function _io_poll *****************
  1581 ;; Defined at:
  1582 ;;		line 794 in file "main.c"
  1583 ;; Parameters:    Size  Location     Type
  1584 ;;		None
  1585 ;; Auto vars:     Size  Location     Type
  1586 ;;  eventEeAddr     1    6[BANK0 ] unsigned char 
  1587 ;;  yearMonth       2    4[BANK0 ] unsigned int 
  1588 ;;  daySec          2    2[BANK0 ] unsigned int 
  1589 ;;  hourMin         2    0[BANK0 ] unsigned int 
  1590 ;;  lastAddress     2   11[BANK0 ] unsigned int 
  1591 ;;  lastEndAddre    2    9[BANK0 ] unsigned int 
  1592 ;;  lastCommand     1    8[BANK0 ] PTR enum E2336
  1593 ;;		 -> _lastCommand(1), 
  1594 ;;  v1              1    7[BANK0 ] unsigned char 
  1595 ;; Return value:  Size  Location     Type
  1596 ;;                  1    wreg      void 
  1597 ;; Registers used:
  1598 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1599 ;; Tracked objects:
  1600 ;;		On entry : 0/0
  1601 ;;		On exit  : 0/0
  1602 ;;		Unchanged: 0/0
  1603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1604 ;;      Params:         0       0       0       0       0       0       0
  1605 ;;      Locals:         0      13       0       0       0       0       0
  1606 ;;      Temps:          4       0       0       0       0       0       0
  1607 ;;      Totals:         4      13       0       0       0       0       0
  1608 ;;Total ram usage:       17 bytes
  1609 ;; Hardware stack levels used:    1
  1610 ;; Hardware stack levels required when called:    7
  1611 ;; This function calls:
  1612 ;;		_InitFromEeprom
  1613 ;;		_LightLed
  1614 ;;		_ModbusGetLastCommand
  1615 ;;		_SetBuzzerDuty
  1616 ;;		_SetTimeFromRegs
  1617 ;; This function is called by:
  1618 ;;		_main
  1619 ;; This function uses a non-reentrant model
  1620 ;;
  1621                           
  1622                           	psect	text2
  1623  000626                     __ptext2:
  1624                           	opt stack 0
  1625  000626                     _io_poll:
  1626                           	opt stack 23
  1627                           
  1628                           ;incstack = 0
  1629  000626  FFFF               	dw	65535
  1630                           
  1631                           ;main.c: 796: uint16_t lastAddress;
  1632                           ;main.c: 797: uint16_t lastEndAddress;
  1633                           ;main.c: 799: MODBUS_COMMANDS_t *lastCommand = ModbusGetLastCommand(&lastAddress, &lastE
      +                          ndAddress);
  1634  000628  0EE4               	movlw	low io_poll@lastEndAddress
  1635  00062A  6E07               	movwf	ModbusGetLastCommand@count,c
  1636  00062C  0EE6               	movlw	io_poll@lastAddress& (0+255)
  1637  00062E  EC22  F015         	call	_ModbusGetLastCommand
  1638  000632  0100               	movlb	0	; () banked
  1639  000634  6FE3               	movwf	io_poll@lastCommand& (0+255),b
  1640                           
  1641                           ; BSR set to: 0
  1642                           ;main.c: 800: if(*lastCommand == MODBUS_COM_NONE)
  1643  000636  51E3               	movf	io_poll@lastCommand& (0+255),w,b
  1644  000638  6ED9               	movwf	fsr2l,c
  1645  00063A  6ADA               	clrf	fsr2h,c
  1646  00063C  50DF               	movf	indf2,w,c
  1647  00063E  E101 D318          	bz	l398
  1648                           
  1649                           ; BSR set to: 0
  1650                           ;main.c: 803: lastEndAddress += lastAddress - 1;
  1651  000642  6860               	setf	??_io_poll& (0+255),c
  1652  000644  6861               	setf	(??_io_poll+1)& (0+255),c
  1653  000646  C0E6  F062         	movff	io_poll@lastAddress,??_io_poll+2
  1654  00064A  C0E7  F063         	movff	io_poll@lastAddress+1,??_io_poll+3
  1655  00064E  5060               	movf	??_io_poll,w,c
  1656  000650  2662               	addwf	??_io_poll+2,f,c
  1657  000652  5061               	movf	??_io_poll+1,w,c
  1658  000654  2263               	addwfc	??_io_poll+3,f,c
  1659  000656  5062               	movf	??_io_poll+2,w,c
  1660  000658  27E4               	addwf	io_poll@lastEndAddress& (0+255),f,b
  1661  00065A  5063               	movf	??_io_poll+3,w,c
  1662  00065C  23E5               	addwfc	(io_poll@lastEndAddress+1)& (0+255),f,b
  1663                           
  1664                           ; BSR set to: 0
  1665                           ;main.c: 805: if(*lastCommand == MODBUS_COM_WRITE_SINGLE_COIL || *lastCommand == MODBUS_
      +                          COM_WRITE_MULTIPLE_COILS)
  1666  00065E  51E3               	movf	io_poll@lastCommand& (0+255),w,b
  1667  000660  6ED9               	movwf	fsr2l,c
  1668  000662  6ADA               	clrf	fsr2h,c
  1669  000664  0E05               	movlw	5
  1670  000666  18DE               	xorwf	postinc2,w,c
  1671  000668  E006               	bz	l5821
  1672                           
  1673                           ; BSR set to: 0
  1674  00066A  51E3               	movf	io_poll@lastCommand& (0+255),w,b
  1675  00066C  6ED9               	movwf	fsr2l,c
  1676  00066E  6ADA               	clrf	fsr2h,c
  1677  000670  0E0F               	movlw	15
  1678  000672  18DE               	xorwf	postinc2,w,c
  1679  000674  E13C               	bnz	l5841
  1680  000676                     l5821:
  1681                           
  1682                           ; BSR set to: 0
  1683                           ;main.c: 806: {
  1684                           ;main.c: 807: if ((0x0f >= lastAddress && 0x0f <= lastEndAddress) && (((_MODBUSCoils) >>
      +                           (0x0f)) & 0x01))
  1685  000676  51E7               	movf	(io_poll@lastAddress+1)& (0+255),w,b
  1686  000678  E118               	bnz	l5829
  1687  00067A  0E10               	movlw	16
  1688  00067C  5DE6               	subwf	io_poll@lastAddress& (0+255),w,b
  1689  00067E  E215               	bc	l5829
  1690                           
  1691                           ; BSR set to: 0
  1692  000680  51E5               	movf	(io_poll@lastEndAddress+1)& (0+255),w,b
  1693  000682  E103               	bnz	u5970
  1694  000684  0E0F               	movlw	15
  1695  000686  5DE4               	subwf	io_poll@lastEndAddress& (0+255),w,b
  1696  000688  E310               	bnc	l5829
  1697  00068A                     u5970:
  1698                           
  1699                           ; BSR set to: 0
  1700  00068A  C0D8  F060         	movff	__MODBUSCoils,??_io_poll
  1701  00068E  C0D9  F061         	movff	__MODBUSCoils+1,??_io_poll+1
  1702  000692  0E0F               	movlw	15
  1703  000694  6E62               	movwf	(??_io_poll+2)& (0+255),c
  1704  000696                     u5985:
  1705  000696  FFFF               	dw	65535	; assembler added errata NOP
  1706  000698  90D8               	bcf	status,0,c
  1707  00069A  3261               	rrcf	??_io_poll+1,f,c
  1708  00069C  3260               	rrcf	??_io_poll,f,c
  1709  00069E  2E62               	decfsz	(??_io_poll+2)& (0+255),f,c
  1710  0006A0  D7FA               	goto	u5985
  1711  0006A2  A060               	btfss	??_io_poll,0,c
  1712  0006A4  D002               	goto	l5829
  1713                           
  1714                           ; BSR set to: 0
  1715  0006A6  00FF               	reset		; ;# 
  1716                           
  1717                           ;main.c: 812: return;
  1718  0006A8  D2E4               	goto	l398
  1719  0006AA                     l5829:
  1720  0006AA  FFFF               	dw	65535	; assembler added errata NOP
  1721                           
  1722                           ; BSR set to: 0
  1723                           ;main.c: 813: }
  1724                           ;main.c: 814: if ((0x09 >= lastAddress && 0x09 <= lastEndAddress) && (((_MODBUSCoils) >>
      +                           (0x09)) & 0x01))
  1725  0006AC  51E7               	movf	(io_poll@lastAddress+1)& (0+255),w,b
  1726  0006AE  E103               	bnz	u6001
  1727  0006B0  0E0A               	movlw	10
  1728  0006B2  5DE6               	subwf	io_poll@lastAddress& (0+255),w,b
  1729  0006B4  B0D8               	btfsc	status,0,c
  1730  0006B6                     u6001:
  1731  0006B6  D2DD               	goto	l398
  1732                           
  1733                           ; BSR set to: 0
  1734  0006B8  51E5               	movf	(io_poll@lastEndAddress+1)& (0+255),w,b
  1735  0006BA  E104               	bnz	u6010
  1736  0006BC  0E09               	movlw	9
  1737  0006BE  5DE4               	subwf	io_poll@lastEndAddress& (0+255),w,b
  1738  0006C0  E201 D2D7          	bnc	l398
  1739  0006C4                     u6010:
  1740                           
  1741                           ; BSR set to: 0
  1742  0006C4  C0D8  F060         	movff	__MODBUSCoils,??_io_poll
  1743  0006C8  C0D9  F061         	movff	__MODBUSCoils+1,??_io_poll+1
  1744  0006CC  0E09               	movlw	9
  1745  0006CE  6E62               	movwf	(??_io_poll+2)& (0+255),c
  1746  0006D0                     u6025:
  1747  0006D0  FFFF               	dw	65535	; assembler added errata NOP
  1748  0006D2  90D8               	bcf	status,0,c
  1749  0006D4  3261               	rrcf	??_io_poll+1,f,c
  1750  0006D6  3260               	rrcf	??_io_poll,f,c
  1751  0006D8  2E62               	decfsz	(??_io_poll+2)& (0+255),f,c
  1752  0006DA  D7FA               	goto	u6025
  1753  0006DC  A060               	btfss	??_io_poll,0,c
  1754  0006DE  D2C9               	goto	l398
  1755                           
  1756                           ; BSR set to: 0
  1757                           ;main.c: 815: {
  1758                           ;main.c: 816: eventCount = 0;
  1759  0006E0  6A6D               	clrf	_eventCount,c
  1760  0006E2                     l5837:
  1761  0006E2  FFFF               	dw	65535	; assembler added errata NOP
  1762                           
  1763                           ;main.c: 817: _MODBUSInputRegs[0] = 0x8080;
  1764  0006E4  0E80               	movlw	128
  1765  0006E6  0101               	movlb	1	; () banked
  1766  0006E8  6FAB               	movwf	(__MODBUSInputRegs+1)& (0+255),b
  1767  0006EA  6FAA               	movwf	__MODBUSInputRegs& (0+255),b
  1768  0006EC  D2C2               	goto	l398
  1769  0006EE                     l5841:
  1770                           
  1771                           ; BSR set to: 0
  1772                           ;main.c: 821: }
  1773                           ;main.c: 822: uint8_t v1;
  1774                           ;main.c: 823: if(*lastCommand == MODBUS_COM_WRITE_SINGLE_REGISTER || *lastCommand == MOD
      +                          BUS_COM_WRITE_MULTIPLE_REGISTERS)
  1775  0006EE  51E3               	movf	io_poll@lastCommand& (0+255),w,b
  1776  0006F0  6ED9               	movwf	fsr2l,c
  1777  0006F2  6ADA               	clrf	fsr2h,c
  1778  0006F4  0E06               	movlw	6
  1779  0006F6  18DE               	xorwf	postinc2,w,c
  1780  0006F8  E007               	bz	l5845
  1781                           
  1782                           ; BSR set to: 0
  1783  0006FA  51E3               	movf	io_poll@lastCommand& (0+255),w,b
  1784  0006FC  6ED9               	movwf	fsr2l,c
  1785  0006FE  6ADA               	clrf	fsr2h,c
  1786  000700  0E10               	movlw	16
  1787  000702  18DE               	xorwf	postinc2,w,c
  1788  000704  E001 D2AC          	bnz	l6325
  1789  000708                     l5845:
  1790                           
  1791                           ; BSR set to: 0
  1792                           ;main.c: 824: {
  1793                           ;main.c: 826: if((13 >= lastAddress && 13 <= lastEndAddress) && _MODBUSHoldingRegs[13] >
      +                           0)
  1794  000708  51E7               	movf	(io_poll@lastAddress+1)& (0+255),w,b
  1795  00070A  E16C               	bnz	l5917
  1796  00070C  0E0E               	movlw	14
  1797  00070E  5DE6               	subwf	io_poll@lastAddress& (0+255),w,b
  1798  000710  E269               	bc	l5917
  1799                           
  1800                           ; BSR set to: 0
  1801  000712  51E5               	movf	(io_poll@lastEndAddress+1)& (0+255),w,b
  1802  000714  E103               	bnz	u6070
  1803  000716  0E0D               	movlw	13
  1804  000718  5DE4               	subwf	io_poll@lastEndAddress& (0+255),w,b
  1805  00071A  E364               	bnc	l5917
  1806  00071C                     u6070:
  1807                           
  1808                           ; BSR set to: 0
  1809  00071C  0101               	movlb	1	; () banked
  1810  00071E  51A6               	movf	(__MODBUSHoldingRegs+26)& (0+255),w,b
  1811  000720  11A7               	iorwf	(__MODBUSHoldingRegs+27)& (0+255),w,b
  1812  000722  E060               	bz	l5917
  1813                           
  1814                           ; BSR set to: 1
  1815                           ;main.c: 827: {
  1816                           ;main.c: 828: if(eventCount < 60)
  1817  000724  0E3C               	movlw	60
  1818  000726  606D               	cpfslt	_eventCount,c
  1819  000728  D059               	goto	l5915
  1820                           
  1821                           ; BSR set to: 1
  1822                           ;main.c: 829: {
  1823                           ;main.c: 830: uint8_t eventEeAddr = 18 + 1 + (eventCount << 1);
  1824  00072A  506D               	movf	_eventCount,w,c
  1825  00072C  0D02               	mullw	2
  1826  00072E  50F3               	movf	prodl,w,c
  1827  000730  0F13               	addlw	19
  1828  000732  0100               	movlb	0	; () banked
  1829  000734  6FE1               	movwf	io_poll@eventEeAddr& (0+255),b
  1830                           
  1831                           ; BSR set to: 0
  1832                           ;main.c: 831: v1 = ((unsigned char)(((_MODBUSHoldingRegs[13])>>8)&0xFF));
  1833  000736  0101               	movlb	1	; () banked
  1834  000738  51A7               	movf	(__MODBUSHoldingRegs+27)& (0+255),w,b
  1835  00073A  0100               	movlb	0	; () banked
  1836  00073C  6FE2               	movwf	io_poll@v1& (0+255),b
  1837  00073E                     l410:
  1838  00073E  FFFF               	dw	65535	; assembler added errata NOP
  1839  000740  B2A6               	btfsc	4006,1,c	;volatile
  1840  000742  D7FD               	goto	l410
  1841  000744  C0E1  FFA9         	movff	io_poll@eventEeAddr,4009	;volatile
  1842  000748  C0E2  FFA8         	movff	io_poll@v1,4008	;volatile
  1843  00074C  90D8               	bcf	status,0,c	;volatile
  1844  00074E  BEF2               	btfsc	intcon,7,c	;volatile
  1845  000750  80D8               	bsf	status,0,c	;volatile
  1846  000752  9EF2               	bcf	intcon,7,c	;volatile
  1847  000754  84A6               	bsf	4006,2,c	;volatile
  1848  000756  0E55               	movlw	85
  1849  000758  6EA7               	movwf	4007,c	;volatile
  1850  00075A  0EAA               	movlw	170
  1851  00075C  6EA7               	movwf	4007,c	;volatile
  1852  00075E  82A6               	bsf	4006,1,c	;volatile
  1853  000760  94A6               	bcf	4006,2,c	;volatile
  1854  000762  E301               	bnc	l415
  1855  000764  8EF2               	bsf	intcon,7,c	;volatile
  1856  000766                     l415:
  1857                           
  1858                           ;main.c: 833: v1 = ((unsigned char)((_MODBUSHoldingRegs[13])&0xFF));
  1859  000766  C1A6  F0E2         	movff	__MODBUSHoldingRegs+26,io_poll@v1
  1860  00076A                     l417:
  1861  00076A  FFFF               	dw	65535	; assembler added errata NOP
  1862  00076C  B2A6               	btfsc	4006,1,c	;volatile
  1863  00076E  D7FD               	goto	l417
  1864  000770  0100               	movlb	0	; () banked
  1865  000772  29E1               	incf	io_poll@eventEeAddr& (0+255),w,b
  1866  000774  6EA9               	movwf	4009,c	;volatile
  1867                           
  1868                           ; BSR set to: 0
  1869  000776  C0E2  FFA8         	movff	io_poll@v1,4008	;volatile
  1870                           
  1871                           ; BSR set to: 0
  1872  00077A  90D8               	bcf	status,0,c	;volatile
  1873                           
  1874                           ; BSR set to: 0
  1875  00077C  BEF2               	btfsc	intcon,7,c	;volatile
  1876                           
  1877                           ; BSR set to: 0
  1878  00077E  80D8               	bsf	status,0,c	;volatile
  1879                           
  1880                           ; BSR set to: 0
  1881  000780  9EF2               	bcf	intcon,7,c	;volatile
  1882  000782  84A6               	bsf	4006,2,c	;volatile
  1883                           
  1884                           ; BSR set to: 0
  1885  000784  0E55               	movlw	85
  1886  000786  6EA7               	movwf	4007,c	;volatile
  1887  000788  0EAA               	movlw	170
  1888  00078A  6EA7               	movwf	4007,c	;volatile
  1889                           
  1890                           ; BSR set to: 0
  1891  00078C  82A6               	bsf	4006,1,c	;volatile
  1892                           
  1893                           ; BSR set to: 0
  1894  00078E  94A6               	bcf	4006,2,c	;volatile
  1895                           
  1896                           ; BSR set to: 0
  1897  000790  E301               	bnc	l422
  1898                           
  1899                           ; BSR set to: 0
  1900  000792  8EF2               	bsf	intcon,7,c	;volatile
  1901  000794                     l422:
  1902                           
  1903                           ; BSR set to: 0
  1904                           ;main.c: 836: _MODBUSHoldingRegs[13] = 0;
  1905  000794  0101               	movlb	1	; () banked
  1906  000796  6BA6               	clrf	(__MODBUSHoldingRegs+26)& (0+255),b
  1907  000798  6BA7               	clrf	(__MODBUSHoldingRegs+27)& (0+255),b
  1908                           
  1909                           ; BSR set to: 1
  1910                           ;main.c: 838: LightLed(eventCount, LED_GREEN, 0);
  1911  00079A  0E01               	movlw	1
  1912  00079C  6E07               	movwf	LightLed@ledState,c
  1913  00079E  0E00               	movlw	0
  1914  0007A0  6E08               	movwf	LightLed@blink,c
  1915  0007A2  506D               	movf	_eventCount,w,c
  1916  0007A4  ECFE  F008         	call	_LightLed
  1917                           
  1918                           ;main.c: 840: eventCount++;
  1919  0007A8  2A6D               	incf	_eventCount,f,c
  1920  0007AA                     l424:
  1921  0007AA  FFFF               	dw	65535	; assembler added errata NOP
  1922  0007AC  B2A6               	btfsc	4006,1,c	;volatile
  1923  0007AE  D7FD               	goto	l424
  1924  0007B0  0E12               	movlw	18
  1925  0007B2  6EA9               	movwf	4009,c	;volatile
  1926  0007B4  C06D  FFA8         	movff	_eventCount,4008	;volatile
  1927  0007B8  90D8               	bcf	status,0,c	;volatile
  1928  0007BA  BEF2               	btfsc	intcon,7,c	;volatile
  1929  0007BC  80D8               	bsf	status,0,c	;volatile
  1930  0007BE  9EF2               	bcf	intcon,7,c	;volatile
  1931  0007C0  84A6               	bsf	4006,2,c	;volatile
  1932  0007C2  0E55               	movlw	85
  1933  0007C4  6EA7               	movwf	4007,c	;volatile
  1934  0007C6  0EAA               	movlw	170
  1935  0007C8  6EA7               	movwf	4007,c	;volatile
  1936  0007CA  82A6               	bsf	4006,1,c	;volatile
  1937  0007CC  94A6               	bcf	4006,2,c	;volatile
  1938  0007CE  E301               	bnc	l5913
  1939  0007D0  8EF2               	bsf	intcon,7,c	;volatile
  1940  0007D2                     l5913:
  1941                           
  1942                           ;main.c: 843: _MODBUSInputRegs[0] = 0x8080;
  1943  0007D2  0E80               	movlw	128
  1944  0007D4  0101               	movlb	1	; () banked
  1945  0007D6  6FAB               	movwf	(__MODBUSInputRegs+1)& (0+255),b
  1946  0007D8  6FAA               	movwf	__MODBUSInputRegs& (0+255),b
  1947                           
  1948                           ;main.c: 844: }
  1949  0007DA  D004               	goto	l5917
  1950  0007DC                     l5915:
  1951  0007DC  FFFF               	dw	65535	; assembler added errata NOP
  1952                           
  1953                           ; BSR set to: 1
  1954                           ;main.c: 845: else
  1955                           ;main.c: 846: _MODBUSInputRegs[0] = 0x0100;
  1956  0007DE  0E01               	movlw	1
  1957  0007E0  6FAB               	movwf	(__MODBUSInputRegs+1)& (0+255),b
  1958  0007E2  6BAA               	clrf	__MODBUSInputRegs& (0+255),b
  1959  0007E4                     l5917:
  1960  0007E4  FFFF               	dw	65535	; assembler added errata NOP
  1961                           
  1962                           ;main.c: 847: }
  1963                           ;main.c: 850: if((0 >= lastAddress && 0 <= lastEndAddress) && _MODBUSHoldingRegs[0] > 0)
  1964  0007E6  0100               	movlb	0	; () banked
  1965  0007E8  51E6               	movf	io_poll@lastAddress& (0+255),w,b
  1966  0007EA  11E7               	iorwf	(io_poll@lastAddress+1)& (0+255),w,b
  1967  0007EC  E119               	bnz	l5929
  1968                           
  1969                           ; BSR set to: 0
  1970  0007EE  0101               	movlb	1	; () banked
  1971  0007F0  518C               	movf	__MODBUSHoldingRegs& (0+255),w,b
  1972  0007F2  118D               	iorwf	(__MODBUSHoldingRegs+1)& (0+255),w,b
  1973  0007F4  E015               	bz	l5929
  1974                           
  1975                           ; BSR set to: 1
  1976                           ;main.c: 851: {
  1977                           ;main.c: 852: v1 = ((unsigned char)((_MODBUSHoldingRegs[0])&0xFF));
  1978  0007F6  C18C  F0E2         	movff	__MODBUSHoldingRegs,io_poll@v1
  1979                           
  1980                           ; BSR set to: 1
  1981                           ;main.c: 854: LightLed(((unsigned char)(((_MODBUSHoldingRegs[0])>>8)&0xFF)), v1 & 0x03, 
      +                          (((v1) >> (2)) & 0x01));
  1982  0007FA  0100               	movlb	0	; () banked
  1983  0007FC  51E2               	movf	io_poll@v1& (0+255),w,b
  1984  0007FE  0B03               	andlw	3
  1985  000800  6E07               	movwf	LightLed@ledState,c
  1986  000802  41E2               	rrncf	io_poll@v1& (0+255),w,b
  1987  000804  42E8               	rrncf	wreg,f,c
  1988  000806  0B3F               	andlw	63
  1989  000808  0B01               	andlw	1
  1990  00080A  6E08               	movwf	LightLed@blink,c
  1991  00080C  0101               	movlb	1	; () banked
  1992  00080E  518D               	movf	(__MODBUSHoldingRegs+1)& (0+255),w,b
  1993  000810  ECFE  F008         	call	_LightLed
  1994                           
  1995                           ;main.c: 855: _MODBUSHoldingRegs[0] = 0;
  1996  000814  0101               	movlb	1	; () banked
  1997  000816  6B8C               	clrf	__MODBUSHoldingRegs& (0+255),b
  1998  000818  6B8D               	clrf	(__MODBUSHoldingRegs+1)& (0+255),b
  1999                           
  2000                           ; BSR set to: 1
  2001                           ;main.c: 856: _MODBUSInputRegs[0] = 0x8080;
  2002  00081A  0E80               	movlw	128
  2003  00081C  6FAB               	movwf	(__MODBUSInputRegs+1)& (0+255),b
  2004  00081E  6FAA               	movwf	__MODBUSInputRegs& (0+255),b
  2005  000820                     l5929:
  2006                           
  2007                           ;main.c: 857: }
  2008                           ;main.c: 858: if((1 >= lastAddress && 1 <= lastEndAddress)) { buzzeLoudDuration = ((unsi
      +                          gned char)(((_MODBUSHoldingRegs[1])>>8)&0xFF)); do{ while (WR) { continue; } EEADR = (2)
      +                          ; EEDATA = (buzzeLoudDuration); (void)0; CARRY = 0; if (GIE) { CARRY = 1; } GIE = 0; WRE
  2009  000820  0100               	movlb	0	; () banked
  2010  000822  51E7               	movf	(io_poll@lastAddress+1)& (0+255),w,b
  2011  000824  E138               	bnz	l5977
  2012  000826  0E02               	movlw	2
  2013  000828  5DE6               	subwf	io_poll@lastAddress& (0+255),w,b
  2014  00082A  E235               	bc	l5977
  2015                           
  2016                           ; BSR set to: 0
  2017  00082C  51E4               	movf	io_poll@lastEndAddress& (0+255),w,b
  2018  00082E  11E5               	iorwf	(io_poll@lastEndAddress+1)& (0+255),w,b
  2019  000830  E032               	bz	l5977
  2020                           
  2021                           ; BSR set to: 0
  2022  000832  0101               	movlb	1	; () banked
  2023  000834  518F               	movf	(__MODBUSHoldingRegs+3)& (0+255),w,b
  2024  000836  0100               	movlb	0	; () banked
  2025  000838  6FC6               	movwf	_buzzeLoudDuration& (0+255),b
  2026  00083A                     l434:
  2027  00083A  FFFF               	dw	65535	; assembler added errata NOP
  2028  00083C  B2A6               	btfsc	4006,1,c	;volatile
  2029  00083E  D7FD               	goto	l434
  2030  000840  0E02               	movlw	2
  2031  000842  6EA9               	movwf	4009,c	;volatile
  2032  000844  C0C6  FFA8         	movff	_buzzeLoudDuration,4008	;volatile
  2033  000848  90D8               	bcf	status,0,c	;volatile
  2034  00084A  BEF2               	btfsc	intcon,7,c	;volatile
  2035  00084C  80D8               	bsf	status,0,c	;volatile
  2036  00084E  9EF2               	bcf	intcon,7,c	;volatile
  2037  000850  84A6               	bsf	4006,2,c	;volatile
  2038  000852  0E55               	movlw	85
  2039  000854  6EA7               	movwf	4007,c	;volatile
  2040  000856  0EAA               	movlw	170
  2041  000858  6EA7               	movwf	4007,c	;volatile
  2042  00085A  82A6               	bsf	4006,1,c	;volatile
  2043  00085C  94A6               	bcf	4006,2,c	;volatile
  2044  00085E  E301               	bnc	l439
  2045  000860  8EF2               	bsf	intcon,7,c	;volatile
  2046  000862                     l439:
  2047  000862  C18E  F0C7         	movff	__MODBUSHoldingRegs+2,_buzzeQuietDuration
  2048  000866                     l441:
  2049  000866  FFFF               	dw	65535	; assembler added errata NOP
  2050  000868  B2A6               	btfsc	4006,1,c	;volatile
  2051  00086A  D7FD               	goto	l441
  2052  00086C  0E03               	movlw	3
  2053  00086E  6EA9               	movwf	4009,c	;volatile
  2054  000870  C0C7  FFA8         	movff	_buzzeQuietDuration,4008	;volatile
  2055  000874  90D8               	bcf	status,0,c	;volatile
  2056  000876  BEF2               	btfsc	intcon,7,c	;volatile
  2057  000878  80D8               	bsf	status,0,c	;volatile
  2058  00087A  9EF2               	bcf	intcon,7,c	;volatile
  2059  00087C  84A6               	bsf	4006,2,c	;volatile
  2060  00087E  0E55               	movlw	85
  2061  000880  6EA7               	movwf	4007,c	;volatile
  2062  000882  0EAA               	movlw	170
  2063  000884  6EA7               	movwf	4007,c	;volatile
  2064  000886  82A6               	bsf	4006,1,c	;volatile
  2065  000888  94A6               	bcf	4006,2,c	;volatile
  2066  00088A  E301               	bnc	l5975
  2067  00088C  8EF2               	bsf	intcon,7,c	;volatile
  2068  00088E                     l5975:
  2069  00088E  0E80               	movlw	128
  2070  000890  0101               	movlb	1	; () banked
  2071  000892  6FAB               	movwf	(__MODBUSInputRegs+1)& (0+255),b
  2072  000894  6FAA               	movwf	__MODBUSInputRegs& (0+255),b
  2073  000896                     l5977:
  2074                           
  2075                           ;main.c: 859: if((2 >= lastAddress && 2 <= lastEndAddress)) { buzzerInfoPeriod = ((unsig
      +                          ned char)(((_MODBUSHoldingRegs[2])>>8)&0xFF)); do{ while (WR) { continue; } EEADR = (4);
      +                           EEDATA = (buzzerInfoPeriod); (void)0; CARRY = 0; if (GIE) { CARRY = 1; } GIE = 0; WREN 
  2076  000896  0100               	movlb	0	; () banked
  2077  000898  51E7               	movf	(io_poll@lastAddress+1)& (0+255),w,b
  2078  00089A  E13A               	bnz	l6025
  2079  00089C  0E03               	movlw	3
  2080  00089E  5DE6               	subwf	io_poll@lastAddress& (0+255),w,b
  2081  0008A0  E237               	bc	l6025
  2082                           
  2083                           ; BSR set to: 0
  2084  0008A2  51E5               	movf	(io_poll@lastEndAddress+1)& (0+255),w,b
  2085  0008A4  E103               	bnz	u6300
  2086  0008A6  0E02               	movlw	2
  2087  0008A8  5DE4               	subwf	io_poll@lastEndAddress& (0+255),w,b
  2088  0008AA  E332               	bnc	l6025
  2089  0008AC                     u6300:
  2090                           
  2091                           ; BSR set to: 0
  2092  0008AC  0101               	movlb	1	; () banked
  2093  0008AE  5191               	movf	(__MODBUSHoldingRegs+5)& (0+255),w,b
  2094  0008B0  0100               	movlb	0	; () banked
  2095  0008B2  6FC9               	movwf	_buzzerInfoPeriod& (0+255),b
  2096  0008B4                     l449:
  2097  0008B4  FFFF               	dw	65535	; assembler added errata NOP
  2098  0008B6  B2A6               	btfsc	4006,1,c	;volatile
  2099  0008B8  D7FD               	goto	l449
  2100  0008BA  0E04               	movlw	4
  2101  0008BC  6EA9               	movwf	4009,c	;volatile
  2102  0008BE  C0C9  FFA8         	movff	_buzzerInfoPeriod,4008	;volatile
  2103  0008C2  90D8               	bcf	status,0,c	;volatile
  2104  0008C4  BEF2               	btfsc	intcon,7,c	;volatile
  2105  0008C6  80D8               	bsf	status,0,c	;volatile
  2106  0008C8  9EF2               	bcf	intcon,7,c	;volatile
  2107  0008CA  84A6               	bsf	4006,2,c	;volatile
  2108  0008CC  0E55               	movlw	85
  2109  0008CE  6EA7               	movwf	4007,c	;volatile
  2110  0008D0  0EAA               	movlw	170
  2111  0008D2  6EA7               	movwf	4007,c	;volatile
  2112  0008D4  82A6               	bsf	4006,1,c	;volatile
  2113  0008D6  94A6               	bcf	4006,2,c	;volatile
  2114  0008D8  E301               	bnc	l454
  2115  0008DA  8EF2               	bsf	intcon,7,c	;volatile
  2116  0008DC                     l454:
  2117  0008DC  C190  F0C8         	movff	__MODBUSHoldingRegs+4,_buzzerAlarmPeriod
  2118  0008E0                     l456:
  2119  0008E0  FFFF               	dw	65535	; assembler added errata NOP
  2120  0008E2  B2A6               	btfsc	4006,1,c	;volatile
  2121  0008E4  D7FD               	goto	l456
  2122  0008E6  0E05               	movlw	5
  2123  0008E8  6EA9               	movwf	4009,c	;volatile
  2124  0008EA  C0C8  FFA8         	movff	_buzzerAlarmPeriod,4008	;volatile
  2125  0008EE  90D8               	bcf	status,0,c	;volatile
  2126  0008F0  BEF2               	btfsc	intcon,7,c	;volatile
  2127  0008F2  80D8               	bsf	status,0,c	;volatile
  2128  0008F4  9EF2               	bcf	intcon,7,c	;volatile
  2129  0008F6  84A6               	bsf	4006,2,c	;volatile
  2130  0008F8  0E55               	movlw	85
  2131  0008FA  6EA7               	movwf	4007,c	;volatile
  2132  0008FC  0EAA               	movlw	170
  2133  0008FE  6EA7               	movwf	4007,c	;volatile
  2134  000900  82A6               	bsf	4006,1,c	;volatile
  2135  000902  94A6               	bcf	4006,2,c	;volatile
  2136  000904  E301               	bnc	l6023
  2137  000906  8EF2               	bsf	intcon,7,c	;volatile
  2138  000908                     l6023:
  2139  000908  0E80               	movlw	128
  2140  00090A  0101               	movlb	1	; () banked
  2141  00090C  6FAB               	movwf	(__MODBUSInputRegs+1)& (0+255),b
  2142  00090E  6FAA               	movwf	__MODBUSInputRegs& (0+255),b
  2143  000910                     l6025:
  2144                           
  2145                           ;main.c: 860: SetBuzzerDuty(buzzeLoudDuration);
  2146  000910  C0C6  F007         	movff	_buzzeLoudDuration,SetBuzzerDuty@dc
  2147  000914  6A08               	clrf	SetBuzzerDuty@dc+1,c
  2148  000916  EC6E  F013         	call	_SetBuzzerDuty	;wreg free
  2149                           
  2150                           ;main.c: 861: PR2 = buzzerAlarmPeriod;
  2151  00091A  C0C8  FFCB         	movff	_buzzerAlarmPeriod,4043	;volatile
  2152                           
  2153                           ;main.c: 862: if((3 >= lastAddress && 3 <= lastEndAddress)) { buzzerOnOffDuration = ((un
      +                          signed char)(((_MODBUSHoldingRegs[3])>>8)&0xFF)); do{ while (WR) { continue; } EEADR = (
      +                          6); EEDATA = (buzzerOnOffDuration); (void)0; CARRY = 0; if (GIE) { CARRY = 1; } GIE = 0;
  2154  00091E  0100               	movlb	0	; () banked
  2155  000920  51E7               	movf	(io_poll@lastAddress+1)& (0+255),w,b
  2156  000922  E144               	bnz	l6081
  2157  000924  0E04               	movlw	4
  2158  000926  5DE6               	subwf	io_poll@lastAddress& (0+255),w,b
  2159  000928  E241               	bc	l6081
  2160                           
  2161                           ; BSR set to: 0
  2162  00092A  51E5               	movf	(io_poll@lastEndAddress+1)& (0+255),w,b
  2163  00092C  E103               	bnz	u6380
  2164  00092E  0E03               	movlw	3
  2165  000930  5DE4               	subwf	io_poll@lastEndAddress& (0+255),w,b
  2166  000932  E33C               	bnc	l6081
  2167  000934                     u6380:
  2168                           
  2169                           ; BSR set to: 0
  2170  000934  0101               	movlb	1	; () banked
  2171  000936  5193               	movf	(__MODBUSHoldingRegs+7)& (0+255),w,b
  2172  000938  0100               	movlb	0	; () banked
  2173  00093A  6FF7               	movwf	_buzzerOnOffDuration& (0+255),b
  2174  00093C  6BF8               	clrf	(_buzzerOnOffDuration+1)& (0+255),b
  2175  00093E                     l464:
  2176  00093E  FFFF               	dw	65535	; assembler added errata NOP
  2177  000940  B2A6               	btfsc	4006,1,c	;volatile
  2178  000942  D7FD               	goto	l464
  2179  000944  0E06               	movlw	6
  2180  000946  6EA9               	movwf	4009,c	;volatile
  2181  000948  C0F7  FFA8         	movff	_buzzerOnOffDuration,4008	;volatile
  2182  00094C  90D8               	bcf	status,0,c	;volatile
  2183  00094E  BEF2               	btfsc	intcon,7,c	;volatile
  2184  000950  80D8               	bsf	status,0,c	;volatile
  2185  000952  9EF2               	bcf	intcon,7,c	;volatile
  2186  000954  84A6               	bsf	4006,2,c	;volatile
  2187  000956  0E55               	movlw	85
  2188  000958  6EA7               	movwf	4007,c	;volatile
  2189  00095A  0EAA               	movlw	170
  2190  00095C  6EA7               	movwf	4007,c	;volatile
  2191  00095E  82A6               	bsf	4006,1,c	;volatile
  2192  000960  94A6               	bcf	4006,2,c	;volatile
  2193  000962  E301               	bnc	l6055
  2194  000964  8EF2               	bsf	intcon,7,c	;volatile
  2195  000966                     l6055:
  2196  000966  0100               	movlb	0	; () banked
  2197  000968  51F7               	movf	_buzzerOnOffDuration& (0+255),w,b
  2198  00096A  6FF8               	movwf	(_buzzerOnOffDuration+1)& (0+255),b
  2199  00096C  6BF7               	clrf	_buzzerOnOffDuration& (0+255),b
  2200                           
  2201                           ; BSR set to: 0
  2202  00096E  C192  F0F9         	movff	__MODBUSHoldingRegs+6,_buzzerOnOffPeriod
  2203  000972  6BFA               	clrf	(_buzzerOnOffPeriod+1)& (0+255),b
  2204  000974                     l471:
  2205  000974  FFFF               	dw	65535	; assembler added errata NOP
  2206  000976  B2A6               	btfsc	4006,1,c	;volatile
  2207  000978  D7FD               	goto	l471
  2208  00097A  0E07               	movlw	7
  2209  00097C  6EA9               	movwf	4009,c	;volatile
  2210  00097E  C0F9  FFA8         	movff	_buzzerOnOffPeriod,4008	;volatile
  2211  000982  90D8               	bcf	status,0,c	;volatile
  2212  000984  BEF2               	btfsc	intcon,7,c	;volatile
  2213  000986  80D8               	bsf	status,0,c	;volatile
  2214  000988  9EF2               	bcf	intcon,7,c	;volatile
  2215  00098A  84A6               	bsf	4006,2,c	;volatile
  2216  00098C  0E55               	movlw	85
  2217  00098E  6EA7               	movwf	4007,c	;volatile
  2218  000990  0EAA               	movlw	170
  2219  000992  6EA7               	movwf	4007,c	;volatile
  2220  000994  82A6               	bsf	4006,1,c	;volatile
  2221  000996  94A6               	bcf	4006,2,c	;volatile
  2222  000998  E301               	bnc	l6079
  2223  00099A  8EF2               	bsf	intcon,7,c	;volatile
  2224  00099C                     l6079:
  2225  00099C  0100               	movlb	0	; () banked
  2226  00099E  51F9               	movf	_buzzerOnOffPeriod& (0+255),w,b
  2227  0009A0  6FFA               	movwf	(_buzzerOnOffPeriod+1)& (0+255),b
  2228  0009A2  6BF9               	clrf	_buzzerOnOffPeriod& (0+255),b
  2229  0009A4  0E80               	movlw	128
  2230  0009A6  0101               	movlb	1	; () banked
  2231  0009A8  6FAB               	movwf	(__MODBUSInputRegs+1)& (0+255),b
  2232  0009AA  6FAA               	movwf	__MODBUSInputRegs& (0+255),b
  2233  0009AC                     l6081:
  2234                           
  2235                           ;main.c: 865: if((4 >= lastAddress && 4 <= lastEndAddress)) { eventAcceptTime = ((unsign
      +                          ed char)((_MODBUSHoldingRegs[4])&0xFF)); do{ while (WR) { continue; } EEADR = (10); EEDA
      +                          TA = (eventAcceptTime); (void)0; CARRY = 0; if (GIE) { CARRY = 1; } GIE = 0; WREN = 1; E
  2236  0009AC  0100               	movlb	0	; () banked
  2237  0009AE  51E7               	movf	(io_poll@lastAddress+1)& (0+255),w,b
  2238  0009B0  E126               	bnz	l6109
  2239  0009B2  0E05               	movlw	5
  2240  0009B4  5DE6               	subwf	io_poll@lastAddress& (0+255),w,b
  2241  0009B6  E223               	bc	l6109
  2242                           
  2243                           ; BSR set to: 0
  2244  0009B8  51E5               	movf	(io_poll@lastEndAddress+1)& (0+255),w,b
  2245  0009BA  E103               	bnz	u6460
  2246  0009BC  0E04               	movlw	4
  2247  0009BE  5DE4               	subwf	io_poll@lastEndAddress& (0+255),w,b
  2248  0009C0  E31E               	bnc	l6109
  2249  0009C2                     u6460:
  2250                           
  2251                           ; BSR set to: 0
  2252  0009C2  C194  F0D0         	movff	__MODBUSHoldingRegs+8,_eventAcceptTime
  2253  0009C6                     l479:
  2254  0009C6  FFFF               	dw	65535	; assembler added errata NOP
  2255  0009C8  B2A6               	btfsc	4006,1,c	;volatile
  2256  0009CA  D7FD               	goto	l479
  2257  0009CC  0E0A               	movlw	10
  2258  0009CE  6EA9               	movwf	4009,c	;volatile
  2259  0009D0  C0D0  FFA8         	movff	_eventAcceptTime,4008	;volatile
  2260  0009D4  90D8               	bcf	status,0,c	;volatile
  2261  0009D6  BEF2               	btfsc	intcon,7,c	;volatile
  2262  0009D8  80D8               	bsf	status,0,c	;volatile
  2263  0009DA  9EF2               	bcf	intcon,7,c	;volatile
  2264  0009DC  84A6               	bsf	4006,2,c	;volatile
  2265  0009DE  0E55               	movlw	85
  2266  0009E0  6EA7               	movwf	4007,c	;volatile
  2267  0009E2  0EAA               	movlw	170
  2268  0009E4  6EA7               	movwf	4007,c	;volatile
  2269  0009E6  82A6               	bsf	4006,1,c	;volatile
  2270  0009E8  94A6               	bcf	4006,2,c	;volatile
  2271  0009EA  E301               	bnc	l484
  2272  0009EC  8EF2               	bsf	intcon,7,c	;volatile
  2273  0009EE                     l484:
  2274  0009EE  C194  F1B2         	movff	__MODBUSHoldingRegs+8,__MODBUSInputRegs+8
  2275  0009F2  C195  F1B3         	movff	__MODBUSHoldingRegs+9,__MODBUSInputRegs+9
  2276  0009F6  0E80               	movlw	128
  2277  0009F8  0101               	movlb	1	; () banked
  2278  0009FA  6FAB               	movwf	(__MODBUSInputRegs+1)& (0+255),b
  2279  0009FC  6FAA               	movwf	__MODBUSInputRegs& (0+255),b
  2280  0009FE                     l6109:
  2281                           
  2282                           ;main.c: 866: if((5 >= lastAddress && 5 <= lastEndAddress)) { buzzeEscaladeTime = ((unsi
      +                          gned char)(((_MODBUSHoldingRegs[5])>>8)&0xFF)); do{ while (WR) { continue; } EEADR = (8)
      +                          ; EEDATA = (buzzeEscaladeTime); (void)0; CARRY = 0; if (GIE) { CARRY = 1; } GIE = 0; WRE
  2283  0009FE  0100               	movlb	0	; () banked
  2284  000A00  51E7               	movf	(io_poll@lastAddress+1)& (0+255),w,b
  2285  000A02  E13A               	bnz	l6157
  2286  000A04  0E06               	movlw	6
  2287  000A06  5DE6               	subwf	io_poll@lastAddress& (0+255),w,b
  2288  000A08  E237               	bc	l6157
  2289                           
  2290                           ; BSR set to: 0
  2291  000A0A  51E5               	movf	(io_poll@lastEndAddress+1)& (0+255),w,b
  2292  000A0C  E103               	bnz	u6510
  2293  000A0E  0E05               	movlw	5
  2294  000A10  5DE4               	subwf	io_poll@lastEndAddress& (0+255),w,b
  2295  000A12  E332               	bnc	l6157
  2296  000A14                     u6510:
  2297                           
  2298                           ; BSR set to: 0
  2299  000A14  0101               	movlb	1	; () banked
  2300  000A16  5197               	movf	(__MODBUSHoldingRegs+11)& (0+255),w,b
  2301  000A18  0100               	movlb	0	; () banked
  2302  000A1A  6FC5               	movwf	_buzzeEscaladeTime& (0+255),b
  2303  000A1C                     l487:
  2304  000A1C  FFFF               	dw	65535	; assembler added errata NOP
  2305  000A1E  B2A6               	btfsc	4006,1,c	;volatile
  2306  000A20  D7FD               	goto	l487
  2307  000A22  0E08               	movlw	8
  2308  000A24  6EA9               	movwf	4009,c	;volatile
  2309  000A26  C0C5  FFA8         	movff	_buzzeEscaladeTime,4008	;volatile
  2310  000A2A  90D8               	bcf	status,0,c	;volatile
  2311  000A2C  BEF2               	btfsc	intcon,7,c	;volatile
  2312  000A2E  80D8               	bsf	status,0,c	;volatile
  2313  000A30  9EF2               	bcf	intcon,7,c	;volatile
  2314  000A32  84A6               	bsf	4006,2,c	;volatile
  2315  000A34  0E55               	movlw	85
  2316  000A36  6EA7               	movwf	4007,c	;volatile
  2317  000A38  0EAA               	movlw	170
  2318  000A3A  6EA7               	movwf	4007,c	;volatile
  2319  000A3C  82A6               	bsf	4006,1,c	;volatile
  2320  000A3E  94A6               	bcf	4006,2,c	;volatile
  2321  000A40  E301               	bnc	l492
  2322  000A42  8EF2               	bsf	intcon,7,c	;volatile
  2323  000A44                     l492:
  2324  000A44  C196  F0CA         	movff	__MODBUSHoldingRegs+10,_buzzerStartDurationDiv
  2325  000A48                     l494:
  2326  000A48  FFFF               	dw	65535	; assembler added errata NOP
  2327  000A4A  B2A6               	btfsc	4006,1,c	;volatile
  2328  000A4C  D7FD               	goto	l494
  2329  000A4E  0E09               	movlw	9
  2330  000A50  6EA9               	movwf	4009,c	;volatile
  2331  000A52  C0CA  FFA8         	movff	_buzzerStartDurationDiv,4008	;volatile
  2332  000A56  90D8               	bcf	status,0,c	;volatile
  2333  000A58  BEF2               	btfsc	intcon,7,c	;volatile
  2334  000A5A  80D8               	bsf	status,0,c	;volatile
  2335  000A5C  9EF2               	bcf	intcon,7,c	;volatile
  2336  000A5E  84A6               	bsf	4006,2,c	;volatile
  2337  000A60  0E55               	movlw	85
  2338  000A62  6EA7               	movwf	4007,c	;volatile
  2339  000A64  0EAA               	movlw	170
  2340  000A66  6EA7               	movwf	4007,c	;volatile
  2341  000A68  82A6               	bsf	4006,1,c	;volatile
  2342  000A6A  94A6               	bcf	4006,2,c	;volatile
  2343  000A6C  E301               	bnc	l6155
  2344  000A6E  8EF2               	bsf	intcon,7,c	;volatile
  2345  000A70                     l6155:
  2346  000A70  0E80               	movlw	128
  2347  000A72  0101               	movlb	1	; () banked
  2348  000A74  6FAB               	movwf	(__MODBUSInputRegs+1)& (0+255),b
  2349  000A76  6FAA               	movwf	__MODBUSInputRegs& (0+255),b
  2350  000A78                     l6157:
  2351                           
  2352                           ;main.c: 867: if((6 >= lastAddress && 6 <= lastEndAddress)) { eveningTimeHour = ((unsign
      +                          ed char)(((_MODBUSHoldingRegs[6])>>8)&0xFF)); do{ while (WR) { continue; } EEADR = (11);
      +                           EEDATA = (eveningTimeHour); (void)0; CARRY = 0; if (GIE) { CARRY = 1; } GIE = 0; WREN =
  2353  000A78  0100               	movlb	0	; () banked
  2354  000A7A  51E7               	movf	(io_poll@lastAddress+1)& (0+255),w,b
  2355  000A7C  E13A               	bnz	l6205
  2356  000A7E  0E07               	movlw	7
  2357  000A80  5DE6               	subwf	io_poll@lastAddress& (0+255),w,b
  2358  000A82  E237               	bc	l6205
  2359                           
  2360                           ; BSR set to: 0
  2361  000A84  51E5               	movf	(io_poll@lastEndAddress+1)& (0+255),w,b
  2362  000A86  E103               	bnz	u6590
  2363  000A88  0E06               	movlw	6
  2364  000A8A  5DE4               	subwf	io_poll@lastEndAddress& (0+255),w,b
  2365  000A8C  E332               	bnc	l6205
  2366  000A8E                     u6590:
  2367                           
  2368                           ; BSR set to: 0
  2369  000A8E  0101               	movlb	1	; () banked
  2370  000A90  5199               	movf	(__MODBUSHoldingRegs+13)& (0+255),w,b
  2371  000A92  0100               	movlb	0	; () banked
  2372  000A94  6FCF               	movwf	_eveningTimeHour& (0+255),b
  2373  000A96                     l502:
  2374  000A96  FFFF               	dw	65535	; assembler added errata NOP
  2375  000A98  B2A6               	btfsc	4006,1,c	;volatile
  2376  000A9A  D7FD               	goto	l502
  2377  000A9C  0E0B               	movlw	11
  2378  000A9E  6EA9               	movwf	4009,c	;volatile
  2379  000AA0  C0CF  FFA8         	movff	_eveningTimeHour,4008	;volatile
  2380  000AA4  90D8               	bcf	status,0,c	;volatile
  2381  000AA6  BEF2               	btfsc	intcon,7,c	;volatile
  2382  000AA8  80D8               	bsf	status,0,c	;volatile
  2383  000AAA  9EF2               	bcf	intcon,7,c	;volatile
  2384  000AAC  84A6               	bsf	4006,2,c	;volatile
  2385  000AAE  0E55               	movlw	85
  2386  000AB0  6EA7               	movwf	4007,c	;volatile
  2387  000AB2  0EAA               	movlw	170
  2388  000AB4  6EA7               	movwf	4007,c	;volatile
  2389  000AB6  82A6               	bsf	4006,1,c	;volatile
  2390  000AB8  94A6               	bcf	4006,2,c	;volatile
  2391  000ABA  E301               	bnc	l507
  2392  000ABC  8EF2               	bsf	intcon,7,c	;volatile
  2393  000ABE                     l507:
  2394  000ABE  C198  F0D1         	movff	__MODBUSHoldingRegs+12,_morningTimeHour
  2395  000AC2                     l509:
  2396  000AC2  FFFF               	dw	65535	; assembler added errata NOP
  2397  000AC4  B2A6               	btfsc	4006,1,c	;volatile
  2398  000AC6  D7FD               	goto	l509
  2399  000AC8  0E0E               	movlw	14
  2400  000ACA  6EA9               	movwf	4009,c	;volatile
  2401  000ACC  C0D1  FFA8         	movff	_morningTimeHour,4008	;volatile
  2402  000AD0  90D8               	bcf	status,0,c	;volatile
  2403  000AD2  BEF2               	btfsc	intcon,7,c	;volatile
  2404  000AD4  80D8               	bsf	status,0,c	;volatile
  2405  000AD6  9EF2               	bcf	intcon,7,c	;volatile
  2406  000AD8  84A6               	bsf	4006,2,c	;volatile
  2407  000ADA  0E55               	movlw	85
  2408  000ADC  6EA7               	movwf	4007,c	;volatile
  2409  000ADE  0EAA               	movlw	170
  2410  000AE0  6EA7               	movwf	4007,c	;volatile
  2411  000AE2  82A6               	bsf	4006,1,c	;volatile
  2412  000AE4  94A6               	bcf	4006,2,c	;volatile
  2413  000AE6  E301               	bnc	l6203
  2414  000AE8  8EF2               	bsf	intcon,7,c	;volatile
  2415  000AEA                     l6203:
  2416  000AEA  0E80               	movlw	128
  2417  000AEC  0101               	movlb	1	; () banked
  2418  000AEE  6FAB               	movwf	(__MODBUSInputRegs+1)& (0+255),b
  2419  000AF0  6FAA               	movwf	__MODBUSInputRegs& (0+255),b
  2420  000AF2                     l6205:
  2421                           
  2422                           ;main.c: 868: if((7 >= lastAddress && 7 <= lastEndAddress)) { nightStartHour = ((unsigne
      +                          d char)(((_MODBUSHoldingRegs[7])>>8)&0xFF)); do{ while (WR) { continue; } EEADR = (12); 
      +                          EEDATA = (nightStartHour); (void)0; CARRY = 0; if (GIE) { CARRY = 1; } GIE = 0; WREN = 1
  2423  000AF2  0100               	movlb	0	; () banked
  2424  000AF4  51E7               	movf	(io_poll@lastAddress+1)& (0+255),w,b
  2425  000AF6  E13A               	bnz	l6253
  2426  000AF8  0E08               	movlw	8
  2427  000AFA  5DE6               	subwf	io_poll@lastAddress& (0+255),w,b
  2428  000AFC  E237               	bc	l6253
  2429                           
  2430                           ; BSR set to: 0
  2431  000AFE  51E5               	movf	(io_poll@lastEndAddress+1)& (0+255),w,b
  2432  000B00  E103               	bnz	u6670
  2433  000B02  0E07               	movlw	7
  2434  000B04  5DE4               	subwf	io_poll@lastEndAddress& (0+255),w,b
  2435  000B06  E332               	bnc	l6253
  2436  000B08                     u6670:
  2437                           
  2438                           ; BSR set to: 0
  2439  000B08  0101               	movlb	1	; () banked
  2440  000B0A  519B               	movf	(__MODBUSHoldingRegs+15)& (0+255),w,b
  2441  000B0C  0100               	movlb	0	; () banked
  2442  000B0E  6FD3               	movwf	_nightStartHour& (0+255),b
  2443  000B10                     l517:
  2444  000B10  FFFF               	dw	65535	; assembler added errata NOP
  2445  000B12  B2A6               	btfsc	4006,1,c	;volatile
  2446  000B14  D7FD               	goto	l517
  2447  000B16  0E0C               	movlw	12
  2448  000B18  6EA9               	movwf	4009,c	;volatile
  2449  000B1A  C0D3  FFA8         	movff	_nightStartHour,4008	;volatile
  2450  000B1E  90D8               	bcf	status,0,c	;volatile
  2451  000B20  BEF2               	btfsc	intcon,7,c	;volatile
  2452  000B22  80D8               	bsf	status,0,c	;volatile
  2453  000B24  9EF2               	bcf	intcon,7,c	;volatile
  2454  000B26  84A6               	bsf	4006,2,c	;volatile
  2455  000B28  0E55               	movlw	85
  2456  000B2A  6EA7               	movwf	4007,c	;volatile
  2457  000B2C  0EAA               	movlw	170
  2458  000B2E  6EA7               	movwf	4007,c	;volatile
  2459  000B30  82A6               	bsf	4006,1,c	;volatile
  2460  000B32  94A6               	bcf	4006,2,c	;volatile
  2461  000B34  E301               	bnc	l522
  2462  000B36  8EF2               	bsf	intcon,7,c	;volatile
  2463  000B38                     l522:
  2464  000B38  C19A  F0D2         	movff	__MODBUSHoldingRegs+14,_nightEndHour
  2465  000B3C                     l524:
  2466  000B3C  FFFF               	dw	65535	; assembler added errata NOP
  2467  000B3E  B2A6               	btfsc	4006,1,c	;volatile
  2468  000B40  D7FD               	goto	l524
  2469  000B42  0E0D               	movlw	13
  2470  000B44  6EA9               	movwf	4009,c	;volatile
  2471  000B46  C0D2  FFA8         	movff	_nightEndHour,4008	;volatile
  2472  000B4A  90D8               	bcf	status,0,c	;volatile
  2473  000B4C  BEF2               	btfsc	intcon,7,c	;volatile
  2474  000B4E  80D8               	bsf	status,0,c	;volatile
  2475  000B50  9EF2               	bcf	intcon,7,c	;volatile
  2476  000B52  84A6               	bsf	4006,2,c	;volatile
  2477  000B54  0E55               	movlw	85
  2478  000B56  6EA7               	movwf	4007,c	;volatile
  2479  000B58  0EAA               	movlw	170
  2480  000B5A  6EA7               	movwf	4007,c	;volatile
  2481  000B5C  82A6               	bsf	4006,1,c	;volatile
  2482  000B5E  94A6               	bcf	4006,2,c	;volatile
  2483  000B60  E301               	bnc	l6251
  2484  000B62  8EF2               	bsf	intcon,7,c	;volatile
  2485  000B64                     l6251:
  2486  000B64  0E80               	movlw	128
  2487  000B66  0101               	movlb	1	; () banked
  2488  000B68  6FAB               	movwf	(__MODBUSInputRegs+1)& (0+255),b
  2489  000B6A  6FAA               	movwf	__MODBUSInputRegs& (0+255),b
  2490  000B6C                     l6253:
  2491                           
  2492                           ;main.c: 870: if((8 >= lastAddress && 8 <= lastEndAddress)) { blinkDuration = ((unsigned
      +                           char)(((_MODBUSHoldingRegs[8])>>8)&0xFF)); do{ while (WR) { continue; } EEADR = (15); E
      +                          EDATA = (blinkDuration); (void)0; CARRY = 0; if (GIE) { CARRY = 1; } GIE = 0; WREN = 1; 
  2493  000B6C  0100               	movlb	0	; () banked
  2494  000B6E  51E7               	movf	(io_poll@lastAddress+1)& (0+255),w,b
  2495  000B70  E14C               	bnz	l6307
  2496  000B72  0E09               	movlw	9
  2497  000B74  5DE6               	subwf	io_poll@lastAddress& (0+255),w,b
  2498  000B76  E249               	bc	l6307
  2499                           
  2500                           ; BSR set to: 0
  2501  000B78  51E5               	movf	(io_poll@lastEndAddress+1)& (0+255),w,b
  2502  000B7A  E103               	bnz	u6750
  2503  000B7C  0E08               	movlw	8
  2504  000B7E  5DE4               	subwf	io_poll@lastEndAddress& (0+255),w,b
  2505  000B80  E344               	bnc	l6307
  2506  000B82                     u6750:
  2507                           
  2508                           ; BSR set to: 0
  2509  000B82  0101               	movlb	1	; () banked
  2510  000B84  519D               	movf	(__MODBUSHoldingRegs+17)& (0+255),w,b
  2511  000B86  0100               	movlb	0	; () banked
  2512  000B88  6FBA               	movwf	_blinkDuration& (0+255),b
  2513  000B8A  6BBB               	clrf	(_blinkDuration+1)& (0+255),b
  2514  000B8C                     l532:
  2515  000B8C  FFFF               	dw	65535	; assembler added errata NOP
  2516  000B8E  B2A6               	btfsc	4006,1,c	;volatile
  2517  000B90  D7FD               	goto	l532
  2518  000B92  0E0F               	movlw	15
  2519  000B94  6EA9               	movwf	4009,c	;volatile
  2520  000B96  C0BA  FFA8         	movff	_blinkDuration,4008	;volatile
  2521  000B9A  90D8               	bcf	status,0,c	;volatile
  2522  000B9C  BEF2               	btfsc	intcon,7,c	;volatile
  2523  000B9E  80D8               	bsf	status,0,c	;volatile
  2524  000BA0  9EF2               	bcf	intcon,7,c	;volatile
  2525  000BA2  84A6               	bsf	4006,2,c	;volatile
  2526  000BA4  0E55               	movlw	85
  2527  000BA6  6EA7               	movwf	4007,c	;volatile
  2528  000BA8  0EAA               	movlw	170
  2529  000BAA  6EA7               	movwf	4007,c	;volatile
  2530  000BAC  82A6               	bsf	4006,1,c	;volatile
  2531  000BAE  94A6               	bcf	4006,2,c	;volatile
  2532  000BB0  E301               	bnc	l6279
  2533  000BB2  8EF2               	bsf	intcon,7,c	;volatile
  2534  000BB4                     l6279:
  2535  000BB4  0100               	movlb	0	; () banked
  2536  000BB6  0E06               	movlw	6
  2537  000BB8                     u6795:
  2538  000BB8  FFFF               	dw	65535	; assembler added errata NOP
  2539  000BBA  90D8               	bcf	status,0,c
  2540  000BBC  37BA               	rlcf	_blinkDuration& (0+255),f,b
  2541  000BBE  37BB               	rlcf	(_blinkDuration+1)& (0+255),f,b
  2542  000BC0  2EE8               	decfsz	wreg,f,c
  2543  000BC2  D7FA               	goto	u6795
  2544                           
  2545                           ; BSR set to: 0
  2546  000BC4  C19C  F0BC         	movff	__MODBUSHoldingRegs+16,_blinkPeriod
  2547  000BC8  6BBD               	clrf	(_blinkPeriod+1)& (0+255),b
  2548  000BCA                     l539:
  2549  000BCA  FFFF               	dw	65535	; assembler added errata NOP
  2550  000BCC  B2A6               	btfsc	4006,1,c	;volatile
  2551  000BCE  D7FD               	goto	l539
  2552  000BD0  0E10               	movlw	16
  2553  000BD2  6EA9               	movwf	4009,c	;volatile
  2554  000BD4  C0BC  FFA8         	movff	_blinkPeriod,4008	;volatile
  2555  000BD8  90D8               	bcf	status,0,c	;volatile
  2556  000BDA  BEF2               	btfsc	intcon,7,c	;volatile
  2557  000BDC  80D8               	bsf	status,0,c	;volatile
  2558  000BDE  9EF2               	bcf	intcon,7,c	;volatile
  2559  000BE0  84A6               	bsf	4006,2,c	;volatile
  2560  000BE2  0E55               	movlw	85
  2561  000BE4  6EA7               	movwf	4007,c	;volatile
  2562  000BE6  0EAA               	movlw	170
  2563  000BE8  6EA7               	movwf	4007,c	;volatile
  2564  000BEA  82A6               	bsf	4006,1,c	;volatile
  2565  000BEC  94A6               	bcf	4006,2,c	;volatile
  2566  000BEE  E301               	bnc	l6303
  2567  000BF0  8EF2               	bsf	intcon,7,c	;volatile
  2568  000BF2                     l6303:
  2569  000BF2  0100               	movlb	0	; () banked
  2570  000BF4  0E06               	movlw	6
  2571  000BF6                     u6835:
  2572  000BF6  FFFF               	dw	65535	; assembler added errata NOP
  2573  000BF8  90D8               	bcf	status,0,c
  2574  000BFA  37BC               	rlcf	_blinkPeriod& (0+255),f,b
  2575  000BFC  37BD               	rlcf	(_blinkPeriod+1)& (0+255),f,b
  2576  000BFE  2EE8               	decfsz	wreg,f,c
  2577  000C00  D7FA               	goto	u6835
  2578                           
  2579                           ; BSR set to: 0
  2580  000C02  0E80               	movlw	128
  2581  000C04  0101               	movlb	1	; () banked
  2582  000C06  6FAB               	movwf	(__MODBUSInputRegs+1)& (0+255),b
  2583  000C08  6FAA               	movwf	__MODBUSInputRegs& (0+255),b
  2584  000C0A                     l6307:
  2585                           
  2586                           ;main.c: 874: if((9 >= lastAddress && 9 <= lastEndAddress) && (11 >= lastAddress && 11 <
      +                          = lastEndAddress))
  2587  000C0A  0100               	movlb	0	; () banked
  2588  000C0C  51E7               	movf	(io_poll@lastAddress+1)& (0+255),w,b
  2589  000C0E  E131               	bnz	l398
  2590  000C10  0E0A               	movlw	10
  2591  000C12  5DE6               	subwf	io_poll@lastAddress& (0+255),w,b
  2592  000C14  E22E               	bc	l398
  2593                           
  2594                           ; BSR set to: 0
  2595  000C16  51E5               	movf	(io_poll@lastEndAddress+1)& (0+255),w,b
  2596  000C18  E103               	bnz	u6850
  2597  000C1A  0E09               	movlw	9
  2598  000C1C  5DE4               	subwf	io_poll@lastEndAddress& (0+255),w,b
  2599  000C1E  E329               	bnc	l398
  2600  000C20                     u6850:
  2601                           
  2602                           ; BSR set to: 0
  2603  000C20  51E7               	movf	(io_poll@lastAddress+1)& (0+255),w,b
  2604  000C22  E127               	bnz	l398
  2605  000C24  0E0C               	movlw	12
  2606  000C26  5DE6               	subwf	io_poll@lastAddress& (0+255),w,b
  2607  000C28  E224               	bc	l398
  2608                           
  2609                           ; BSR set to: 0
  2610  000C2A  51E5               	movf	(io_poll@lastEndAddress+1)& (0+255),w,b
  2611  000C2C  E103               	bnz	u6870
  2612  000C2E  0E0B               	movlw	11
  2613  000C30  5DE4               	subwf	io_poll@lastEndAddress& (0+255),w,b
  2614  000C32  E31F               	bnc	l398
  2615  000C34                     u6870:
  2616                           
  2617                           ; BSR set to: 0
  2618                           ;main.c: 875: {
  2619                           ;main.c: 876: uint16_t hourMin = _MODBUSHoldingRegs[9];
  2620  000C34  C19E  F0DB         	movff	__MODBUSHoldingRegs+18,io_poll@hourMin
  2621  000C38  C19F  F0DC         	movff	__MODBUSHoldingRegs+19,io_poll@hourMin+1
  2622                           
  2623                           ;main.c: 877: uint16_t daySec = _MODBUSHoldingRegs[10];
  2624  000C3C  C1A0  F0DD         	movff	__MODBUSHoldingRegs+20,io_poll@daySec
  2625  000C40  C1A1  F0DE         	movff	__MODBUSHoldingRegs+21,io_poll@daySec+1
  2626                           
  2627                           ;main.c: 878: uint16_t yearMonth = _MODBUSHoldingRegs[11];
  2628  000C44  C1A2  F0DF         	movff	__MODBUSHoldingRegs+22,io_poll@yearMonth
  2629  000C48  C1A3  F0E0         	movff	__MODBUSHoldingRegs+23,io_poll@yearMonth+1
  2630                           
  2631                           ; BSR set to: 0
  2632                           ;main.c: 879: SetTimeFromRegs(&hourMin, &daySec, &yearMonth);
  2633  000C4C  0EDD               	movlw	low io_poll@daySec
  2634  000C4E  6E45               	movwf	SetTimeFromRegs@daySec,c
  2635  000C50  0EDF               	movlw	low io_poll@yearMonth
  2636  000C52  6E46               	movwf	SetTimeFromRegs@yearMonth,c
  2637  000C54  0EDB               	movlw	io_poll@hourMin& (0+255)
  2638  000C56  ECE8  F00F         	call	_SetTimeFromRegs
  2639                           
  2640                           ;main.c: 880: ((_MODBUSDiscreteInputs) |= ((unsigned short)1 << (0x00)));
  2641  000C5A  0100               	movlb	0	; () banked
  2642  000C5C  81B4               	bsf	__MODBUSDiscreteInputs& (0+255),0,b
  2643  000C5E  D541               	goto	l5837
  2644  000C60                     l6325:
  2645                           
  2646                           ; BSR set to: 0
  2647                           ;main.c: 888: }
  2648                           ;main.c: 889: if(*lastCommand == MODBUS_COM_WRITE_FILE_RECORD)
  2649  000C60  51E3               	movf	io_poll@lastCommand& (0+255),w,b
  2650  000C62  6ED9               	movwf	fsr2l,c
  2651  000C64  6ADA               	clrf	fsr2h,c
  2652  000C66  0E15               	movlw	21
  2653  000C68  18DE               	xorwf	postinc2,w,c
  2654  000C6A  E103               	bnz	l398
  2655                           
  2656                           ; BSR set to: 0
  2657                           ;main.c: 890: {
  2658                           ;main.c: 891: InitFromEeprom();
  2659  000C6C  EC85  F00E         	call	_InitFromEeprom	;wreg free
  2660  000C70  D538               	goto	l5837
  2661  000C72                     l398:
  2662  000C72  FFFF               	dw	65535	; assembler added errata NOP
  2663  000C74  0012               	return		;funcret
  2664  000C76  FFFF               	dw	65535	; errata NOP
  2665  000C78                     __end_of_io_poll:
  2666                           	opt stack 0
  2667                           tblptru	equ	0xFF8
  2668                           tblptrh	equ	0xFF7
  2669                           tblptrl	equ	0xFF6
  2670                           tablat	equ	0xFF5
  2671                           prodl	equ	0xFF3
  2672                           intcon	equ	0xFF2
  2673                           postinc0	equ	0xFEE
  2674                           wreg	equ	0xFE8
  2675                           postdec1	equ	0xFE5
  2676                           fsr1h	equ	0xFE2
  2677                           fsr1l	equ	0xFE1
  2678                           indf2	equ	0xFDF
  2679                           postinc2	equ	0xFDE
  2680                           postdec2	equ	0xFDD
  2681                           fsr2h	equ	0xFDA
  2682                           fsr2l	equ	0xFD9
  2683                           status	equ	0xFD8
  2684                           
  2685 ;; *************** function _SetTimeFromRegs *****************
  2686 ;; Defined at:
  2687 ;;		line 777 in file "main.c"
  2688 ;; Parameters:    Size  Location     Type
  2689 ;;  hourMin         1    wreg     PTR unsigned int 
  2690 ;;		 -> io_poll@hourMin(2), 
  2691 ;;  daySec          1   68[COMRAM] PTR unsigned int 
  2692 ;;		 -> io_poll@daySec(2), 
  2693 ;;  yearMonth       1   69[COMRAM] PTR unsigned int 
  2694 ;;		 -> io_poll@yearMonth(2), 
  2695 ;; Auto vars:     Size  Location     Type
  2696 ;;  hourMin         1   76[COMRAM] PTR unsigned int 
  2697 ;;		 -> io_poll@hourMin(2), 
  2698 ;;  newTime        18   77[COMRAM] struct tm
  2699 ;;  newRawTime      4   72[COMRAM] long 
  2700 ;; Return value:  Size  Location     Type
  2701 ;;                  1    wreg      void 
  2702 ;; Registers used:
  2703 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2704 ;; Tracked objects:
  2705 ;;		On entry : F/0
  2706 ;;		On exit  : 0/0
  2707 ;;		Unchanged: 0/0
  2708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2709 ;;      Params:         2       0       0       0       0       0       0
  2710 ;;      Locals:        23       0       0       0       0       0       0
  2711 ;;      Temps:          2       0       0       0       0       0       0
  2712 ;;      Totals:        27       0       0       0       0       0       0
  2713 ;;Total ram usage:       27 bytes
  2714 ;; Hardware stack levels used:    1
  2715 ;; Hardware stack levels required when called:    6
  2716 ;; This function calls:
  2717 ;;		_LightStatusLed
  2718 ;;		_LoadNextEvent
  2719 ;;		_SetHourMin
  2720 ;;		_SetTime
  2721 ;;		_mktime
  2722 ;; This function is called by:
  2723 ;;		_io_poll
  2724 ;; This function uses a non-reentrant model
  2725 ;;
  2726                           
  2727                           	psect	text3
  2728  001FD0                     __ptext3:
  2729                           	opt stack 0
  2730  001FD0                     _SetTimeFromRegs:
  2731                           	opt stack 23
  2732                           
  2733                           ;incstack = 0
  2734  001FD0  FFFF               	dw	65535
  2735                           
  2736                           ;SetTimeFromRegs@hourMin stored from wreg
  2737  001FD2  6E4D               	movwf	SetTimeFromRegs@hourMin,c
  2738                           
  2739                           ;main.c: 779: struct tm newTime;
  2740                           ;main.c: 780: newTime.tm_year = (*yearMonth >> 8) + 100;
  2741  001FD4  5046               	movf	SetTimeFromRegs@yearMonth,w,c
  2742  001FD6  6ED9               	movwf	fsr2l,c
  2743  001FD8  6ADA               	clrf	fsr2h,c
  2744  001FDA  CFDE F047          	movff	postinc2,??_SetTimeFromRegs
  2745  001FDE  CFDD F048          	movff	postdec2,??_SetTimeFromRegs+1
  2746  001FE2  C048  F047         	movff	??_SetTimeFromRegs+1,??_SetTimeFromRegs
  2747  001FE6  6A48               	clrf	??_SetTimeFromRegs+1,c
  2748  001FE8  0E64               	movlw	100
  2749  001FEA  2447               	addwf	??_SetTimeFromRegs,w,c
  2750  001FEC  6E58               	movwf	SetTimeFromRegs@newTime+10,c
  2751  001FEE  0E00               	movlw	0
  2752  001FF0  2048               	addwfc	??_SetTimeFromRegs+1,w,c
  2753  001FF2  6E59               	movwf	SetTimeFromRegs@newTime+11,c
  2754                           
  2755                           ;main.c: 781: newTime.tm_mon = *yearMonth & 0xFF;
  2756  001FF4  5046               	movf	SetTimeFromRegs@yearMonth,w,c
  2757  001FF6  6ED9               	movwf	fsr2l,c
  2758  001FF8  6ADA               	clrf	fsr2h,c
  2759  001FFA  CFDE F047          	movff	postinc2,??_SetTimeFromRegs
  2760  001FFE  CFDD F048          	movff	postdec2,??_SetTimeFromRegs+1
  2761  002002  5047               	movf	??_SetTimeFromRegs,w,c
  2762  002004  6E56               	movwf	SetTimeFromRegs@newTime+8,c
  2763  002006  6A57               	clrf	SetTimeFromRegs@newTime+9,c
  2764                           
  2765                           ;main.c: 782: newTime.tm_mday = *daySec >> 8;
  2766  002008  5045               	movf	SetTimeFromRegs@daySec,w,c
  2767  00200A  6ED9               	movwf	fsr2l,c
  2768  00200C  6ADA               	clrf	fsr2h,c
  2769  00200E  CFDE F047          	movff	postinc2,??_SetTimeFromRegs
  2770  002012  CFDD F048          	movff	postdec2,??_SetTimeFromRegs+1
  2771  002016  5048               	movf	??_SetTimeFromRegs+1,w,c
  2772  002018  6E54               	movwf	SetTimeFromRegs@newTime+6,c
  2773  00201A  6A55               	clrf	SetTimeFromRegs@newTime+7,c
  2774                           
  2775                           ;main.c: 783: newTime.tm_hour = *hourMin >> 8;
  2776  00201C  504D               	movf	SetTimeFromRegs@hourMin,w,c
  2777  00201E  6ED9               	movwf	fsr2l,c
  2778  002020  6ADA               	clrf	fsr2h,c
  2779  002022  CFDE F047          	movff	postinc2,??_SetTimeFromRegs
  2780  002026  CFDD F048          	movff	postdec2,??_SetTimeFromRegs+1
  2781  00202A  5048               	movf	??_SetTimeFromRegs+1,w,c
  2782  00202C  6E52               	movwf	SetTimeFromRegs@newTime+4,c
  2783  00202E  6A53               	clrf	SetTimeFromRegs@newTime+5,c
  2784                           
  2785                           ;main.c: 784: newTime.tm_min = *hourMin & 0xFF;
  2786  002030  504D               	movf	SetTimeFromRegs@hourMin,w,c
  2787  002032  6ED9               	movwf	fsr2l,c
  2788  002034  6ADA               	clrf	fsr2h,c
  2789  002036  CFDE F047          	movff	postinc2,??_SetTimeFromRegs
  2790  00203A  CFDD F048          	movff	postdec2,??_SetTimeFromRegs+1
  2791  00203E  5047               	movf	??_SetTimeFromRegs,w,c
  2792  002040  6E50               	movwf	SetTimeFromRegs@newTime+2,c
  2793  002042  6A51               	clrf	SetTimeFromRegs@newTime+3,c
  2794                           
  2795                           ;main.c: 785: newTime.tm_sec = *daySec & 0xFF;
  2796  002044  5045               	movf	SetTimeFromRegs@daySec,w,c
  2797  002046  6ED9               	movwf	fsr2l,c
  2798  002048  6ADA               	clrf	fsr2h,c
  2799  00204A  CFDE F047          	movff	postinc2,??_SetTimeFromRegs
  2800  00204E  CFDD F048          	movff	postdec2,??_SetTimeFromRegs+1
  2801  002052  5047               	movf	??_SetTimeFromRegs,w,c
  2802  002054  6E4E               	movwf	SetTimeFromRegs@newTime,c
  2803  002056  6A4F               	clrf	SetTimeFromRegs@newTime+1,c
  2804                           
  2805                           ;main.c: 786: SetHourMin(&newTime.tm_hour, &newTime.tm_min);
  2806  002058  0E50               	movlw	low (SetTimeFromRegs@newTime+2)
  2807  00205A  6E07               	movwf	SetHourMin@newMin,c
  2808  00205C  0E4E               	movlw	SetTimeFromRegs@newTime& (0+255)
  2809  00205E  0F04               	addlw	4
  2810  002060  EC96  F015         	call	_SetHourMin
  2811                           
  2812                           ;main.c: 787: time_t newRawTime = mktime(&newTime);
  2813  002064  0E4E               	movlw	SetTimeFromRegs@newTime& (0+255)
  2814  002066  EC3C  F006         	call	_mktime
  2815  00206A  C02E  F049         	movff	?_mktime,SetTimeFromRegs@newRawTime
  2816  00206E  C02F  F04A         	movff	?_mktime+1,SetTimeFromRegs@newRawTime+1
  2817  002072  C030  F04B         	movff	?_mktime+2,SetTimeFromRegs@newRawTime+2
  2818  002076  C031  F04C         	movff	?_mktime+3,SetTimeFromRegs@newRawTime+3
  2819                           
  2820                           ;main.c: 788: SetTime(&newRawTime);
  2821  00207A  0E49               	movlw	SetTimeFromRegs@newRawTime& (0+255)
  2822  00207C  EC87  F015         	call	_SetTime
  2823                           
  2824                           ;main.c: 789: LightStatusLed(0x05, 0, 0);
  2825  002080  0E00               	movlw	0
  2826  002082  6E07               	movwf	LightStatusLed@on,c
  2827  002084  6E08               	movwf	LightStatusLed@blink,c
  2828  002086  0E05               	movlw	5
  2829  002088  EC05  F00F         	call	_LightStatusLed
  2830                           
  2831                           ;main.c: 790: LoadNextEvent();
  2832  00208C  EF04  F012         	goto	_LoadNextEvent	;wreg free
  2833  002090  FFFF               	dw	65535	; errata NOP
  2834  002092                     __end_of_SetTimeFromRegs:
  2835                           	opt stack 0
  2836                           tblptru	equ	0xFF8
  2837                           tblptrh	equ	0xFF7
  2838                           tblptrl	equ	0xFF6
  2839                           tablat	equ	0xFF5
  2840                           prodl	equ	0xFF3
  2841                           intcon	equ	0xFF2
  2842                           postinc0	equ	0xFEE
  2843                           wreg	equ	0xFE8
  2844                           postdec1	equ	0xFE5
  2845                           fsr1h	equ	0xFE2
  2846                           fsr1l	equ	0xFE1
  2847                           indf2	equ	0xFDF
  2848                           postinc2	equ	0xFDE
  2849                           postdec2	equ	0xFDD
  2850                           fsr2h	equ	0xFDA
  2851                           fsr2l	equ	0xFD9
  2852                           status	equ	0xFD8
  2853                           
  2854 ;; *************** function _mktime *****************
  2855 ;; Defined at:
  2856 ;;		line 52 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
  2857 ;; Parameters:    Size  Location     Type
  2858 ;;  timeptr         1    wreg     PTR struct tm
  2859 ;;		 -> SetTimeFromRegs@newTime(18), 
  2860 ;; Auto vars:     Size  Location     Type
  2861 ;;  timeptr         1   67[COMRAM] PTR struct tm
  2862 ;;		 -> SetTimeFromRegs@newTime(18), 
  2863 ;;  tt              4   63[COMRAM] long 
  2864 ;; Return value:  Size  Location     Type
  2865 ;;                  4   45[COMRAM] long 
  2866 ;; Registers used:
  2867 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2868 ;; Tracked objects:
  2869 ;;		On entry : 0/0
  2870 ;;		On exit  : 0/0
  2871 ;;		Unchanged: 0/0
  2872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2873 ;;      Params:         4       0       0       0       0       0       0
  2874 ;;      Locals:         5       0       0       0       0       0       0
  2875 ;;      Temps:         14       0       0       0       0       0       0
  2876 ;;      Totals:        23       0       0       0       0       0       0
  2877 ;;Total ram usage:       23 bytes
  2878 ;; Hardware stack levels used:    1
  2879 ;; Hardware stack levels required when called:    5
  2880 ;; This function calls:
  2881 ;;		_ymd_to_scalar
  2882 ;; This function is called by:
  2883 ;;		_SetTimeFromRegs
  2884 ;; This function uses a non-reentrant model
  2885 ;;
  2886                           
  2887                           	psect	text4
  2888  000C78                     __ptext4:
  2889                           	opt stack 0
  2890  000C78                     _mktime:
  2891                           	opt stack 23
  2892                           
  2893                           ;incstack = 0
  2894  000C78  FFFF               	dw	65535
  2895                           
  2896                           ;mktime@timeptr stored from wreg
  2897  000C7A  6E44               	movwf	mktime@timeptr,c
  2898  000C7C  5044               	movf	mktime@timeptr,w,c
  2899  000C7E  6ED9               	movwf	fsr2l,c
  2900  000C80  6ADA               	clrf	fsr2h,c
  2901  000C82  0E0A               	movlw	10
  2902  000C84  26D9               	addwf	fsr2l,f,c
  2903  000C86  0E01               	movlw	1
  2904  000C88  BEDB               	btfsc	plusw2,7,c
  2905  000C8A  D012               	goto	l1324
  2906  000C8C  50DB               	movf	plusw2,w,c
  2907  000C8E  E103               	bnz	u5610
  2908  000C90  0E46               	movlw	70
  2909  000C92  5CDE               	subwf	postinc2,w,c
  2910  000C94  E30D               	bnc	l1324
  2911  000C96                     u5610:
  2912  000C96  5044               	movf	mktime@timeptr,w,c
  2913  000C98  6ED9               	movwf	fsr2l,c
  2914  000C9A  6ADA               	clrf	fsr2h,c
  2915  000C9C  0E0A               	movlw	10
  2916  000C9E  26D9               	addwf	fsr2l,f,c
  2917  000CA0  0E01               	movlw	1
  2918  000CA2  BEDB               	btfsc	plusw2,7,c
  2919  000CA4  D00B               	goto	l5597
  2920  000CA6  50DB               	movf	plusw2,w,c
  2921  000CA8  E103               	bnz	u5620
  2922  000CAA  0E8B               	movlw	139
  2923  000CAC  5CDE               	subwf	postinc2,w,c
  2924  000CAE  E306               	bnc	l5597
  2925  000CB0                     u5620:
  2926  000CB0                     l1324:
  2927  000CB0  FFFF               	dw	65535	; assembler added errata NOP
  2928  000CB2  6840               	setf	mktime@tt,c
  2929  000CB4  6841               	setf	mktime@tt+1,c
  2930  000CB6  6842               	setf	mktime@tt+2,c
  2931  000CB8  6843               	setf	mktime@tt+3,c
  2932  000CBA  D15C               	goto	l5607
  2933  000CBC                     l5597:
  2934  000CBC  FFFF               	dw	65535	; assembler added errata NOP
  2935  000CBE  5044               	movf	mktime@timeptr,w,c
  2936  000CC0  6ED9               	movwf	fsr2l,c
  2937  000CC2  6ADA               	clrf	fsr2h,c
  2938  000CC4  0E0A               	movlw	10
  2939  000CC6  26D9               	addwf	fsr2l,f,c
  2940  000CC8  CFDE F032          	movff	postinc2,??_mktime
  2941  000CCC  CFDD F033          	movff	postdec2,??_mktime+1
  2942  000CD0  0E6C               	movlw	108
  2943  000CD2  2432               	addwf	??_mktime,w,c
  2944  000CD4  6E1E               	movwf	ymd_to_scalar@yr,c
  2945  000CD6  0E07               	movlw	7
  2946  000CD8  2033               	addwfc	??_mktime+1,w,c
  2947  000CDA  6E1F               	movwf	ymd_to_scalar@yr+1,c
  2948  000CDC  5044               	movf	mktime@timeptr,w,c
  2949  000CDE  6ED9               	movwf	fsr2l,c
  2950  000CE0  6ADA               	clrf	fsr2h,c
  2951  000CE2  0E08               	movlw	8
  2952  000CE4  26D9               	addwf	fsr2l,f,c
  2953  000CE6  CFDE F034          	movff	postinc2,??_mktime+2
  2954  000CEA  CFDD F035          	movff	postdec2,??_mktime+3
  2955  000CEE  2834               	incf	??_mktime+2,w,c
  2956  000CF0  6E20               	movwf	ymd_to_scalar@mo,c
  2957  000CF2  0E00               	movlw	0
  2958  000CF4  2035               	addwfc	??_mktime+3,w,c
  2959  000CF6  6E21               	movwf	ymd_to_scalar@mo+1,c
  2960  000CF8  5044               	movf	mktime@timeptr,w,c
  2961  000CFA  6ED9               	movwf	fsr2l,c
  2962  000CFC  6ADA               	clrf	fsr2h,c
  2963  000CFE  0E06               	movlw	6
  2964  000D00  26D9               	addwf	fsr2l,f,c
  2965  000D02  CFDE F022          	movff	postinc2,ymd_to_scalar@day
  2966  000D06  CFDD F023          	movff	postdec2,ymd_to_scalar@day+1
  2967  000D0A  ECB2  F011         	call	_ymd_to_scalar	;wreg free
  2968  000D0E  C01E  F040         	movff	?_ymd_to_scalar,mktime@tt
  2969  000D12  C01F  F041         	movff	?_ymd_to_scalar+1,mktime@tt+1
  2970  000D16  C020  F042         	movff	?_ymd_to_scalar+2,mktime@tt+2
  2971  000D1A  C021  F043         	movff	?_ymd_to_scalar+3,mktime@tt+3
  2972  000D1E  0E07               	movlw	7
  2973  000D20  6E1F               	movwf	ymd_to_scalar@yr+1,c
  2974  000D22  0EB2               	movlw	178
  2975  000D24  6E1E               	movwf	ymd_to_scalar@yr,c
  2976  000D26  6A21               	clrf	ymd_to_scalar@mo+1,c
  2977  000D28  0E01               	movlw	1
  2978  000D2A  6E20               	movwf	ymd_to_scalar@mo,c
  2979  000D2C  6A23               	clrf	ymd_to_scalar@day+1,c
  2980  000D2E  6E22               	movwf	ymd_to_scalar@day,c
  2981  000D30  ECB2  F011         	call	_ymd_to_scalar	;wreg free
  2982  000D34  501E               	movf	?_ymd_to_scalar,w,c
  2983  000D36  5E40               	subwf	mktime@tt,f,c
  2984  000D38  501F               	movf	?_ymd_to_scalar+1,w,c
  2985  000D3A  5A41               	subwfb	mktime@tt+1,f,c
  2986  000D3C  5020               	movf	?_ymd_to_scalar+2,w,c
  2987  000D3E  5A42               	subwfb	mktime@tt+2,f,c
  2988  000D40  5021               	movf	?_ymd_to_scalar+3,w,c
  2989  000D42  5A43               	subwfb	mktime@tt+3,f,c
  2990  000D44  5044               	movf	mktime@timeptr,w,c
  2991  000D46  6ED9               	movwf	fsr2l,c
  2992  000D48  6ADA               	clrf	fsr2h,c
  2993  000D4A  0E04               	movlw	4
  2994  000D4C  26D9               	addwf	fsr2l,f,c
  2995  000D4E  CFDE F032          	movff	postinc2,??_mktime
  2996  000D52  CFDD F033          	movff	postdec2,??_mktime+1
  2997  000D56  C032  F034         	movff	??_mktime,??_mktime+2
  2998  000D5A  C033  F035         	movff	??_mktime+1,??_mktime+3
  2999  000D5E  0E00               	movlw	0
  3000  000D60  BE35               	btfsc	(??_mktime+3)& (0+255),7,c
  3001  000D62  0EFF               	movlw	255
  3002  000D64  6E36               	movwf	(??_mktime+4)& (0+255),c
  3003  000D66  6E37               	movwf	(??_mktime+5)& (0+255),c
  3004  000D68  C040  F038         	movff	mktime@tt,??_mktime+6
  3005  000D6C  C041  F039         	movff	mktime@tt+1,??_mktime+7
  3006  000D70  C042  F03A         	movff	mktime@tt+2,??_mktime+8
  3007  000D74  C043  F03B         	movff	mktime@tt+3,??_mktime+9
  3008  000D78  0E18               	movlw	24
  3009  000D7A  0238               	mulwf	(??_mktime+6)& (0+255),c
  3010  000D7C  CFF3 F03C          	movff	prodl,??_mktime+10
  3011  000D80  CFF4 F03D          	movff	prodh,??_mktime+11
  3012  000D84  6A3E               	clrf	(??_mktime+12)& (0+255),c
  3013  000D86  6A3F               	clrf	(??_mktime+13)& (0+255),c
  3014  000D88  0239               	mulwf	(??_mktime+7)& (0+255),c
  3015  000D8A  50F3               	movf	prodl,w,c
  3016  000D8C  263D               	addwf	(??_mktime+11)& (0+255),f,c
  3017  000D8E  50F4               	movf	prodh,w,c
  3018  000D90  223E               	addwfc	(??_mktime+12)& (0+255),f,c
  3019  000D92  0E00               	movlw	0
  3020  000D94  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  3021  000D96  0238               	mulwf	(??_mktime+6)& (0+255),c
  3022  000D98  50F3               	movf	prodl,w,c
  3023  000D9A  263D               	addwf	(??_mktime+11)& (0+255),f,c
  3024  000D9C  50F4               	movf	prodh,w,c
  3025  000D9E  223E               	addwfc	(??_mktime+12)& (0+255),f,c
  3026  000DA0  0E00               	movlw	0
  3027  000DA2  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  3028  000DA4  0E18               	movlw	24
  3029  000DA6  023A               	mulwf	(??_mktime+8)& (0+255),c
  3030  000DA8  50F3               	movf	prodl,w,c
  3031  000DAA  263E               	addwf	(??_mktime+12)& (0+255),f,c
  3032  000DAC  50F4               	movf	prodh,w,c
  3033  000DAE  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  3034  000DB0  0E00               	movlw	0
  3035  000DB2  0239               	mulwf	(??_mktime+7)& (0+255),c
  3036  000DB4  50F3               	movf	prodl,w,c
  3037  000DB6  263E               	addwf	(??_mktime+12)& (0+255),f,c
  3038  000DB8  50F4               	movf	prodh,w,c
  3039  000DBA  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  3040  000DBC  0E00               	movlw	0
  3041  000DBE  0238               	mulwf	(??_mktime+6)& (0+255),c
  3042  000DC0  50F3               	movf	prodl,w,c
  3043  000DC2  263E               	addwf	(??_mktime+12)& (0+255),f,c
  3044  000DC4  50F4               	movf	prodh,w,c
  3045  000DC6  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  3046  000DC8  0E18               	movlw	24
  3047  000DCA  023B               	mulwf	(??_mktime+9)& (0+255),c
  3048  000DCC  50F3               	movf	prodl,w,c
  3049  000DCE  263F               	addwf	(??_mktime+13)& (0+255),f,c
  3050  000DD0  0E00               	movlw	0
  3051  000DD2  023A               	mulwf	(??_mktime+8)& (0+255),c
  3052  000DD4  50F3               	movf	prodl,w,c
  3053  000DD6  263F               	addwf	(??_mktime+13)& (0+255),f,c
  3054  000DD8  0E00               	movlw	0
  3055  000DDA  0239               	mulwf	(??_mktime+7)& (0+255),c
  3056  000DDC  50F3               	movf	prodl,w,c
  3057  000DDE  263F               	addwf	(??_mktime+13)& (0+255),f,c
  3058  000DE0  0E00               	movlw	0
  3059  000DE2  0238               	mulwf	(??_mktime+6)& (0+255),c
  3060  000DE4  50F3               	movf	prodl,w,c
  3061  000DE6  263F               	addwf	(??_mktime+13)& (0+255),f,c
  3062  000DE8  5034               	movf	??_mktime+2,w,c
  3063  000DEA  243C               	addwf	??_mktime+10,w,c
  3064  000DEC  6E40               	movwf	mktime@tt,c
  3065  000DEE  5035               	movf	??_mktime+3,w,c
  3066  000DF0  203D               	addwfc	??_mktime+11,w,c
  3067  000DF2  6E41               	movwf	mktime@tt+1,c
  3068  000DF4  5036               	movf	??_mktime+4,w,c
  3069  000DF6  203E               	addwfc	??_mktime+12,w,c
  3070  000DF8  6E42               	movwf	mktime@tt+2,c
  3071  000DFA  5037               	movf	??_mktime+5,w,c
  3072  000DFC  203F               	addwfc	??_mktime+13,w,c
  3073  000DFE  6E43               	movwf	mktime@tt+3,c
  3074  000E00  5044               	movf	mktime@timeptr,w,c
  3075  000E02  6ED9               	movwf	fsr2l,c
  3076  000E04  6ADA               	clrf	fsr2h,c
  3077  000E06  0E02               	movlw	2
  3078  000E08  26D9               	addwf	fsr2l,f,c
  3079  000E0A  CFDE F032          	movff	postinc2,??_mktime
  3080  000E0E  CFDD F033          	movff	postdec2,??_mktime+1
  3081  000E12  C032  F034         	movff	??_mktime,??_mktime+2
  3082  000E16  C033  F035         	movff	??_mktime+1,??_mktime+3
  3083  000E1A  0E00               	movlw	0
  3084  000E1C  BE35               	btfsc	(??_mktime+3)& (0+255),7,c
  3085  000E1E  0EFF               	movlw	255
  3086  000E20  6E36               	movwf	(??_mktime+4)& (0+255),c
  3087  000E22  6E37               	movwf	(??_mktime+5)& (0+255),c
  3088  000E24  C040  F038         	movff	mktime@tt,??_mktime+6
  3089  000E28  C041  F039         	movff	mktime@tt+1,??_mktime+7
  3090  000E2C  C042  F03A         	movff	mktime@tt+2,??_mktime+8
  3091  000E30  C043  F03B         	movff	mktime@tt+3,??_mktime+9
  3092  000E34  0E3C               	movlw	60
  3093  000E36  0238               	mulwf	(??_mktime+6)& (0+255),c
  3094  000E38  CFF3 F03C          	movff	prodl,??_mktime+10
  3095  000E3C  CFF4 F03D          	movff	prodh,??_mktime+11
  3096  000E40  6A3E               	clrf	(??_mktime+12)& (0+255),c
  3097  000E42  6A3F               	clrf	(??_mktime+13)& (0+255),c
  3098  000E44  0239               	mulwf	(??_mktime+7)& (0+255),c
  3099  000E46  50F3               	movf	prodl,w,c
  3100  000E48  263D               	addwf	(??_mktime+11)& (0+255),f,c
  3101  000E4A  50F4               	movf	prodh,w,c
  3102  000E4C  223E               	addwfc	(??_mktime+12)& (0+255),f,c
  3103  000E4E  0E00               	movlw	0
  3104  000E50  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  3105  000E52  0238               	mulwf	(??_mktime+6)& (0+255),c
  3106  000E54  50F3               	movf	prodl,w,c
  3107  000E56  263D               	addwf	(??_mktime+11)& (0+255),f,c
  3108  000E58  50F4               	movf	prodh,w,c
  3109  000E5A  223E               	addwfc	(??_mktime+12)& (0+255),f,c
  3110  000E5C  0E00               	movlw	0
  3111  000E5E  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  3112  000E60  0E3C               	movlw	60
  3113  000E62  023A               	mulwf	(??_mktime+8)& (0+255),c
  3114  000E64  50F3               	movf	prodl,w,c
  3115  000E66  263E               	addwf	(??_mktime+12)& (0+255),f,c
  3116  000E68  50F4               	movf	prodh,w,c
  3117  000E6A  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  3118  000E6C  0E00               	movlw	0
  3119  000E6E  0239               	mulwf	(??_mktime+7)& (0+255),c
  3120  000E70  50F3               	movf	prodl,w,c
  3121  000E72  263E               	addwf	(??_mktime+12)& (0+255),f,c
  3122  000E74  50F4               	movf	prodh,w,c
  3123  000E76  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  3124  000E78  0E00               	movlw	0
  3125  000E7A  0238               	mulwf	(??_mktime+6)& (0+255),c
  3126  000E7C  50F3               	movf	prodl,w,c
  3127  000E7E  263E               	addwf	(??_mktime+12)& (0+255),f,c
  3128  000E80  50F4               	movf	prodh,w,c
  3129  000E82  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  3130  000E84  0E3C               	movlw	60
  3131  000E86  023B               	mulwf	(??_mktime+9)& (0+255),c
  3132  000E88  50F3               	movf	prodl,w,c
  3133  000E8A  263F               	addwf	(??_mktime+13)& (0+255),f,c
  3134  000E8C  0E00               	movlw	0
  3135  000E8E  023A               	mulwf	(??_mktime+8)& (0+255),c
  3136  000E90  50F3               	movf	prodl,w,c
  3137  000E92  263F               	addwf	(??_mktime+13)& (0+255),f,c
  3138  000E94  0E00               	movlw	0
  3139  000E96  0239               	mulwf	(??_mktime+7)& (0+255),c
  3140  000E98  50F3               	movf	prodl,w,c
  3141  000E9A  263F               	addwf	(??_mktime+13)& (0+255),f,c
  3142  000E9C  0E00               	movlw	0
  3143  000E9E  0238               	mulwf	(??_mktime+6)& (0+255),c
  3144  000EA0  50F3               	movf	prodl,w,c
  3145  000EA2  263F               	addwf	(??_mktime+13)& (0+255),f,c
  3146  000EA4  5034               	movf	??_mktime+2,w,c
  3147  000EA6  243C               	addwf	??_mktime+10,w,c
  3148  000EA8  6E40               	movwf	mktime@tt,c
  3149  000EAA  5035               	movf	??_mktime+3,w,c
  3150  000EAC  203D               	addwfc	??_mktime+11,w,c
  3151  000EAE  6E41               	movwf	mktime@tt+1,c
  3152  000EB0  5036               	movf	??_mktime+4,w,c
  3153  000EB2  203E               	addwfc	??_mktime+12,w,c
  3154  000EB4  6E42               	movwf	mktime@tt+2,c
  3155  000EB6  5037               	movf	??_mktime+5,w,c
  3156  000EB8  203F               	addwfc	??_mktime+13,w,c
  3157  000EBA  6E43               	movwf	mktime@tt+3,c
  3158  000EBC  5044               	movf	mktime@timeptr,w,c
  3159  000EBE  6ED9               	movwf	fsr2l,c
  3160  000EC0  6ADA               	clrf	fsr2h,c
  3161  000EC2  CFDE F032          	movff	postinc2,??_mktime
  3162  000EC6  CFDD F033          	movff	postdec2,??_mktime+1
  3163  000ECA  C032  F034         	movff	??_mktime,??_mktime+2
  3164  000ECE  C033  F035         	movff	??_mktime+1,??_mktime+3
  3165  000ED2  0E00               	movlw	0
  3166  000ED4  BE35               	btfsc	(??_mktime+3)& (0+255),7,c
  3167  000ED6  0EFF               	movlw	255
  3168  000ED8  6E36               	movwf	(??_mktime+4)& (0+255),c
  3169  000EDA  6E37               	movwf	(??_mktime+5)& (0+255),c
  3170  000EDC  C040  F038         	movff	mktime@tt,??_mktime+6
  3171  000EE0  C041  F039         	movff	mktime@tt+1,??_mktime+7
  3172  000EE4  C042  F03A         	movff	mktime@tt+2,??_mktime+8
  3173  000EE8  C043  F03B         	movff	mktime@tt+3,??_mktime+9
  3174  000EEC  0E3C               	movlw	60
  3175  000EEE  0238               	mulwf	(??_mktime+6)& (0+255),c
  3176  000EF0  CFF3 F03C          	movff	prodl,??_mktime+10
  3177  000EF4  CFF4 F03D          	movff	prodh,??_mktime+11
  3178  000EF8  6A3E               	clrf	(??_mktime+12)& (0+255),c
  3179  000EFA  6A3F               	clrf	(??_mktime+13)& (0+255),c
  3180  000EFC  0239               	mulwf	(??_mktime+7)& (0+255),c
  3181  000EFE  50F3               	movf	prodl,w,c
  3182  000F00  263D               	addwf	(??_mktime+11)& (0+255),f,c
  3183  000F02  50F4               	movf	prodh,w,c
  3184  000F04  223E               	addwfc	(??_mktime+12)& (0+255),f,c
  3185  000F06  0E00               	movlw	0
  3186  000F08  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  3187  000F0A  0238               	mulwf	(??_mktime+6)& (0+255),c
  3188  000F0C  50F3               	movf	prodl,w,c
  3189  000F0E  263D               	addwf	(??_mktime+11)& (0+255),f,c
  3190  000F10  50F4               	movf	prodh,w,c
  3191  000F12  223E               	addwfc	(??_mktime+12)& (0+255),f,c
  3192  000F14  0E00               	movlw	0
  3193  000F16  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  3194  000F18  0E3C               	movlw	60
  3195  000F1A  023A               	mulwf	(??_mktime+8)& (0+255),c
  3196  000F1C  50F3               	movf	prodl,w,c
  3197  000F1E  263E               	addwf	(??_mktime+12)& (0+255),f,c
  3198  000F20  50F4               	movf	prodh,w,c
  3199  000F22  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  3200  000F24  0E00               	movlw	0
  3201  000F26  0239               	mulwf	(??_mktime+7)& (0+255),c
  3202  000F28  50F3               	movf	prodl,w,c
  3203  000F2A  263E               	addwf	(??_mktime+12)& (0+255),f,c
  3204  000F2C  50F4               	movf	prodh,w,c
  3205  000F2E  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  3206  000F30  0E00               	movlw	0
  3207  000F32  0238               	mulwf	(??_mktime+6)& (0+255),c
  3208  000F34  50F3               	movf	prodl,w,c
  3209  000F36  263E               	addwf	(??_mktime+12)& (0+255),f,c
  3210  000F38  50F4               	movf	prodh,w,c
  3211  000F3A  223F               	addwfc	(??_mktime+13)& (0+255),f,c
  3212  000F3C  0E3C               	movlw	60
  3213  000F3E  023B               	mulwf	(??_mktime+9)& (0+255),c
  3214  000F40  50F3               	movf	prodl,w,c
  3215  000F42  263F               	addwf	(??_mktime+13)& (0+255),f,c
  3216  000F44  0E00               	movlw	0
  3217  000F46  023A               	mulwf	(??_mktime+8)& (0+255),c
  3218  000F48  50F3               	movf	prodl,w,c
  3219  000F4A  263F               	addwf	(??_mktime+13)& (0+255),f,c
  3220  000F4C  0E00               	movlw	0
  3221  000F4E  0239               	mulwf	(??_mktime+7)& (0+255),c
  3222  000F50  50F3               	movf	prodl,w,c
  3223  000F52  263F               	addwf	(??_mktime+13)& (0+255),f,c
  3224  000F54  0E00               	movlw	0
  3225  000F56  0238               	mulwf	(??_mktime+6)& (0+255),c
  3226  000F58  50F3               	movf	prodl,w,c
  3227  000F5A  263F               	addwf	(??_mktime+13)& (0+255),f,c
  3228  000F5C  5034               	movf	??_mktime+2,w,c
  3229  000F5E  243C               	addwf	??_mktime+10,w,c
  3230  000F60  6E40               	movwf	mktime@tt,c
  3231  000F62  5035               	movf	??_mktime+3,w,c
  3232  000F64  203D               	addwfc	??_mktime+11,w,c
  3233  000F66  6E41               	movwf	mktime@tt+1,c
  3234  000F68  5036               	movf	??_mktime+4,w,c
  3235  000F6A  203E               	addwfc	??_mktime+12,w,c
  3236  000F6C  6E42               	movwf	mktime@tt+2,c
  3237  000F6E  5037               	movf	??_mktime+5,w,c
  3238  000F70  203F               	addwfc	??_mktime+13,w,c
  3239  000F72  6E43               	movwf	mktime@tt+3,c
  3240  000F74                     l5607:
  3241  000F74  FFFF               	dw	65535	; assembler added errata NOP
  3242  000F76  C040  F02E         	movff	mktime@tt,?_mktime
  3243  000F7A  C041  F02F         	movff	mktime@tt+1,?_mktime+1
  3244  000F7E  C042  F030         	movff	mktime@tt+2,?_mktime+2
  3245  000F82  C043  F031         	movff	mktime@tt+3,?_mktime+3
  3246  000F86  0012               	return		;funcret
  3247  000F88  FFFF               	dw	65535	; errata NOP
  3248  000F8A                     __end_of_mktime:
  3249                           	opt stack 0
  3250                           tblptru	equ	0xFF8
  3251                           tblptrh	equ	0xFF7
  3252                           tblptrl	equ	0xFF6
  3253                           tablat	equ	0xFF5
  3254                           prodh	equ	0xFF4
  3255                           prodl	equ	0xFF3
  3256                           intcon	equ	0xFF2
  3257                           postinc0	equ	0xFEE
  3258                           wreg	equ	0xFE8
  3259                           postdec1	equ	0xFE5
  3260                           fsr1h	equ	0xFE2
  3261                           fsr1l	equ	0xFE1
  3262                           indf2	equ	0xFDF
  3263                           postinc2	equ	0xFDE
  3264                           postdec2	equ	0xFDD
  3265                           plusw2	equ	0xFDB
  3266                           fsr2h	equ	0xFDA
  3267                           fsr2l	equ	0xFD9
  3268                           status	equ	0xFD8
  3269                           
  3270 ;; *************** function _ymd_to_scalar *****************
  3271 ;; Defined at:
  3272 ;;		line 40 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
  3273 ;; Parameters:    Size  Location     Type
  3274 ;;  yr              2   29[COMRAM] unsigned int 
  3275 ;;  mo              2   31[COMRAM] unsigned int 
  3276 ;;  day             2   33[COMRAM] unsigned int 
  3277 ;; Auto vars:     Size  Location     Type
  3278 ;;  scalar          4   41[COMRAM] long 
  3279 ;; Return value:  Size  Location     Type
  3280 ;;                  4   29[COMRAM] long 
  3281 ;; Registers used:
  3282 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3283 ;; Tracked objects:
  3284 ;;		On entry : 0/0
  3285 ;;		On exit  : 0/0
  3286 ;;		Unchanged: 0/0
  3287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3288 ;;      Params:         6       0       0       0       0       0       0
  3289 ;;      Locals:         6       0       0       0       0       0       0
  3290 ;;      Temps:          4       0       0       0       0       0       0
  3291 ;;      Totals:        16       0       0       0       0       0       0
  3292 ;;Total ram usage:       16 bytes
  3293 ;; Hardware stack levels used:    1
  3294 ;; Hardware stack levels required when called:    4
  3295 ;; This function calls:
  3296 ;;		_isleap
  3297 ;;		_months_to_days
  3298 ;;		_years_to_days
  3299 ;; This function is called by:
  3300 ;;		_mktime
  3301 ;; This function uses a non-reentrant model
  3302 ;;
  3303                           
  3304                           	psect	text5
  3305  002364                     __ptext5:
  3306                           	opt stack 0
  3307  002364                     _ymd_to_scalar:
  3308                           	opt stack 23
  3309                           
  3310                           ;incstack = 0
  3311  002364  FFFF               	dw	65535
  3312  002366  C020  F00E         	movff	ymd_to_scalar@mo,months_to_days@month
  3313  00236A  C021  F00F         	movff	ymd_to_scalar@mo+1,months_to_days@month+1
  3314  00236E  EC60  F014         	call	_months_to_days	;wreg free
  3315  002372  5022               	movf	ymd_to_scalar@day,w,c
  3316  002374  260E               	addwf	?_months_to_days,f,c
  3317  002376  5023               	movf	ymd_to_scalar@day+1,w,c
  3318  002378  220F               	addwfc	?_months_to_days+1,f,c
  3319  00237A  C00E  F02A         	movff	?_months_to_days,ymd_to_scalar@scalar
  3320  00237E  C00F  F02B         	movff	?_months_to_days+1,ymd_to_scalar@scalar+1
  3321  002382  6A2C               	clrf	ymd_to_scalar@scalar+2,c
  3322  002384  6A2D               	clrf	ymd_to_scalar@scalar+3,c
  3323  002386  5021               	movf	ymd_to_scalar@mo+1,w,c
  3324  002388  E103               	bnz	u5380
  3325  00238A  0E03               	movlw	3
  3326  00238C  5C20               	subwf	ymd_to_scalar@mo,w,c
  3327  00238E  E321               	bnc	l5503
  3328  002390                     u5380:
  3329  002390  C01E  F00C         	movff	ymd_to_scalar@yr,isleap@yr
  3330  002394  C01F  F00D         	movff	ymd_to_scalar@yr+1,isleap@yr+1
  3331  002398  ECF0  F013         	call	_isleap	;wreg free
  3332  00239C  500C               	movf	?_isleap,w,c
  3333  00239E  100D               	iorwf	?_isleap+1,w,c
  3334  0023A0  E103               	bnz	l5499
  3335  0023A2  6A29               	clrf	_ymd_to_scalar$2103+1,c
  3336  0023A4  0E02               	movlw	2
  3337  0023A6  D002               	goto	L1
  3338  0023A8                     l5499:
  3339  0023A8  6A29               	clrf	_ymd_to_scalar$2103+1,c
  3340  0023AA  0E01               	movlw	1
  3341  0023AC                     L1:
  3342  0023AC  FFFF               	dw	65535	; assembler added errata NOP
  3343  0023AE  6E28               	movwf	_ymd_to_scalar$2103,c
  3344  0023B0  C028  F024         	movff	_ymd_to_scalar$2103,??_ymd_to_scalar
  3345  0023B4  C029  F025         	movff	_ymd_to_scalar$2103+1,??_ymd_to_scalar+1
  3346  0023B8  0E00               	movlw	0
  3347  0023BA  BE25               	btfsc	(??_ymd_to_scalar+1)& (0+255),7,c
  3348  0023BC  0EFF               	movlw	255
  3349  0023BE  6E26               	movwf	(??_ymd_to_scalar+2)& (0+255),c
  3350  0023C0  6E27               	movwf	(??_ymd_to_scalar+3)& (0+255),c
  3351  0023C2  5024               	movf	??_ymd_to_scalar,w,c
  3352  0023C4  5E2A               	subwf	ymd_to_scalar@scalar,f,c
  3353  0023C6  5025               	movf	??_ymd_to_scalar+1,w,c
  3354  0023C8  5A2B               	subwfb	ymd_to_scalar@scalar+1,f,c
  3355  0023CA  5026               	movf	??_ymd_to_scalar+2,w,c
  3356  0023CC  5A2C               	subwfb	ymd_to_scalar@scalar+2,f,c
  3357  0023CE  5027               	movf	??_ymd_to_scalar+3,w,c
  3358  0023D0  5A2D               	subwfb	ymd_to_scalar@scalar+3,f,c
  3359  0023D2                     l5503:
  3360  0023D2  061E               	decf	ymd_to_scalar@yr,f,c
  3361  0023D4  A0D8               	btfss	status,0,c
  3362  0023D6  061F               	decf	ymd_to_scalar@yr+1,f,c
  3363  0023D8  C01E  F00E         	movff	ymd_to_scalar@yr,years_to_days@yr
  3364  0023DC  C01F  F00F         	movff	ymd_to_scalar@yr+1,years_to_days@yr+1
  3365  0023E0  EC04  F00E         	call	_years_to_days	;wreg free
  3366  0023E4  500E               	movf	?_years_to_days,w,c
  3367  0023E6  262A               	addwf	ymd_to_scalar@scalar,f,c
  3368  0023E8  500F               	movf	?_years_to_days+1,w,c
  3369  0023EA  222B               	addwfc	ymd_to_scalar@scalar+1,f,c
  3370  0023EC  5010               	movf	?_years_to_days+2,w,c
  3371  0023EE  222C               	addwfc	ymd_to_scalar@scalar+2,f,c
  3372  0023F0  5011               	movf	?_years_to_days+3,w,c
  3373  0023F2  222D               	addwfc	ymd_to_scalar@scalar+3,f,c
  3374  0023F4  C02A  F01E         	movff	ymd_to_scalar@scalar,?_ymd_to_scalar
  3375  0023F8  C02B  F01F         	movff	ymd_to_scalar@scalar+1,?_ymd_to_scalar+1
  3376  0023FC  C02C  F020         	movff	ymd_to_scalar@scalar+2,?_ymd_to_scalar+2
  3377  002400  C02D  F021         	movff	ymd_to_scalar@scalar+3,?_ymd_to_scalar+3
  3378  002404  0012               	return		;funcret
  3379  002406  FFFF               	dw	65535	; errata NOP
  3380  002408                     __end_of_ymd_to_scalar:
  3381                           	opt stack 0
  3382                           tblptru	equ	0xFF8
  3383                           tblptrh	equ	0xFF7
  3384                           tblptrl	equ	0xFF6
  3385                           tablat	equ	0xFF5
  3386                           prodh	equ	0xFF4
  3387                           prodl	equ	0xFF3
  3388                           intcon	equ	0xFF2
  3389                           postinc0	equ	0xFEE
  3390                           wreg	equ	0xFE8
  3391                           postdec1	equ	0xFE5
  3392                           fsr1h	equ	0xFE2
  3393                           fsr1l	equ	0xFE1
  3394                           indf2	equ	0xFDF
  3395                           postinc2	equ	0xFDE
  3396                           postdec2	equ	0xFDD
  3397                           plusw2	equ	0xFDB
  3398                           fsr2h	equ	0xFDA
  3399                           fsr2l	equ	0xFD9
  3400                           status	equ	0xFD8
  3401                           
  3402 ;; *************** function _years_to_days *****************
  3403 ;; Defined at:
  3404 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
  3405 ;; Parameters:    Size  Location     Type
  3406 ;;  yr              2   13[COMRAM] unsigned int 
  3407 ;; Auto vars:     Size  Location     Type
  3408 ;;  ret             4   25[COMRAM] long 
  3409 ;; Return value:  Size  Location     Type
  3410 ;;                  4   13[COMRAM] long 
  3411 ;; Registers used:
  3412 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3413 ;; Tracked objects:
  3414 ;;		On entry : 0/0
  3415 ;;		On exit  : 0/0
  3416 ;;		Unchanged: 0/0
  3417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3418 ;;      Params:         4       0       0       0       0       0       0
  3419 ;;      Locals:         4       0       0       0       0       0       0
  3420 ;;      Temps:          8       0       0       0       0       0       0
  3421 ;;      Totals:        16       0       0       0       0       0       0
  3422 ;;Total ram usage:       16 bytes
  3423 ;; Hardware stack levels used:    1
  3424 ;; Hardware stack levels required when called:    3
  3425 ;; This function calls:
  3426 ;;		___lwdiv
  3427 ;; This function is called by:
  3428 ;;		_ymd_to_scalar
  3429 ;; This function uses a non-reentrant model
  3430 ;;
  3431                           
  3432                           	psect	text6
  3433  001C08                     __ptext6:
  3434                           	opt stack 0
  3435  001C08                     _years_to_days:
  3436                           	opt stack 23
  3437                           
  3438                           ;incstack = 0
  3439  001C08  FFFF               	dw	65535
  3440  001C0A  500E               	movf	years_to_days@yr,w,c
  3441  001C0C  6E12               	movwf	??_years_to_days& (0+255),c
  3442  001C0E  500F               	movf	years_to_days@yr+1,w,c
  3443  001C10  6E13               	movwf	(??_years_to_days+1)& (0+255),c
  3444  001C12  6A14               	clrf	(??_years_to_days+2)& (0+255),c
  3445  001C14  6A15               	clrf	(??_years_to_days+3)& (0+255),c
  3446  001C16  0E6D               	movlw	109
  3447  001C18  0212               	mulwf	??_years_to_days& (0+255),c
  3448  001C1A  CFF3 F016          	movff	prodl,??_years_to_days+4
  3449  001C1E  CFF4 F017          	movff	prodh,??_years_to_days+5
  3450  001C22  6A18               	clrf	(??_years_to_days+6)& (0+255),c
  3451  001C24  6A19               	clrf	(??_years_to_days+7)& (0+255),c
  3452  001C26  0213               	mulwf	(??_years_to_days+1)& (0+255),c
  3453  001C28  50F3               	movf	prodl,w,c
  3454  001C2A  2617               	addwf	(??_years_to_days+5)& (0+255),f,c
  3455  001C2C  50F4               	movf	prodh,w,c
  3456  001C2E  2218               	addwfc	(??_years_to_days+6)& (0+255),f,c
  3457  001C30  0E00               	movlw	0
  3458  001C32  2219               	addwfc	(??_years_to_days+7)& (0+255),f,c
  3459  001C34  0E01               	movlw	1
  3460  001C36  0212               	mulwf	??_years_to_days& (0+255),c
  3461  001C38  50F3               	movf	prodl,w,c
  3462  001C3A  2617               	addwf	(??_years_to_days+5)& (0+255),f,c
  3463  001C3C  50F4               	movf	prodh,w,c
  3464  001C3E  2218               	addwfc	(??_years_to_days+6)& (0+255),f,c
  3465  001C40  0E00               	movlw	0
  3466  001C42  2219               	addwfc	(??_years_to_days+7)& (0+255),f,c
  3467  001C44  0E6D               	movlw	109
  3468  001C46  0214               	mulwf	(??_years_to_days+2)& (0+255),c
  3469  001C48  50F3               	movf	prodl,w,c
  3470  001C4A  2618               	addwf	(??_years_to_days+6)& (0+255),f,c
  3471  001C4C  50F4               	movf	prodh,w,c
  3472  001C4E  2219               	addwfc	(??_years_to_days+7)& (0+255),f,c
  3473  001C50  0E01               	movlw	1
  3474  001C52  0213               	mulwf	(??_years_to_days+1)& (0+255),c
  3475  001C54  50F3               	movf	prodl,w,c
  3476  001C56  2618               	addwf	(??_years_to_days+6)& (0+255),f,c
  3477  001C58  50F4               	movf	prodh,w,c
  3478  001C5A  2219               	addwfc	(??_years_to_days+7)& (0+255),f,c
  3479  001C5C  0E00               	movlw	0
  3480  001C5E  0212               	mulwf	??_years_to_days& (0+255),c
  3481  001C60  50F3               	movf	prodl,w,c
  3482  001C62  2618               	addwf	(??_years_to_days+6)& (0+255),f,c
  3483  001C64  50F4               	movf	prodh,w,c
  3484  001C66  2219               	addwfc	(??_years_to_days+7)& (0+255),f,c
  3485  001C68  0E6D               	movlw	109
  3486  001C6A  0215               	mulwf	(??_years_to_days+3)& (0+255),c
  3487  001C6C  50F3               	movf	prodl,w,c
  3488  001C6E  2619               	addwf	(??_years_to_days+7)& (0+255),f,c
  3489  001C70  0E01               	movlw	1
  3490  001C72  0214               	mulwf	(??_years_to_days+2)& (0+255),c
  3491  001C74  50F3               	movf	prodl,w,c
  3492  001C76  2619               	addwf	(??_years_to_days+7)& (0+255),f,c
  3493  001C78  0E00               	movlw	0
  3494  001C7A  0213               	mulwf	(??_years_to_days+1)& (0+255),c
  3495  001C7C  50F3               	movf	prodl,w,c
  3496  001C7E  2619               	addwf	(??_years_to_days+7)& (0+255),f,c
  3497  001C80  0E00               	movlw	0
  3498  001C82  0212               	mulwf	??_years_to_days& (0+255),c
  3499  001C84  50F3               	movf	prodl,w,c
  3500  001C86  2619               	addwf	(??_years_to_days+7)& (0+255),f,c
  3501  001C88  C016  F01A         	movff	??_years_to_days+4,years_to_days@ret
  3502  001C8C  C017  F01B         	movff	??_years_to_days+5,years_to_days@ret+1
  3503  001C90  C018  F01C         	movff	??_years_to_days+6,years_to_days@ret+2
  3504  001C94  C019  F01D         	movff	??_years_to_days+7,years_to_days@ret+3
  3505  001C98  C00E  F007         	movff	years_to_days@yr,___lwdiv@dividend
  3506  001C9C  C00F  F008         	movff	years_to_days@yr+1,___lwdiv@dividend+1
  3507  001CA0  6A0A               	clrf	___lwdiv@divisor+1,c
  3508  001CA2  0E64               	movlw	100
  3509  001CA4  6E09               	movwf	___lwdiv@divisor,c
  3510  001CA6  ECC6  F013         	call	___lwdiv	;wreg free
  3511  001CAA  C00E  F012         	movff	years_to_days@yr,??_years_to_days
  3512  001CAE  C00F  F013         	movff	years_to_days@yr+1,??_years_to_days+1
  3513  001CB2  90D8               	bcf	status,0,c
  3514  001CB4  3213               	rrcf	??_years_to_days+1,f,c
  3515  001CB6  3212               	rrcf	??_years_to_days,f,c
  3516  001CB8  90D8               	bcf	status,0,c
  3517  001CBA  3213               	rrcf	??_years_to_days+1,f,c
  3518  001CBC  3212               	rrcf	??_years_to_days,f,c
  3519  001CBE  5007               	movf	?___lwdiv,w,c
  3520  001CC0  5E12               	subwf	??_years_to_days,f,c
  3521  001CC2  5008               	movf	?___lwdiv+1,w,c
  3522  001CC4  5A13               	subwfb	??_years_to_days+1,f,c
  3523  001CC6  5012               	movf	??_years_to_days,w,c
  3524  001CC8  261A               	addwf	years_to_days@ret,f,c
  3525  001CCA  5013               	movf	??_years_to_days+1,w,c
  3526  001CCC  221B               	addwfc	years_to_days@ret+1,f,c
  3527  001CCE  0E00               	movlw	0
  3528  001CD0  221C               	addwfc	years_to_days@ret+2,f,c
  3529  001CD2  221D               	addwfc	years_to_days@ret+3,f,c
  3530  001CD4  C00E  F007         	movff	years_to_days@yr,___lwdiv@dividend
  3531  001CD8  C00F  F008         	movff	years_to_days@yr+1,___lwdiv@dividend+1
  3532  001CDC  0E01               	movlw	1
  3533  001CDE  6E0A               	movwf	___lwdiv@divisor+1,c
  3534  001CE0  0E90               	movlw	144
  3535  001CE2  6E09               	movwf	___lwdiv@divisor,c
  3536  001CE4  ECC6  F013         	call	___lwdiv	;wreg free
  3537  001CE8  5007               	movf	?___lwdiv,w,c
  3538  001CEA  261A               	addwf	years_to_days@ret,f,c
  3539  001CEC  5008               	movf	?___lwdiv+1,w,c
  3540  001CEE  221B               	addwfc	years_to_days@ret+1,f,c
  3541  001CF0  0E00               	movlw	0
  3542  001CF2  221C               	addwfc	years_to_days@ret+2,f,c
  3543  001CF4  221D               	addwfc	years_to_days@ret+3,f,c
  3544  001CF6  C01A  F00E         	movff	years_to_days@ret,?_years_to_days
  3545  001CFA  C01B  F00F         	movff	years_to_days@ret+1,?_years_to_days+1
  3546  001CFE  C01C  F010         	movff	years_to_days@ret+2,?_years_to_days+2
  3547  001D02  C01D  F011         	movff	years_to_days@ret+3,?_years_to_days+3
  3548  001D06  0C00               	retlw	0	;funcret
  3549  001D08  FFFF               	dw	65535	; errata NOP
  3550  001D0A                     __end_of_years_to_days:
  3551                           	opt stack 0
  3552                           tblptru	equ	0xFF8
  3553                           tblptrh	equ	0xFF7
  3554                           tblptrl	equ	0xFF6
  3555                           tablat	equ	0xFF5
  3556                           prodh	equ	0xFF4
  3557                           prodl	equ	0xFF3
  3558                           intcon	equ	0xFF2
  3559                           postinc0	equ	0xFEE
  3560                           wreg	equ	0xFE8
  3561                           postdec1	equ	0xFE5
  3562                           fsr1h	equ	0xFE2
  3563                           fsr1l	equ	0xFE1
  3564                           indf2	equ	0xFDF
  3565                           postinc2	equ	0xFDE
  3566                           postdec2	equ	0xFDD
  3567                           plusw2	equ	0xFDB
  3568                           fsr2h	equ	0xFDA
  3569                           fsr2l	equ	0xFD9
  3570                           status	equ	0xFD8
  3571                           
  3572 ;; *************** function _months_to_days *****************
  3573 ;; Defined at:
  3574 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
  3575 ;; Parameters:    Size  Location     Type
  3576 ;;  month           2   13[COMRAM] unsigned int 
  3577 ;; Auto vars:     Size  Location     Type
  3578 ;;		None
  3579 ;; Return value:  Size  Location     Type
  3580 ;;                  2   13[COMRAM] unsigned int 
  3581 ;; Registers used:
  3582 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3583 ;; Tracked objects:
  3584 ;;		On entry : 0/0
  3585 ;;		On exit  : 0/0
  3586 ;;		Unchanged: 0/0
  3587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3588 ;;      Params:         2       0       0       0       0       0       0
  3589 ;;      Locals:         0       0       0       0       0       0       0
  3590 ;;      Temps:          4       0       0       0       0       0       0
  3591 ;;      Totals:         6       0       0       0       0       0       0
  3592 ;;Total ram usage:        6 bytes
  3593 ;; Hardware stack levels used:    1
  3594 ;; Hardware stack levels required when called:    3
  3595 ;; This function calls:
  3596 ;;		___lwdiv
  3597 ;; This function is called by:
  3598 ;;		_ymd_to_scalar
  3599 ;; This function uses a non-reentrant model
  3600 ;;
  3601                           
  3602                           	psect	text7
  3603  0028C0                     __ptext7:
  3604                           	opt stack 0
  3605  0028C0                     _months_to_days:
  3606                           	opt stack 23
  3607                           
  3608                           ;incstack = 0
  3609  0028C0  FFFF               	dw	65535
  3610  0028C2  0EF1               	movlw	241
  3611  0028C4  6E10               	movwf	??_months_to_days& (0+255),c
  3612  0028C6  0E0B               	movlw	11
  3613  0028C8  6E11               	movwf	(??_months_to_days+1)& (0+255),c
  3614  0028CA  5010               	movf	??_months_to_days& (0+255),w,c
  3615  0028CC  020E               	mulwf	months_to_days@month,c
  3616  0028CE  CFF3 F012          	movff	prodl,??_months_to_days+2
  3617  0028D2  CFF4 F013          	movff	prodh,??_months_to_days+3
  3618  0028D6  020F               	mulwf	months_to_days@month+1,c
  3619  0028D8  50F3               	movf	prodl,w,c
  3620  0028DA  2613               	addwf	(??_months_to_days+3)& (0+255),f,c
  3621  0028DC  5011               	movf	(??_months_to_days+1)& (0+255),w,c
  3622  0028DE  020E               	mulwf	months_to_days@month,c
  3623  0028E0  50F3               	movf	prodl,w,c
  3624  0028E2  2613               	addwf	(??_months_to_days+3)& (0+255),f,c
  3625  0028E4  0E41               	movlw	65
  3626  0028E6  2412               	addwf	??_months_to_days+2,w,c
  3627  0028E8  6E07               	movwf	___lwdiv@dividend,c
  3628  0028EA  0EF4               	movlw	244
  3629  0028EC  2013               	addwfc	??_months_to_days+3,w,c
  3630  0028EE  6E08               	movwf	___lwdiv@dividend+1,c
  3631  0028F0  6A0A               	clrf	___lwdiv@divisor+1,c
  3632  0028F2  0E64               	movlw	100
  3633  0028F4  6E09               	movwf	___lwdiv@divisor,c
  3634  0028F6  ECC6  F013         	call	___lwdiv	;wreg free
  3635  0028FA  C007  F00E         	movff	?___lwdiv,?_months_to_days
  3636  0028FE  C008  F00F         	movff	?___lwdiv+1,?_months_to_days+1
  3637  002902  0012               	return		;funcret
  3638  002904  FFFF               	dw	65535	; errata NOP
  3639  002906                     __end_of_months_to_days:
  3640                           	opt stack 0
  3641                           tblptru	equ	0xFF8
  3642                           tblptrh	equ	0xFF7
  3643                           tblptrl	equ	0xFF6
  3644                           tablat	equ	0xFF5
  3645                           prodh	equ	0xFF4
  3646                           prodl	equ	0xFF3
  3647                           intcon	equ	0xFF2
  3648                           postinc0	equ	0xFEE
  3649                           wreg	equ	0xFE8
  3650                           postdec1	equ	0xFE5
  3651                           fsr1h	equ	0xFE2
  3652                           fsr1l	equ	0xFE1
  3653                           indf2	equ	0xFDF
  3654                           postinc2	equ	0xFDE
  3655                           postdec2	equ	0xFDD
  3656                           plusw2	equ	0xFDB
  3657                           fsr2h	equ	0xFDA
  3658                           fsr2l	equ	0xFD9
  3659                           status	equ	0xFD8
  3660                           
  3661 ;; *************** function ___lwdiv *****************
  3662 ;; Defined at:
  3663 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwdiv.c"
  3664 ;; Parameters:    Size  Location     Type
  3665 ;;  dividend        2    6[COMRAM] unsigned int 
  3666 ;;  divisor         2    8[COMRAM] unsigned int 
  3667 ;; Auto vars:     Size  Location     Type
  3668 ;;  quotient        2   11[COMRAM] unsigned int 
  3669 ;;  counter         1   10[COMRAM] unsigned char 
  3670 ;; Return value:  Size  Location     Type
  3671 ;;                  2    6[COMRAM] unsigned int 
  3672 ;; Registers used:
  3673 ;;		wreg, status,2, status,0
  3674 ;; Tracked objects:
  3675 ;;		On entry : 0/0
  3676 ;;		On exit  : 0/0
  3677 ;;		Unchanged: 0/0
  3678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3679 ;;      Params:         4       0       0       0       0       0       0
  3680 ;;      Locals:         3       0       0       0       0       0       0
  3681 ;;      Temps:          0       0       0       0       0       0       0
  3682 ;;      Totals:         7       0       0       0       0       0       0
  3683 ;;Total ram usage:        7 bytes
  3684 ;; Hardware stack levels used:    1
  3685 ;; Hardware stack levels required when called:    2
  3686 ;; This function calls:
  3687 ;;		Nothing
  3688 ;; This function is called by:
  3689 ;;		_months_to_days
  3690 ;;		_years_to_days
  3691 ;; This function uses a non-reentrant model
  3692 ;;
  3693                           
  3694                           	psect	text8
  3695  00278C                     __ptext8:
  3696                           	opt stack 0
  3697  00278C                     ___lwdiv:
  3698                           	opt stack 23
  3699                           
  3700                           ;incstack = 0
  3701  00278C  FFFF               	dw	65535
  3702  00278E  6A0C               	clrf	___lwdiv@quotient,c
  3703  002790  6A0D               	clrf	___lwdiv@quotient+1,c
  3704  002792  5009               	movf	___lwdiv@divisor,w,c
  3705  002794  100A               	iorwf	___lwdiv@divisor+1,w,c
  3706  002796  E01E               	bz	l1278
  3707  002798  0E01               	movlw	1
  3708  00279A  6E0B               	movwf	___lwdiv@counter,c
  3709  00279C  D005               	goto	l5419
  3710  00279E                     l5417:
  3711  00279E  FFFF               	dw	65535	; assembler added errata NOP
  3712  0027A0  90D8               	bcf	status,0,c
  3713  0027A2  3609               	rlcf	___lwdiv@divisor,f,c
  3714  0027A4  360A               	rlcf	___lwdiv@divisor+1,f,c
  3715  0027A6  2A0B               	incf	___lwdiv@counter,f,c
  3716  0027A8                     l5419:
  3717  0027A8  FFFF               	dw	65535	; assembler added errata NOP
  3718  0027AA  AE0A               	btfss	___lwdiv@divisor+1,7,c
  3719  0027AC  D7F8               	goto	l5417
  3720  0027AE                     l5421:
  3721  0027AE  FFFF               	dw	65535	; assembler added errata NOP
  3722  0027B0  90D8               	bcf	status,0,c
  3723  0027B2  360C               	rlcf	___lwdiv@quotient,f,c
  3724  0027B4  360D               	rlcf	___lwdiv@quotient+1,f,c
  3725  0027B6  5009               	movf	___lwdiv@divisor,w,c
  3726  0027B8  5C07               	subwf	___lwdiv@dividend,w,c
  3727  0027BA  500A               	movf	___lwdiv@divisor+1,w,c
  3728  0027BC  5808               	subwfb	___lwdiv@dividend+1,w,c
  3729  0027BE  E305               	bnc	l5429
  3730  0027C0  5009               	movf	___lwdiv@divisor,w,c
  3731  0027C2  5E07               	subwf	___lwdiv@dividend,f,c
  3732  0027C4  500A               	movf	___lwdiv@divisor+1,w,c
  3733  0027C6  5A08               	subwfb	___lwdiv@dividend+1,f,c
  3734  0027C8  800C               	bsf	___lwdiv@quotient,0,c
  3735  0027CA                     l5429:
  3736  0027CA  90D8               	bcf	status,0,c
  3737  0027CC  320A               	rrcf	___lwdiv@divisor+1,f,c
  3738  0027CE  3209               	rrcf	___lwdiv@divisor,f,c
  3739  0027D0  2E0B               	decfsz	___lwdiv@counter,f,c
  3740  0027D2  D7ED               	goto	l5421
  3741  0027D4                     l1278:
  3742  0027D4  C00C  F007         	movff	___lwdiv@quotient,?___lwdiv
  3743  0027D8  C00D  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3744  0027DC  0012               	return		;funcret
  3745  0027DE  FFFF               	dw	65535	; errata NOP
  3746  0027E0                     __end_of___lwdiv:
  3747                           	opt stack 0
  3748                           tblptru	equ	0xFF8
  3749                           tblptrh	equ	0xFF7
  3750                           tblptrl	equ	0xFF6
  3751                           tablat	equ	0xFF5
  3752                           prodh	equ	0xFF4
  3753                           prodl	equ	0xFF3
  3754                           intcon	equ	0xFF2
  3755                           postinc0	equ	0xFEE
  3756                           wreg	equ	0xFE8
  3757                           postdec1	equ	0xFE5
  3758                           fsr1h	equ	0xFE2
  3759                           fsr1l	equ	0xFE1
  3760                           indf2	equ	0xFDF
  3761                           postinc2	equ	0xFDE
  3762                           postdec2	equ	0xFDD
  3763                           plusw2	equ	0xFDB
  3764                           fsr2h	equ	0xFDA
  3765                           fsr2l	equ	0xFD9
  3766                           status	equ	0xFD8
  3767                           
  3768 ;; *************** function _isleap *****************
  3769 ;; Defined at:
  3770 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
  3771 ;; Parameters:    Size  Location     Type
  3772 ;;  yr              2   11[COMRAM] unsigned int 
  3773 ;; Auto vars:     Size  Location     Type
  3774 ;;		None
  3775 ;; Return value:  Size  Location     Type
  3776 ;;                  2   11[COMRAM] int 
  3777 ;; Registers used:
  3778 ;;		wreg, status,2, status,0, cstack
  3779 ;; Tracked objects:
  3780 ;;		On entry : 0/0
  3781 ;;		On exit  : 0/0
  3782 ;;		Unchanged: 0/0
  3783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3784 ;;      Params:         2       0       0       0       0       0       0
  3785 ;;      Locals:         1       0       0       0       0       0       0
  3786 ;;      Temps:          1       0       0       0       0       0       0
  3787 ;;      Totals:         4       0       0       0       0       0       0
  3788 ;;Total ram usage:        4 bytes
  3789 ;; Hardware stack levels used:    1
  3790 ;; Hardware stack levels required when called:    3
  3791 ;; This function calls:
  3792 ;;		___lwmod
  3793 ;; This function is called by:
  3794 ;;		_ymd_to_scalar
  3795 ;; This function uses a non-reentrant model
  3796 ;;
  3797                           
  3798                           	psect	text9
  3799  0027E0                     __ptext9:
  3800                           	opt stack 0
  3801  0027E0                     _isleap:
  3802                           	opt stack 23
  3803                           
  3804                           ;incstack = 0
  3805  0027E0  FFFF               	dw	65535
  3806  0027E2  0E01               	movlw	1
  3807  0027E4  6E0F               	movwf	_isleap$2090,c
  3808  0027E6  C00C  F007         	movff	isleap@yr,___lwmod@dividend
  3809  0027EA  C00D  F008         	movff	isleap@yr+1,___lwmod@dividend+1
  3810  0027EE  6E0A               	movwf	___lwmod@divisor+1,c
  3811  0027F0  0E90               	movlw	144
  3812  0027F2  6E09               	movwf	___lwmod@divisor,c
  3813  0027F4  EC3C  F014         	call	___lwmod	;wreg free
  3814  0027F8  5007               	movf	?___lwmod,w,c
  3815  0027FA  1008               	iorwf	?___lwmod+1,w,c
  3816  0027FC  E012               	bz	l1304
  3817  0027FE  C00C  F00E         	movff	isleap@yr,??_isleap
  3818  002802  0E03               	movlw	3
  3819  002804  160E               	andwf	??_isleap,f,c
  3820  002806  E10C               	bnz	l5409
  3821  002808  C00C  F007         	movff	isleap@yr,___lwmod@dividend
  3822  00280C  C00D  F008         	movff	isleap@yr+1,___lwmod@dividend+1
  3823  002810  6A0A               	clrf	___lwmod@divisor+1,c
  3824  002812  0E64               	movlw	100
  3825  002814  6E09               	movwf	___lwmod@divisor,c
  3826  002816  EC3C  F014         	call	___lwmod	;wreg free
  3827  00281A  5007               	movf	?___lwmod,w,c
  3828  00281C  1008               	iorwf	?___lwmod+1,w,c
  3829  00281E  E101               	bnz	l1304
  3830  002820                     l5409:
  3831  002820  6A0F               	clrf	_isleap$2090,c
  3832  002822                     l1304:
  3833  002822  C00F  F00C         	movff	_isleap$2090,?_isleap
  3834  002826  6A0D               	clrf	?_isleap+1,c
  3835  002828  0012               	return		;funcret
  3836  00282A  FFFF               	dw	65535	; errata NOP
  3837  00282C                     __end_of_isleap:
  3838                           	opt stack 0
  3839                           tblptru	equ	0xFF8
  3840                           tblptrh	equ	0xFF7
  3841                           tblptrl	equ	0xFF6
  3842                           tablat	equ	0xFF5
  3843                           prodh	equ	0xFF4
  3844                           prodl	equ	0xFF3
  3845                           intcon	equ	0xFF2
  3846                           postinc0	equ	0xFEE
  3847                           wreg	equ	0xFE8
  3848                           postdec1	equ	0xFE5
  3849                           fsr1h	equ	0xFE2
  3850                           fsr1l	equ	0xFE1
  3851                           indf2	equ	0xFDF
  3852                           postinc2	equ	0xFDE
  3853                           postdec2	equ	0xFDD
  3854                           plusw2	equ	0xFDB
  3855                           fsr2h	equ	0xFDA
  3856                           fsr2l	equ	0xFD9
  3857                           status	equ	0xFD8
  3858                           
  3859 ;; *************** function ___lwmod *****************
  3860 ;; Defined at:
  3861 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwmod.c"
  3862 ;; Parameters:    Size  Location     Type
  3863 ;;  dividend        2    6[COMRAM] unsigned int 
  3864 ;;  divisor         2    8[COMRAM] unsigned int 
  3865 ;; Auto vars:     Size  Location     Type
  3866 ;;  counter         1   10[COMRAM] unsigned char 
  3867 ;; Return value:  Size  Location     Type
  3868 ;;                  2    6[COMRAM] unsigned int 
  3869 ;; Registers used:
  3870 ;;		wreg, status,2, status,0
  3871 ;; Tracked objects:
  3872 ;;		On entry : 0/0
  3873 ;;		On exit  : 0/0
  3874 ;;		Unchanged: 0/0
  3875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3876 ;;      Params:         4       0       0       0       0       0       0
  3877 ;;      Locals:         1       0       0       0       0       0       0
  3878 ;;      Temps:          0       0       0       0       0       0       0
  3879 ;;      Totals:         5       0       0       0       0       0       0
  3880 ;;Total ram usage:        5 bytes
  3881 ;; Hardware stack levels used:    1
  3882 ;; Hardware stack levels required when called:    2
  3883 ;; This function calls:
  3884 ;;		Nothing
  3885 ;; This function is called by:
  3886 ;;		_isleap
  3887 ;; This function uses a non-reentrant model
  3888 ;;
  3889                           
  3890                           	psect	text10
  3891  002878                     __ptext10:
  3892                           	opt stack 0
  3893  002878                     ___lwmod:
  3894                           	opt stack 23
  3895                           
  3896                           ;incstack = 0
  3897  002878  FFFF               	dw	65535
  3898  00287A  5009               	movf	___lwmod@divisor,w,c
  3899  00287C  100A               	iorwf	___lwmod@divisor+1,w,c
  3900  00287E  E01A               	bz	l1288
  3901  002880  0E01               	movlw	1
  3902  002882  6E0B               	movwf	___lwmod@counter,c
  3903  002884  D005               	goto	l5439
  3904  002886                     l5437:
  3905  002886  FFFF               	dw	65535	; assembler added errata NOP
  3906  002888  90D8               	bcf	status,0,c
  3907  00288A  3609               	rlcf	___lwmod@divisor,f,c
  3908  00288C  360A               	rlcf	___lwmod@divisor+1,f,c
  3909  00288E  2A0B               	incf	___lwmod@counter,f,c
  3910  002890                     l5439:
  3911  002890  FFFF               	dw	65535	; assembler added errata NOP
  3912  002892  AE0A               	btfss	___lwmod@divisor+1,7,c
  3913  002894  D7F8               	goto	l5437
  3914  002896                     l5441:
  3915  002896  FFFF               	dw	65535	; assembler added errata NOP
  3916  002898  5009               	movf	___lwmod@divisor,w,c
  3917  00289A  5C07               	subwf	___lwmod@dividend,w,c
  3918  00289C  500A               	movf	___lwmod@divisor+1,w,c
  3919  00289E  5808               	subwfb	___lwmod@dividend+1,w,c
  3920  0028A0  E304               	bnc	l5445
  3921  0028A2  5009               	movf	___lwmod@divisor,w,c
  3922  0028A4  5E07               	subwf	___lwmod@dividend,f,c
  3923  0028A6  500A               	movf	___lwmod@divisor+1,w,c
  3924  0028A8  5A08               	subwfb	___lwmod@dividend+1,f,c
  3925  0028AA                     l5445:
  3926  0028AA  90D8               	bcf	status,0,c
  3927  0028AC  320A               	rrcf	___lwmod@divisor+1,f,c
  3928  0028AE  3209               	rrcf	___lwmod@divisor,f,c
  3929  0028B0  2E0B               	decfsz	___lwmod@counter,f,c
  3930  0028B2  D7F1               	goto	l5441
  3931  0028B4                     l1288:
  3932  0028B4  C007  F007         	movff	___lwmod@dividend,?___lwmod
  3933  0028B8  C008  F008         	movff	___lwmod@dividend+1,?___lwmod+1
  3934  0028BC  0012               	return		;funcret
  3935  0028BE  FFFF               	dw	65535	; errata NOP
  3936  0028C0                     __end_of___lwmod:
  3937                           	opt stack 0
  3938                           tblptru	equ	0xFF8
  3939                           tblptrh	equ	0xFF7
  3940                           tblptrl	equ	0xFF6
  3941                           tablat	equ	0xFF5
  3942                           prodh	equ	0xFF4
  3943                           prodl	equ	0xFF3
  3944                           intcon	equ	0xFF2
  3945                           postinc0	equ	0xFEE
  3946                           wreg	equ	0xFE8
  3947                           postdec1	equ	0xFE5
  3948                           fsr1h	equ	0xFE2
  3949                           fsr1l	equ	0xFE1
  3950                           indf2	equ	0xFDF
  3951                           postinc2	equ	0xFDE
  3952                           postdec2	equ	0xFDD
  3953                           plusw2	equ	0xFDB
  3954                           fsr2h	equ	0xFDA
  3955                           fsr2l	equ	0xFD9
  3956                           status	equ	0xFD8
  3957                           
  3958 ;; *************** function _SetTime *****************
  3959 ;; Defined at:
  3960 ;;		line 168 in file "user.c"
  3961 ;; Parameters:    Size  Location     Type
  3962 ;;  newTime         1    wreg     PTR long 
  3963 ;;		 -> SetTimeFromRegs@newRawTime(4), 
  3964 ;; Auto vars:     Size  Location     Type
  3965 ;;  newTime         1    6[COMRAM] PTR long 
  3966 ;;		 -> SetTimeFromRegs@newRawTime(4), 
  3967 ;; Return value:  Size  Location     Type
  3968 ;;                  1    wreg      void 
  3969 ;; Registers used:
  3970 ;;		wreg, fsr2l, fsr2h, status,2
  3971 ;; Tracked objects:
  3972 ;;		On entry : 0/0
  3973 ;;		On exit  : 0/0
  3974 ;;		Unchanged: 0/0
  3975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3976 ;;      Params:         0       0       0       0       0       0       0
  3977 ;;      Locals:         1       0       0       0       0       0       0
  3978 ;;      Temps:          0       0       0       0       0       0       0
  3979 ;;      Totals:         1       0       0       0       0       0       0
  3980 ;;Total ram usage:        1 bytes
  3981 ;; Hardware stack levels used:    1
  3982 ;; Hardware stack levels required when called:    2
  3983 ;; This function calls:
  3984 ;;		Nothing
  3985 ;; This function is called by:
  3986 ;;		_SetTimeFromRegs
  3987 ;; This function uses a non-reentrant model
  3988 ;;
  3989                           
  3990                           	psect	text11
  3991  002B0E                     __ptext11:
  3992                           	opt stack 0
  3993  002B0E                     _SetTime:
  3994                           	opt stack 26
  3995                           
  3996                           ;incstack = 0
  3997  002B0E  FFFF               	dw	65535
  3998                           
  3999                           ;SetTime@newTime stored from wreg
  4000  002B10  6E07               	movwf	SetTime@newTime,c
  4001                           
  4002                           ;user.c: 170: currentTime = *newTime;
  4003  002B12  5007               	movf	SetTime@newTime,w,c
  4004  002B14  6ED9               	movwf	fsr2l,c
  4005  002B16  6ADA               	clrf	fsr2h,c
  4006  002B18  CFDE F0D4          	movff	postinc2,_currentTime
  4007  002B1C  CFDE F0D5          	movff	postinc2,_currentTime+1
  4008  002B20  CFDE F0D6          	movff	postinc2,_currentTime+2
  4009  002B24  CFDE F0D7          	movff	postinc2,_currentTime+3
  4010  002B28  0012               	return		;funcret
  4011  002B2A  FFFF               	dw	65535	; errata NOP
  4012  002B2C                     __end_of_SetTime:
  4013                           	opt stack 0
  4014                           tblptru	equ	0xFF8
  4015                           tblptrh	equ	0xFF7
  4016                           tblptrl	equ	0xFF6
  4017                           tablat	equ	0xFF5
  4018                           prodh	equ	0xFF4
  4019                           prodl	equ	0xFF3
  4020                           intcon	equ	0xFF2
  4021                           postinc0	equ	0xFEE
  4022                           wreg	equ	0xFE8
  4023                           postdec1	equ	0xFE5
  4024                           fsr1h	equ	0xFE2
  4025                           fsr1l	equ	0xFE1
  4026                           indf2	equ	0xFDF
  4027                           postinc2	equ	0xFDE
  4028                           postdec2	equ	0xFDD
  4029                           plusw2	equ	0xFDB
  4030                           fsr2h	equ	0xFDA
  4031                           fsr2l	equ	0xFD9
  4032                           status	equ	0xFD8
  4033                           
  4034 ;; *************** function _SetHourMin *****************
  4035 ;; Defined at:
  4036 ;;		line 256 in file "interrupts.c"
  4037 ;; Parameters:    Size  Location     Type
  4038 ;;  newHour         1    wreg     PTR int 
  4039 ;;		 -> SetTimeFromRegs@newTime(18), 
  4040 ;;  newMin          1    6[COMRAM] PTR int 
  4041 ;;		 -> SetTimeFromRegs@newTime(18), 
  4042 ;; Auto vars:     Size  Location     Type
  4043 ;;  newHour         1    7[COMRAM] PTR int 
  4044 ;;		 -> SetTimeFromRegs@newTime(18), 
  4045 ;; Return value:  Size  Location     Type
  4046 ;;                  1    wreg      void 
  4047 ;; Registers used:
  4048 ;;		wreg, fsr2l, fsr2h, status,2
  4049 ;; Tracked objects:
  4050 ;;		On entry : 0/0
  4051 ;;		On exit  : 0/0
  4052 ;;		Unchanged: 0/0
  4053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4054 ;;      Params:         1       0       0       0       0       0       0
  4055 ;;      Locals:         1       0       0       0       0       0       0
  4056 ;;      Temps:          0       0       0       0       0       0       0
  4057 ;;      Totals:         2       0       0       0       0       0       0
  4058 ;;Total ram usage:        2 bytes
  4059 ;; Hardware stack levels used:    1
  4060 ;; Hardware stack levels required when called:    2
  4061 ;; This function calls:
  4062 ;;		Nothing
  4063 ;; This function is called by:
  4064 ;;		_SetTimeFromRegs
  4065 ;; This function uses a non-reentrant model
  4066 ;;
  4067                           
  4068                           	psect	text12
  4069  002B2C                     __ptext12:
  4070                           	opt stack 0
  4071  002B2C                     _SetHourMin:
  4072                           	opt stack 26
  4073                           
  4074                           ;incstack = 0
  4075  002B2C  FFFF               	dw	65535
  4076                           
  4077                           ;SetHourMin@newHour stored from wreg
  4078  002B2E  6E08               	movwf	SetHourMin@newHour,c
  4079                           
  4080                           ;interrupts.c: 258: globalHours = *newHour;
  4081  002B30  5008               	movf	SetHourMin@newHour,w,c
  4082  002B32  6ED9               	movwf	fsr2l,c
  4083  002B34  6ADA               	clrf	fsr2h,c
  4084  002B36  50DF               	movf	indf2,w,c
  4085  002B38  6E71               	movwf	_globalHours,c	;volatile
  4086                           
  4087                           ;interrupts.c: 259: globalMinutes = *newMin;
  4088  002B3A  5007               	movf	SetHourMin@newMin,w,c
  4089  002B3C  6ED9               	movwf	fsr2l,c
  4090  002B3E  6ADA               	clrf	fsr2h,c
  4091  002B40  50DF               	movf	indf2,w,c
  4092  002B42  6E6E               	movwf	_globalMinutes,c	;volatile
  4093  002B44  0012               	return		;funcret
  4094  002B46  FFFF               	dw	65535	; errata NOP
  4095  002B48                     __end_of_SetHourMin:
  4096                           	opt stack 0
  4097                           tblptru	equ	0xFF8
  4098                           tblptrh	equ	0xFF7
  4099                           tblptrl	equ	0xFF6
  4100                           tablat	equ	0xFF5
  4101                           prodh	equ	0xFF4
  4102                           prodl	equ	0xFF3
  4103                           intcon	equ	0xFF2
  4104                           postinc0	equ	0xFEE
  4105                           wreg	equ	0xFE8
  4106                           postdec1	equ	0xFE5
  4107                           fsr1h	equ	0xFE2
  4108                           fsr1l	equ	0xFE1
  4109                           indf2	equ	0xFDF
  4110                           postinc2	equ	0xFDE
  4111                           postdec2	equ	0xFDD
  4112                           plusw2	equ	0xFDB
  4113                           fsr2h	equ	0xFDA
  4114                           fsr2l	equ	0xFD9
  4115                           status	equ	0xFD8
  4116                           
  4117 ;; *************** function _LightStatusLed *****************
  4118 ;; Defined at:
  4119 ;;		line 379 in file "main.c"
  4120 ;; Parameters:    Size  Location     Type
  4121 ;;  row             1    wreg     unsigned char 
  4122 ;;  on              1    6[COMRAM] unsigned char 
  4123 ;;  blink           1    7[COMRAM] unsigned char 
  4124 ;; Auto vars:     Size  Location     Type
  4125 ;;  row             1   13[COMRAM] unsigned char 
  4126 ;; Return value:  Size  Location     Type
  4127 ;;                  1    wreg      void 
  4128 ;; Registers used:
  4129 ;;		wreg, status,2, status,0
  4130 ;; Tracked objects:
  4131 ;;		On entry : 0/0
  4132 ;;		On exit  : 0/0
  4133 ;;		Unchanged: 0/0
  4134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4135 ;;      Params:         2       0       0       0       0       0       0
  4136 ;;      Locals:         1       0       0       0       0       0       0
  4137 ;;      Temps:          5       0       0       0       0       0       0
  4138 ;;      Totals:         8       0       0       0       0       0       0
  4139 ;;Total ram usage:        8 bytes
  4140 ;; Hardware stack levels used:    1
  4141 ;; Hardware stack levels required when called:    2
  4142 ;; This function calls:
  4143 ;;		Nothing
  4144 ;; This function is called by:
  4145 ;;		_main
  4146 ;;		_SetTimeFromRegs
  4147 ;; This function uses a non-reentrant model
  4148 ;;
  4149                           
  4150                           	psect	text13
  4151  001E0A                     __ptext13:
  4152                           	opt stack 0
  4153  001E0A                     _LightStatusLed:
  4154                           	opt stack 26
  4155                           
  4156                           ;incstack = 0
  4157  001E0A  FFFF               	dw	65535
  4158                           
  4159                           ;LightStatusLed@row stored from wreg
  4160  001E0C  6E0E               	movwf	LightStatusLed@row,c
  4161                           
  4162                           ;main.c: 381: if(row > 7)
  4163  001E0E  0E07               	movlw	7
  4164  001E10  640E               	cpfsgt	LightStatusLed@row,c
  4165  001E12  D001               	goto	l5531
  4166  001E14  D072               	goto	l276
  4167  001E16                     l5531:
  4168  001E16  FFFF               	dw	65535	; assembler added errata NOP
  4169                           
  4170                           ;main.c: 383: (on ? ((ledStatuses[16-1]) |= ((unsigned short)1 << (row))) : ((ledStatuse
      +                          s[16-1]) &= ~((unsigned short)1 << (row))));
  4171  001E18  5007               	movf	LightStatusLed@on,w,c
  4172  001E1A  E010               	bz	l5535
  4173  001E1C  C00E  F009         	movff	LightStatusLed@row,??_LightStatusLed
  4174  001E20  0E01               	movlw	1
  4175  001E22  6E0A               	movwf	(??_LightStatusLed+1)& (0+255),c
  4176  001E24  2A09               	incf	??_LightStatusLed,f,c
  4177  001E26  D003               	goto	u5434
  4178  001E28                     u5435:
  4179  001E28  FFFF               	dw	65535	; assembler added errata NOP
  4180  001E2A  90D8               	bcf	status,0,c
  4181  001E2C  360A               	rlcf	??_LightStatusLed+1,f,c
  4182  001E2E                     u5434:
  4183  001E2E  FFFF               	dw	65535	; assembler added errata NOP
  4184  001E30  2E09               	decfsz	??_LightStatusLed,f,c
  4185  001E32  D7FA               	goto	u5435
  4186  001E34  500A               	movf	??_LightStatusLed+1,w,c
  4187  001E36  0100               	movlb	0	; () banked
  4188  001E38  139F               	iorwf	(_ledStatuses+15)& (0+255),f,b
  4189  001E3A  D00F               	goto	l5537
  4190  001E3C                     l5535:
  4191  001E3C  C00E  F009         	movff	LightStatusLed@row,??_LightStatusLed
  4192  001E40  0E01               	movlw	1
  4193  001E42  6E0A               	movwf	(??_LightStatusLed+1)& (0+255),c
  4194  001E44  2A09               	incf	??_LightStatusLed,f,c
  4195  001E46  D003               	goto	u5444
  4196  001E48                     u5445:
  4197  001E48  FFFF               	dw	65535	; assembler added errata NOP
  4198  001E4A  90D8               	bcf	status,0,c
  4199  001E4C  360A               	rlcf	??_LightStatusLed+1,f,c
  4200  001E4E                     u5444:
  4201  001E4E  FFFF               	dw	65535	; assembler added errata NOP
  4202  001E50  2E09               	decfsz	??_LightStatusLed,f,c
  4203  001E52  D7FA               	goto	u5445
  4204  001E54  1C0A               	comf	??_LightStatusLed+1,w,c
  4205  001E56  0100               	movlb	0	; () banked
  4206  001E58  179F               	andwf	(_ledStatuses+15)& (0+255),f,b
  4207  001E5A                     l5537:
  4208  001E5A  FFFF               	dw	65535	; assembler added errata NOP
  4209                           
  4210                           ; BSR set to: 0
  4211                           ;main.c: 384: (blink ? ((ledBlink[16-1]) |= ((unsigned short)1 << (row))) : ((ledBlink[1
      +                          6-1]) &= ~((unsigned short)1 << (row))));
  4212  001E5C  5008               	movf	LightStatusLed@blink,w,c
  4213  001E5E  E010               	bz	l5541
  4214                           
  4215                           ; BSR set to: 0
  4216  001E60  C00E  F009         	movff	LightStatusLed@row,??_LightStatusLed
  4217  001E64  0E01               	movlw	1
  4218  001E66  6E0A               	movwf	(??_LightStatusLed+1)& (0+255),c
  4219  001E68  2A09               	incf	??_LightStatusLed,f,c
  4220  001E6A  D003               	goto	u5464
  4221  001E6C                     u5465:
  4222  001E6C  FFFF               	dw	65535	; assembler added errata NOP
  4223  001E6E  90D8               	bcf	status,0,c
  4224  001E70  360A               	rlcf	??_LightStatusLed+1,f,c
  4225  001E72                     u5464:
  4226  001E72  FFFF               	dw	65535	; assembler added errata NOP
  4227  001E74  2E09               	decfsz	??_LightStatusLed,f,c
  4228  001E76  D7FA               	goto	u5465
  4229  001E78  500A               	movf	??_LightStatusLed+1,w,c
  4230  001E7A  0100               	movlb	0	; () banked
  4231  001E7C  138F               	iorwf	(_ledBlink+15)& (0+255),f,b
  4232  001E7E  D00F               	goto	l5543
  4233  001E80                     l5541:
  4234                           
  4235                           ; BSR set to: 0
  4236  001E80  C00E  F009         	movff	LightStatusLed@row,??_LightStatusLed
  4237  001E84  0E01               	movlw	1
  4238  001E86  6E0A               	movwf	(??_LightStatusLed+1)& (0+255),c
  4239  001E88  2A09               	incf	??_LightStatusLed,f,c
  4240  001E8A  D003               	goto	u5474
  4241  001E8C                     u5475:
  4242  001E8C  FFFF               	dw	65535	; assembler added errata NOP
  4243  001E8E  90D8               	bcf	status,0,c
  4244  001E90  360A               	rlcf	??_LightStatusLed+1,f,c
  4245  001E92                     u5474:
  4246  001E92  FFFF               	dw	65535	; assembler added errata NOP
  4247  001E94  2E09               	decfsz	??_LightStatusLed,f,c
  4248  001E96  D7FA               	goto	u5475
  4249  001E98  1C0A               	comf	??_LightStatusLed+1,w,c
  4250  001E9A  0100               	movlb	0	; () banked
  4251  001E9C  178F               	andwf	(_ledBlink+15)& (0+255),f,b
  4252  001E9E                     l5543:
  4253  001E9E  FFFF               	dw	65535	; assembler added errata NOP
  4254                           
  4255                           ; BSR set to: 0
  4256                           ;main.c: 385: (on ? ((_MODBUSCoils) |= ((unsigned short)1 << (row))) : ((_MODBUSCoils) &
      +                          = ~((unsigned short)1 << (row))));
  4257  001EA0  5007               	movf	LightStatusLed@on,w,c
  4258  001EA2  E014               	bz	l5547
  4259                           
  4260                           ; BSR set to: 0
  4261  001EA4  C00E  F009         	movff	LightStatusLed@row,??_LightStatusLed
  4262  001EA8  0E01               	movlw	1
  4263  001EAA  6E0A               	movwf	(??_LightStatusLed+1)& (0+255),c
  4264  001EAC  6A0B               	clrf	(??_LightStatusLed+2)& (0+255),c
  4265  001EAE  2A09               	incf	??_LightStatusLed,f,c
  4266  001EB0  D004               	goto	u5494
  4267  001EB2                     u5495:
  4268  001EB2  FFFF               	dw	65535	; assembler added errata NOP
  4269  001EB4  90D8               	bcf	status,0,c
  4270  001EB6  360A               	rlcf	??_LightStatusLed+1,f,c
  4271  001EB8  360B               	rlcf	??_LightStatusLed+2,f,c
  4272  001EBA                     u5494:
  4273  001EBA  FFFF               	dw	65535	; assembler added errata NOP
  4274  001EBC  2E09               	decfsz	??_LightStatusLed,f,c
  4275  001EBE  D7F9               	goto	u5495
  4276  001EC0  500A               	movf	??_LightStatusLed+1,w,c
  4277  001EC2  0100               	movlb	0	; () banked
  4278  001EC4  13D8               	iorwf	__MODBUSCoils& (0+255),f,b
  4279  001EC6  500B               	movf	??_LightStatusLed+2,w,c
  4280  001EC8  13D9               	iorwf	(__MODBUSCoils+1)& (0+255),f,b
  4281  001ECA  D017               	goto	l276
  4282  001ECC                     l5547:
  4283                           
  4284                           ; BSR set to: 0
  4285  001ECC  C00E  F009         	movff	LightStatusLed@row,??_LightStatusLed
  4286  001ED0  0E01               	movlw	1
  4287  001ED2  6E0A               	movwf	(??_LightStatusLed+1)& (0+255),c
  4288  001ED4  6A0B               	clrf	(??_LightStatusLed+2)& (0+255),c
  4289  001ED6  2A09               	incf	??_LightStatusLed,f,c
  4290  001ED8  D004               	goto	u5504
  4291  001EDA                     u5505:
  4292  001EDA  FFFF               	dw	65535	; assembler added errata NOP
  4293  001EDC  90D8               	bcf	status,0,c
  4294  001EDE  360A               	rlcf	??_LightStatusLed+1,f,c
  4295  001EE0  360B               	rlcf	??_LightStatusLed+2,f,c
  4296  001EE2                     u5504:
  4297  001EE2  FFFF               	dw	65535	; assembler added errata NOP
  4298  001EE4  2E09               	decfsz	??_LightStatusLed,f,c
  4299  001EE6  D7F9               	goto	u5505
  4300  001EE8  1C0A               	comf	??_LightStatusLed+1,w,c
  4301  001EEA  6E0C               	movwf	(??_LightStatusLed+3)& (0+255),c
  4302  001EEC  1C0B               	comf	??_LightStatusLed+2,w,c
  4303  001EEE  6E0D               	movwf	(??_LightStatusLed+4)& (0+255),c
  4304  001EF0  500C               	movf	??_LightStatusLed+3,w,c
  4305  001EF2  0100               	movlb	0	; () banked
  4306  001EF4  17D8               	andwf	__MODBUSCoils& (0+255),f,b
  4307  001EF6  500D               	movf	??_LightStatusLed+4,w,c
  4308  001EF8  17D9               	andwf	(__MODBUSCoils+1)& (0+255),f,b
  4309  001EFA                     l276:
  4310  001EFA  FFFF               	dw	65535	; assembler added errata NOP
  4311  001EFC  0012               	return		;funcret
  4312  001EFE  FFFF               	dw	65535	; errata NOP
  4313  001F00                     __end_of_LightStatusLed:
  4314                           	opt stack 0
  4315                           tblptru	equ	0xFF8
  4316                           tblptrh	equ	0xFF7
  4317                           tblptrl	equ	0xFF6
  4318                           tablat	equ	0xFF5
  4319                           prodh	equ	0xFF4
  4320                           prodl	equ	0xFF3
  4321                           intcon	equ	0xFF2
  4322                           postinc0	equ	0xFEE
  4323                           wreg	equ	0xFE8
  4324                           postdec1	equ	0xFE5
  4325                           fsr1h	equ	0xFE2
  4326                           fsr1l	equ	0xFE1
  4327                           indf2	equ	0xFDF
  4328                           postinc2	equ	0xFDE
  4329                           postdec2	equ	0xFDD
  4330                           plusw2	equ	0xFDB
  4331                           fsr2h	equ	0xFDA
  4332                           fsr2l	equ	0xFD9
  4333                           status	equ	0xFD8
  4334                           
  4335 ;; *************** function _ModbusGetLastCommand *****************
  4336 ;; Defined at:
  4337 ;;		line 876 in file "ModbusRtu.c"
  4338 ;; Parameters:    Size  Location     Type
  4339 ;;  address         1    wreg     PTR unsigned short 
  4340 ;;		 -> io_poll@lastAddress(2), 
  4341 ;;  count           1    6[COMRAM] PTR unsigned short 
  4342 ;;		 -> io_poll@lastEndAddress(2), 
  4343 ;; Auto vars:     Size  Location     Type
  4344 ;;  address         1    8[COMRAM] PTR unsigned short 
  4345 ;;		 -> io_poll@lastAddress(2), 
  4346 ;; Return value:  Size  Location     Type
  4347 ;;                  1    wreg      PTR enum E2336
  4348 ;; Registers used:
  4349 ;;		wreg, fsr2l, fsr2h, status,2
  4350 ;; Tracked objects:
  4351 ;;		On entry : 0/0
  4352 ;;		On exit  : 0/0
  4353 ;;		Unchanged: 0/0
  4354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4355 ;;      Params:         2       0       0       0       0       0       0
  4356 ;;      Locals:         1       0       0       0       0       0       0
  4357 ;;      Temps:          0       0       0       0       0       0       0
  4358 ;;      Totals:         3       0       0       0       0       0       0
  4359 ;;Total ram usage:        3 bytes
  4360 ;; Hardware stack levels used:    1
  4361 ;; Hardware stack levels required when called:    2
  4362 ;; This function calls:
  4363 ;;		Nothing
  4364 ;; This function is called by:
  4365 ;;		_io_poll
  4366 ;; This function uses a non-reentrant model
  4367 ;;
  4368                           
  4369                           	psect	text14
  4370  002A44                     __ptext14:
  4371                           	opt stack 0
  4372  002A44                     _ModbusGetLastCommand:
  4373                           	opt stack 27
  4374                           
  4375                           ;incstack = 0
  4376  002A44  FFFF               	dw	65535
  4377                           
  4378                           ;ModbusGetLastCommand@address stored from wreg
  4379  002A46  6E09               	movwf	ModbusGetLastCommand@address,c
  4380                           
  4381                           ;ModbusRtu.c: 878: if (address != (0))
  4382  002A48  5009               	movf	ModbusGetLastCommand@address,w,c
  4383  002A4A  E007               	bz	l5749
  4384                           
  4385                           ;ModbusRtu.c: 879: *address = _lastAddress;
  4386  002A4C  5009               	movf	ModbusGetLastCommand@address,w,c
  4387  002A4E  6ED9               	movwf	fsr2l,c
  4388  002A50  6ADA               	clrf	fsr2h,c
  4389  002A52  C0B6  FFDE         	movff	__lastAddress,postinc2
  4390  002A56  C0B7  FFDD         	movff	__lastAddress+1,postdec2
  4391  002A5A                     l5749:
  4392                           
  4393                           ;ModbusRtu.c: 880: if (count != (0))
  4394  002A5A  5007               	movf	ModbusGetLastCommand@count,w,c
  4395  002A5C  E007               	bz	l5753
  4396                           
  4397                           ;ModbusRtu.c: 881: *count = _lastCount;
  4398  002A5E  5007               	movf	ModbusGetLastCommand@count,w,c
  4399  002A60  6ED9               	movwf	fsr2l,c
  4400  002A62  6ADA               	clrf	fsr2h,c
  4401  002A64  C0B8  FFDE         	movff	__lastCount,postinc2
  4402  002A68  C0B9  FFDD         	movff	__lastCount+1,postdec2
  4403  002A6C                     l5753:
  4404                           
  4405                           ;ModbusRtu.c: 882: return &_lastCommand;
  4406  002A6C  0EDA               	movlw	__lastCommand& (0+255)
  4407  002A6E  0012               	return		;funcret
  4408  002A70  FFFF               	dw	65535	; errata NOP
  4409  002A72                     __end_of_ModbusGetLastCommand:
  4410                           	opt stack 0
  4411                           tblptru	equ	0xFF8
  4412                           tblptrh	equ	0xFF7
  4413                           tblptrl	equ	0xFF6
  4414                           tablat	equ	0xFF5
  4415                           prodh	equ	0xFF4
  4416                           prodl	equ	0xFF3
  4417                           intcon	equ	0xFF2
  4418                           postinc0	equ	0xFEE
  4419                           wreg	equ	0xFE8
  4420                           postdec1	equ	0xFE5
  4421                           fsr1h	equ	0xFE2
  4422                           fsr1l	equ	0xFE1
  4423                           indf2	equ	0xFDF
  4424                           postinc2	equ	0xFDE
  4425                           postdec2	equ	0xFDD
  4426                           plusw2	equ	0xFDB
  4427                           fsr2h	equ	0xFDA
  4428                           fsr2l	equ	0xFD9
  4429                           status	equ	0xFD8
  4430                           
  4431 ;; *************** function _InitFromEeprom *****************
  4432 ;; Defined at:
  4433 ;;		line 448 in file "main.c"
  4434 ;; Parameters:    Size  Location     Type
  4435 ;;		None
  4436 ;; Auto vars:     Size  Location     Type
  4437 ;;		None
  4438 ;; Return value:  Size  Location     Type
  4439 ;;                  1    wreg      void 
  4440 ;; Registers used:
  4441 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4442 ;; Tracked objects:
  4443 ;;		On entry : 0/0
  4444 ;;		On exit  : 0/0
  4445 ;;		Unchanged: 0/0
  4446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4447 ;;      Params:         0       0       0       0       0       0       0
  4448 ;;      Locals:         0       0       0       0       0       0       0
  4449 ;;      Temps:          2       0       0       0       0       0       0
  4450 ;;      Totals:         2       0       0       0       0       0       0
  4451 ;;Total ram usage:        2 bytes
  4452 ;; Hardware stack levels used:    1
  4453 ;; Hardware stack levels required when called:    4
  4454 ;; This function calls:
  4455 ;;		_LoadNextEvent
  4456 ;;		_Modbus
  4457 ;;		_SetBuzzerDuty
  4458 ;;		_SwitchOffAllLeds
  4459 ;; This function is called by:
  4460 ;;		_main
  4461 ;;		_io_poll
  4462 ;; This function uses a non-reentrant model
  4463 ;;
  4464                           
  4465                           	psect	text15
  4466  001D0A                     __ptext15:
  4467                           	opt stack 0
  4468  001D0A                     _InitFromEeprom:
  4469                           	opt stack 25
  4470                           
  4471                           ;incstack = 0
  4472  001D0A  FFFF               	dw	65535
  4473                           
  4474                           ;main.c: 450: buzzeLoudDuration = ( EEADR = 2, (void)0, RD = 1, EEDATA);
  4475  001D0C  0E02               	movlw	2
  4476  001D0E  6EA9               	movwf	4009,c	;volatile
  4477  001D10  80A6               	bsf	4006,0,c	;volatile
  4478  001D12  CFA8 F0C6          	movff	4008,_buzzeLoudDuration	;volatile
  4479                           
  4480                           ;main.c: 451: buzzeQuietDuration = ( EEADR = 3, (void)0, RD = 1, EEDATA);
  4481  001D16  0E03               	movlw	3
  4482  001D18  6EA9               	movwf	4009,c	;volatile
  4483  001D1A  80A6               	bsf	4006,0,c	;volatile
  4484  001D1C  CFA8 F0C7          	movff	4008,_buzzeQuietDuration	;volatile
  4485                           
  4486                           ;main.c: 452: buzzerInfoPeriod = ( EEADR = 4, (void)0, RD = 1, EEDATA);
  4487  001D20  0E04               	movlw	4
  4488  001D22  6EA9               	movwf	4009,c	;volatile
  4489  001D24  80A6               	bsf	4006,0,c	;volatile
  4490  001D26  CFA8 F0C9          	movff	4008,_buzzerInfoPeriod	;volatile
  4491                           
  4492                           ;main.c: 453: buzzerAlarmPeriod = ( EEADR = 5, (void)0, RD = 1, EEDATA);
  4493  001D2A  0E05               	movlw	5
  4494  001D2C  6EA9               	movwf	4009,c	;volatile
  4495  001D2E  80A6               	bsf	4006,0,c	;volatile
  4496  001D30  CFA8 F0C8          	movff	4008,_buzzerAlarmPeriod	;volatile
  4497                           
  4498                           ;main.c: 454: buzzerOnOffDuration = (((uint16_t)( EEADR = 6, (void)0, RD = 1, EEDATA)<<8
      +                          )|0);
  4499  001D34  0E06               	movlw	6
  4500  001D36  6EA9               	movwf	4009,c	;volatile
  4501  001D38  80A6               	bsf	4006,0,c	;volatile
  4502  001D3A  50A8               	movf	4008,w,c	;volatile
  4503  001D3C  0100               	movlb	0	; () banked
  4504  001D3E  6FF8               	movwf	(_buzzerOnOffDuration+1)& (0+255),b
  4505  001D40  6BF7               	clrf	_buzzerOnOffDuration& (0+255),b
  4506                           
  4507                           ;main.c: 455: buzzerOnOffPeriod = (((uint16_t)( EEADR = 7, (void)0, RD = 1, EEDATA)<<8)|
      +                          0);
  4508  001D42  0E07               	movlw	7
  4509  001D44  6EA9               	movwf	4009,c	;volatile
  4510                           
  4511                           ; BSR set to: 0
  4512  001D46  80A6               	bsf	4006,0,c	;volatile
  4513  001D48  50A8               	movf	4008,w,c	;volatile
  4514  001D4A  6FFA               	movwf	(_buzzerOnOffPeriod+1)& (0+255),b
  4515  001D4C  6BF9               	clrf	_buzzerOnOffPeriod& (0+255),b
  4516                           
  4517                           ;main.c: 456: buzzeEscaladeTime = ( EEADR = 8, (void)0, RD = 1, EEDATA);
  4518  001D4E  0E08               	movlw	8
  4519  001D50  6EA9               	movwf	4009,c	;volatile
  4520                           
  4521                           ; BSR set to: 0
  4522  001D52  80A6               	bsf	4006,0,c	;volatile
  4523                           
  4524                           ; BSR set to: 0
  4525  001D54  CFA8 F0C5          	movff	4008,_buzzeEscaladeTime	;volatile
  4526                           
  4527                           ;main.c: 457: buzzerStartDurationDiv = ( EEADR = 9, (void)0, RD = 1, EEDATA);
  4528  001D58  0E09               	movlw	9
  4529  001D5A  6EA9               	movwf	4009,c	;volatile
  4530                           
  4531                           ; BSR set to: 0
  4532  001D5C  80A6               	bsf	4006,0,c	;volatile
  4533                           
  4534                           ; BSR set to: 0
  4535  001D5E  CFA8 F0CA          	movff	4008,_buzzerStartDurationDiv	;volatile
  4536                           
  4537                           ;main.c: 458: eventAcceptTime = ( EEADR = 10, (void)0, RD = 1, EEDATA);
  4538  001D62  0E0A               	movlw	10
  4539  001D64  6EA9               	movwf	4009,c	;volatile
  4540                           
  4541                           ; BSR set to: 0
  4542  001D66  80A6               	bsf	4006,0,c	;volatile
  4543                           
  4544                           ; BSR set to: 0
  4545  001D68  CFA8 F0D0          	movff	4008,_eventAcceptTime	;volatile
  4546                           
  4547                           ;main.c: 459: eveningTimeHour = ( EEADR = 11, (void)0, RD = 1, EEDATA);
  4548  001D6C  0E0B               	movlw	11
  4549  001D6E  6EA9               	movwf	4009,c	;volatile
  4550                           
  4551                           ; BSR set to: 0
  4552  001D70  80A6               	bsf	4006,0,c	;volatile
  4553                           
  4554                           ; BSR set to: 0
  4555  001D72  CFA8 F0CF          	movff	4008,_eveningTimeHour	;volatile
  4556                           
  4557                           ;main.c: 460: nightStartHour = ( EEADR = 12, (void)0, RD = 1, EEDATA);
  4558  001D76  0E0C               	movlw	12
  4559  001D78  6EA9               	movwf	4009,c	;volatile
  4560                           
  4561                           ; BSR set to: 0
  4562  001D7A  80A6               	bsf	4006,0,c	;volatile
  4563                           
  4564                           ; BSR set to: 0
  4565  001D7C  CFA8 F0D3          	movff	4008,_nightStartHour	;volatile
  4566                           
  4567                           ;main.c: 461: nightEndHour = ( EEADR = 13, (void)0, RD = 1, EEDATA);
  4568  001D80  0E0D               	movlw	13
  4569  001D82  6EA9               	movwf	4009,c	;volatile
  4570                           
  4571                           ; BSR set to: 0
  4572  001D84  80A6               	bsf	4006,0,c	;volatile
  4573                           
  4574                           ; BSR set to: 0
  4575  001D86  CFA8 F0D2          	movff	4008,_nightEndHour	;volatile
  4576                           
  4577                           ;main.c: 462: morningTimeHour = ( EEADR = 14, (void)0, RD = 1, EEDATA);
  4578  001D8A  0E0E               	movlw	14
  4579  001D8C  6EA9               	movwf	4009,c	;volatile
  4580                           
  4581                           ; BSR set to: 0
  4582  001D8E  80A6               	bsf	4006,0,c	;volatile
  4583                           
  4584                           ; BSR set to: 0
  4585  001D90  CFA8 F0D1          	movff	4008,_morningTimeHour	;volatile
  4586                           
  4587                           ;main.c: 463: blinkDuration = ((uint16_t)( EEADR = 15, (void)0, RD = 1, EEDATA)) << 6;
  4588  001D94  0E0F               	movlw	15
  4589  001D96  6EA9               	movwf	4009,c	;volatile
  4590                           
  4591                           ; BSR set to: 0
  4592  001D98  80A6               	bsf	4006,0,c	;volatile
  4593                           
  4594                           ; BSR set to: 0
  4595  001D9A  50A8               	movf	4008,w,c	;volatile
  4596  001D9C  6E0F               	movwf	??_InitFromEeprom& (0+255),c
  4597  001D9E  6A10               	clrf	(??_InitFromEeprom+1)& (0+255),c
  4598  001DA0  0E06               	movlw	6
  4599  001DA2                     u5805:
  4600  001DA2  FFFF               	dw	65535	; assembler added errata NOP
  4601  001DA4  90D8               	bcf	status,0,c
  4602  001DA6  360F               	rlcf	??_InitFromEeprom,f,c
  4603  001DA8  3610               	rlcf	??_InitFromEeprom+1,f,c
  4604  001DAA  2EE8               	decfsz	wreg,f,c
  4605  001DAC  D7FA               	goto	u5805
  4606  001DAE  C00F  F0BA         	movff	??_InitFromEeprom,_blinkDuration
  4607  001DB2  C010  F0BB         	movff	??_InitFromEeprom+1,_blinkDuration+1
  4608                           
  4609                           ; BSR set to: 0
  4610                           ;main.c: 464: blinkPeriod = ((uint16_t)( EEADR = 16, (void)0, RD = 1, EEDATA)) << 6;
  4611  001DB6  0E10               	movlw	16
  4612  001DB8  6EA9               	movwf	4009,c	;volatile
  4613                           
  4614                           ; BSR set to: 0
  4615  001DBA  80A6               	bsf	4006,0,c	;volatile
  4616  001DBC  50A8               	movf	4008,w,c	;volatile
  4617  001DBE  6E0F               	movwf	??_InitFromEeprom& (0+255),c
  4618  001DC0  6A10               	clrf	(??_InitFromEeprom+1)& (0+255),c
  4619  001DC2  0E06               	movlw	6
  4620  001DC4                     u5815:
  4621  001DC4  FFFF               	dw	65535	; assembler added errata NOP
  4622  001DC6  90D8               	bcf	status,0,c
  4623  001DC8  360F               	rlcf	??_InitFromEeprom,f,c
  4624  001DCA  3610               	rlcf	??_InitFromEeprom+1,f,c
  4625  001DCC  2EE8               	decfsz	wreg,f,c
  4626  001DCE  D7FA               	goto	u5815
  4627  001DD0  C00F  F0BC         	movff	??_InitFromEeprom,_blinkPeriod
  4628  001DD4  C010  F0BD         	movff	??_InitFromEeprom+1,_blinkPeriod+1
  4629                           
  4630                           ; BSR set to: 0
  4631                           ;main.c: 466: eventCount = ( EEADR = 18, (void)0, RD = 1, EEDATA);
  4632  001DD8  0E12               	movlw	18
  4633  001DDA  6EA9               	movwf	4009,c	;volatile
  4634                           
  4635                           ; BSR set to: 0
  4636  001DDC  80A6               	bsf	4006,0,c	;volatile
  4637                           
  4638                           ; BSR set to: 0
  4639  001DDE  CFA8 F06D          	movff	4008,_eventCount	;volatile
  4640                           
  4641                           ; BSR set to: 0
  4642                           ;main.c: 468: SetBuzzerDuty(buzzeLoudDuration);
  4643  001DE2  C0C6  F007         	movff	_buzzeLoudDuration,SetBuzzerDuty@dc
  4644  001DE6  6A08               	clrf	SetBuzzerDuty@dc+1,c
  4645  001DE8  EC6E  F013         	call	_SetBuzzerDuty	;wreg free
  4646                           
  4647                           ;main.c: 469: PR2 = buzzerAlarmPeriod;
  4648  001DEC  C0C8  FFCB         	movff	_buzzerAlarmPeriod,4043	;volatile
  4649                           
  4650                           ;main.c: 472: Modbus(( EEADR = 1, (void)0, RD = 1, EEDATA), 0, 0);
  4651  001DF0  0E01               	movlw	1
  4652  001DF2  6EA9               	movwf	4009,c	;volatile
  4653  001DF4  80A6               	bsf	4006,0,c	;volatile
  4654  001DF6  6A0C               	clrf	Modbus@u8serno,c
  4655  001DF8  6A0D               	clrf	Modbus@u8txenpin,c
  4656  001DFA  50A8               	movf	4008,w,c	;volatile
  4657  001DFC  ECB1  F015         	call	_Modbus
  4658                           
  4659                           ;main.c: 473: SwitchOffAllLeds();
  4660  001E00  EC64  F015         	call	_SwitchOffAllLeds	;wreg free
  4661                           
  4662                           ;main.c: 475: LoadNextEvent();
  4663  001E04  EF04  F012         	goto	_LoadNextEvent	;wreg free
  4664  001E08  FFFF               	dw	65535	; errata NOP
  4665  001E0A                     __end_of_InitFromEeprom:
  4666                           	opt stack 0
  4667                           tblptru	equ	0xFF8
  4668                           tblptrh	equ	0xFF7
  4669                           tblptrl	equ	0xFF6
  4670                           tablat	equ	0xFF5
  4671                           prodh	equ	0xFF4
  4672                           prodl	equ	0xFF3
  4673                           intcon	equ	0xFF2
  4674                           postinc0	equ	0xFEE
  4675                           wreg	equ	0xFE8
  4676                           postdec1	equ	0xFE5
  4677                           fsr1h	equ	0xFE2
  4678                           fsr1l	equ	0xFE1
  4679                           indf2	equ	0xFDF
  4680                           postinc2	equ	0xFDE
  4681                           postdec2	equ	0xFDD
  4682                           plusw2	equ	0xFDB
  4683                           fsr2h	equ	0xFDA
  4684                           fsr2l	equ	0xFD9
  4685                           status	equ	0xFD8
  4686                           
  4687 ;; *************** function _SetBuzzerDuty *****************
  4688 ;; Defined at:
  4689 ;;		line 425 in file "main.c"
  4690 ;; Parameters:    Size  Location     Type
  4691 ;;  dc              2    6[COMRAM] unsigned int 
  4692 ;; Auto vars:     Size  Location     Type
  4693 ;;		None
  4694 ;; Return value:  Size  Location     Type
  4695 ;;                  1    wreg      void 
  4696 ;; Registers used:
  4697 ;;		wreg, status,2, status,0
  4698 ;; Tracked objects:
  4699 ;;		On entry : E/0
  4700 ;;		On exit  : 0/0
  4701 ;;		Unchanged: 0/0
  4702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4703 ;;      Params:         2       0       0       0       0       0       0
  4704 ;;      Locals:         0       0       0       0       0       0       0
  4705 ;;      Temps:          2       0       0       0       0       0       0
  4706 ;;      Totals:         4       0       0       0       0       0       0
  4707 ;;Total ram usage:        4 bytes
  4708 ;; Hardware stack levels used:    1
  4709 ;; Hardware stack levels required when called:    2
  4710 ;; This function calls:
  4711 ;;		Nothing
  4712 ;; This function is called by:
  4713 ;;		_InitFromEeprom
  4714 ;;		_main
  4715 ;;		_io_poll
  4716 ;; This function uses a non-reentrant model
  4717 ;;
  4718                           
  4719                           	psect	text16
  4720  0026DC                     __ptext16:
  4721                           	opt stack 0
  4722  0026DC                     _SetBuzzerDuty:
  4723                           	opt stack 27
  4724                           
  4725                           ;incstack = 0
  4726  0026DC  FFFF               	dw	65535
  4727                           
  4728                           ;main.c: 430: CCP1CONbits.DC1B0 = (dc & 0x01) != 0 ? 1 : 0;
  4729  0026DE  A007               	btfss	SetBuzzerDuty@dc,0,c
  4730  0026E0  D003               	goto	u5510
  4731  0026E2  6A09               	clrf	??_SetBuzzerDuty& (0+255),c
  4732  0026E4  2A09               	incf	??_SetBuzzerDuty& (0+255),f,c
  4733  0026E6  D002               	goto	u5528
  4734  0026E8                     u5510:
  4735  0026E8  FFFF               	dw	65535	; assembler added errata NOP
  4736  0026EA  6A09               	clrf	??_SetBuzzerDuty& (0+255),c
  4737  0026EC                     u5528:
  4738  0026EC  FFFF               	dw	65535	; assembler added errata NOP
  4739  0026EE  3A09               	swapf	??_SetBuzzerDuty,f,c
  4740  0026F0  50BD               	movf	4029,w,c	;volatile
  4741  0026F2  1809               	xorwf	??_SetBuzzerDuty,w,c
  4742  0026F4  0BEF               	andlw	-17
  4743  0026F6  1809               	xorwf	??_SetBuzzerDuty,w,c
  4744  0026F8  6EBD               	movwf	4029,c	;volatile
  4745                           
  4746                           ;main.c: 431: CCP1CONbits.DC1B1 = (dc & 0x02) != 0 ? 1 : 0;
  4747  0026FA  A207               	btfss	SetBuzzerDuty@dc,1,c
  4748  0026FC  D003               	goto	u5530
  4749  0026FE  6A09               	clrf	??_SetBuzzerDuty& (0+255),c
  4750  002700  2A09               	incf	??_SetBuzzerDuty& (0+255),f,c
  4751  002702  D002               	goto	u5548
  4752  002704                     u5530:
  4753  002704  FFFF               	dw	65535	; assembler added errata NOP
  4754  002706  6A09               	clrf	??_SetBuzzerDuty& (0+255),c
  4755  002708                     u5548:
  4756  002708  FFFF               	dw	65535	; assembler added errata NOP
  4757  00270A  3A09               	swapf	??_SetBuzzerDuty,f,c
  4758  00270C  4609               	rlncf	??_SetBuzzerDuty,f,c
  4759  00270E  50BD               	movf	4029,w,c	;volatile
  4760  002710  1809               	xorwf	??_SetBuzzerDuty,w,c
  4761  002712  0BDF               	andlw	-33
  4762  002714  1809               	xorwf	??_SetBuzzerDuty,w,c
  4763  002716  6EBD               	movwf	4029,c	;volatile
  4764                           
  4765                           ;main.c: 433: CCPR1L = (uint8_t)(dc >> 2);
  4766  002718  C007  F009         	movff	SetBuzzerDuty@dc,??_SetBuzzerDuty
  4767  00271C  C008  F00A         	movff	SetBuzzerDuty@dc+1,??_SetBuzzerDuty+1
  4768  002720  90D8               	bcf	status,0,c
  4769  002722  320A               	rrcf	??_SetBuzzerDuty+1,f,c
  4770  002724  3209               	rrcf	??_SetBuzzerDuty,f,c
  4771  002726  90D8               	bcf	status,0,c
  4772  002728  320A               	rrcf	??_SetBuzzerDuty+1,f,c
  4773  00272A  3209               	rrcf	??_SetBuzzerDuty,f,c
  4774  00272C  5009               	movf	??_SetBuzzerDuty,w,c
  4775  00272E  6EBE               	movwf	4030,c	;volatile
  4776  002730  0012               	return		;funcret
  4777  002732  FFFF               	dw	65535	; errata NOP
  4778  002734                     __end_of_SetBuzzerDuty:
  4779                           	opt stack 0
  4780                           tblptru	equ	0xFF8
  4781                           tblptrh	equ	0xFF7
  4782                           tblptrl	equ	0xFF6
  4783                           tablat	equ	0xFF5
  4784                           prodh	equ	0xFF4
  4785                           prodl	equ	0xFF3
  4786                           intcon	equ	0xFF2
  4787                           postinc0	equ	0xFEE
  4788                           wreg	equ	0xFE8
  4789                           postdec1	equ	0xFE5
  4790                           fsr1h	equ	0xFE2
  4791                           fsr1l	equ	0xFE1
  4792                           indf2	equ	0xFDF
  4793                           postinc2	equ	0xFDE
  4794                           postdec2	equ	0xFDD
  4795                           plusw2	equ	0xFDB
  4796                           fsr2h	equ	0xFDA
  4797                           fsr2l	equ	0xFD9
  4798                           status	equ	0xFD8
  4799                           
  4800 ;; *************** function _Modbus *****************
  4801 ;; Defined at:
  4802 ;;		line 178 in file "ModbusRtu.c"
  4803 ;; Parameters:    Size  Location     Type
  4804 ;;  u8id            1    wreg     unsigned char 
  4805 ;;  u8serno         1   11[COMRAM] unsigned char 
  4806 ;;  u8txenpin       1   12[COMRAM] unsigned char 
  4807 ;; Auto vars:     Size  Location     Type
  4808 ;;  u8id            1   13[COMRAM] unsigned char 
  4809 ;; Return value:  Size  Location     Type
  4810 ;;                  2   11[COMRAM] int 
  4811 ;; Registers used:
  4812 ;;		wreg, status,2, status,0, cstack
  4813 ;; Tracked objects:
  4814 ;;		On entry : 0/0
  4815 ;;		On exit  : 0/0
  4816 ;;		Unchanged: 0/0
  4817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4818 ;;      Params:         2       0       0       0       0       0       0
  4819 ;;      Locals:         1       0       0       0       0       0       0
  4820 ;;      Temps:          0       0       0       0       0       0       0
  4821 ;;      Totals:         3       0       0       0       0       0       0
  4822 ;;Total ram usage:        3 bytes
  4823 ;; Hardware stack levels used:    1
  4824 ;; Hardware stack levels required when called:    3
  4825 ;; This function calls:
  4826 ;;		_ModbusInit
  4827 ;; This function is called by:
  4828 ;;		_InitFromEeprom
  4829 ;; This function uses a non-reentrant model
  4830 ;;
  4831                           
  4832                           	psect	text17
  4833  002B62                     __ptext17:
  4834                           	opt stack 0
  4835  002B62                     _Modbus:
  4836                           	opt stack 25
  4837                           
  4838                           ;incstack = 0
  4839  002B62  FFFF               	dw	65535
  4840                           
  4841                           ;Modbus@u8id stored from wreg
  4842  002B64  6E0E               	movwf	Modbus@u8id,c
  4843                           
  4844                           ;ModbusRtu.c: 180: ModbusInit(u8id, u8serno, u8txenpin);
  4845  002B66  C00C  F007         	movff	Modbus@u8serno,ModbusInit@u8serno
  4846  002B6A  C00D  F008         	movff	Modbus@u8txenpin,ModbusInit@u8txenpin
  4847  002B6E  500E               	movf	Modbus@u8id,w,c
  4848  002B70  EFBB  F015         	goto	_ModbusInit
  4849  002B74  FFFF               	dw	65535	; errata NOP
  4850  002B76                     __end_of_Modbus:
  4851                           	opt stack 0
  4852                           tblptru	equ	0xFF8
  4853                           tblptrh	equ	0xFF7
  4854                           tblptrl	equ	0xFF6
  4855                           tablat	equ	0xFF5
  4856                           prodh	equ	0xFF4
  4857                           prodl	equ	0xFF3
  4858                           intcon	equ	0xFF2
  4859                           postinc0	equ	0xFEE
  4860                           wreg	equ	0xFE8
  4861                           postdec1	equ	0xFE5
  4862                           fsr1h	equ	0xFE2
  4863                           fsr1l	equ	0xFE1
  4864                           indf2	equ	0xFDF
  4865                           postinc2	equ	0xFDE
  4866                           postdec2	equ	0xFDD
  4867                           plusw2	equ	0xFDB
  4868                           fsr2h	equ	0xFDA
  4869                           fsr2l	equ	0xFD9
  4870                           status	equ	0xFD8
  4871                           
  4872 ;; *************** function _ModbusInit *****************
  4873 ;; Defined at:
  4874 ;;		line 494 in file "ModbusRtu.c"
  4875 ;; Parameters:    Size  Location     Type
  4876 ;;  u8id            1    wreg     unsigned char 
  4877 ;;  u8serno         1    6[COMRAM] unsigned char 
  4878 ;;  u8txenpin       1    7[COMRAM] unsigned char 
  4879 ;; Auto vars:     Size  Location     Type
  4880 ;;  u8id            1   10[COMRAM] unsigned char 
  4881 ;; Return value:  Size  Location     Type
  4882 ;;                  1    wreg      void 
  4883 ;; Registers used:
  4884 ;;		wreg, status,2, status,0
  4885 ;; Tracked objects:
  4886 ;;		On entry : 0/0
  4887 ;;		On exit  : 0/0
  4888 ;;		Unchanged: 0/0
  4889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4890 ;;      Params:         2       0       0       0       0       0       0
  4891 ;;      Locals:         3       0       0       0       0       0       0
  4892 ;;      Temps:          0       0       0       0       0       0       0
  4893 ;;      Totals:         5       0       0       0       0       0       0
  4894 ;;Total ram usage:        5 bytes
  4895 ;; Hardware stack levels used:    1
  4896 ;; Hardware stack levels required when called:    2
  4897 ;; This function calls:
  4898 ;;		Nothing
  4899 ;; This function is called by:
  4900 ;;		_Modbus
  4901 ;; This function uses a non-reentrant model
  4902 ;;
  4903                           
  4904                           	psect	text18
  4905  002B76                     __ptext18:
  4906                           	opt stack 0
  4907  002B76                     _ModbusInit:
  4908                           	opt stack 25
  4909                           
  4910                           ;incstack = 0
  4911  002B76  FFFF               	dw	65535
  4912                           
  4913                           ;ModbusInit@u8id stored from wreg
  4914  002B78  6E0B               	movwf	ModbusInit@u8id,c
  4915                           
  4916                           ;ModbusRtu.c: 496: _u8id = u8id;
  4917  002B7A  C00B  F0C3         	movff	ModbusInit@u8id,__u8id
  4918                           
  4919                           ;ModbusRtu.c: 497: _u8serno = (u8serno > 3) ? 0 : u8serno;
  4920  002B7E  0E04               	movlw	4
  4921  002B80  6007               	cpfslt	ModbusInit@u8serno,c
  4922  002B82  D000               	goto	l753
  4923  002B84                     l753:
  4924  002B84  FFFF               	dw	65535	; assembler added errata NOP
  4925  002B86  0012               	return		;funcret
  4926  002B88  FFFF               	dw	65535	; errata NOP
  4927  002B8A                     __end_of_ModbusInit:
  4928                           	opt stack 0
  4929                           tblptru	equ	0xFF8
  4930                           tblptrh	equ	0xFF7
  4931                           tblptrl	equ	0xFF6
  4932                           tablat	equ	0xFF5
  4933                           prodh	equ	0xFF4
  4934                           prodl	equ	0xFF3
  4935                           intcon	equ	0xFF2
  4936                           postinc0	equ	0xFEE
  4937                           wreg	equ	0xFE8
  4938                           postdec1	equ	0xFE5
  4939                           fsr1h	equ	0xFE2
  4940                           fsr1l	equ	0xFE1
  4941                           indf2	equ	0xFDF
  4942                           postinc2	equ	0xFDE
  4943                           postdec2	equ	0xFDD
  4944                           plusw2	equ	0xFDB
  4945                           fsr2h	equ	0xFDA
  4946                           fsr2l	equ	0xFD9
  4947                           status	equ	0xFD8
  4948                           
  4949 ;; *************** function _ResetEvent *****************
  4950 ;; Defined at:
  4951 ;;		line 556 in file "main.c"
  4952 ;; Parameters:    Size  Location     Type
  4953 ;;  state           1    wreg     unsigned char 
  4954 ;; Auto vars:     Size  Location     Type
  4955 ;;  state           1   16[COMRAM] unsigned char 
  4956 ;; Return value:  Size  Location     Type
  4957 ;;                  1    wreg      void 
  4958 ;; Registers used:
  4959 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4960 ;; Tracked objects:
  4961 ;;		On entry : F/0
  4962 ;;		On exit  : F/1
  4963 ;;		Unchanged: 0/0
  4964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4965 ;;      Params:         0       0       0       0       0       0       0
  4966 ;;      Locals:         3       0       0       0       0       0       0
  4967 ;;      Temps:          2       0       0       0       0       0       0
  4968 ;;      Totals:         5       0       0       0       0       0       0
  4969 ;;Total ram usage:        5 bytes
  4970 ;; Hardware stack levels used:    1
  4971 ;; Hardware stack levels required when called:    3
  4972 ;; This function calls:
  4973 ;;		_LightLed
  4974 ;; This function is called by:
  4975 ;;		_main
  4976 ;; This function uses a non-reentrant model
  4977 ;;
  4978                           
  4979                           	psect	text19
  4980  002990                     __ptext19:
  4981                           	opt stack 0
  4982  002990                     _ResetEvent:
  4983                           	opt stack 27
  4984                           
  4985                           ;incstack = 0
  4986  002990  FFFF               	dw	65535
  4987                           
  4988                           ;ResetEvent@state stored from wreg
  4989  002992  6E11               	movwf	ResetEvent@state,c
  4990                           
  4991                           ;main.c: 558: LightLed(currentAlarmedEventNum + 1, state ? LED_GREEN : LED_RED, 0);
  4992  002994  5011               	movf	ResetEvent@state,w,c
  4993  002996  E103               	bnz	l5761
  4994  002998  6A13               	clrf	_ResetEvent$818+1,c
  4995  00299A  0E02               	movlw	2
  4996  00299C  D002               	goto	L2
  4997  00299E                     l5761:
  4998  00299E  6A13               	clrf	_ResetEvent$818+1,c
  4999  0029A0  0E01               	movlw	1
  5000  0029A2                     L2:
  5001  0029A2  FFFF               	dw	65535	; assembler added errata NOP
  5002  0029A4  6E12               	movwf	_ResetEvent$818,c
  5003  0029A6  C012  F007         	movff	_ResetEvent$818,LightLed@ledState
  5004  0029AA  6A08               	clrf	LightLed@blink,c
  5005  0029AC  2870               	incf	_currentAlarmedEventNum,w,c
  5006  0029AE  ECFE  F008         	call	_LightLed
  5007                           
  5008                           ;main.c: 559: currentAlarmedEventNum = 0xff;
  5009  0029B2  6870               	setf	_currentAlarmedEventNum,c
  5010                           
  5011                           ;main.c: 560: eventResetSecond = 0;
  5012  0029B4  0100               	movlb	0	; () banked
  5013  0029B6  6BA8               	clrf	_eventResetSecond& (0+255),b
  5014  0029B8  6BA9               	clrf	(_eventResetSecond+1)& (0+255),b
  5015  0029BA  6BAA               	clrf	(_eventResetSecond+2)& (0+255),b
  5016  0029BC  6BAB               	clrf	(_eventResetSecond+3)& (0+255),b
  5017                           
  5018                           ; BSR set to: 0
  5019                           ;main.c: 561: _MODBUSInputRegs[2] = (((uint16_t)currentAlarmedEventNum<<8)|curEventNum);
  5020  0029BE  5070               	movf	_currentAlarmedEventNum,w,c
  5021  0029C0  6E0F               	movwf	??_ResetEvent& (0+255),c
  5022  0029C2  506F               	movf	_curEventNum,w,c
  5023  0029C4  0101               	movlb	1	; () banked
  5024  0029C6  6FAE               	movwf	(__MODBUSInputRegs+4)& (0+255),b
  5025  0029C8  C00F  F1AF         	movff	??_ResetEvent,__MODBUSInputRegs+5
  5026                           
  5027                           ; BSR set to: 1
  5028  0029CC  0012               	return		;funcret
  5029  0029CE  FFFF               	dw	65535	; errata NOP
  5030  0029D0                     __end_of_ResetEvent:
  5031                           	opt stack 0
  5032                           tblptru	equ	0xFF8
  5033                           tblptrh	equ	0xFF7
  5034                           tblptrl	equ	0xFF6
  5035                           tablat	equ	0xFF5
  5036                           prodh	equ	0xFF4
  5037                           prodl	equ	0xFF3
  5038                           intcon	equ	0xFF2
  5039                           postinc0	equ	0xFEE
  5040                           wreg	equ	0xFE8
  5041                           postdec1	equ	0xFE5
  5042                           fsr1h	equ	0xFE2
  5043                           fsr1l	equ	0xFE1
  5044                           indf2	equ	0xFDF
  5045                           postinc2	equ	0xFDE
  5046                           postdec2	equ	0xFDD
  5047                           plusw2	equ	0xFDB
  5048                           fsr2h	equ	0xFDA
  5049                           fsr2l	equ	0xFD9
  5050                           status	equ	0xFD8
  5051                           
  5052 ;; *************** function _ProcessLightBlock *****************
  5053 ;; Defined at:
  5054 ;;		line 491 in file "main.c"
  5055 ;; Parameters:    Size  Location     Type
  5056 ;;  curMs           1    wreg     PTR unsigned long 
  5057 ;;		 -> main@curMs(4), 
  5058 ;; Auto vars:     Size  Location     Type
  5059 ;;  curMs           1   11[COMRAM] PTR unsigned long 
  5060 ;;		 -> main@curMs(4), 
  5061 ;; Return value:  Size  Location     Type
  5062 ;;                  1    wreg      void 
  5063 ;; Registers used:
  5064 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5065 ;; Tracked objects:
  5066 ;;		On entry : 0/0
  5067 ;;		On exit  : F/0
  5068 ;;		Unchanged: 0/0
  5069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5070 ;;      Params:         0       0       0       0       0       0       0
  5071 ;;      Locals:         1       0       0       0       0       0       0
  5072 ;;      Temps:          4       0       0       0       0       0       0
  5073 ;;      Totals:         5       0       0       0       0       0       0
  5074 ;;Total ram usage:        5 bytes
  5075 ;; Hardware stack levels used:    1
  5076 ;; Hardware stack levels required when called:    3
  5077 ;; This function calls:
  5078 ;;		_UpdateLedRegister
  5079 ;; This function is called by:
  5080 ;;		_main
  5081 ;; This function uses a non-reentrant model
  5082 ;;
  5083                           
  5084                           	psect	text20
  5085  000F8A                     __ptext20:
  5086                           	opt stack 0
  5087  000F8A                     _ProcessLightBlock:
  5088                           	opt stack 27
  5089                           
  5090                           ; BSR set to: 1
  5091                           ;incstack = 0
  5092  000F8A  FFFF               	dw	65535
  5093                           
  5094                           ;ProcessLightBlock@curMs stored from wreg
  5095  000F8C  6E0C               	movwf	ProcessLightBlock@curMs,c
  5096                           
  5097                           ;main.c: 493: diffTime = *curMs - oldBlinkOnTime;
  5098  000F8E  500C               	movf	ProcessLightBlock@curMs,w,c
  5099  000F90  6ED9               	movwf	fsr2l,c
  5100  000F92  6ADA               	clrf	fsr2h,c
  5101  000F94  CFDE F008          	movff	postinc2,??_ProcessLightBlock
  5102  000F98  CFDE F009          	movff	postinc2,??_ProcessLightBlock+1
  5103  000F9C  CFDE F00A          	movff	postinc2,??_ProcessLightBlock+2
  5104  000FA0  CFDE F00B          	movff	postinc2,??_ProcessLightBlock+3
  5105  000FA4  0100               	movlb	0	; () banked
  5106  000FA6  51B0               	movf	_oldBlinkOnTime& (0+255),w,b
  5107  000FA8  5C08               	subwf	??_ProcessLightBlock,w,c
  5108  000FAA  6FA4               	movwf	_diffTime& (0+255),b
  5109  000FAC  51B1               	movf	(_oldBlinkOnTime+1)& (0+255),w,b
  5110  000FAE  5809               	subwfb	??_ProcessLightBlock+1,w,c
  5111  000FB0  6FA5               	movwf	(_diffTime+1)& (0+255),b
  5112  000FB2  51B2               	movf	(_oldBlinkOnTime+2)& (0+255),w,b
  5113  000FB4  580A               	subwfb	??_ProcessLightBlock+2,w,c
  5114  000FB6  6FA6               	movwf	(_diffTime+2)& (0+255),b
  5115  000FB8  51B3               	movf	(_oldBlinkOnTime+3)& (0+255),w,b
  5116  000FBA  580B               	subwfb	??_ProcessLightBlock+3,w,c
  5117  000FBC  6FA7               	movwf	(_diffTime+3)& (0+255),b
  5118                           
  5119                           ; BSR set to: 0
  5120                           ;main.c: 494: if(diffTime > blinkPeriod)
  5121  000FBE  51BC               	movf	_blinkPeriod& (0+255),w,b
  5122  000FC0  6E08               	movwf	??_ProcessLightBlock& (0+255),c
  5123  000FC2  51BD               	movf	(_blinkPeriod+1)& (0+255),w,b
  5124  000FC4  6E09               	movwf	(??_ProcessLightBlock+1)& (0+255),c
  5125  000FC6  6A0A               	clrf	(??_ProcessLightBlock+2)& (0+255),c
  5126  000FC8  6A0B               	clrf	(??_ProcessLightBlock+3)& (0+255),c
  5127  000FCA  51A4               	movf	_diffTime& (0+255),w,b
  5128  000FCC  5C08               	subwf	??_ProcessLightBlock,w,c
  5129  000FCE  51A5               	movf	(_diffTime+1)& (0+255),w,b
  5130  000FD0  5809               	subwfb	??_ProcessLightBlock+1,w,c
  5131  000FD2  51A6               	movf	(_diffTime+2)& (0+255),w,b
  5132  000FD4  580A               	subwfb	??_ProcessLightBlock+2,w,c
  5133  000FD6  51A7               	movf	(_diffTime+3)& (0+255),w,b
  5134  000FD8  580B               	subwfb	??_ProcessLightBlock+3,w,c
  5135  000FDA  E20E               	bc	l4387
  5136                           
  5137                           ; BSR set to: 0
  5138                           ;main.c: 495: {
  5139                           ;main.c: 496: blinkOn = 1;
  5140  000FDC  0E01               	movlw	1
  5141  000FDE  6E6C               	movwf	_blinkOn,c
  5142                           
  5143                           ; BSR set to: 0
  5144                           ;main.c: 497: oldBlinkOnTime = *curMs;
  5145  000FE0  500C               	movf	ProcessLightBlock@curMs,w,c
  5146  000FE2  6ED9               	movwf	fsr2l,c
  5147  000FE4  6ADA               	clrf	fsr2h,c
  5148  000FE6  CFDE F0B0          	movff	postinc2,_oldBlinkOnTime
  5149  000FEA  CFDE F0B1          	movff	postinc2,_oldBlinkOnTime+1
  5150  000FEE  CFDE F0B2          	movff	postinc2,_oldBlinkOnTime+2
  5151  000FF2  CFDE F0B3          	movff	postinc2,_oldBlinkOnTime+3
  5152                           
  5153                           ;main.c: 498: }
  5154  000FF6  D0F1               	goto	l4539
  5155  000FF8                     l4387:
  5156                           
  5157                           ; BSR set to: 0
  5158                           ;main.c: 499: else if(blinkOn && diffTime > blinkDuration)
  5159  000FF8  506C               	movf	_blinkOn,w,c
  5160  000FFA  E101 D0EE          	bz	l4539
  5161                           
  5162                           ; BSR set to: 0
  5163  000FFE  51BA               	movf	_blinkDuration& (0+255),w,b
  5164  001000  6E08               	movwf	??_ProcessLightBlock& (0+255),c
  5165  001002  51BB               	movf	(_blinkDuration+1)& (0+255),w,b
  5166  001004  6E09               	movwf	(??_ProcessLightBlock+1)& (0+255),c
  5167  001006  6A0A               	clrf	(??_ProcessLightBlock+2)& (0+255),c
  5168  001008  6A0B               	clrf	(??_ProcessLightBlock+3)& (0+255),c
  5169  00100A  51A4               	movf	_diffTime& (0+255),w,b
  5170  00100C  5C08               	subwf	??_ProcessLightBlock,w,c
  5171  00100E  51A5               	movf	(_diffTime+1)& (0+255),w,b
  5172  001010  5809               	subwfb	??_ProcessLightBlock+1,w,c
  5173  001012  51A6               	movf	(_diffTime+2)& (0+255),w,b
  5174  001014  580A               	subwfb	??_ProcessLightBlock+2,w,c
  5175  001016  51A7               	movf	(_diffTime+3)& (0+255),w,b
  5176  001018  580B               	subwfb	??_ProcessLightBlock+3,w,c
  5177  00101A  E301 D0DE          	bc	l4539
  5178                           
  5179                           ; BSR set to: 0
  5180                           ;main.c: 500: {
  5181                           ;main.c: 501: blinkOn = 0;
  5182  00101E  6A6C               	clrf	_blinkOn,c
  5183  001020  D0DC               	goto	l4539
  5184  001022                     l4393:
  5185                           
  5186                           ; BSR set to: 0
  5187                           ;main.c: 509: LATA &= 0xF0;
  5188  001022  0EF0               	movlw	240
  5189  001024  1689               	andwf	3977,f,c	;volatile
  5190                           
  5191                           ; BSR set to: 0
  5192                           ;main.c: 510: if(blinkOn) LATB = ledStatuses[0]; else LATB = ledStatuses[0] ^ ledBlink[0
      +                          ]; UpdateLedRegister(0);
  5193  001026  506C               	movf	_blinkOn,w,c
  5194  001028  E003               	bz	l4399
  5195                           
  5196                           ; BSR set to: 0
  5197  00102A  C090  FF8A         	movff	_ledStatuses,3978	;volatile
  5198  00102E  D003               	goto	l4401
  5199  001030                     l4399:
  5200                           
  5201                           ; BSR set to: 0
  5202  001030  5190               	movf	_ledStatuses& (0+255),w,b
  5203  001032  1980               	xorwf	_ledBlink& (0+255),w,b
  5204  001034  6E8A               	movwf	3978,c	;volatile
  5205  001036                     l4401:
  5206  001036  FFFF               	dw	65535	; assembler added errata NOP
  5207                           
  5208                           ; BSR set to: 0
  5209  001038  0E00               	movlw	0
  5210  00103A  EC83  F014         	call	_UpdateLedRegister
  5211                           
  5212                           ;main.c: 511: if(blinkOn) LATB = ledStatuses[1]; else LATB = ledStatuses[1] ^ ledBlink[1
      +                          ]; UpdateLedRegister(1);
  5213  00103E  506C               	movf	_blinkOn,w,c
  5214  001040  E003               	bz	l4407
  5215  001042  C091  FF8A         	movff	_ledStatuses+1,3978	;volatile
  5216  001046  D004               	goto	l4409
  5217  001048                     l4407:
  5218  001048  0100               	movlb	0	; () banked
  5219  00104A  5191               	movf	(_ledStatuses+1)& (0+255),w,b
  5220  00104C  1981               	xorwf	(_ledBlink+1)& (0+255),w,b
  5221  00104E  6E8A               	movwf	3978,c	;volatile
  5222  001050                     l4409:
  5223  001050  FFFF               	dw	65535	; assembler added errata NOP
  5224  001052  0E01               	movlw	1
  5225  001054  EC83  F014         	call	_UpdateLedRegister
  5226                           
  5227                           ;main.c: 512: if(blinkOn) LATB = ledStatuses[2]; else LATB = ledStatuses[2] ^ ledBlink[2
      +                          ]; UpdateLedRegister(2);
  5228  001058  506C               	movf	_blinkOn,w,c
  5229  00105A  E003               	bz	l4415
  5230  00105C  C092  FF8A         	movff	_ledStatuses+2,3978	;volatile
  5231  001060  D004               	goto	l4417
  5232  001062                     l4415:
  5233  001062  0100               	movlb	0	; () banked
  5234  001064  5192               	movf	(_ledStatuses+2)& (0+255),w,b
  5235  001066  1982               	xorwf	(_ledBlink+2)& (0+255),w,b
  5236  001068  6E8A               	movwf	3978,c	;volatile
  5237  00106A                     l4417:
  5238  00106A  FFFF               	dw	65535	; assembler added errata NOP
  5239  00106C  0E02               	movlw	2
  5240  00106E  EC83  F014         	call	_UpdateLedRegister
  5241                           
  5242                           ;main.c: 513: if(blinkOn) LATB = ledStatuses[12]; else LATB = ledStatuses[12] ^ ledBlink
      +                          [12]; UpdateLedRegister(3);
  5243  001072  506C               	movf	_blinkOn,w,c
  5244  001074  E003               	bz	l4423
  5245  001076  C09C  FF8A         	movff	_ledStatuses+12,3978	;volatile
  5246  00107A  D004               	goto	l4425
  5247  00107C                     l4423:
  5248  00107C  0100               	movlb	0	; () banked
  5249  00107E  519C               	movf	(_ledStatuses+12)& (0+255),w,b
  5250  001080  198C               	xorwf	(_ledBlink+12)& (0+255),w,b
  5251  001082  6E8A               	movwf	3978,c	;volatile
  5252  001084                     l4425:
  5253  001084  FFFF               	dw	65535	; assembler added errata NOP
  5254  001086  0E03               	movlw	3
  5255  001088  EC83  F014         	call	_UpdateLedRegister
  5256                           
  5257                           ;main.c: 514: LATAbits.LATA0 = 1;
  5258  00108C  8089               	bsf	3977,0,c	;volatile
  5259                           
  5260                           ;main.c: 515: break;
  5261  00108E  D0B0               	goto	l4541
  5262  001090                     l4429:
  5263                           
  5264                           ; BSR set to: 0
  5265                           ;main.c: 517: LATA &= 0xF0;
  5266  001090  0EF0               	movlw	240
  5267  001092  1689               	andwf	3977,f,c	;volatile
  5268                           
  5269                           ; BSR set to: 0
  5270                           ;main.c: 518: if(blinkOn) LATB = ledStatuses[3]; else LATB = ledStatuses[3] ^ ledBlink[3
      +                          ]; UpdateLedRegister(0);
  5271  001094  506C               	movf	_blinkOn,w,c
  5272  001096  E003               	bz	l4435
  5273                           
  5274                           ; BSR set to: 0
  5275  001098  C093  FF8A         	movff	_ledStatuses+3,3978	;volatile
  5276  00109C  D003               	goto	l4437
  5277  00109E                     l4435:
  5278                           
  5279                           ; BSR set to: 0
  5280  00109E  5193               	movf	(_ledStatuses+3)& (0+255),w,b
  5281  0010A0  1983               	xorwf	(_ledBlink+3)& (0+255),w,b
  5282  0010A2  6E8A               	movwf	3978,c	;volatile
  5283  0010A4                     l4437:
  5284  0010A4  FFFF               	dw	65535	; assembler added errata NOP
  5285                           
  5286                           ; BSR set to: 0
  5287  0010A6  0E00               	movlw	0
  5288  0010A8  EC83  F014         	call	_UpdateLedRegister
  5289                           
  5290                           ;main.c: 519: if(blinkOn) LATB = ledStatuses[4]; else LATB = ledStatuses[4] ^ ledBlink[4
      +                          ]; UpdateLedRegister(1);
  5291  0010AC  506C               	movf	_blinkOn,w,c
  5292  0010AE  E003               	bz	l4443
  5293  0010B0  C094  FF8A         	movff	_ledStatuses+4,3978	;volatile
  5294  0010B4  D004               	goto	l4445
  5295  0010B6                     l4443:
  5296  0010B6  0100               	movlb	0	; () banked
  5297  0010B8  5194               	movf	(_ledStatuses+4)& (0+255),w,b
  5298  0010BA  1984               	xorwf	(_ledBlink+4)& (0+255),w,b
  5299  0010BC  6E8A               	movwf	3978,c	;volatile
  5300  0010BE                     l4445:
  5301  0010BE  FFFF               	dw	65535	; assembler added errata NOP
  5302  0010C0  0E01               	movlw	1
  5303  0010C2  EC83  F014         	call	_UpdateLedRegister
  5304                           
  5305                           ;main.c: 520: if(blinkOn) LATB = ledStatuses[5]; else LATB = ledStatuses[5] ^ ledBlink[5
      +                          ]; UpdateLedRegister(2);
  5306  0010C6  506C               	movf	_blinkOn,w,c
  5307  0010C8  E003               	bz	l4451
  5308  0010CA  C095  FF8A         	movff	_ledStatuses+5,3978	;volatile
  5309  0010CE  D004               	goto	l4453
  5310  0010D0                     l4451:
  5311  0010D0  0100               	movlb	0	; () banked
  5312  0010D2  5195               	movf	(_ledStatuses+5)& (0+255),w,b
  5313  0010D4  1985               	xorwf	(_ledBlink+5)& (0+255),w,b
  5314  0010D6  6E8A               	movwf	3978,c	;volatile
  5315  0010D8                     l4453:
  5316  0010D8  FFFF               	dw	65535	; assembler added errata NOP
  5317  0010DA  0E02               	movlw	2
  5318  0010DC  EC83  F014         	call	_UpdateLedRegister
  5319                           
  5320                           ;main.c: 521: if(blinkOn) LATB = ledStatuses[13]; else LATB = ledStatuses[13] ^ ledBlink
      +                          [13]; UpdateLedRegister(3);
  5321  0010E0  506C               	movf	_blinkOn,w,c
  5322  0010E2  E003               	bz	l4459
  5323  0010E4  C09D  FF8A         	movff	_ledStatuses+13,3978	;volatile
  5324  0010E8  D004               	goto	l4461
  5325  0010EA                     l4459:
  5326  0010EA  0100               	movlb	0	; () banked
  5327  0010EC  519D               	movf	(_ledStatuses+13)& (0+255),w,b
  5328  0010EE  198D               	xorwf	(_ledBlink+13)& (0+255),w,b
  5329  0010F0  6E8A               	movwf	3978,c	;volatile
  5330  0010F2                     l4461:
  5331  0010F2  FFFF               	dw	65535	; assembler added errata NOP
  5332  0010F4  0E03               	movlw	3
  5333  0010F6  EC83  F014         	call	_UpdateLedRegister
  5334                           
  5335                           ;main.c: 522: LATAbits.LATA1 = 1;
  5336  0010FA  8289               	bsf	3977,1,c	;volatile
  5337                           
  5338                           ;main.c: 523: break;
  5339  0010FC  D079               	goto	l4541
  5340  0010FE                     l4465:
  5341                           
  5342                           ; BSR set to: 0
  5343                           ;main.c: 525: LATA &= 0xF0;
  5344  0010FE  0EF0               	movlw	240
  5345  001100  1689               	andwf	3977,f,c	;volatile
  5346                           
  5347                           ; BSR set to: 0
  5348                           ;main.c: 526: if(blinkOn) LATB = ledStatuses[6]; else LATB = ledStatuses[6] ^ ledBlink[6
      +                          ]; UpdateLedRegister(0);
  5349  001102  506C               	movf	_blinkOn,w,c
  5350  001104  E003               	bz	l4471
  5351                           
  5352                           ; BSR set to: 0
  5353  001106  C096  FF8A         	movff	_ledStatuses+6,3978	;volatile
  5354  00110A  D003               	goto	l4473
  5355  00110C                     l4471:
  5356                           
  5357                           ; BSR set to: 0
  5358  00110C  5196               	movf	(_ledStatuses+6)& (0+255),w,b
  5359  00110E  1986               	xorwf	(_ledBlink+6)& (0+255),w,b
  5360  001110  6E8A               	movwf	3978,c	;volatile
  5361  001112                     l4473:
  5362  001112  FFFF               	dw	65535	; assembler added errata NOP
  5363                           
  5364                           ; BSR set to: 0
  5365  001114  0E00               	movlw	0
  5366  001116  EC83  F014         	call	_UpdateLedRegister
  5367                           
  5368                           ;main.c: 527: if(blinkOn) LATB = ledStatuses[7]; else LATB = ledStatuses[7] ^ ledBlink[7
      +                          ]; UpdateLedRegister(1);
  5369  00111A  506C               	movf	_blinkOn,w,c
  5370  00111C  E003               	bz	l4479
  5371  00111E  C097  FF8A         	movff	_ledStatuses+7,3978	;volatile
  5372  001122  D004               	goto	l4481
  5373  001124                     l4479:
  5374  001124  0100               	movlb	0	; () banked
  5375  001126  5197               	movf	(_ledStatuses+7)& (0+255),w,b
  5376  001128  1987               	xorwf	(_ledBlink+7)& (0+255),w,b
  5377  00112A  6E8A               	movwf	3978,c	;volatile
  5378  00112C                     l4481:
  5379  00112C  FFFF               	dw	65535	; assembler added errata NOP
  5380  00112E  0E01               	movlw	1
  5381  001130  EC83  F014         	call	_UpdateLedRegister
  5382                           
  5383                           ;main.c: 528: if(blinkOn) LATB = ledStatuses[8]; else LATB = ledStatuses[8] ^ ledBlink[8
      +                          ]; UpdateLedRegister(2);
  5384  001134  506C               	movf	_blinkOn,w,c
  5385  001136  E003               	bz	l4487
  5386  001138  C098  FF8A         	movff	_ledStatuses+8,3978	;volatile
  5387  00113C  D004               	goto	l4489
  5388  00113E                     l4487:
  5389  00113E  0100               	movlb	0	; () banked
  5390  001140  5198               	movf	(_ledStatuses+8)& (0+255),w,b
  5391  001142  1988               	xorwf	(_ledBlink+8)& (0+255),w,b
  5392  001144  6E8A               	movwf	3978,c	;volatile
  5393  001146                     l4489:
  5394  001146  FFFF               	dw	65535	; assembler added errata NOP
  5395  001148  0E02               	movlw	2
  5396  00114A  EC83  F014         	call	_UpdateLedRegister
  5397                           
  5398                           ;main.c: 529: if(blinkOn) LATB = ledStatuses[14]; else LATB = ledStatuses[14] ^ ledBlink
      +                          [14]; UpdateLedRegister(3);
  5399  00114E  506C               	movf	_blinkOn,w,c
  5400  001150  E003               	bz	l4495
  5401  001152  C09E  FF8A         	movff	_ledStatuses+14,3978	;volatile
  5402  001156  D004               	goto	l4497
  5403  001158                     l4495:
  5404  001158  0100               	movlb	0	; () banked
  5405  00115A  519E               	movf	(_ledStatuses+14)& (0+255),w,b
  5406  00115C  198E               	xorwf	(_ledBlink+14)& (0+255),w,b
  5407  00115E  6E8A               	movwf	3978,c	;volatile
  5408  001160                     l4497:
  5409  001160  FFFF               	dw	65535	; assembler added errata NOP
  5410  001162  0E03               	movlw	3
  5411  001164  EC83  F014         	call	_UpdateLedRegister
  5412                           
  5413                           ;main.c: 530: LATAbits.LATA2 = 1;
  5414  001168  8489               	bsf	3977,2,c	;volatile
  5415                           
  5416                           ;main.c: 531: break;
  5417  00116A  D042               	goto	l4541
  5418  00116C                     l4501:
  5419                           
  5420                           ; BSR set to: 0
  5421                           ;main.c: 533: LATA &= 0xF0;
  5422  00116C  0EF0               	movlw	240
  5423  00116E  1689               	andwf	3977,f,c	;volatile
  5424                           
  5425                           ; BSR set to: 0
  5426                           ;main.c: 534: if(blinkOn) LATB = ledStatuses[9]; else LATB = ledStatuses[9] ^ ledBlink[9
      +                          ]; UpdateLedRegister(0);
  5427  001170  506C               	movf	_blinkOn,w,c
  5428  001172  E003               	bz	l4507
  5429                           
  5430                           ; BSR set to: 0
  5431  001174  C099  FF8A         	movff	_ledStatuses+9,3978	;volatile
  5432  001178  D003               	goto	l4509
  5433  00117A                     l4507:
  5434                           
  5435                           ; BSR set to: 0
  5436  00117A  5199               	movf	(_ledStatuses+9)& (0+255),w,b
  5437  00117C  1989               	xorwf	(_ledBlink+9)& (0+255),w,b
  5438  00117E  6E8A               	movwf	3978,c	;volatile
  5439  001180                     l4509:
  5440  001180  FFFF               	dw	65535	; assembler added errata NOP
  5441                           
  5442                           ; BSR set to: 0
  5443  001182  0E00               	movlw	0
  5444  001184  EC83  F014         	call	_UpdateLedRegister
  5445                           
  5446                           ;main.c: 535: if(blinkOn) LATB = ledStatuses[10]; else LATB = ledStatuses[10] ^ ledBlink
      +                          [10]; UpdateLedRegister(1);
  5447  001188  506C               	movf	_blinkOn,w,c
  5448  00118A  E003               	bz	l4515
  5449  00118C  C09A  FF8A         	movff	_ledStatuses+10,3978	;volatile
  5450  001190  D004               	goto	l4517
  5451  001192                     l4515:
  5452  001192  0100               	movlb	0	; () banked
  5453  001194  519A               	movf	(_ledStatuses+10)& (0+255),w,b
  5454  001196  198A               	xorwf	(_ledBlink+10)& (0+255),w,b
  5455  001198  6E8A               	movwf	3978,c	;volatile
  5456  00119A                     l4517:
  5457  00119A  FFFF               	dw	65535	; assembler added errata NOP
  5458  00119C  0E01               	movlw	1
  5459  00119E  EC83  F014         	call	_UpdateLedRegister
  5460                           
  5461                           ;main.c: 536: if(blinkOn) LATB = ledStatuses[11]; else LATB = ledStatuses[11] ^ ledBlink
      +                          [11]; UpdateLedRegister(2);
  5462  0011A2  506C               	movf	_blinkOn,w,c
  5463  0011A4  E003               	bz	l4523
  5464  0011A6  C09B  FF8A         	movff	_ledStatuses+11,3978	;volatile
  5465  0011AA  D004               	goto	l4525
  5466  0011AC                     l4523:
  5467  0011AC  0100               	movlb	0	; () banked
  5468  0011AE  519B               	movf	(_ledStatuses+11)& (0+255),w,b
  5469  0011B0  198B               	xorwf	(_ledBlink+11)& (0+255),w,b
  5470  0011B2  6E8A               	movwf	3978,c	;volatile
  5471  0011B4                     l4525:
  5472  0011B4  FFFF               	dw	65535	; assembler added errata NOP
  5473  0011B6  0E02               	movlw	2
  5474  0011B8  EC83  F014         	call	_UpdateLedRegister
  5475                           
  5476                           ;main.c: 537: if(blinkOn) LATB = ledStatuses[15]; else LATB = ledStatuses[15] ^ ledBlink
      +                          [15]; UpdateLedRegister(3);
  5477  0011BC  506C               	movf	_blinkOn,w,c
  5478  0011BE  E003               	bz	l4531
  5479  0011C0  C09F  FF8A         	movff	_ledStatuses+15,3978	;volatile
  5480  0011C4  D004               	goto	l4533
  5481  0011C6                     l4531:
  5482  0011C6  0100               	movlb	0	; () banked
  5483  0011C8  519F               	movf	(_ledStatuses+15)& (0+255),w,b
  5484  0011CA  198F               	xorwf	(_ledBlink+15)& (0+255),w,b
  5485  0011CC  6E8A               	movwf	3978,c	;volatile
  5486  0011CE                     l4533:
  5487  0011CE  FFFF               	dw	65535	; assembler added errata NOP
  5488  0011D0  0E03               	movlw	3
  5489  0011D2  EC83  F014         	call	_UpdateLedRegister
  5490                           
  5491                           ;main.c: 538: LATAbits.LATA3 = 1;
  5492  0011D6  8689               	bsf	3977,3,c	;volatile
  5493                           
  5494                           ;main.c: 539: break;
  5495  0011D8  D00B               	goto	l4541
  5496  0011DA                     l4539:
  5497  0011DA  FFFF               	dw	65535	; assembler added errata NOP
  5498                           
  5499                           ; BSR set to: 0
  5500  0011DC  51CE               	movf	_currentLedBlock& (0+255),w,b
  5501                           
  5502                           ; Switch size 1, requested type "speed"
  5503                           ; Number of cases is 4, Range of values is 0 to 3
  5504                           ; switch strategies available:
  5505                           ; Name         Instructions Cycles
  5506                           ; simple_byte           13     7 (average)
  5507                           ;	Chosen strategy is simple_byte
  5508  0011DE  E101 D720          	bz	l4393
  5509  0011E2  0A01               	xorlw	1	; case 1
  5510  0011E4  E101 D754          	bz	l4429
  5511  0011E8  0A03               	xorlw	3	; case 2
  5512  0011EA  E089               	bz	l4465
  5513  0011EC  0A01               	xorlw	1	; case 3
  5514  0011EE  E0BE               	bz	l4501
  5515  0011F0                     l4541:
  5516  0011F0  FFFF               	dw	65535	; assembler added errata NOP
  5517                           
  5518                           ;main.c: 542: currentLedBlock++;
  5519  0011F2  0100               	movlb	0	; () banked
  5520  0011F4  2BCE               	incf	_currentLedBlock& (0+255),f,b
  5521                           
  5522                           ;main.c: 545: currentLedBlock &= 0xFB;
  5523  0011F6  95CE               	bcf	_currentLedBlock& (0+255),2,b
  5524                           
  5525                           ; BSR set to: 0
  5526  0011F8  0012               	return		;funcret
  5527  0011FA  FFFF               	dw	65535	; errata NOP
  5528  0011FC                     __end_of_ProcessLightBlock:
  5529                           	opt stack 0
  5530                           tblptru	equ	0xFF8
  5531                           tblptrh	equ	0xFF7
  5532                           tblptrl	equ	0xFF6
  5533                           tablat	equ	0xFF5
  5534                           prodh	equ	0xFF4
  5535                           prodl	equ	0xFF3
  5536                           intcon	equ	0xFF2
  5537                           postinc0	equ	0xFEE
  5538                           wreg	equ	0xFE8
  5539                           postdec1	equ	0xFE5
  5540                           fsr1h	equ	0xFE2
  5541                           fsr1l	equ	0xFE1
  5542                           indf2	equ	0xFDF
  5543                           postinc2	equ	0xFDE
  5544                           postdec2	equ	0xFDD
  5545                           plusw2	equ	0xFDB
  5546                           fsr2h	equ	0xFDA
  5547                           fsr2l	equ	0xFD9
  5548                           status	equ	0xFD8
  5549                           
  5550 ;; *************** function _UpdateLedRegister *****************
  5551 ;; Defined at:
  5552 ;;		line 260 in file "main.c"
  5553 ;; Parameters:    Size  Location     Type
  5554 ;;  regIndex        1    wreg     unsigned char 
  5555 ;; Auto vars:     Size  Location     Type
  5556 ;;  regIndex        1    6[COMRAM] unsigned char 
  5557 ;; Return value:  Size  Location     Type
  5558 ;;                  1    wreg      void 
  5559 ;; Registers used:
  5560 ;;		wreg, status,2, status,0
  5561 ;; Tracked objects:
  5562 ;;		On entry : 0/0
  5563 ;;		On exit  : 0/0
  5564 ;;		Unchanged: 0/0
  5565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5566 ;;      Params:         0       0       0       0       0       0       0
  5567 ;;      Locals:         1       0       0       0       0       0       0
  5568 ;;      Temps:          0       0       0       0       0       0       0
  5569 ;;      Totals:         1       0       0       0       0       0       0
  5570 ;;Total ram usage:        1 bytes
  5571 ;; Hardware stack levels used:    1
  5572 ;; Hardware stack levels required when called:    2
  5573 ;; This function calls:
  5574 ;;		Nothing
  5575 ;; This function is called by:
  5576 ;;		_ProcessLightBlock
  5577 ;; This function uses a non-reentrant model
  5578 ;;
  5579                           
  5580                           	psect	text21
  5581  002906                     __ptext21:
  5582                           	opt stack 0
  5583  002906                     _UpdateLedRegister:
  5584                           	opt stack 27
  5585                           
  5586                           ; BSR set to: 0
  5587                           ;incstack = 0
  5588  002906  FFFF               	dw	65535
  5589                           
  5590                           ;UpdateLedRegister@regIndex stored from wreg
  5591  002908  6E07               	movwf	UpdateLedRegister@regIndex,c
  5592                           
  5593                           ;main.c: 262: switch(regIndex)
  5594  00290A  D014               	goto	l3771
  5595  00290C                     l243:
  5596                           
  5597                           ;main.c: 265: LATAbits.LATA4 = 0;
  5598  00290C  9889               	bcf	3977,4,c	;volatile
  5599                           
  5600                           ;main.c: 266: TRISAbits.RA4 = 0;
  5601  00290E  9892               	bcf	3986,4,c	;volatile
  5602                           
  5603                           ;main.c: 267: LATAbits.LATA4 = 1;
  5604  002910  8889               	bsf	3977,4,c	;volatile
  5605                           
  5606                           ;main.c: 268: TRISAbits.RA4 = 1;
  5607  002912  8892               	bsf	3986,4,c	;volatile
  5608                           
  5609                           ;main.c: 269: break;
  5610  002914  D018               	goto	l248
  5611  002916                     l245:
  5612                           
  5613                           ;main.c: 271: LATCbits.LATC3 = 0;
  5614  002916  968B               	bcf	3979,3,c	;volatile
  5615                           
  5616                           ;main.c: 272: TRISCbits.RC3 = 0;
  5617  002918  9694               	bcf	3988,3,c	;volatile
  5618                           
  5619                           ;main.c: 273: LATCbits.LATC3 = 1;
  5620  00291A  868B               	bsf	3979,3,c	;volatile
  5621                           
  5622                           ;main.c: 274: TRISCbits.RC3 = 1;
  5623  00291C  8694               	bsf	3988,3,c	;volatile
  5624                           
  5625                           ;main.c: 275: break;
  5626  00291E  D013               	goto	l248
  5627  002920                     l246:
  5628                           
  5629                           ;main.c: 277: LATCbits.LATC0 = 0;
  5630  002920  908B               	bcf	3979,0,c	;volatile
  5631                           
  5632                           ;main.c: 278: TRISCbits.RC0 = 0;
  5633  002922  9094               	bcf	3988,0,c	;volatile
  5634                           
  5635                           ;main.c: 279: LATCbits.LATC0 = 1;
  5636  002924  808B               	bsf	3979,0,c	;volatile
  5637                           
  5638                           ;main.c: 280: TRISCbits.RC0 = 1;
  5639  002926  8094               	bsf	3988,0,c	;volatile
  5640                           
  5641                           ;main.c: 281: break;
  5642  002928  D00E               	goto	l248
  5643  00292A                     l247:
  5644                           
  5645                           ;main.c: 283: LATCbits.LATC1 = 0;
  5646  00292A  928B               	bcf	3979,1,c	;volatile
  5647                           
  5648                           ;main.c: 284: TRISCbits.RC1 = 0;
  5649  00292C  9294               	bcf	3988,1,c	;volatile
  5650                           
  5651                           ;main.c: 285: LATCbits.LATC1 = 1;
  5652  00292E  828B               	bsf	3979,1,c	;volatile
  5653                           
  5654                           ;main.c: 286: TRISCbits.RC1 = 1;
  5655  002930  8294               	bsf	3988,1,c	;volatile
  5656                           
  5657                           ;main.c: 287: break;
  5658  002932  D009               	goto	l248
  5659  002934                     l3771:
  5660  002934  FFFF               	dw	65535	; assembler added errata NOP
  5661  002936  5007               	movf	UpdateLedRegister@regIndex,w,c
  5662                           
  5663                           ; Switch size 1, requested type "speed"
  5664                           ; Number of cases is 4, Range of values is 0 to 3
  5665                           ; switch strategies available:
  5666                           ; Name         Instructions Cycles
  5667                           ; simple_byte           13     7 (average)
  5668                           ;	Chosen strategy is simple_byte
  5669  002938  E0E9               	bz	l243
  5670  00293A  0A01               	xorlw	1	; case 1
  5671  00293C  E0EC               	bz	l245
  5672  00293E  0A03               	xorlw	3	; case 2
  5673  002940  E0EF               	bz	l246
  5674  002942  0A01               	xorlw	1	; case 3
  5675  002944  E0F2               	bz	l247
  5676  002946                     l248:
  5677  002946  FFFF               	dw	65535	; assembler added errata NOP
  5678  002948  0012               	return		;funcret
  5679  00294A  FFFF               	dw	65535	; errata NOP
  5680  00294C                     __end_of_UpdateLedRegister:
  5681                           	opt stack 0
  5682                           tblptru	equ	0xFF8
  5683                           tblptrh	equ	0xFF7
  5684                           tblptrl	equ	0xFF6
  5685                           tablat	equ	0xFF5
  5686                           prodh	equ	0xFF4
  5687                           prodl	equ	0xFF3
  5688                           intcon	equ	0xFF2
  5689                           postinc0	equ	0xFEE
  5690                           wreg	equ	0xFE8
  5691                           postdec1	equ	0xFE5
  5692                           fsr1h	equ	0xFE2
  5693                           fsr1l	equ	0xFE1
  5694                           indf2	equ	0xFDF
  5695                           postinc2	equ	0xFDE
  5696                           postdec2	equ	0xFDD
  5697                           plusw2	equ	0xFDB
  5698                           fsr2h	equ	0xFDA
  5699                           fsr2l	equ	0xFD9
  5700                           status	equ	0xFD8
  5701                           
  5702 ;; *************** function _ProcessDiary *****************
  5703 ;; Defined at:
  5704 ;;		line 599 in file "main.c"
  5705 ;; Parameters:    Size  Location     Type
  5706 ;;		None
  5707 ;; Auto vars:     Size  Location     Type
  5708 ;;  minute          1   19[COMRAM] unsigned char 
  5709 ;;  hour            1   18[COMRAM] unsigned char 
  5710 ;; Return value:  Size  Location     Type
  5711 ;;                  1    wreg      void 
  5712 ;; Registers used:
  5713 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5714 ;; Tracked objects:
  5715 ;;		On entry : F/1
  5716 ;;		On exit  : 0/0
  5717 ;;		Unchanged: 0/0
  5718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5719 ;;      Params:         0       0       0       0       0       0       0
  5720 ;;      Locals:         2       0       0       0       0       0       0
  5721 ;;      Temps:          4       0       0       0       0       0       0
  5722 ;;      Totals:         6       0       0       0       0       0       0
  5723 ;;Total ram usage:        6 bytes
  5724 ;; Hardware stack levels used:    1
  5725 ;; Hardware stack levels required when called:    4
  5726 ;; This function calls:
  5727 ;;		_GetTime
  5728 ;;		_LightLed
  5729 ;;		_LoadNextEvent
  5730 ;;		_SwitchOffAllLeds
  5731 ;;		_getHourMin
  5732 ;; This function is called by:
  5733 ;;		_main
  5734 ;; This function uses a non-reentrant model
  5735 ;;
  5736                           
  5737                           	psect	text22
  5738  002092                     __ptext22:
  5739                           	opt stack 0
  5740  002092                     _ProcessDiary:
  5741                           	opt stack 26
  5742                           
  5743                           ;incstack = 0
  5744  002092  FFFF               	dw	65535
  5745                           
  5746                           ; BSR set to: 1
  5747                           ;main.c: 602: if(curEventNum == 0xff)
  5748  002094  286F               	incf	_curEventNum,w,c
  5749  002096  E05A               	bz	l370
  5750                           
  5751                           ; BSR set to: 1
  5752                           ;main.c: 604: uint8_t hour, minute;
  5753                           ;main.c: 605: if(!getHourMin(&hour, &minute))
  5754  002098  0E14               	movlw	low ProcessDiary@minute
  5755  00209A  6E07               	movwf	getHourMin@min,c
  5756  00209C  0E13               	movlw	ProcessDiary@hour& (0+255)
  5757  00209E  EC39  F015         	call	_getHourMin
  5758  0020A2  0900               	iorlw	0
  5759  0020A4  E053               	bz	l370
  5760                           
  5761                           ;main.c: 608: if(hour == 0 && minute == 0)
  5762  0020A6  5013               	movf	ProcessDiary@hour,w,c
  5763  0020A8  E10C               	bnz	l5789
  5764  0020AA  5014               	movf	ProcessDiary@minute,w,c
  5765  0020AC  E10A               	bnz	l5789
  5766                           
  5767                           ;main.c: 609: {
  5768                           ;main.c: 610: SwitchOffAllLeds();
  5769  0020AE  EC64  F015         	call	_SwitchOffAllLeds	;wreg free
  5770                           
  5771                           ;main.c: 611: curEventNum = 0xff;
  5772  0020B2  686F               	setf	_curEventNum,c
  5773                           
  5774                           ;main.c: 612: _MODBUSInputRegs[2] = (((uint16_t)currentAlarmedEventNum<<8)|curEventNum);
  5775  0020B4  5070               	movf	_currentAlarmedEventNum,w,c
  5776  0020B6  6E0F               	movwf	??_ProcessDiary& (0+255),c
  5777  0020B8  506F               	movf	_curEventNum,w,c
  5778  0020BA  0101               	movlb	1	; () banked
  5779  0020BC  6FAE               	movwf	(__MODBUSInputRegs+4)& (0+255),b
  5780  0020BE  C00F  F1AF         	movff	??_ProcessDiary,__MODBUSInputRegs+5
  5781  0020C2                     l5789:
  5782                           
  5783                           ;main.c: 614: }
  5784                           ;main.c: 617: if(curEventHour == hour && curEventMinute == minute)
  5785  0020C2  5013               	movf	ProcessDiary@hour,w,c
  5786  0020C4  0100               	movlb	0	; () banked
  5787  0020C6  19CB               	xorwf	_curEventHour& (0+255),w,b
  5788  0020C8  E141               	bnz	l370
  5789                           
  5790                           ; BSR set to: 0
  5791  0020CA  5014               	movf	ProcessDiary@minute,w,c
  5792  0020CC  19CC               	xorwf	_curEventMinute& (0+255),w,b
  5793  0020CE  E13E               	bnz	l370
  5794                           
  5795                           ; BSR set to: 0
  5796                           ;main.c: 618: {
  5797                           ;main.c: 620: if(currentAlarmedEventNum != 0xff)
  5798  0020D0  2870               	incf	_currentAlarmedEventNum,w,c
  5799  0020D2  E006               	bz	l5797
  5800                           
  5801                           ; BSR set to: 0
  5802                           ;main.c: 621: {
  5803                           ;main.c: 622: LightLed(currentAlarmedEventNum + 1, LED_RED, 0);
  5804  0020D4  0E02               	movlw	2
  5805  0020D6  6E07               	movwf	LightLed@ledState,c
  5806  0020D8  6A08               	clrf	LightLed@blink,c
  5807  0020DA  2870               	incf	_currentAlarmedEventNum,w,c
  5808  0020DC  ECFE  F008         	call	_LightLed
  5809  0020E0                     l5797:
  5810                           
  5811                           ;main.c: 623: }
  5812                           ;main.c: 625: {
  5813                           ;main.c: 626: currentAlarmedEventNum = curEventNum;
  5814  0020E0  C06F  F070         	movff	_curEventNum,_currentAlarmedEventNum
  5815                           
  5816                           ;main.c: 628: if(curEventType == 0)
  5817  0020E4  0100               	movlb	0	; () banked
  5818  0020E6  51CD               	movf	_curEventType& (0+255),w,b
  5819  0020E8  E107               	bnz	l5803
  5820                           
  5821                           ; BSR set to: 0
  5822                           ;main.c: 629: {
  5823                           ;main.c: 630: LightLed(currentAlarmedEventNum + 1, LED_GREEN, 1);
  5824  0020EA  0E01               	movlw	1
  5825  0020EC  6E07               	movwf	LightLed@ledState,c
  5826  0020EE  6E08               	movwf	LightLed@blink,c
  5827  0020F0  2870               	incf	_currentAlarmedEventNum,w,c
  5828  0020F2  ECFE  F008         	call	_LightLed
  5829                           
  5830                           ;main.c: 631: }
  5831  0020F6  D007               	goto	l376
  5832  0020F8                     l5803:
  5833                           
  5834                           ; BSR set to: 0
  5835                           ;main.c: 632: else
  5836                           ;main.c: 633: {
  5837                           ;main.c: 634: LightLed(currentAlarmedEventNum + 1, LED_RED, 1);
  5838  0020F8  0E02               	movlw	2
  5839  0020FA  6E07               	movwf	LightLed@ledState,c
  5840  0020FC  0E01               	movlw	1
  5841  0020FE  6E08               	movwf	LightLed@blink,c
  5842  002100  2870               	incf	_currentAlarmedEventNum,w,c
  5843  002102  ECFE  F008         	call	_LightLed
  5844  002106                     l376:
  5845  002106  FFFF               	dw	65535	; assembler added errata NOP
  5846                           
  5847                           ;main.c: 635: }
  5848                           ;main.c: 636: eventResetSecond = *GetTime() + eventAcceptTime;
  5849  002108  ECDD  F015         	call	_GetTime	;wreg free
  5850  00210C  6ED9               	movwf	fsr2l,c
  5851  00210E  6ADA               	clrf	fsr2h,c
  5852  002110  CFDE F00F          	movff	postinc2,??_ProcessDiary
  5853  002114  CFDE F010          	movff	postinc2,??_ProcessDiary+1
  5854  002118  CFDE F011          	movff	postinc2,??_ProcessDiary+2
  5855  00211C  CFDE F012          	movff	postinc2,??_ProcessDiary+3
  5856  002120  0100               	movlb	0	; () banked
  5857  002122  51D0               	movf	_eventAcceptTime& (0+255),w,b
  5858  002124  240F               	addwf	??_ProcessDiary,w,c
  5859  002126  6FA8               	movwf	_eventResetSecond& (0+255),b
  5860  002128  0E00               	movlw	0
  5861  00212A  2010               	addwfc	??_ProcessDiary+1,w,c
  5862  00212C  6FA9               	movwf	(_eventResetSecond+1)& (0+255),b
  5863  00212E  0E00               	movlw	0
  5864  002130  2011               	addwfc	??_ProcessDiary+2,w,c
  5865  002132  6FAA               	movwf	(_eventResetSecond+2)& (0+255),b
  5866  002134  0E00               	movlw	0
  5867  002136  2012               	addwfc	??_ProcessDiary+3,w,c
  5868  002138  6FAB               	movwf	(_eventResetSecond+3)& (0+255),b
  5869                           
  5870                           ; BSR set to: 0
  5871                           ;main.c: 637: LoadNextEvent();
  5872  00213A  EC04  F012         	call	_LoadNextEvent	;wreg free
  5873                           
  5874                           ;main.c: 638: }
  5875                           ;main.c: 639: _MODBUSInputRegs[2] = (((uint16_t)currentAlarmedEventNum<<8)|curEventNum);
  5876  00213E  5070               	movf	_currentAlarmedEventNum,w,c
  5877  002140  6E0F               	movwf	??_ProcessDiary& (0+255),c
  5878  002142  506F               	movf	_curEventNum,w,c
  5879  002144  0101               	movlb	1	; () banked
  5880  002146  6FAE               	movwf	(__MODBUSInputRegs+4)& (0+255),b
  5881  002148  C00F  F1AF         	movff	??_ProcessDiary,__MODBUSInputRegs+5
  5882  00214C                     l370:
  5883  00214C  0012               	return		;funcret
  5884  00214E  FFFF               	dw	65535	; errata NOP
  5885  002150                     __end_of_ProcessDiary:
  5886                           	opt stack 0
  5887                           tblptru	equ	0xFF8
  5888                           tblptrh	equ	0xFF7
  5889                           tblptrl	equ	0xFF6
  5890                           tablat	equ	0xFF5
  5891                           prodh	equ	0xFF4
  5892                           prodl	equ	0xFF3
  5893                           intcon	equ	0xFF2
  5894                           postinc0	equ	0xFEE
  5895                           wreg	equ	0xFE8
  5896                           postdec1	equ	0xFE5
  5897                           fsr1h	equ	0xFE2
  5898                           fsr1l	equ	0xFE1
  5899                           indf2	equ	0xFDF
  5900                           postinc2	equ	0xFDE
  5901                           postdec2	equ	0xFDD
  5902                           plusw2	equ	0xFDB
  5903                           fsr2h	equ	0xFDA
  5904                           fsr2l	equ	0xFD9
  5905                           status	equ	0xFD8
  5906                           
  5907 ;; *************** function _SwitchOffAllLeds *****************
  5908 ;; Defined at:
  5909 ;;		line 333 in file "main.c"
  5910 ;; Parameters:    Size  Location     Type
  5911 ;;		None
  5912 ;; Auto vars:     Size  Location     Type
  5913 ;;  i               1    6[COMRAM] unsigned char 
  5914 ;; Return value:  Size  Location     Type
  5915 ;;                  1    wreg      void 
  5916 ;; Registers used:
  5917 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5918 ;; Tracked objects:
  5919 ;;		On entry : 0/0
  5920 ;;		On exit  : 0/0
  5921 ;;		Unchanged: 0/0
  5922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5923 ;;      Params:         0       0       0       0       0       0       0
  5924 ;;      Locals:         1       0       0       0       0       0       0
  5925 ;;      Temps:          0       0       0       0       0       0       0
  5926 ;;      Totals:         1       0       0       0       0       0       0
  5927 ;;Total ram usage:        1 bytes
  5928 ;; Hardware stack levels used:    1
  5929 ;; Hardware stack levels required when called:    2
  5930 ;; This function calls:
  5931 ;;		Nothing
  5932 ;; This function is called by:
  5933 ;;		_InitFromEeprom
  5934 ;;		_ProcessDiary
  5935 ;; This function uses a non-reentrant model
  5936 ;;
  5937                           
  5938                           	psect	text23
  5939  002AC8                     __ptext23:
  5940                           	opt stack 0
  5941  002AC8                     _SwitchOffAllLeds:
  5942                           	opt stack 26
  5943                           
  5944                           ;incstack = 0
  5945  002AC8  FFFF               	dw	65535
  5946                           
  5947                           ;main.c: 335: for(uint8_t i = 0; i < 16 - 1; i++)
  5948  002ACA  6A07               	clrf	SwitchOffAllLeds@i,c
  5949  002ACC                     l5521:
  5950  002ACC  FFFF               	dw	65535	; assembler added errata NOP
  5951                           
  5952                           ;main.c: 336: {
  5953                           ;main.c: 337: ledStatuses[i] = 0;
  5954  002ACE  5007               	movf	SwitchOffAllLeds@i,w,c
  5955  002AD0  0F90               	addlw	low _ledStatuses
  5956  002AD2  6ED9               	movwf	fsr2l,c
  5957  002AD4  6ADA               	clrf	fsr2h,c
  5958  002AD6  6ADF               	clrf	indf2,c
  5959                           
  5960                           ;main.c: 338: ledBlink[i] = 0;
  5961  002AD8  5007               	movf	SwitchOffAllLeds@i,w,c
  5962  002ADA  0F80               	addlw	low _ledBlink
  5963  002ADC  6ED9               	movwf	fsr2l,c
  5964  002ADE  6ADA               	clrf	fsr2h,c
  5965  002AE0  6ADF               	clrf	indf2,c
  5966  002AE2  2A07               	incf	SwitchOffAllLeds@i,f,c
  5967  002AE4  0E0E               	movlw	14
  5968  002AE6  6407               	cpfsgt	SwitchOffAllLeds@i,c
  5969  002AE8  D7F1               	goto	l5521
  5970  002AEA  0C0E               	retlw	14	;funcret
  5971  002AEC  FFFF               	dw	65535	; errata NOP
  5972  002AEE                     __end_of_SwitchOffAllLeds:
  5973                           	opt stack 0
  5974                           tblptru	equ	0xFF8
  5975                           tblptrh	equ	0xFF7
  5976                           tblptrl	equ	0xFF6
  5977                           tablat	equ	0xFF5
  5978                           prodh	equ	0xFF4
  5979                           prodl	equ	0xFF3
  5980                           intcon	equ	0xFF2
  5981                           postinc0	equ	0xFEE
  5982                           wreg	equ	0xFE8
  5983                           postdec1	equ	0xFE5
  5984                           fsr1h	equ	0xFE2
  5985                           fsr1l	equ	0xFE1
  5986                           indf2	equ	0xFDF
  5987                           postinc2	equ	0xFDE
  5988                           postdec2	equ	0xFDD
  5989                           plusw2	equ	0xFDB
  5990                           fsr2h	equ	0xFDA
  5991                           fsr2l	equ	0xFD9
  5992                           status	equ	0xFD8
  5993                           
  5994 ;; *************** function _LoadNextEvent *****************
  5995 ;; Defined at:
  5996 ;;		line 566 in file "main.c"
  5997 ;; Parameters:    Size  Location     Type
  5998 ;;		None
  5999 ;; Auto vars:     Size  Location     Type
  6000 ;;  v1              1   10[COMRAM] unsigned char 
  6001 ;;  minute          1   12[COMRAM] unsigned char 
  6002 ;;  hour            1   11[COMRAM] unsigned char 
  6003 ;; Return value:  Size  Location     Type
  6004 ;;                  1    wreg      void 
  6005 ;; Registers used:
  6006 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6007 ;; Tracked objects:
  6008 ;;		On entry : 0/0
  6009 ;;		On exit  : 0/0
  6010 ;;		Unchanged: 0/0
  6011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6012 ;;      Params:         0       0       0       0       0       0       0
  6013 ;;      Locals:         3       0       0       0       0       0       0
  6014 ;;      Temps:          2       0       0       0       0       0       0
  6015 ;;      Totals:         5       0       0       0       0       0       0
  6016 ;;Total ram usage:        5 bytes
  6017 ;; Hardware stack levels used:    1
  6018 ;; Hardware stack levels required when called:    3
  6019 ;; This function calls:
  6020 ;;		_getHourMin
  6021 ;; This function is called by:
  6022 ;;		_InitFromEeprom
  6023 ;;		_ProcessDiary
  6024 ;;		_SetTimeFromRegs
  6025 ;; This function uses a non-reentrant model
  6026 ;;
  6027                           
  6028                           	psect	text24
  6029  002408                     __ptext24:
  6030                           	opt stack 0
  6031  002408                     _LoadNextEvent:
  6032                           	opt stack 25
  6033                           
  6034                           ;incstack = 0
  6035  002408  FFFF               	dw	65535
  6036                           
  6037                           ;main.c: 568: if(eventCount == 0)
  6038  00240A  506D               	movf	_eventCount,w,c
  6039  00240C  E03E               	bz	l360
  6040                           
  6041                           ;main.c: 570: uint8_t hour, minute;
  6042                           ;main.c: 571: if(!getHourMin(&hour, &minute))
  6043  00240E  0E0D               	movlw	low LoadNextEvent@minute
  6044  002410  6E07               	movwf	getHourMin@min,c
  6045  002412  0E0C               	movlw	LoadNextEvent@hour& (0+255)
  6046  002414  EC39  F015         	call	_getHourMin
  6047  002418  0900               	iorlw	0
  6048  00241A  E037               	bz	l360
  6049  00241C                     l5561:
  6050                           
  6051                           ;main.c: 581: {
  6052                           ;main.c: 582: if(curEventNum == 0xff)
  6053  00241C  286F               	incf	_curEventNum,w,c
  6054  00241E  E102               	bnz	l5565
  6055                           
  6056                           ;main.c: 583: curEventNum = 0;
  6057  002420  6A6F               	clrf	_curEventNum,c
  6058  002422  D001               	goto	l5567
  6059  002424                     l5565:
  6060                           
  6061                           ;main.c: 584: else
  6062                           ;main.c: 585: curEventNum++;
  6063  002424  2A6F               	incf	_curEventNum,f,c
  6064  002426                     l5567:
  6065  002426  FFFF               	dw	65535	; assembler added errata NOP
  6066                           
  6067                           ;main.c: 586: _MODBUSInputRegs[2] = (((uint16_t)currentAlarmedEventNum<<8)|curEventNum);
  6068  002428  5070               	movf	_currentAlarmedEventNum,w,c
  6069  00242A  6E09               	movwf	??_LoadNextEvent& (0+255),c
  6070  00242C  506F               	movf	_curEventNum,w,c
  6071  00242E  0101               	movlb	1	; () banked
  6072  002430  6FAE               	movwf	(__MODBUSInputRegs+4)& (0+255),b
  6073  002432  C009  F1AF         	movff	??_LoadNextEvent,__MODBUSInputRegs+5
  6074                           
  6075                           ; BSR set to: 1
  6076                           ;main.c: 587: if(curEventNum >= eventCount)
  6077  002436  506D               	movf	_eventCount,w,c
  6078  002438  5C6F               	subwf	_curEventNum,w,c
  6079  00243A  E227               	bc	l360
  6080                           
  6081                           ; BSR set to: 1
  6082                           ;main.c: 590: uint8_t v1 = ( EEADR = 18 + 1 + curEventNum * 2, (void)0, RD = 1, EEDATA);
  6083  00243C  506F               	movf	_curEventNum,w,c
  6084  00243E  0D02               	mullw	2
  6085  002440  50F3               	movf	prodl,w,c
  6086  002442  0F13               	addlw	19
  6087  002444  6EA9               	movwf	4009,c	;volatile
  6088                           
  6089                           ; BSR set to: 1
  6090  002446  80A6               	bsf	4006,0,c	;volatile
  6091                           
  6092                           ; BSR set to: 1
  6093  002448  CFA8 F00B          	movff	4008,LoadNextEvent@v1	;volatile
  6094                           
  6095                           ; BSR set to: 1
  6096                           ;main.c: 591: curEventHour = v1 & 0x1F;
  6097  00244C  500B               	movf	LoadNextEvent@v1,w,c
  6098  00244E  0B1F               	andlw	31
  6099  002450  0100               	movlb	0	; () banked
  6100  002452  6FCB               	movwf	_curEventHour& (0+255),b
  6101                           
  6102                           ; BSR set to: 0
  6103                           ;main.c: 592: curEventType = (((v1) >> (5)) & 0x01);
  6104  002454  380B               	swapf	LoadNextEvent@v1,w,c
  6105  002456  42E8               	rrncf	wreg,f,c
  6106  002458  0B07               	andlw	7
  6107  00245A  0B01               	andlw	1
  6108  00245C  6FCD               	movwf	_curEventType& (0+255),b
  6109                           
  6110                           ;main.c: 593: curEventMinute = ( EEADR = 18 + 1 + curEventNum * 2 + 1, (void)0, RD = 1, 
      +                          EEDATA);
  6111  00245E  506F               	movf	_curEventNum,w,c
  6112  002460  0D02               	mullw	2
  6113  002462  50F3               	movf	prodl,w,c
  6114  002464  0F14               	addlw	20
  6115  002466  6EA9               	movwf	4009,c	;volatile
  6116                           
  6117                           ; BSR set to: 0
  6118  002468  80A6               	bsf	4006,0,c	;volatile
  6119                           
  6120                           ; BSR set to: 0
  6121  00246A  CFA8 F0CC          	movff	4008,_curEventMinute	;volatile
  6122                           
  6123                           ; BSR set to: 0
  6124                           ;main.c: 594: _MODBUSInputRegs[3] = (((uint16_t)curEventHour<<8)|curEventMinute);
  6125  00246E  51CB               	movf	_curEventHour& (0+255),w,b
  6126  002470  6E09               	movwf	??_LoadNextEvent& (0+255),c
  6127  002472  51CC               	movf	_curEventMinute& (0+255),w,b
  6128  002474  0101               	movlb	1	; () banked
  6129  002476  6FB0               	movwf	(__MODBUSInputRegs+6)& (0+255),b
  6130  002478  C009  F1B1         	movff	??_LoadNextEvent,__MODBUSInputRegs+7
  6131                           
  6132                           ; BSR set to: 1
  6133                           ;main.c: 595: }while(curEventHour < hour || curEventMinute <= minute);
  6134  00247C  500C               	movf	LoadNextEvent@hour,w,c
  6135  00247E  0100               	movlb	0	; () banked
  6136  002480  5DCB               	subwf	_curEventHour& (0+255),w,b
  6137  002482  E3CC               	bnc	l5561
  6138                           
  6139                           ; BSR set to: 0
  6140  002484  51CC               	movf	_curEventMinute& (0+255),w,b
  6141  002486  5C0D               	subwf	LoadNextEvent@minute,w,c
  6142  002488  E2C9               	bc	l5561
  6143  00248A                     l360:
  6144  00248A  0012               	return		;funcret
  6145  00248C  FFFF               	dw	65535	; errata NOP
  6146  00248E                     __end_of_LoadNextEvent:
  6147                           	opt stack 0
  6148                           tblptru	equ	0xFF8
  6149                           tblptrh	equ	0xFF7
  6150                           tblptrl	equ	0xFF6
  6151                           tablat	equ	0xFF5
  6152                           prodh	equ	0xFF4
  6153                           prodl	equ	0xFF3
  6154                           intcon	equ	0xFF2
  6155                           postinc0	equ	0xFEE
  6156                           wreg	equ	0xFE8
  6157                           postdec1	equ	0xFE5
  6158                           fsr1h	equ	0xFE2
  6159                           fsr1l	equ	0xFE1
  6160                           indf2	equ	0xFDF
  6161                           postinc2	equ	0xFDE
  6162                           postdec2	equ	0xFDD
  6163                           plusw2	equ	0xFDB
  6164                           fsr2h	equ	0xFDA
  6165                           fsr2l	equ	0xFD9
  6166                           status	equ	0xFD8
  6167                           
  6168 ;; *************** function _getHourMin *****************
  6169 ;; Defined at:
  6170 ;;		line 245 in file "interrupts.c"
  6171 ;; Parameters:    Size  Location     Type
  6172 ;;  hour            1    wreg     PTR unsigned char 
  6173 ;;		 -> main@hour(1), ProcessDiary@hour(1), LoadNextEvent@hour(1), 
  6174 ;;  min             1    6[COMRAM] PTR unsigned char 
  6175 ;;		 -> main@minute(1), ProcessDiary@minute(1), LoadNextEvent@minute(1), 
  6176 ;; Auto vars:     Size  Location     Type
  6177 ;;  hour            1    7[COMRAM] PTR unsigned char 
  6178 ;;		 -> main@hour(1), ProcessDiary@hour(1), LoadNextEvent@hour(1), 
  6179 ;; Return value:  Size  Location     Type
  6180 ;;                  1    wreg      unsigned char 
  6181 ;; Registers used:
  6182 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6183 ;; Tracked objects:
  6184 ;;		On entry : 0/0
  6185 ;;		On exit  : 0/0
  6186 ;;		Unchanged: 0/0
  6187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6188 ;;      Params:         1       0       0       0       0       0       0
  6189 ;;      Locals:         1       0       0       0       0       0       0
  6190 ;;      Temps:          0       0       0       0       0       0       0
  6191 ;;      Totals:         2       0       0       0       0       0       0
  6192 ;;Total ram usage:        2 bytes
  6193 ;; Hardware stack levels used:    1
  6194 ;; Hardware stack levels required when called:    2
  6195 ;; This function calls:
  6196 ;;		Nothing
  6197 ;; This function is called by:
  6198 ;;		_LoadNextEvent
  6199 ;;		_ProcessDiary
  6200 ;;		_main
  6201 ;; This function uses a non-reentrant model
  6202 ;;
  6203                           
  6204                           	psect	text25
  6205  002A72                     __ptext25:
  6206                           	opt stack 0
  6207  002A72                     _getHourMin:
  6208                           	opt stack 25
  6209                           
  6210                           ;incstack = 0
  6211  002A72  FFFF               	dw	65535
  6212                           
  6213                           ;getHourMin@hour stored from wreg
  6214  002A74  6E08               	movwf	getHourMin@hour,c
  6215                           
  6216                           ;interrupts.c: 247: if(globalHours == 0xFF)
  6217  002A76  2871               	incf	_globalHours,w,c	;volatile
  6218  002A78  E102               	bnz	l101
  6219                           
  6220                           ;interrupts.c: 248: return 0;
  6221  002A7A  0E00               	movlw	0
  6222  002A7C  D00D               	goto	l102
  6223  002A7E                     l101:
  6224                           
  6225                           ;interrupts.c: 249: (INTCONbits.GIE = 0);
  6226  002A7E  9EF2               	bcf	intcon,7,c	;volatile
  6227                           
  6228                           ;interrupts.c: 250: *hour = globalHours;
  6229  002A80  5008               	movf	getHourMin@hour,w,c
  6230  002A82  6ED9               	movwf	fsr2l,c
  6231  002A84  6ADA               	clrf	fsr2h,c
  6232  002A86  C071  FFDF         	movff	_globalHours,indf2	;volatile
  6233                           
  6234                           ;interrupts.c: 251: *min = globalMinutes;
  6235  002A8A  5007               	movf	getHourMin@min,w,c
  6236  002A8C  6ED9               	movwf	fsr2l,c
  6237  002A8E  6ADA               	clrf	fsr2h,c
  6238  002A90  C06E  FFDF         	movff	_globalMinutes,indf2	;volatile
  6239                           
  6240                           ;interrupts.c: 252: (INTCONbits.GIE = 1);
  6241  002A94  8EF2               	bsf	intcon,7,c	;volatile
  6242                           
  6243                           ;interrupts.c: 253: return 1;
  6244  002A96  0E01               	movlw	1
  6245  002A98                     l102:
  6246  002A98  FFFF               	dw	65535	; assembler added errata NOP
  6247  002A9A  0012               	return		;funcret
  6248  002A9C  FFFF               	dw	65535	; errata NOP
  6249  002A9E                     __end_of_getHourMin:
  6250                           	opt stack 0
  6251                           tblptru	equ	0xFF8
  6252                           tblptrh	equ	0xFF7
  6253                           tblptrl	equ	0xFF6
  6254                           tablat	equ	0xFF5
  6255                           prodh	equ	0xFF4
  6256                           prodl	equ	0xFF3
  6257                           intcon	equ	0xFF2
  6258                           postinc0	equ	0xFEE
  6259                           wreg	equ	0xFE8
  6260                           postdec1	equ	0xFE5
  6261                           fsr1h	equ	0xFE2
  6262                           fsr1l	equ	0xFE1
  6263                           indf2	equ	0xFDF
  6264                           postinc2	equ	0xFDE
  6265                           postdec2	equ	0xFDD
  6266                           plusw2	equ	0xFDB
  6267                           fsr2h	equ	0xFDA
  6268                           fsr2l	equ	0xFD9
  6269                           status	equ	0xFD8
  6270                           
  6271 ;; *************** function _LightLed *****************
  6272 ;; Defined at:
  6273 ;;		line 344 in file "main.c"
  6274 ;; Parameters:    Size  Location     Type
  6275 ;;  ledNum          1    wreg     unsigned char 
  6276 ;;  ledState        1    6[COMRAM] enum E2426
  6277 ;;  blink           1    7[COMRAM] unsigned char 
  6278 ;; Auto vars:     Size  Location     Type
  6279 ;;  ledNum          1   11[COMRAM] unsigned char 
  6280 ;;  statusShift     1   13[COMRAM] unsigned char 
  6281 ;;  ststusIndex     1   12[COMRAM] unsigned char 
  6282 ;; Return value:  Size  Location     Type
  6283 ;;                  1    wreg      void 
  6284 ;; Registers used:
  6285 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6286 ;; Tracked objects:
  6287 ;;		On entry : 0/1
  6288 ;;		On exit  : 0/0
  6289 ;;		Unchanged: 0/0
  6290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6291 ;;      Params:         2       0       0       0       0       0       0
  6292 ;;      Locals:         3       0       0       0       0       0       0
  6293 ;;      Temps:          3       0       0       0       0       0       0
  6294 ;;      Totals:         8       0       0       0       0       0       0
  6295 ;;Total ram usage:        8 bytes
  6296 ;; Hardware stack levels used:    1
  6297 ;; Hardware stack levels required when called:    2
  6298 ;; This function calls:
  6299 ;;		Nothing
  6300 ;; This function is called by:
  6301 ;;		_ResetEvent
  6302 ;;		_ProcessDiary
  6303 ;;		_io_poll
  6304 ;; This function uses a non-reentrant model
  6305 ;;
  6306                           
  6307                           	psect	text26
  6308  0011FC                     __ptext26:
  6309                           	opt stack 0
  6310  0011FC                     _LightLed:
  6311                           	opt stack 27
  6312                           
  6313                           ;incstack = 0
  6314  0011FC  FFFF               	dw	65535
  6315                           
  6316                           ;LightLed@ledNum stored from wreg
  6317  0011FE  6E0C               	movwf	LightLed@ledNum,c
  6318                           
  6319                           ;main.c: 346: if(ledNum < 1 || ledNum > 60)
  6320  001200  500C               	movf	LightLed@ledNum,w,c
  6321  001202  E101 D120          	bz	l259
  6322  001206  0E3C               	movlw	60
  6323  001208  640C               	cpfsgt	LightLed@ledNum,c
  6324  00120A  D001               	goto	l5617
  6325  00120C  D11C               	goto	l259
  6326  00120E                     l5617:
  6327  00120E  FFFF               	dw	65535	; assembler added errata NOP
  6328                           
  6329                           ;main.c: 348: ledNum--;
  6330  001210  060C               	decf	LightLed@ledNum,f,c
  6331                           
  6332                           ;main.c: 350: uint8_t ststusIndex = ledNum >> 2;
  6333  001212  400C               	rrncf	LightLed@ledNum,w,c
  6334  001214  42E8               	rrncf	wreg,f,c
  6335  001216  0B3F               	andlw	63
  6336  001218  6E0D               	movwf	LightLed@ststusIndex,c
  6337                           
  6338                           ;main.c: 351: uint8_t statusShift = (ledNum & 0x03) << 1;
  6339  00121A  C00C  F009         	movff	LightLed@ledNum,??_LightLed
  6340  00121E  0E03               	movlw	3
  6341  001220  1609               	andwf	??_LightLed,f,c
  6342  001222  90D8               	bcf	status,0,c
  6343  001224  3409               	rlcf	??_LightLed,w,c
  6344  001226  6E0E               	movwf	LightLed@statusShift,c
  6345                           
  6346                           ;main.c: 353: switch(ledState)
  6347  001228  D105               	goto	l5643
  6348  00122A                     l5623:
  6349                           
  6350                           ;main.c: 356: ((ledStatuses[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1)));
  6351  00122A  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6352  00122E  2A09               	incf	??_LightLed,f,c
  6353  001230  0E01               	movlw	1
  6354  001232  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6355  001234  2A09               	incf	??_LightLed,f,c
  6356  001236  D003               	goto	u5654
  6357  001238                     u5655:
  6358  001238  FFFF               	dw	65535	; assembler added errata NOP
  6359  00123A  90D8               	bcf	status,0,c
  6360  00123C  360A               	rlcf	??_LightLed+1,f,c
  6361  00123E                     u5654:
  6362  00123E  FFFF               	dw	65535	; assembler added errata NOP
  6363  001240  2E09               	decfsz	??_LightLed,f,c
  6364  001242  D7FA               	goto	u5655
  6365  001244  1C0A               	comf	??_LightLed+1,w,c
  6366  001246  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  6367  001248  500D               	movf	LightLed@ststusIndex,w,c
  6368  00124A  0F90               	addlw	low _ledStatuses
  6369  00124C  6ED9               	movwf	fsr2l,c
  6370  00124E  6ADA               	clrf	fsr2h,c
  6371  001250  500B               	movf	??_LightLed+2,w,c
  6372  001252  16DF               	andwf	indf2,f,c
  6373                           
  6374                           ;main.c: 357: ((ledStatuses[ststusIndex]) &= ~((unsigned short)1 << (statusShift)));
  6375  001254  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6376  001258  0E01               	movlw	1
  6377  00125A  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6378  00125C  2A09               	incf	??_LightLed,f,c
  6379  00125E  D003               	goto	u5664
  6380  001260                     u5665:
  6381  001260  FFFF               	dw	65535	; assembler added errata NOP
  6382  001262  90D8               	bcf	status,0,c
  6383  001264  360A               	rlcf	??_LightLed+1,f,c
  6384  001266                     u5664:
  6385  001266  FFFF               	dw	65535	; assembler added errata NOP
  6386  001268  2E09               	decfsz	??_LightLed,f,c
  6387  00126A  D7FA               	goto	u5665
  6388  00126C  1C0A               	comf	??_LightLed+1,w,c
  6389  00126E  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  6390  001270  500D               	movf	LightLed@ststusIndex,w,c
  6391  001272  0F90               	addlw	low _ledStatuses
  6392  001274  6ED9               	movwf	fsr2l,c
  6393  001276  6ADA               	clrf	fsr2h,c
  6394  001278  500B               	movf	??_LightLed+2,w,c
  6395  00127A  16DF               	andwf	indf2,f,c
  6396                           
  6397                           ;main.c: 358: ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1)));
  6398  00127C  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6399  001280  2A09               	incf	??_LightLed,f,c
  6400  001282  0E01               	movlw	1
  6401  001284  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6402  001286  2A09               	incf	??_LightLed,f,c
  6403  001288  D003               	goto	u5674
  6404  00128A                     u5675:
  6405  00128A  FFFF               	dw	65535	; assembler added errata NOP
  6406  00128C  90D8               	bcf	status,0,c
  6407  00128E  360A               	rlcf	??_LightLed+1,f,c
  6408  001290                     u5674:
  6409  001290  FFFF               	dw	65535	; assembler added errata NOP
  6410  001292  2E09               	decfsz	??_LightLed,f,c
  6411  001294  D7FA               	goto	u5675
  6412  001296  1C0A               	comf	??_LightLed+1,w,c
  6413  001298  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  6414  00129A  500D               	movf	LightLed@ststusIndex,w,c
  6415  00129C  0F80               	addlw	low _ledBlink
  6416  00129E  6ED9               	movwf	fsr2l,c
  6417  0012A0  6ADA               	clrf	fsr2h,c
  6418  0012A2  500B               	movf	??_LightLed+2,w,c
  6419  0012A4  16DF               	andwf	indf2,f,c
  6420                           
  6421                           ;main.c: 359: ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift)));
  6422  0012A6  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6423  0012AA  0E01               	movlw	1
  6424  0012AC  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6425  0012AE  2A09               	incf	??_LightLed,f,c
  6426  0012B0  D003               	goto	u5684
  6427  0012B2                     u5685:
  6428  0012B2  FFFF               	dw	65535	; assembler added errata NOP
  6429  0012B4  90D8               	bcf	status,0,c
  6430  0012B6  360A               	rlcf	??_LightLed+1,f,c
  6431  0012B8                     u5684:
  6432  0012B8  FFFF               	dw	65535	; assembler added errata NOP
  6433  0012BA  2E09               	decfsz	??_LightLed,f,c
  6434  0012BC  D7FA               	goto	u5685
  6435  0012BE  D05F               	goto	L3
  6436  0012C0                     l5625:
  6437                           
  6438                           ;main.c: 362: ((ledStatuses[ststusIndex]) |= ((unsigned short)1 << (statusShift + 1)));
  6439  0012C0  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6440  0012C4  2A09               	incf	??_LightLed,f,c
  6441  0012C6  0E01               	movlw	1
  6442  0012C8  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6443  0012CA  2A09               	incf	??_LightLed,f,c
  6444  0012CC  D003               	goto	u5694
  6445  0012CE                     u5695:
  6446  0012CE  FFFF               	dw	65535	; assembler added errata NOP
  6447  0012D0  90D8               	bcf	status,0,c
  6448  0012D2  360A               	rlcf	??_LightLed+1,f,c
  6449  0012D4                     u5694:
  6450  0012D4  FFFF               	dw	65535	; assembler added errata NOP
  6451  0012D6  2E09               	decfsz	??_LightLed,f,c
  6452  0012D8  D7FA               	goto	u5695
  6453  0012DA  500D               	movf	LightLed@ststusIndex,w,c
  6454  0012DC  0F90               	addlw	low _ledStatuses
  6455  0012DE  6ED9               	movwf	fsr2l,c
  6456  0012E0  6ADA               	clrf	fsr2h,c
  6457  0012E2  500A               	movf	??_LightLed+1,w,c
  6458  0012E4  12DF               	iorwf	indf2,f,c
  6459                           
  6460                           ;main.c: 363: ((ledStatuses[ststusIndex]) &= ~((unsigned short)1 << (statusShift)));
  6461  0012E6  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6462  0012EA  0E01               	movlw	1
  6463  0012EC  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6464  0012EE  2A09               	incf	??_LightLed,f,c
  6465  0012F0  D003               	goto	u5704
  6466  0012F2                     u5705:
  6467  0012F2  FFFF               	dw	65535	; assembler added errata NOP
  6468  0012F4  90D8               	bcf	status,0,c
  6469  0012F6  360A               	rlcf	??_LightLed+1,f,c
  6470  0012F8                     u5704:
  6471  0012F8  FFFF               	dw	65535	; assembler added errata NOP
  6472  0012FA  2E09               	decfsz	??_LightLed,f,c
  6473  0012FC  D7FA               	goto	u5705
  6474  0012FE  1C0A               	comf	??_LightLed+1,w,c
  6475  001300  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  6476  001302  500D               	movf	LightLed@ststusIndex,w,c
  6477  001304  0F90               	addlw	low _ledStatuses
  6478  001306  6ED9               	movwf	fsr2l,c
  6479  001308  6ADA               	clrf	fsr2h,c
  6480  00130A  500B               	movf	??_LightLed+2,w,c
  6481  00130C  16DF               	andwf	indf2,f,c
  6482                           
  6483                           ;main.c: 364: (blink ? ((ledBlink[ststusIndex]) |= ((unsigned short)1 << (statusShift + 
      +                          1))) : ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1))));
  6484  00130E  5008               	movf	LightLed@blink,w,c
  6485  001310  E014               	bz	l5631
  6486  001312  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6487  001316  2A09               	incf	??_LightLed,f,c
  6488  001318  0E01               	movlw	1
  6489  00131A  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6490  00131C  2A09               	incf	??_LightLed,f,c
  6491  00131E  D003               	goto	u5724
  6492  001320                     u5725:
  6493  001320  FFFF               	dw	65535	; assembler added errata NOP
  6494  001322  90D8               	bcf	status,0,c
  6495  001324  360A               	rlcf	??_LightLed+1,f,c
  6496  001326                     u5724:
  6497  001326  FFFF               	dw	65535	; assembler added errata NOP
  6498  001328  2E09               	decfsz	??_LightLed,f,c
  6499  00132A  D7FA               	goto	u5725
  6500  00132C  500D               	movf	LightLed@ststusIndex,w,c
  6501  00132E  0F80               	addlw	low _ledBlink
  6502  001330  6ED9               	movwf	fsr2l,c
  6503  001332  6ADA               	clrf	fsr2h,c
  6504  001334  500A               	movf	??_LightLed+1,w,c
  6505  001336  12DF               	iorwf	indf2,f,c
  6506  001338  D015               	goto	l267
  6507  00133A                     l5631:
  6508  00133A  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6509  00133E  2A09               	incf	??_LightLed,f,c
  6510  001340  0E01               	movlw	1
  6511  001342  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6512  001344  2A09               	incf	??_LightLed,f,c
  6513  001346  D003               	goto	u5734
  6514  001348                     u5735:
  6515  001348  FFFF               	dw	65535	; assembler added errata NOP
  6516  00134A  90D8               	bcf	status,0,c
  6517  00134C  360A               	rlcf	??_LightLed+1,f,c
  6518  00134E                     u5734:
  6519  00134E  FFFF               	dw	65535	; assembler added errata NOP
  6520  001350  2E09               	decfsz	??_LightLed,f,c
  6521  001352  D7FA               	goto	u5735
  6522  001354  1C0A               	comf	??_LightLed+1,w,c
  6523  001356  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  6524  001358  500D               	movf	LightLed@ststusIndex,w,c
  6525  00135A  0F80               	addlw	low _ledBlink
  6526  00135C  6ED9               	movwf	fsr2l,c
  6527  00135E  6ADA               	clrf	fsr2h,c
  6528  001360  500B               	movf	??_LightLed+2,w,c
  6529  001362  16DF               	andwf	indf2,f,c
  6530  001364                     l267:
  6531  001364  FFFF               	dw	65535	; assembler added errata NOP
  6532                           
  6533                           ;main.c: 365: ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift)));
  6534  001366  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6535  00136A  0E01               	movlw	1
  6536  00136C  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6537  00136E  2A09               	incf	??_LightLed,f,c
  6538  001370  D003               	goto	u5744
  6539  001372                     u5745:
  6540  001372  FFFF               	dw	65535	; assembler added errata NOP
  6541  001374  90D8               	bcf	status,0,c
  6542  001376  360A               	rlcf	??_LightLed+1,f,c
  6543  001378                     u5744:
  6544  001378  FFFF               	dw	65535	; assembler added errata NOP
  6545  00137A  2E09               	decfsz	??_LightLed,f,c
  6546  00137C  D7FA               	goto	u5745
  6547  00137E                     L3:
  6548  00137E  FFFF               	dw	65535	; assembler added errata NOP
  6549  001380  1C0A               	comf	??_LightLed+1,w,c
  6550  001382  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  6551  001384  500D               	movf	LightLed@ststusIndex,w,c
  6552  001386  0F80               	addlw	low _ledBlink
  6553  001388  6ED9               	movwf	fsr2l,c
  6554  00138A  6ADA               	clrf	fsr2h,c
  6555  00138C  500B               	movf	??_LightLed+2,w,c
  6556  00138E  16DF               	andwf	indf2,f,c
  6557                           
  6558                           ;main.c: 366: break;
  6559  001390  D05A               	goto	l259
  6560  001392                     l5633:
  6561                           
  6562                           ;main.c: 368: ((ledStatuses[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1)));
  6563  001392  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6564  001396  2A09               	incf	??_LightLed,f,c
  6565  001398  0E01               	movlw	1
  6566  00139A  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6567  00139C  2A09               	incf	??_LightLed,f,c
  6568  00139E  D003               	goto	u5754
  6569  0013A0                     u5755:
  6570  0013A0  FFFF               	dw	65535	; assembler added errata NOP
  6571  0013A2  90D8               	bcf	status,0,c
  6572  0013A4  360A               	rlcf	??_LightLed+1,f,c
  6573  0013A6                     u5754:
  6574  0013A6  FFFF               	dw	65535	; assembler added errata NOP
  6575  0013A8  2E09               	decfsz	??_LightLed,f,c
  6576  0013AA  D7FA               	goto	u5755
  6577  0013AC  1C0A               	comf	??_LightLed+1,w,c
  6578  0013AE  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  6579  0013B0  500D               	movf	LightLed@ststusIndex,w,c
  6580  0013B2  0F90               	addlw	low _ledStatuses
  6581  0013B4  6ED9               	movwf	fsr2l,c
  6582  0013B6  6ADA               	clrf	fsr2h,c
  6583  0013B8  500B               	movf	??_LightLed+2,w,c
  6584  0013BA  16DF               	andwf	indf2,f,c
  6585                           
  6586                           ;main.c: 369: ((ledStatuses[ststusIndex]) |= ((unsigned short)1 << (statusShift)));
  6587  0013BC  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6588  0013C0  0E01               	movlw	1
  6589  0013C2  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6590  0013C4  2A09               	incf	??_LightLed,f,c
  6591  0013C6  D003               	goto	u5764
  6592  0013C8                     u5765:
  6593  0013C8  FFFF               	dw	65535	; assembler added errata NOP
  6594  0013CA  90D8               	bcf	status,0,c
  6595  0013CC  360A               	rlcf	??_LightLed+1,f,c
  6596  0013CE                     u5764:
  6597  0013CE  FFFF               	dw	65535	; assembler added errata NOP
  6598  0013D0  2E09               	decfsz	??_LightLed,f,c
  6599  0013D2  D7FA               	goto	u5765
  6600  0013D4  500D               	movf	LightLed@ststusIndex,w,c
  6601  0013D6  0F90               	addlw	low _ledStatuses
  6602  0013D8  6ED9               	movwf	fsr2l,c
  6603  0013DA  6ADA               	clrf	fsr2h,c
  6604  0013DC  500A               	movf	??_LightLed+1,w,c
  6605  0013DE  12DF               	iorwf	indf2,f,c
  6606                           
  6607                           ;main.c: 370: ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1)));
  6608  0013E0  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6609  0013E4  2A09               	incf	??_LightLed,f,c
  6610  0013E6  0E01               	movlw	1
  6611  0013E8  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6612  0013EA  2A09               	incf	??_LightLed,f,c
  6613  0013EC  D003               	goto	u5774
  6614  0013EE                     u5775:
  6615  0013EE  FFFF               	dw	65535	; assembler added errata NOP
  6616  0013F0  90D8               	bcf	status,0,c
  6617  0013F2  360A               	rlcf	??_LightLed+1,f,c
  6618  0013F4                     u5774:
  6619  0013F4  FFFF               	dw	65535	; assembler added errata NOP
  6620  0013F6  2E09               	decfsz	??_LightLed,f,c
  6621  0013F8  D7FA               	goto	u5775
  6622  0013FA  1C0A               	comf	??_LightLed+1,w,c
  6623  0013FC  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  6624  0013FE  500D               	movf	LightLed@ststusIndex,w,c
  6625  001400  0F80               	addlw	low _ledBlink
  6626  001402  6ED9               	movwf	fsr2l,c
  6627  001404  6ADA               	clrf	fsr2h,c
  6628  001406  500B               	movf	??_LightLed+2,w,c
  6629  001408  16DF               	andwf	indf2,f,c
  6630                           
  6631                           ;main.c: 371: (blink ? ((ledBlink[ststusIndex]) |= ((unsigned short)1 << (statusShift)))
      +                           : ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift))));
  6632  00140A  5008               	movf	LightLed@blink,w,c
  6633  00140C  E0AB               	bz	l267
  6634  00140E  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6635  001412  0E01               	movlw	1
  6636  001414  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6637  001416  2A09               	incf	??_LightLed,f,c
  6638  001418  D003               	goto	u5794
  6639  00141A                     u5795:
  6640  00141A  FFFF               	dw	65535	; assembler added errata NOP
  6641  00141C  90D8               	bcf	status,0,c
  6642  00141E  360A               	rlcf	??_LightLed+1,f,c
  6643  001420                     u5794:
  6644  001420  FFFF               	dw	65535	; assembler added errata NOP
  6645  001422  2E09               	decfsz	??_LightLed,f,c
  6646  001424  D7FA               	goto	u5795
  6647  001426  500D               	movf	LightLed@ststusIndex,w,c
  6648  001428  0F80               	addlw	low _ledBlink
  6649  00142A  6ED9               	movwf	fsr2l,c
  6650  00142C  6ADA               	clrf	fsr2h,c
  6651  00142E  500A               	movf	??_LightLed+1,w,c
  6652  001430  12DF               	iorwf	indf2,f,c
  6653  001432  D009               	goto	l259
  6654  001434                     l5643:
  6655  001434  FFFF               	dw	65535	; assembler added errata NOP
  6656  001436  5007               	movf	LightLed@ledState,w,c
  6657                           
  6658                           ; Switch size 1, requested type "speed"
  6659                           ; Number of cases is 3, Range of values is 0 to 2
  6660                           ; switch strategies available:
  6661                           ; Name         Instructions Cycles
  6662                           ; simple_byte           10     6 (average)
  6663                           ;	Chosen strategy is simple_byte
  6664  001438  E101 D6F7          	bz	l5623
  6665  00143C  0A01               	xorlw	1	; case 1
  6666  00143E  E101 D73F          	bz	l5625
  6667  001442  0A03               	xorlw	3	; case 2
  6668  001444  E0A6               	bz	l5633
  6669  001446                     l259:
  6670  001446  FFFF               	dw	65535	; assembler added errata NOP
  6671  001448  0012               	return		;funcret
  6672  00144A  FFFF               	dw	65535	; errata NOP
  6673  00144C                     __end_of_LightLed:
  6674                           	opt stack 0
  6675                           tblptru	equ	0xFF8
  6676                           tblptrh	equ	0xFF7
  6677                           tblptrl	equ	0xFF6
  6678                           tablat	equ	0xFF5
  6679                           prodh	equ	0xFF4
  6680                           prodl	equ	0xFF3
  6681                           intcon	equ	0xFF2
  6682                           postinc0	equ	0xFEE
  6683                           wreg	equ	0xFE8
  6684                           postdec1	equ	0xFE5
  6685                           fsr1h	equ	0xFE2
  6686                           fsr1l	equ	0xFE1
  6687                           indf2	equ	0xFDF
  6688                           postinc2	equ	0xFDE
  6689                           postdec2	equ	0xFDD
  6690                           plusw2	equ	0xFDB
  6691                           fsr2h	equ	0xFDA
  6692                           fsr2l	equ	0xFD9
  6693                           status	equ	0xFD8
  6694                           
  6695 ;; *************** function _GetTime *****************
  6696 ;; Defined at:
  6697 ;;		line 206 in file "user.c"
  6698 ;; Parameters:    Size  Location     Type
  6699 ;;		None
  6700 ;; Auto vars:     Size  Location     Type
  6701 ;;		None
  6702 ;; Return value:  Size  Location     Type
  6703 ;;                  1    wreg      PTR long 
  6704 ;; Registers used:
  6705 ;;		wreg
  6706 ;; Tracked objects:
  6707 ;;		On entry : 0/0
  6708 ;;		On exit  : 0/0
  6709 ;;		Unchanged: 0/0
  6710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6711 ;;      Params:         2       0       0       0       0       0       0
  6712 ;;      Locals:         0       0       0       0       0       0       0
  6713 ;;      Temps:          0       0       0       0       0       0       0
  6714 ;;      Totals:         2       0       0       0       0       0       0
  6715 ;;Total ram usage:        2 bytes
  6716 ;; Hardware stack levels used:    1
  6717 ;; Hardware stack levels required when called:    2
  6718 ;; This function calls:
  6719 ;;		Nothing
  6720 ;; This function is called by:
  6721 ;;		_ProcessDiary
  6722 ;;		_main
  6723 ;; This function uses a non-reentrant model
  6724 ;;
  6725                           
  6726                           	psect	text27
  6727  002BBA                     __ptext27:
  6728                           	opt stack 0
  6729  002BBA                     _GetTime:
  6730                           	opt stack 27
  6731                           
  6732                           ;incstack = 0
  6733  002BBA  FFFF               	dw	65535
  6734                           
  6735                           ;user.c: 208: return &currentTime;
  6736  002BBC  0ED4               	movlw	_currentTime& (0+255)
  6737  002BBE  0012               	return		;funcret
  6738  002BC0  FFFF               	dw	65535	; errata NOP
  6739  002BC2                     __end_of_GetTime:
  6740                           	opt stack 0
  6741                           tblptru	equ	0xFF8
  6742                           tblptrh	equ	0xFF7
  6743                           tblptrl	equ	0xFF6
  6744                           tablat	equ	0xFF5
  6745                           prodh	equ	0xFF4
  6746                           prodl	equ	0xFF3
  6747                           intcon	equ	0xFF2
  6748                           postinc0	equ	0xFEE
  6749                           wreg	equ	0xFE8
  6750                           postdec1	equ	0xFE5
  6751                           fsr1h	equ	0xFE2
  6752                           fsr1l	equ	0xFE1
  6753                           indf2	equ	0xFDF
  6754                           postinc2	equ	0xFDE
  6755                           postdec2	equ	0xFDD
  6756                           plusw2	equ	0xFDB
  6757                           fsr2h	equ	0xFDA
  6758                           fsr2l	equ	0xFD9
  6759                           status	equ	0xFD8
  6760                           
  6761 ;; *************** function _ModbusPoll *****************
  6762 ;; Defined at:
  6763 ;;		line 409 in file "ModbusRtu.c"
  6764 ;; Parameters:    Size  Location     Type
  6765 ;;  discreteInpu    2   40[COMRAM] unsigned short 
  6766 ;;  coils           1   42[COMRAM] PTR unsigned short 
  6767 ;;		 -> _MODBUSCoils(2), 
  6768 ;;  inputRegs       2   43[COMRAM] PTR unsigned short 
  6769 ;;		 -> _MODBUSInputRegs(30), 
  6770 ;;  inputRegsCou    1   45[COMRAM] const unsigned char 
  6771 ;;  holdingRegs     2   46[COMRAM] PTR unsigned short 
  6772 ;;		 -> _MODBUSHoldingRegs(30), 
  6773 ;;  holdingRegsC    1   48[COMRAM] const unsigned char 
  6774 ;; Auto vars:     Size  Location     Type
  6775 ;;  u8exception     1   51[COMRAM] unsigned char 
  6776 ;;  i8state         1   50[COMRAM] unsigned char 
  6777 ;;  u8current       1   49[COMRAM] unsigned char 
  6778 ;; Return value:  Size  Location     Type
  6779 ;;                  1    wreg      char 
  6780 ;; Registers used:
  6781 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6782 ;; Tracked objects:
  6783 ;;		On entry : E/0
  6784 ;;		On exit  : 0/0
  6785 ;;		Unchanged: 0/0
  6786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6787 ;;      Params:         9       0       0       0       0       0       0
  6788 ;;      Locals:         3       0       0       0       0       0       0
  6789 ;;      Temps:          0       0       0       0       0       0       0
  6790 ;;      Totals:        12       0       0       0       0       0       0
  6791 ;;Total ram usage:       12 bytes
  6792 ;; Hardware stack levels used:    1
  6793 ;; Hardware stack levels required when called:    5
  6794 ;; This function calls:
  6795 ;;		_ModbusBuildException
  6796 ;;		_ModbusGetRxBuffer
  6797 ;;		_ModbusProcess_FC1
  6798 ;;		_ModbusProcess_FC15
  6799 ;;		_ModbusProcess_FC16
  6800 ;;		_ModbusProcess_FC17
  6801 ;;		_ModbusProcess_FC21
  6802 ;;		_ModbusProcess_FC3
  6803 ;;		_ModbusProcess_FC5
  6804 ;;		_ModbusProcess_FC6
  6805 ;;		_ModbusSendTxBuffer
  6806 ;;		_ModbusValidateRequest
  6807 ;;		_PortAvailable
  6808 ;;		_millis
  6809 ;; This function is called by:
  6810 ;;		_main
  6811 ;; This function uses a non-reentrant model
  6812 ;;
  6813                           
  6814                           	psect	text28
  6815  001866                     __ptext28:
  6816                           	opt stack 0
  6817  001866                     _ModbusPoll:
  6818                           	opt stack 25
  6819                           
  6820                           ;incstack = 0
  6821  001866  FFFF               	dw	65535
  6822                           
  6823                           ;ModbusRtu.c: 412: _lastCommand = MODBUS_COM_NONE;
  6824  001868  0100               	movlb	0	; () banked
  6825  00186A  6BDA               	clrf	__lastCommand& (0+255),b
  6826                           
  6827                           ;ModbusRtu.c: 415: _inputRegsCount = inputRegsCount;
  6828  00186C  C02E  F0C2         	movff	ModbusPoll@inputRegsCount,__inputRegsCount
  6829                           
  6830                           ;ModbusRtu.c: 416: _holdingRegsCount = holdingRegsCount;
  6831  001870  C031  F0C1         	movff	ModbusPoll@holdingRegsCount,__holdingRegsCount
  6832                           
  6833                           ; BSR set to: 0
  6834                           ;ModbusRtu.c: 421: uint8_t u8current = PortAvailable();
  6835  001874  ECE1  F015         	call	_PortAvailable	;wreg free
  6836  001878  6E32               	movwf	ModbusPoll@u8current,c
  6837                           
  6838                           ;ModbusRtu.c: 425: if (u8current == 0) return 0;
  6839  00187A  5032               	movf	ModbusPoll@u8current,w,c
  6840  00187C  E103               	bnz	l4651
  6841  00187E                     l4647:
  6842  00187E  FFFF               	dw	65535	; assembler added errata NOP
  6843  001880  0E00               	movlw	0
  6844  001882  D09E               	goto	l727
  6845  001884                     l4651:
  6846                           
  6847                           ;ModbusRtu.c: 428: if (u8current != _u8lastRec)
  6848  001884  0100               	movlb	0	; () banked
  6849  001886  51C4               	movf	__u8lastRec& (0+255),w,b
  6850  001888  1832               	xorwf	ModbusPoll@u8current,w,c
  6851  00188A  E012               	bz	l4661
  6852                           
  6853                           ; BSR set to: 0
  6854                           ;ModbusRtu.c: 429: {
  6855                           ;ModbusRtu.c: 430: _u8lastRec = u8current;
  6856  00188C  C032  F0C4         	movff	ModbusPoll@u8current,__u8lastRec
  6857                           
  6858                           ; BSR set to: 0
  6859                           ;ModbusRtu.c: 431: _u32time = millis() + 5;
  6860  001890  0E05               	movlw	5
  6861  001892  EC4F  F015         	call	_millis	;wreg free
  6862  001896  2407               	addwf	?_millis,w,c
  6863  001898  0100               	movlb	0	; () banked
  6864  00189A  6FA0               	movwf	__u32time& (0+255),b
  6865  00189C  0E00               	movlw	0
  6866  00189E  2008               	addwfc	?_millis+1,w,c
  6867  0018A0  6FA1               	movwf	(__u32time+1)& (0+255),b
  6868  0018A2  0E00               	movlw	0
  6869  0018A4  2009               	addwfc	?_millis+2,w,c
  6870  0018A6  6FA2               	movwf	(__u32time+2)& (0+255),b
  6871  0018A8  0E00               	movlw	0
  6872  0018AA  200A               	addwfc	?_millis+3,w,c
  6873  0018AC  6FA3               	movwf	(__u32time+3)& (0+255),b
  6874  0018AE  D7E7               	goto	l4647
  6875  0018B0                     l4661:
  6876                           
  6877                           ; BSR set to: 0
  6878                           ;ModbusRtu.c: 433: }
  6879                           ;ModbusRtu.c: 434: if (millis() < _u32time)
  6880  0018B0  EC4F  F015         	call	_millis	;wreg free
  6881  0018B4  0100               	movlb	0	; () banked
  6882  0018B6  51A0               	movf	__u32time& (0+255),w,b
  6883  0018B8  5C07               	subwf	?_millis,w,c
  6884  0018BA  51A1               	movf	(__u32time+1)& (0+255),w,b
  6885  0018BC  5808               	subwfb	?_millis+1,w,c
  6886  0018BE  51A2               	movf	(__u32time+2)& (0+255),w,b
  6887  0018C0  5809               	subwfb	?_millis+2,w,c
  6888  0018C2  51A3               	movf	(__u32time+3)& (0+255),w,b
  6889  0018C4  580A               	subwfb	?_millis+3,w,c
  6890  0018C6  E3DB               	bnc	l4647
  6891                           
  6892                           ; BSR set to: 0
  6893                           ;ModbusRtu.c: 437: _u8lastRec = 0;
  6894  0018C8  6BC4               	clrf	__u8lastRec& (0+255),b
  6895                           
  6896                           ; BSR set to: 0
  6897                           ;ModbusRtu.c: 439: _u8lastError = i8state;
  6898  0018CA  ECA6  F014         	call	_ModbusGetRxBuffer	;wreg free
  6899  0018CE  6E33               	movwf	ModbusPoll@i8state,c
  6900                           
  6901                           ;ModbusRtu.c: 440: if (i8state < 4)
  6902  0018D0  0E04               	movlw	4
  6903  0018D2  6033               	cpfslt	ModbusPoll@i8state,c
  6904  0018D4  D003               	goto	l4675
  6905  0018D6                     l4671:
  6906  0018D6  FFFF               	dw	65535	; assembler added errata NOP
  6907                           
  6908                           ;ModbusRtu.c: 441: return i8state;
  6909  0018D8  5033               	movf	ModbusPoll@i8state,w,c
  6910  0018DA  D072               	goto	l727
  6911  0018DC                     l4675:
  6912  0018DC  FFFF               	dw	65535	; assembler added errata NOP
  6913                           
  6914                           ;ModbusRtu.c: 444: if (_au8Buffer[ ID ] != _u8id)
  6915  0018DE  0100               	movlb	0	; () banked
  6916  0018E0  51C3               	movf	__u8id& (0+255),w,b
  6917  0018E2  0101               	movlb	1	; () banked
  6918  0018E4  1900               	xorwf	__au8Buffer& (0+255),w,b
  6919  0018E6  E1CB               	bnz	l4647
  6920                           
  6921                           ; BSR set to: 1
  6922                           ;ModbusRtu.c: 448: uint8_t u8exception = ModbusValidateRequest();
  6923  0018E8  EC26  F00A         	call	_ModbusValidateRequest	;wreg free
  6924  0018EC  6E34               	movwf	ModbusPoll@u8exception,c
  6925                           
  6926                           ;ModbusRtu.c: 449: if (u8exception > 0)
  6927  0018EE  5034               	movf	ModbusPoll@u8exception,w,c
  6928  0018F0  E009               	bz	l4695
  6929                           
  6930                           ;ModbusRtu.c: 450: {
  6931                           ;ModbusRtu.c: 451: if (u8exception != NO_REPLY)
  6932  0018F2  2834               	incf	ModbusPoll@u8exception,w,c
  6933  0018F4  E005               	bz	l4691
  6934                           
  6935                           ;ModbusRtu.c: 452: {
  6936                           ;ModbusRtu.c: 453: ModbusBuildException(u8exception);
  6937  0018F6  5034               	movf	ModbusPoll@u8exception,w,c
  6938  0018F8  EC77  F015         	call	_ModbusBuildException
  6939                           
  6940                           ; BSR set to: 1
  6941                           ;ModbusRtu.c: 454: ModbusSendTxBuffer();
  6942  0018FC  EC16  F014         	call	_ModbusSendTxBuffer	;wreg free
  6943  001900                     l4691:
  6944                           
  6945                           ;ModbusRtu.c: 457: return u8exception;
  6946  001900  5034               	movf	ModbusPoll@u8exception,w,c
  6947  001902  D05E               	goto	l727
  6948  001904                     l4695:
  6949                           
  6950                           ;ModbusRtu.c: 461: _u8lastError = 0;
  6951  001904  EC4F  F015         	call	_millis	;wreg free
  6952                           
  6953                           ;ModbusRtu.c: 464: switch (_au8Buffer[ FUNC ])
  6954  001908  D043               	goto	l4739
  6955  00190A                     l4697:
  6956                           
  6957                           ; BSR set to: 1
  6958                           ;ModbusRtu.c: 467: return ModbusProcess_FC1(*coils);
  6959  00190A  502B               	movf	ModbusPoll@coils,w,c
  6960  00190C  6ED9               	movwf	fsr2l,c
  6961  00190E  6ADA               	clrf	fsr2h,c
  6962  001910  CFDE F016          	movff	postinc2,ModbusProcess_FC1@regs
  6963  001914  CFDD F017          	movff	postdec2,ModbusProcess_FC1@regs+1
  6964  001918  ECE3  F00C         	call	_ModbusProcess_FC1	;wreg free
  6965  00191C  D051               	goto	l727
  6966  00191E                     l4701:
  6967                           
  6968                           ; BSR set to: 1
  6969                           ;ModbusRtu.c: 469: return ModbusProcess_FC1(discreteInputs);
  6970  00191E  C029  F016         	movff	ModbusPoll@discreteInputs,ModbusProcess_FC1@regs
  6971  001922  C02A  F017         	movff	ModbusPoll@discreteInputs+1,ModbusProcess_FC1@regs+1
  6972  001926  ECE3  F00C         	call	_ModbusProcess_FC1	;wreg free
  6973  00192A  D04A               	goto	l727
  6974  00192C                     l4705:
  6975                           
  6976                           ; BSR set to: 1
  6977                           ;ModbusRtu.c: 471: return ModbusProcess_FC3(holdingRegs, holdingRegsCount);
  6978  00192C  C02F  F016         	movff	ModbusPoll@holdingRegs,ModbusProcess_FC3@regs
  6979  001930  C030  F017         	movff	ModbusPoll@holdingRegs+1,ModbusProcess_FC3@regs+1
  6980  001934  C031  F018         	movff	ModbusPoll@holdingRegsCount,ModbusProcess_FC3@u8size
  6981  001938  ECA8  F010         	call	_ModbusProcess_FC3	;wreg free
  6982  00193C  D041               	goto	l727
  6983  00193E                     l4709:
  6984                           
  6985                           ; BSR set to: 1
  6986                           ;ModbusRtu.c: 473: return ModbusProcess_FC3(inputRegs, inputRegsCount);
  6987  00193E  C02C  F016         	movff	ModbusPoll@inputRegs,ModbusProcess_FC3@regs
  6988  001942  C02D  F017         	movff	ModbusPoll@inputRegs+1,ModbusProcess_FC3@regs+1
  6989  001946  C02E  F018         	movff	ModbusPoll@inputRegsCount,ModbusProcess_FC3@u8size
  6990  00194A  ECA8  F010         	call	_ModbusProcess_FC3	;wreg free
  6991  00194E  D038               	goto	l727
  6992  001950                     l4713:
  6993                           
  6994                           ; BSR set to: 1
  6995                           ;ModbusRtu.c: 475: return ModbusProcess_FC5(coils);
  6996  001950  502B               	movf	ModbusPoll@coils,w,c
  6997  001952  EC5E  F011         	call	_ModbusProcess_FC5
  6998  001956  D034               	goto	l727
  6999  001958                     l4717:
  7000                           
  7001                           ; BSR set to: 1
  7002                           ;ModbusRtu.c: 477: return ModbusProcess_FC6(holdingRegs, holdingRegsCount);
  7003  001958  C02F  F016         	movff	ModbusPoll@holdingRegs,ModbusProcess_FC6@regs
  7004  00195C  C030  F017         	movff	ModbusPoll@holdingRegs+1,ModbusProcess_FC6@regs+1
  7005  001960  C031  F018         	movff	ModbusPoll@holdingRegsCount,ModbusProcess_FC6@u8size
  7006  001964  EC3D  F013         	call	_ModbusProcess_FC6	;wreg free
  7007  001968  D02B               	goto	l727
  7008  00196A                     l4721:
  7009                           
  7010                           ; BSR set to: 1
  7011                           ;ModbusRtu.c: 479: return ModbusProcess_FC15(coils);
  7012  00196A  502B               	movf	ModbusPoll@coils,w,c
  7013  00196C  EC7C  F00D         	call	_ModbusProcess_FC15
  7014  001970  D027               	goto	l727
  7015  001972                     l4725:
  7016                           
  7017                           ; BSR set to: 1
  7018                           ;ModbusRtu.c: 481: return ModbusProcess_FC16(holdingRegs, holdingRegsCount);
  7019  001972  C02F  F016         	movff	ModbusPoll@holdingRegs,ModbusProcess_FC16@regs
  7020  001976  C030  F017         	movff	ModbusPoll@holdingRegs+1,ModbusProcess_FC16@regs+1
  7021  00197A  C031  F018         	movff	ModbusPoll@holdingRegsCount,ModbusProcess_FC16@u8size
  7022  00197E  EC80  F00F         	call	_ModbusProcess_FC16	;wreg free
  7023  001982  D01E               	goto	l727
  7024  001984                     l4729:
  7025                           
  7026                           ; BSR set to: 1
  7027                           ;ModbusRtu.c: 483: return ModbusProcess_FC17();
  7028  001984  EC06  F013         	call	_ModbusProcess_FC17	;wreg free
  7029  001988  D01B               	goto	l727
  7030  00198A                     l4733:
  7031                           
  7032                           ; BSR set to: 1
  7033                           ;ModbusRtu.c: 485: return ModbusProcess_FC21();
  7034  00198A  EC05  F011         	call	_ModbusProcess_FC21	;wreg free
  7035  00198E  D018               	goto	l727
  7036  001990                     l4739:
  7037  001990  FFFF               	dw	65535	; assembler added errata NOP
  7038  001992  0101               	movlb	1	; () banked
  7039  001994  5101               	movf	(__au8Buffer+1)& (0+255),w,b
  7040                           
  7041                           ; Switch size 1, requested type "speed"
  7042                           ; Number of cases is 10, Range of values is 1 to 21
  7043                           ; switch strategies available:
  7044                           ; Name         Instructions Cycles
  7045                           ; simple_byte           31    16 (average)
  7046                           ;	Chosen strategy is simple_byte
  7047  001996  0A01               	xorlw	1	; case 1
  7048  001998  E0B8               	bz	l4697
  7049  00199A  0A03               	xorlw	3	; case 2
  7050  00199C  E0C0               	bz	l4701
  7051  00199E  0A01               	xorlw	1	; case 3
  7052  0019A0  E0C5               	bz	l4705
  7053  0019A2  0A07               	xorlw	7	; case 4
  7054  0019A4  E0CC               	bz	l4709
  7055  0019A6  0A01               	xorlw	1	; case 5
  7056  0019A8  E0D3               	bz	l4713
  7057  0019AA  0A03               	xorlw	3	; case 6
  7058  0019AC  E0D5               	bz	l4717
  7059  0019AE  0A09               	xorlw	9	; case 15
  7060  0019B0  E0DC               	bz	l4721
  7061  0019B2  0A1F               	xorlw	31	; case 16
  7062  0019B4  E0DE               	bz	l4725
  7063  0019B6  0A01               	xorlw	1	; case 17
  7064  0019B8  E0E5               	bz	l4729
  7065  0019BA  0A04               	xorlw	4	; case 21
  7066  0019BC  E0E6               	bz	l4733
  7067  0019BE  D78B               	goto	l4671
  7068  0019C0                     l727:
  7069  0019C0  FFFF               	dw	65535	; assembler added errata NOP
  7070  0019C2  0012               	return		;funcret
  7071  0019C4  FFFF               	dw	65535	; errata NOP
  7072  0019C6                     __end_of_ModbusPoll:
  7073                           	opt stack 0
  7074                           tblptru	equ	0xFF8
  7075                           tblptrh	equ	0xFF7
  7076                           tblptrl	equ	0xFF6
  7077                           tablat	equ	0xFF5
  7078                           prodh	equ	0xFF4
  7079                           prodl	equ	0xFF3
  7080                           intcon	equ	0xFF2
  7081                           postinc0	equ	0xFEE
  7082                           wreg	equ	0xFE8
  7083                           postdec1	equ	0xFE5
  7084                           fsr1h	equ	0xFE2
  7085                           fsr1l	equ	0xFE1
  7086                           indf2	equ	0xFDF
  7087                           postinc2	equ	0xFDE
  7088                           postdec2	equ	0xFDD
  7089                           plusw2	equ	0xFDB
  7090                           fsr2h	equ	0xFDA
  7091                           fsr2l	equ	0xFD9
  7092                           status	equ	0xFD8
  7093                           
  7094 ;; *************** function _ModbusValidateRequest *****************
  7095 ;; Defined at:
  7096 ;;		line 691 in file "ModbusRtu.c"
  7097 ;; Parameters:    Size  Location     Type
  7098 ;;		None
  7099 ;; Auto vars:     Size  Location     Type
  7100 ;;  recLenBytes     4   27[COMRAM] unsigned long 
  7101 ;;  startAddrByt    4   23[COMRAM] unsigned long 
  7102 ;;  i               1   36[COMRAM] unsigned char 
  7103 ;;  u16regs         2   38[COMRAM] unsigned short 
  7104 ;;  u16count        2   34[COMRAM] unsigned short 
  7105 ;;  u16MsgCRC       2   31[COMRAM] unsigned short 
  7106 ;;  u8regs          1   37[COMRAM] unsigned char 
  7107 ;;  isSupported     1   33[COMRAM] unsigned char 
  7108 ;; Return value:  Size  Location     Type
  7109 ;;                  1    wreg      unsigned char 
  7110 ;; Registers used:
  7111 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7112 ;; Tracked objects:
  7113 ;;		On entry : F/1
  7114 ;;		On exit  : 0/0
  7115 ;;		Unchanged: 0/0
  7116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7117 ;;      Params:         0       0       0       0       0       0       0
  7118 ;;      Locals:        17       0       0       0       0       0       0
  7119 ;;      Temps:          4       0       0       0       0       0       0
  7120 ;;      Totals:        21       0       0       0       0       0       0
  7121 ;;Total ram usage:       21 bytes
  7122 ;; Hardware stack levels used:    1
  7123 ;; Hardware stack levels required when called:    3
  7124 ;; This function calls:
  7125 ;;		_ModbusCalcCRC
  7126 ;; This function is called by:
  7127 ;;		_ModbusPoll
  7128 ;; This function uses a non-reentrant model
  7129 ;;
  7130                           
  7131                           	psect	text29
  7132  00144C                     __ptext29:
  7133                           	opt stack 0
  7134  00144C                     _ModbusValidateRequest:
  7135                           	opt stack 26
  7136                           
  7137                           ;incstack = 0
  7138  00144C  FFFF               	dw	65535
  7139                           
  7140                           ; BSR set to: 1
  7141                           ;ModbusRtu.c: 694: uint16_t u16MsgCRC =
  7142                           ;ModbusRtu.c: 695: ((_au8Buffer[_u8BufferSize - 2] << 8)
  7143                           ;ModbusRtu.c: 696: | _au8Buffer[_u8BufferSize - 1]);
  7144  00144E  0EFE               	movlw	low (__au8Buffer+65534)
  7145  001450  246B               	addwf	__u8BufferSize,w,c
  7146  001452  6ED9               	movwf	fsr2l,c
  7147  001454  6ADA               	clrf	fsr2h,c
  7148  001456  0E00               	movlw	high (__au8Buffer+65534)
  7149  001458  22DA               	addwfc	fsr2h,f,c
  7150  00145A  50DF               	movf	indf2,w,c
  7151  00145C  6E15               	movwf	(??_ModbusValidateRequest+1)& (0+255),c
  7152  00145E  6A14               	clrf	??_ModbusValidateRequest& (0+255),c
  7153  001460  0EFF               	movlw	low (__au8Buffer+65535)
  7154  001462  246B               	addwf	__u8BufferSize,w,c
  7155  001464  6ED9               	movwf	fsr2l,c
  7156  001466  6ADA               	clrf	fsr2h,c
  7157  001468  0E00               	movlw	high (__au8Buffer+65535)
  7158  00146A  22DA               	addwfc	fsr2h,f,c
  7159  00146C  50DF               	movf	indf2,w,c
  7160  00146E  1014               	iorwf	??_ModbusValidateRequest,w,c
  7161  001470  6E20               	movwf	ModbusValidateRequest@u16MsgCRC,c
  7162  001472  5015               	movf	??_ModbusValidateRequest+1,w,c
  7163  001474  6E21               	movwf	ModbusValidateRequest@u16MsgCRC+1,c
  7164                           
  7165                           ; BSR set to: 1
  7166                           ;ModbusRtu.c: 698: {
  7167                           ;ModbusRtu.c: 699: _u16errCnt++;
  7168  001476  506B               	movf	__u8BufferSize,w,c
  7169  001478  0FFE               	addlw	254
  7170  00147A  ECCC  F012         	call	_ModbusCalcCRC
  7171  00147E  5020               	movf	ModbusValidateRequest@u16MsgCRC,w,c
  7172  001480  1807               	xorwf	?_ModbusCalcCRC,w,c
  7173  001482  E103               	bnz	u3320
  7174  001484  5021               	movf	ModbusValidateRequest@u16MsgCRC+1,w,c
  7175  001486  1808               	xorwf	?_ModbusCalcCRC+1,w,c
  7176  001488  E002               	bz	l776
  7177  00148A                     u3320:
  7178                           
  7179                           ;ModbusRtu.c: 700: return NO_REPLY;
  7180  00148A  0EFF               	movlw	255
  7181  00148C  D0F0               	goto	l777
  7182  00148E                     l776:
  7183                           
  7184                           ;ModbusRtu.c: 701: }
  7185                           ;ModbusRtu.c: 704: bool isSupported = 0;
  7186  00148E  6A22               	clrf	ModbusValidateRequest@isSupported,c
  7187                           
  7188                           ;ModbusRtu.c: 705: for (uint8_t i = 0; i< sizeof ( fctsupported); i++)
  7189  001490  6A25               	clrf	ModbusValidateRequest@i,c
  7190  001492                     l3969:
  7191  001492  FFFF               	dw	65535	; assembler added errata NOP
  7192                           
  7193                           ;ModbusRtu.c: 706: {
  7194                           ;ModbusRtu.c: 707: if (fctsupported[i] == _au8Buffer[FUNC])
  7195  001494  5025               	movf	ModbusValidateRequest@i,w,c
  7196  001496  0F01               	addlw	low _fctsupported
  7197  001498  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  7198  00149A  C014  FFF6         	movff	??_ModbusValidateRequest,tblptrl
  7199  00149E                     	if	1	;There is more than 1 active tblptr byte
  7200  00149E  0E06               	movlw	high __smallconst
  7201  0014A0  6EF7               	movwf	tblptrh,c
  7202  0014A2                     	endif
  7203  0014A2                     	if	0	;tblptru may be non-zero
  7204  0014A2                     	endif
  7205  0014A2                     	if	0	;tblptru may be non-zero
  7206  0014A2                     	endif
  7207  0014A2  0008               	tblrd		*
  7208  0014A4  FFFF               	dw	65535	; errata NOP
  7209  0014A6  50F5               	movf	tablat,w,c
  7210  0014A8  0101               	movlb	1	; () banked
  7211  0014AA  1901               	xorwf	(__au8Buffer+1)& (0+255),w,b
  7212  0014AC  E103               	bnz	l3973
  7213                           
  7214                           ; BSR set to: 1
  7215                           ;ModbusRtu.c: 708: {
  7216                           ;ModbusRtu.c: 709: isSupported = 1;
  7217  0014AE  0E01               	movlw	1
  7218  0014B0  6E22               	movwf	ModbusValidateRequest@isSupported,c
  7219                           
  7220                           ;ModbusRtu.c: 710: break;
  7221  0014B2  D004               	goto	l3977
  7222  0014B4                     l3973:
  7223                           
  7224                           ; BSR set to: 1
  7225  0014B4  2A25               	incf	ModbusValidateRequest@i,f,c
  7226                           
  7227                           ; BSR set to: 1
  7228  0014B6  0E09               	movlw	9
  7229  0014B8  6425               	cpfsgt	ModbusValidateRequest@i,c
  7230  0014BA  D7EB               	goto	l3969
  7231  0014BC                     l3977:
  7232  0014BC  FFFF               	dw	65535	; assembler added errata NOP
  7233                           
  7234                           ; BSR set to: 1
  7235                           ;ModbusRtu.c: 714: {
  7236                           ;ModbusRtu.c: 715: _u16errCnt++;
  7237  0014BE  5022               	movf	ModbusValidateRequest@isSupported,w,c
  7238  0014C0  E102               	bnz	l781
  7239                           
  7240                           ; BSR set to: 1
  7241                           ;ModbusRtu.c: 716: return EXC_FUNC_CODE;
  7242  0014C2  0E01               	movlw	1
  7243  0014C4  D0D4               	goto	l777
  7244  0014C6                     l781:
  7245                           
  7246                           ; BSR set to: 1
  7247                           ;ModbusRtu.c: 721: uint16_t u16count = 0;
  7248  0014C6  6A23               	clrf	ModbusValidateRequest@u16count,c
  7249  0014C8  6A24               	clrf	ModbusValidateRequest@u16count+1,c
  7250                           
  7251                           ;ModbusRtu.c: 722: uint8_t u8regs;
  7252                           ;ModbusRtu.c: 723: switch (_au8Buffer[ FUNC ])
  7253  0014CA  D0B4               	goto	l4071
  7254  0014CC                     l3983:
  7255                           
  7256                           ; BSR set to: 1
  7257                           ;ModbusRtu.c: 726: case MB_FC_READ_DISCRETE_INPUT:
  7258                           ;ModbusRtu.c: 727: case MB_FC_WRITE_MULTIPLE_COILS:
  7259                           ;ModbusRtu.c: 729: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  7260  0014CC  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  7261  0014CE  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  7262  0014D0  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  7263  0014D2  6E27               	movwf	ModbusValidateRequest@u16regs,c
  7264  0014D4  C014  F028         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  7265                           
  7266                           ;ModbusRtu.c: 730: u16count = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ NB_LO ]);
  7267  0014D8  5104               	movf	(__au8Buffer+4)& (0+255),w,b
  7268  0014DA  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  7269  0014DC  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  7270  0014DE  6E23               	movwf	ModbusValidateRequest@u16count,c
  7271  0014E0  C014  F024         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16count+1
  7272                           
  7273                           ; BSR set to: 1
  7274                           ;ModbusRtu.c: 731: if (u16count > 16)
  7275  0014E4  5024               	movf	ModbusValidateRequest@u16count+1,w,c
  7276  0014E6  E103               	bnz	u3360
  7277  0014E8  0E11               	movlw	17
  7278  0014EA  5C23               	subwf	ModbusValidateRequest@u16count,w,c
  7279  0014EC  E302               	bnc	l3991
  7280  0014EE                     u3360:
  7281  0014EE                     l3987:
  7282                           
  7283                           ; BSR set to: 1
  7284                           ;ModbusRtu.c: 732: return EXC_REGS_QUANT;
  7285  0014EE  0E03               	movlw	3
  7286  0014F0  D0BE               	goto	l777
  7287  0014F2                     l3991:
  7288                           
  7289                           ; BSR set to: 1
  7290                           ;ModbusRtu.c: 733: if (u16regs > 15 || u16regs + u16count > 16)
  7291  0014F2  5028               	movf	ModbusValidateRequest@u16regs+1,w,c
  7292  0014F4  E110               	bnz	l3995
  7293  0014F6  0E10               	movlw	16
  7294  0014F8  5C27               	subwf	ModbusValidateRequest@u16regs,w,c
  7295  0014FA  E20D               	bc	l3995
  7296                           
  7297                           ; BSR set to: 1
  7298  0014FC  5023               	movf	ModbusValidateRequest@u16count,w,c
  7299  0014FE  2427               	addwf	ModbusValidateRequest@u16regs,w,c
  7300  001500  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  7301  001502  5024               	movf	ModbusValidateRequest@u16count+1,w,c
  7302  001504  2028               	addwfc	ModbusValidateRequest@u16regs+1,w,c
  7303  001506  6E15               	movwf	(??_ModbusValidateRequest+1)& (0+255),c
  7304  001508  5015               	movf	??_ModbusValidateRequest+1,w,c
  7305  00150A  E105               	bnz	u3380
  7306  00150C  0E11               	movlw	17
  7307  00150E  5C14               	subwf	??_ModbusValidateRequest,w,c
  7308  001510                     L4:
  7309  001510  FFFF               	dw	65535	; assembler added errata NOP
  7310  001512  E201 D0AA          	bnc	l4073
  7311  001516                     u3380:
  7312  001516                     l3995:
  7313  001516  FFFF               	dw	65535	; assembler added errata NOP
  7314                           
  7315                           ;ModbusRtu.c: 734: return EXC_ADDR_RANGE;
  7316  001518  0E02               	movlw	2
  7317  00151A  D0A9               	goto	l777
  7318  00151C                     l3999:
  7319                           
  7320                           ; BSR set to: 1
  7321                           ;ModbusRtu.c: 737: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  7322  00151C  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  7323  00151E  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  7324  001520  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  7325  001522  6E27               	movwf	ModbusValidateRequest@u16regs,c
  7326  001524  C014  F028         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  7327                           
  7328                           ; BSR set to: 1
  7329                           ;ModbusRtu.c: 738: u8regs = _au8Buffer[ NB_HI ];
  7330  001528  C104  F026         	movff	__au8Buffer+4,ModbusValidateRequest@u8regs
  7331                           
  7332                           ;ModbusRtu.c: 739: if (u8regs != 0x00 && u8regs != 0xFF)
  7333  00152C  5026               	movf	ModbusValidateRequest@u8regs,w,c
  7334  00152E  E002               	bz	l4009
  7335                           
  7336                           ; BSR set to: 1
  7337  001530  2826               	incf	ModbusValidateRequest@u8regs,w,c
  7338  001532  E1DD               	bnz	l3987
  7339  001534                     l4009:
  7340                           
  7341                           ; BSR set to: 1
  7342                           ;ModbusRtu.c: 741: if (u16regs > 15)
  7343  001534  5028               	movf	ModbusValidateRequest@u16regs+1,w,c
  7344  001536  E1EF               	bnz	l3995
  7345  001538  0E10               	movlw	16
  7346  00153A  5C27               	subwf	ModbusValidateRequest@u16regs,w,c
  7347  00153C  D7E9               	goto	L4
  7348  00153E                     l4015:
  7349                           
  7350                           ; BSR set to: 1
  7351                           ;ModbusRtu.c: 745: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  7352  00153E  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  7353  001540  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  7354  001542  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  7355  001544  6E27               	movwf	ModbusValidateRequest@u16regs,c
  7356  001546  C014  F028         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  7357  00154A                     l4017:
  7358  00154A  FFFF               	dw	65535	; assembler added errata NOP
  7359                           
  7360                           ; BSR set to: 1
  7361                           ;ModbusRtu.c: 746: u8regs = (uint8_t) u16regs;
  7362  00154C  C027  F026         	movff	ModbusValidateRequest@u16regs,ModbusValidateRequest@u8regs
  7363                           
  7364                           ; BSR set to: 1
  7365                           ;ModbusRtu.c: 747: if (u8regs > _holdingRegsCount) return EXC_ADDR_RANGE;
  7366  001550  5026               	movf	ModbusValidateRequest@u8regs,w,c
  7367  001552  0100               	movlb	0	; () banked
  7368  001554  5DC1               	subwf	__holdingRegsCount& (0+255),w,b
  7369  001556  FFFF               	dw	65535	; assembler added errata NOP
  7370  001558  E3DE               	bnc	l3995
  7371  00155A  D087               	goto	l4073
  7372  00155C                     l4025:
  7373                           
  7374                           ; BSR set to: 1
  7375                           ;ModbusRtu.c: 750: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  7376  00155C  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  7377  00155E  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  7378  001560  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  7379  001562  6E27               	movwf	ModbusValidateRequest@u16regs,c
  7380  001564  C014  F028         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  7381                           
  7382                           ; BSR set to: 1
  7383                           ;ModbusRtu.c: 751: u16regs += (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ NB_LO ]);
  7384  001568  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  7385  00156A  C104  F014         	movff	__au8Buffer+4,??_ModbusValidateRequest
  7386  00156E  6A15               	clrf	(??_ModbusValidateRequest+1)& (0+255),c
  7387  001570  C014  F015         	movff	??_ModbusValidateRequest,??_ModbusValidateRequest+1
  7388  001574  6A14               	clrf	??_ModbusValidateRequest,c
  7389  001576  1214               	iorwf	??_ModbusValidateRequest,f,c
  7390  001578  5014               	movf	??_ModbusValidateRequest,w,c
  7391  00157A  2627               	addwf	ModbusValidateRequest@u16regs,f,c
  7392  00157C  5015               	movf	??_ModbusValidateRequest+1,w,c
  7393  00157E  2228               	addwfc	ModbusValidateRequest@u16regs+1,f,c
  7394                           
  7395                           ; BSR set to: 1
  7396                           ;ModbusRtu.c: 752: u8regs = (uint8_t) u16regs;
  7397  001580  C027  F026         	movff	ModbusValidateRequest@u16regs,ModbusValidateRequest@u8regs
  7398                           
  7399                           ; BSR set to: 1
  7400                           ;ModbusRtu.c: 753: if (u8regs > _inputRegsCount)
  7401  001584  5026               	movf	ModbusValidateRequest@u8regs,w,c
  7402  001586  0100               	movlb	0	; () banked
  7403  001588  5DC2               	subwf	__inputRegsCount& (0+255),w,b
  7404  00158A  D7E5               	goto	L5
  7405  00158C                     l4037:
  7406                           
  7407                           ; BSR set to: 1
  7408                           ;ModbusRtu.c: 757: case MB_FC_WRITE_MULTIPLE_REGISTERS:
  7409                           ;ModbusRtu.c: 758: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  7410  00158C  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  7411  00158E  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  7412  001590  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  7413  001592  6E27               	movwf	ModbusValidateRequest@u16regs,c
  7414  001594  C014  F028         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  7415                           
  7416                           ; BSR set to: 1
  7417                           ;ModbusRtu.c: 759: u16regs += (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ NB_LO ]);
  7418  001598  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  7419  00159A  C104  F014         	movff	__au8Buffer+4,??_ModbusValidateRequest
  7420  00159E  6A15               	clrf	(??_ModbusValidateRequest+1)& (0+255),c
  7421  0015A0  C014  F015         	movff	??_ModbusValidateRequest,??_ModbusValidateRequest+1
  7422  0015A4  6A14               	clrf	??_ModbusValidateRequest,c
  7423  0015A6  1214               	iorwf	??_ModbusValidateRequest,f,c
  7424  0015A8  5014               	movf	??_ModbusValidateRequest,w,c
  7425  0015AA  2627               	addwf	ModbusValidateRequest@u16regs,f,c
  7426  0015AC  5015               	movf	??_ModbusValidateRequest+1,w,c
  7427  0015AE  2228               	addwfc	ModbusValidateRequest@u16regs+1,f,c
  7428  0015B0  D7CC               	goto	l4017
  7429  0015B2                     l4049:
  7430                           
  7431                           ; BSR set to: 1
  7432                           ;ModbusRtu.c: 768: if (_au8Buffer[ FILE_REF_TYPE ] != 6)
  7433  0015B2  0E06               	movlw	6
  7434  0015B4  1903               	xorwf	(__au8Buffer+3)& (0+255),w,b
  7435  0015B6  E1AF               	bnz	l3995
  7436                           
  7437                           ; BSR set to: 1
  7438                           ;ModbusRtu.c: 771: if (_au8Buffer[ FILE_NUM_HI ] != 0x00 || _au8Buffer[ FILE_NUM_LO ] !=
      +                           0x01)
  7439  0015B8  5104               	movf	(__au8Buffer+4)& (0+255),w,b
  7440  0015BA  E1AD               	bnz	l3995
  7441                           
  7442                           ; BSR set to: 1
  7443  0015BC  0505               	decf	(__au8Buffer+5)& (0+255),w,b
  7444  0015BE  E1AB               	bnz	l3995
  7445                           
  7446                           ; BSR set to: 1
  7447                           ;ModbusRtu.c: 774: unsigned long startAddrBytes = ((_au8Buffer[ FILE_REC_HI ] << 8) | _a
      +                          u8Buffer[ FILE_REC_LO ]) << 1;
  7448  0015C0  5107               	movf	(__au8Buffer+7)& (0+255),w,b
  7449  0015C2  C106  F014         	movff	__au8Buffer+6,??_ModbusValidateRequest
  7450  0015C6  6A15               	clrf	(??_ModbusValidateRequest+1)& (0+255),c
  7451  0015C8  C014  F015         	movff	??_ModbusValidateRequest,??_ModbusValidateRequest+1
  7452  0015CC  6A14               	clrf	??_ModbusValidateRequest,c
  7453  0015CE  1214               	iorwf	??_ModbusValidateRequest,f,c
  7454  0015D0  0E00               	movlw	0
  7455  0015D2  90D8               	bcf	status,0,c
  7456  0015D4  3614               	rlcf	??_ModbusValidateRequest,f,c
  7457  0015D6  3615               	rlcf	??_ModbusValidateRequest+1,f,c
  7458  0015D8  C014  F018         	movff	??_ModbusValidateRequest,ModbusValidateRequest@startAddrBytes
  7459  0015DC  C015  F019         	movff	??_ModbusValidateRequest+1,ModbusValidateRequest@startAddrBytes+1
  7460  0015E0  BE19               	btfsc	ModbusValidateRequest@startAddrBytes+1,7,c
  7461  0015E2  0EFF               	movlw	-1
  7462  0015E4  6E1A               	movwf	ModbusValidateRequest@startAddrBytes+2,c
  7463  0015E6  6E1B               	movwf	ModbusValidateRequest@startAddrBytes+3,c
  7464                           
  7465                           ;ModbusRtu.c: 775: unsigned long recLenBytes = ((_au8Buffer[ FILE_REC_LEN_HI ] << 8) | _
      +                          au8Buffer[ FILE_REC_LEN_LO ]) << 1;
  7466  0015E8  5109               	movf	(__au8Buffer+9)& (0+255),w,b
  7467  0015EA  C108  F014         	movff	__au8Buffer+8,??_ModbusValidateRequest
  7468  0015EE  6A15               	clrf	(??_ModbusValidateRequest+1)& (0+255),c
  7469  0015F0  C014  F015         	movff	??_ModbusValidateRequest,??_ModbusValidateRequest+1
  7470  0015F4  6A14               	clrf	??_ModbusValidateRequest,c
  7471  0015F6  1214               	iorwf	??_ModbusValidateRequest,f,c
  7472  0015F8  0E00               	movlw	0
  7473  0015FA  90D8               	bcf	status,0,c
  7474  0015FC  3614               	rlcf	??_ModbusValidateRequest,f,c
  7475  0015FE  3615               	rlcf	??_ModbusValidateRequest+1,f,c
  7476  001600  C014  F01C         	movff	??_ModbusValidateRequest,ModbusValidateRequest@recLenBytes
  7477  001604  C015  F01D         	movff	??_ModbusValidateRequest+1,ModbusValidateRequest@recLenBytes+1
  7478  001608  BE1D               	btfsc	ModbusValidateRequest@recLenBytes+1,7,c
  7479  00160A  0EFF               	movlw	-1
  7480  00160C  6E1E               	movwf	ModbusValidateRequest@recLenBytes+2,c
  7481  00160E  6E1F               	movwf	ModbusValidateRequest@recLenBytes+3,c
  7482                           
  7483                           ;ModbusRtu.c: 777: if (startAddrBytes + recLenBytes >= 256)
  7484  001610  501C               	movf	ModbusValidateRequest@recLenBytes,w,c
  7485  001612  2418               	addwf	ModbusValidateRequest@startAddrBytes,w,c
  7486  001614  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  7487  001616  501D               	movf	ModbusValidateRequest@recLenBytes+1,w,c
  7488  001618  2019               	addwfc	ModbusValidateRequest@startAddrBytes+1,w,c
  7489  00161A  6E15               	movwf	(??_ModbusValidateRequest+1)& (0+255),c
  7490  00161C  501E               	movf	ModbusValidateRequest@recLenBytes+2,w,c
  7491  00161E  201A               	addwfc	ModbusValidateRequest@startAddrBytes+2,w,c
  7492  001620  6E16               	movwf	(??_ModbusValidateRequest+2)& (0+255),c
  7493  001622  501F               	movf	ModbusValidateRequest@recLenBytes+3,w,c
  7494  001624  201B               	addwfc	ModbusValidateRequest@startAddrBytes+3,w,c
  7495  001626  6E17               	movwf	(??_ModbusValidateRequest+3)& (0+255),c
  7496  001628  5017               	movf	??_ModbusValidateRequest+3,w,c
  7497  00162A  1016               	iorwf	??_ModbusValidateRequest+2,w,c
  7498  00162C  E102               	bnz	u3480
  7499  00162E  0415               	decf	??_ModbusValidateRequest+1,w,c
  7500  001630  D76F               	goto	L4
  7501  001632                     u3480:
  7502  001632  D771               	goto	l3995
  7503  001634                     l4071:
  7504  001634  FFFF               	dw	65535	; assembler added errata NOP
  7505                           
  7506                           ; BSR set to: 1
  7507  001636  5101               	movf	(__au8Buffer+1)& (0+255),w,b
  7508                           
  7509                           ; Switch size 1, requested type "speed"
  7510                           ; Number of cases is 10, Range of values is 1 to 21
  7511                           ; switch strategies available:
  7512                           ; Name         Instructions Cycles
  7513                           ; simple_byte           31    16 (average)
  7514                           ;	Chosen strategy is simple_byte
  7515  001638  0A01               	xorlw	1	; case 1
  7516  00163A  E101 D747          	bz	l3983
  7517  00163E  0A03               	xorlw	3	; case 2
  7518  001640  E101 D744          	bz	l3983
  7519  001644  0A01               	xorlw	1	; case 3
  7520  001646  E0A2               	bz	l4037
  7521  001648  0A07               	xorlw	7	; case 4
  7522  00164A  E088               	bz	l4025
  7523  00164C  0A01               	xorlw	1	; case 5
  7524  00164E  E101 D765          	bz	l3999
  7525  001652  0A03               	xorlw	3	; case 6
  7526  001654  E101 D773          	bz	l4015
  7527  001658  0A09               	xorlw	9	; case 15
  7528  00165A  E101 D737          	bz	l3983
  7529  00165E  0A1F               	xorlw	31	; case 16
  7530  001660  E095               	bz	l4037
  7531  001662  0A01               	xorlw	1	; case 17
  7532  001664  E002               	bz	l4073
  7533  001666  0A04               	xorlw	4	; case 21
  7534  001668  E0A4               	bz	l4049
  7535  00166A                     l4073:
  7536  00166A  FFFF               	dw	65535	; assembler added errata NOP
  7537                           
  7538                           ;ModbusRtu.c: 781: return 0;
  7539  00166C  0E00               	movlw	0
  7540  00166E                     l777:
  7541  00166E  FFFF               	dw	65535	; assembler added errata NOP
  7542  001670  0012               	return		;funcret
  7543  001672  FFFF               	dw	65535	; errata NOP
  7544  001674                     __end_of_ModbusValidateRequest:
  7545                           	opt stack 0
  7546                           tblptru	equ	0xFF8
  7547                           tblptrh	equ	0xFF7
  7548                           tblptrl	equ	0xFF6
  7549                           tablat	equ	0xFF5
  7550                           prodh	equ	0xFF4
  7551                           prodl	equ	0xFF3
  7552                           intcon	equ	0xFF2
  7553                           postinc0	equ	0xFEE
  7554                           wreg	equ	0xFE8
  7555                           postdec1	equ	0xFE5
  7556                           fsr1h	equ	0xFE2
  7557                           fsr1l	equ	0xFE1
  7558                           indf2	equ	0xFDF
  7559                           postinc2	equ	0xFDE
  7560                           postdec2	equ	0xFDD
  7561                           plusw2	equ	0xFDB
  7562                           fsr2h	equ	0xFDA
  7563                           fsr2l	equ	0xFD9
  7564                           status	equ	0xFD8
  7565                           
  7566 ;; *************** function _ModbusProcess_FC6 *****************
  7567 ;; Defined at:
  7568 ;;		line 1024 in file "ModbusRtu.c"
  7569 ;; Parameters:    Size  Location     Type
  7570 ;;  regs            2   21[COMRAM] PTR unsigned short 
  7571 ;;		 -> _MODBUSHoldingRegs(30), 
  7572 ;;  u8size          1   23[COMRAM] unsigned char 
  7573 ;; Auto vars:     Size  Location     Type
  7574 ;;  u16add          2   29[COMRAM] unsigned short 
  7575 ;;  u16val          2   26[COMRAM] unsigned short 
  7576 ;;  u8CopyBuffer    1   28[COMRAM] unsigned char 
  7577 ;; Return value:  Size  Location     Type
  7578 ;;                  1    wreg      unsigned char 
  7579 ;; Registers used:
  7580 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7581 ;; Tracked objects:
  7582 ;;		On entry : E/1
  7583 ;;		On exit  : 0/0
  7584 ;;		Unchanged: 0/0
  7585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7586 ;;      Params:         3       0       0       0       0       0       0
  7587 ;;      Locals:         5       0       0       0       0       0       0
  7588 ;;      Temps:          2       0       0       0       0       0       0
  7589 ;;      Totals:        10       0       0       0       0       0       0
  7590 ;;Total ram usage:       10 bytes
  7591 ;; Hardware stack levels used:    1
  7592 ;; Hardware stack levels required when called:    4
  7593 ;; This function calls:
  7594 ;;		_ModbusSendTxBuffer
  7595 ;; This function is called by:
  7596 ;;		_ModbusPoll
  7597 ;; This function uses a non-reentrant model
  7598 ;;
  7599                           
  7600                           	psect	text30
  7601  00267A                     __ptext30:
  7602                           	opt stack 0
  7603  00267A                     _ModbusProcess_FC6:
  7604                           	opt stack 25
  7605                           
  7606                           ;incstack = 0
  7607  00267A  FFFF               	dw	65535
  7608                           
  7609                           ;ModbusRtu.c: 1026: _lastCommand = MODBUS_COM_WRITE_SINGLE_REGISTER;
  7610  00267C  0E06               	movlw	6
  7611  00267E  0100               	movlb	0	; () banked
  7612  002680  6FDA               	movwf	__lastCommand& (0+255),b
  7613                           
  7614                           ;ModbusRtu.c: 1028: uint16_t u16add = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ A
      +                          DD_LO ]);
  7615  002682  0101               	movlb	1	; () banked
  7616  002684  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  7617  002686  6E19               	movwf	??_ModbusProcess_FC6& (0+255),c
  7618  002688  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  7619  00268A  6E1E               	movwf	ModbusProcess_FC6@u16add,c
  7620  00268C  C019  F01F         	movff	??_ModbusProcess_FC6,ModbusProcess_FC6@u16add+1
  7621                           
  7622                           ; BSR set to: 1
  7623                           ;ModbusRtu.c: 1029: _lastAddress = u16add;
  7624  002690  C01E  F0B6         	movff	ModbusProcess_FC6@u16add,__lastAddress
  7625  002694  C01F  F0B7         	movff	ModbusProcess_FC6@u16add+1,__lastAddress+1
  7626                           
  7627                           ;ModbusRtu.c: 1030: _lastCount = 1;
  7628  002698  0100               	movlb	0	; () banked
  7629  00269A  6BB9               	clrf	(__lastCount+1)& (0+255),b
  7630  00269C  0E01               	movlw	1
  7631  00269E  6FB8               	movwf	__lastCount& (0+255),b
  7632                           
  7633                           ;ModbusRtu.c: 1031: uint8_t u8CopyBufferSize;
  7634                           ;ModbusRtu.c: 1032: uint16_t u16val = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ NB
      +                          _LO ]);
  7635  0026A0  0101               	movlb	1	; () banked
  7636  0026A2  5104               	movf	(__au8Buffer+4)& (0+255),w,b
  7637  0026A4  6E19               	movwf	??_ModbusProcess_FC6& (0+255),c
  7638  0026A6  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  7639  0026A8  6E1B               	movwf	ModbusProcess_FC6@u16val,c
  7640  0026AA  C019  F01C         	movff	??_ModbusProcess_FC6,ModbusProcess_FC6@u16val+1
  7641                           
  7642                           ; BSR set to: 1
  7643                           ;ModbusRtu.c: 1034: regs[ u16add ] = u16val;
  7644  0026AE  90D8               	bcf	status,0,c
  7645  0026B0  341E               	rlcf	ModbusProcess_FC6@u16add,w,c
  7646  0026B2  6ED9               	movwf	fsr2l,c
  7647  0026B4  341F               	rlcf	ModbusProcess_FC6@u16add+1,w,c
  7648  0026B6  6EDA               	movwf	fsr2h,c
  7649  0026B8  5016               	movf	ModbusProcess_FC6@regs,w,c
  7650  0026BA  26D9               	addwf	fsr2l,f,c
  7651  0026BC  5017               	movf	ModbusProcess_FC6@regs+1,w,c
  7652  0026BE  22DA               	addwfc	fsr2h,f,c
  7653  0026C0  C01B  FFDE         	movff	ModbusProcess_FC6@u16val,postinc2
  7654  0026C4  C01C  FFDD         	movff	ModbusProcess_FC6@u16val+1,postdec2
  7655                           
  7656                           ; BSR set to: 1
  7657                           ;ModbusRtu.c: 1037: _u8BufferSize = RESPONSE_SIZE;
  7658  0026C8  0E06               	movlw	6
  7659  0026CA  6E6B               	movwf	__u8BufferSize,c
  7660                           
  7661                           ; BSR set to: 1
  7662                           ;ModbusRtu.c: 1039: u8CopyBufferSize = _u8BufferSize + 2;
  7663  0026CC  506B               	movf	__u8BufferSize,w,c
  7664  0026CE  0F02               	addlw	2
  7665  0026D0  6E1D               	movwf	ModbusProcess_FC6@u8CopyBufferSize,c
  7666                           
  7667                           ; BSR set to: 1
  7668                           ;ModbusRtu.c: 1040: ModbusSendTxBuffer();
  7669  0026D2  EC16  F014         	call	_ModbusSendTxBuffer	;wreg free
  7670                           
  7671                           ;ModbusRtu.c: 1042: return u8CopyBufferSize;
  7672  0026D6  501D               	movf	ModbusProcess_FC6@u8CopyBufferSize,w,c
  7673  0026D8  0012               	return		;funcret
  7674  0026DA  FFFF               	dw	65535	; errata NOP
  7675  0026DC                     __end_of_ModbusProcess_FC6:
  7676                           	opt stack 0
  7677                           tblptru	equ	0xFF8
  7678                           tblptrh	equ	0xFF7
  7679                           tblptrl	equ	0xFF6
  7680                           tablat	equ	0xFF5
  7681                           prodh	equ	0xFF4
  7682                           prodl	equ	0xFF3
  7683                           intcon	equ	0xFF2
  7684                           postinc0	equ	0xFEE
  7685                           wreg	equ	0xFE8
  7686                           postdec1	equ	0xFE5
  7687                           fsr1h	equ	0xFE2
  7688                           fsr1l	equ	0xFE1
  7689                           indf2	equ	0xFDF
  7690                           postinc2	equ	0xFDE
  7691                           postdec2	equ	0xFDD
  7692                           plusw2	equ	0xFDB
  7693                           fsr2h	equ	0xFDA
  7694                           fsr2l	equ	0xFD9
  7695                           status	equ	0xFD8
  7696                           
  7697 ;; *************** function _ModbusProcess_FC5 *****************
  7698 ;; Defined at:
  7699 ;;		line 987 in file "ModbusRtu.c"
  7700 ;; Parameters:    Size  Location     Type
  7701 ;;  regs            1    wreg     PTR unsigned short 
  7702 ;;		 -> _MODBUSCoils(2), 
  7703 ;; Auto vars:     Size  Location     Type
  7704 ;;  regs            1   30[COMRAM] PTR unsigned short 
  7705 ;;		 -> _MODBUSCoils(2), 
  7706 ;;  u16coil         2   27[COMRAM] unsigned short 
  7707 ;;  u8currentBit    1   29[COMRAM] unsigned char 
  7708 ;;  u8CopyBuffer    1   26[COMRAM] unsigned char 
  7709 ;; Return value:  Size  Location     Type
  7710 ;;                  1    wreg      unsigned char 
  7711 ;; Registers used:
  7712 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7713 ;; Tracked objects:
  7714 ;;		On entry : E/1
  7715 ;;		On exit  : 0/0
  7716 ;;		Unchanged: 0/0
  7717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7718 ;;      Params:         0       0       0       0       0       0       0
  7719 ;;      Locals:         5       0       0       0       0       0       0
  7720 ;;      Temps:          5       0       0       0       0       0       0
  7721 ;;      Totals:        10       0       0       0       0       0       0
  7722 ;;Total ram usage:       10 bytes
  7723 ;; Hardware stack levels used:    1
  7724 ;; Hardware stack levels required when called:    4
  7725 ;; This function calls:
  7726 ;;		_ModbusSendTxBuffer
  7727 ;; This function is called by:
  7728 ;;		_ModbusPoll
  7729 ;; This function uses a non-reentrant model
  7730 ;;
  7731                           
  7732                           	psect	text31
  7733  0022BC                     __ptext31:
  7734                           	opt stack 0
  7735  0022BC                     _ModbusProcess_FC5:
  7736                           	opt stack 25
  7737                           
  7738                           ;incstack = 0
  7739  0022BC  FFFF               	dw	65535
  7740                           
  7741                           ;ModbusProcess_FC5@regs stored from wreg
  7742  0022BE  6E1F               	movwf	ModbusProcess_FC5@regs,c
  7743                           
  7744                           ;ModbusRtu.c: 989: _lastCommand = MODBUS_COM_WRITE_SINGLE_COIL;
  7745  0022C0  0E05               	movlw	5
  7746  0022C2  0100               	movlb	0	; () banked
  7747  0022C4  6FDA               	movwf	__lastCommand& (0+255),b
  7748                           
  7749                           ; BSR set to: 0
  7750                           ;ModbusRtu.c: 992: uint8_t u8currentBit;
  7751                           ;ModbusRtu.c: 993: uint8_t u8CopyBufferSize;
  7752                           ;ModbusRtu.c: 994: uint16_t u16coil = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ A
      +                          DD_LO ]);
  7753  0022C6  0101               	movlb	1	; () banked
  7754  0022C8  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  7755  0022CA  6E16               	movwf	??_ModbusProcess_FC5& (0+255),c
  7756  0022CC  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  7757  0022CE  6E1C               	movwf	ModbusProcess_FC5@u16coil,c
  7758  0022D0  C016  F01D         	movff	??_ModbusProcess_FC5,ModbusProcess_FC5@u16coil+1
  7759                           
  7760                           ; BSR set to: 1
  7761                           ;ModbusRtu.c: 995: _lastAddress = u16coil;
  7762  0022D4  C01C  F0B6         	movff	ModbusProcess_FC5@u16coil,__lastAddress
  7763  0022D8  C01D  F0B7         	movff	ModbusProcess_FC5@u16coil+1,__lastAddress+1
  7764                           
  7765                           ; BSR set to: 1
  7766                           ;ModbusRtu.c: 996: _lastCount = 1;
  7767  0022DC  0100               	movlb	0	; () banked
  7768  0022DE  6BB9               	clrf	(__lastCount+1)& (0+255),b
  7769  0022E0  0E01               	movlw	1
  7770  0022E2  6FB8               	movwf	__lastCount& (0+255),b
  7771                           
  7772                           ; BSR set to: 0
  7773                           ;ModbusRtu.c: 999: u8currentBit = (uint8_t) (u16coil % 16);
  7774  0022E4  501C               	movf	ModbusProcess_FC5@u16coil,w,c
  7775  0022E6  0B0F               	andlw	15
  7776  0022E8  6E1E               	movwf	ModbusProcess_FC5@u8currentBit,c
  7777                           
  7778                           ; BSR set to: 0
  7779                           ;ModbusRtu.c: 1002: (_au8Buffer[ NB_HI ] == 0xff ? ((*regs) |= ((unsigned short)1 << (u8
      +                          currentBit))) : ((*regs) &= ~((unsigned short)1 << (u8currentBit))));
  7780  0022EA  0101               	movlb	1	; () banked
  7781  0022EC  2904               	incf	(__au8Buffer+4)& (0+255),w,b
  7782  0022EE  E116               	bnz	l4181
  7783                           
  7784                           ; BSR set to: 1
  7785  0022F0  C01E  F016         	movff	ModbusProcess_FC5@u8currentBit,??_ModbusProcess_FC5
  7786  0022F4  0E01               	movlw	1
  7787  0022F6  6E17               	movwf	(??_ModbusProcess_FC5+1)& (0+255),c
  7788  0022F8  6A18               	clrf	(??_ModbusProcess_FC5+2)& (0+255),c
  7789  0022FA  2A16               	incf	??_ModbusProcess_FC5,f,c
  7790  0022FC  D004               	goto	u3594
  7791  0022FE                     u3595:
  7792  0022FE  FFFF               	dw	65535	; assembler added errata NOP
  7793  002300  90D8               	bcf	status,0,c
  7794  002302  3617               	rlcf	??_ModbusProcess_FC5+1,f,c
  7795  002304  3618               	rlcf	??_ModbusProcess_FC5+2,f,c
  7796  002306                     u3594:
  7797  002306  FFFF               	dw	65535	; assembler added errata NOP
  7798  002308  2E16               	decfsz	??_ModbusProcess_FC5,f,c
  7799  00230A  D7F9               	goto	u3595
  7800  00230C  501F               	movf	ModbusProcess_FC5@regs,w,c
  7801  00230E  6ED9               	movwf	fsr2l,c
  7802  002310  6ADA               	clrf	fsr2h,c
  7803  002312  5017               	movf	??_ModbusProcess_FC5+1,w,c
  7804  002314  12DE               	iorwf	postinc2,f,c
  7805  002316  5018               	movf	??_ModbusProcess_FC5+2,w,c
  7806  002318  12DD               	iorwf	postdec2,f,c
  7807  00231A  D019               	goto	l4183
  7808  00231C                     l4181:
  7809                           
  7810                           ; BSR set to: 1
  7811  00231C  C01E  F016         	movff	ModbusProcess_FC5@u8currentBit,??_ModbusProcess_FC5
  7812  002320  0E01               	movlw	1
  7813  002322  6E17               	movwf	(??_ModbusProcess_FC5+1)& (0+255),c
  7814  002324  6A18               	clrf	(??_ModbusProcess_FC5+2)& (0+255),c
  7815  002326  2A16               	incf	??_ModbusProcess_FC5,f,c
  7816  002328  D004               	goto	u3604
  7817  00232A                     u3605:
  7818  00232A  FFFF               	dw	65535	; assembler added errata NOP
  7819  00232C  90D8               	bcf	status,0,c
  7820  00232E  3617               	rlcf	??_ModbusProcess_FC5+1,f,c
  7821  002330  3618               	rlcf	??_ModbusProcess_FC5+2,f,c
  7822  002332                     u3604:
  7823  002332  FFFF               	dw	65535	; assembler added errata NOP
  7824  002334  2E16               	decfsz	??_ModbusProcess_FC5,f,c
  7825  002336  D7F9               	goto	u3605
  7826  002338  1C17               	comf	??_ModbusProcess_FC5+1,w,c
  7827  00233A  6E19               	movwf	(??_ModbusProcess_FC5+3)& (0+255),c
  7828  00233C  1C18               	comf	??_ModbusProcess_FC5+2,w,c
  7829  00233E  6E1A               	movwf	(??_ModbusProcess_FC5+4)& (0+255),c
  7830  002340  501F               	movf	ModbusProcess_FC5@regs,w,c
  7831  002342  6ED9               	movwf	fsr2l,c
  7832  002344  6ADA               	clrf	fsr2h,c
  7833  002346  5019               	movf	??_ModbusProcess_FC5+3,w,c
  7834  002348  16DE               	andwf	postinc2,f,c
  7835  00234A  501A               	movf	??_ModbusProcess_FC5+4,w,c
  7836  00234C  16DD               	andwf	postdec2,f,c
  7837  00234E                     l4183:
  7838  00234E  FFFF               	dw	65535	; assembler added errata NOP
  7839                           
  7840                           ;ModbusRtu.c: 1009: _u8BufferSize = 6;
  7841  002350  0E06               	movlw	6
  7842  002352  6E6B               	movwf	__u8BufferSize,c
  7843                           
  7844                           ;ModbusRtu.c: 1010: u8CopyBufferSize = _u8BufferSize + 2;
  7845  002354  506B               	movf	__u8BufferSize,w,c
  7846  002356  0F02               	addlw	2
  7847  002358  6E1B               	movwf	ModbusProcess_FC5@u8CopyBufferSize,c
  7848                           
  7849                           ;ModbusRtu.c: 1011: ModbusSendTxBuffer();
  7850  00235A  EC16  F014         	call	_ModbusSendTxBuffer	;wreg free
  7851                           
  7852                           ;ModbusRtu.c: 1013: return u8CopyBufferSize;
  7853  00235E  501B               	movf	ModbusProcess_FC5@u8CopyBufferSize,w,c
  7854  002360  0012               	return		;funcret
  7855  002362  FFFF               	dw	65535	; errata NOP
  7856  002364                     __end_of_ModbusProcess_FC5:
  7857                           	opt stack 0
  7858                           tblptru	equ	0xFF8
  7859                           tblptrh	equ	0xFF7
  7860                           tblptrl	equ	0xFF6
  7861                           tablat	equ	0xFF5
  7862                           prodh	equ	0xFF4
  7863                           prodl	equ	0xFF3
  7864                           intcon	equ	0xFF2
  7865                           postinc0	equ	0xFEE
  7866                           wreg	equ	0xFE8
  7867                           postdec1	equ	0xFE5
  7868                           fsr1h	equ	0xFE2
  7869                           fsr1l	equ	0xFE1
  7870                           indf2	equ	0xFDF
  7871                           postinc2	equ	0xFDE
  7872                           postdec2	equ	0xFDD
  7873                           plusw2	equ	0xFDB
  7874                           fsr2h	equ	0xFDA
  7875                           fsr2l	equ	0xFD9
  7876                           status	equ	0xFD8
  7877                           
  7878 ;; *************** function _ModbusProcess_FC3 *****************
  7879 ;; Defined at:
  7880 ;;		line 952 in file "ModbusRtu.c"
  7881 ;; Parameters:    Size  Location     Type
  7882 ;;  regs            2   21[COMRAM] PTR unsigned short 
  7883 ;;		 -> _MODBUSHoldingRegs(30), _MODBUSInputRegs(30), 
  7884 ;;  u8size          1   23[COMRAM] unsigned char 
  7885 ;; Auto vars:     Size  Location     Type
  7886 ;;  u16regsno       2   29[COMRAM] unsigned short 
  7887 ;;  i               1   32[COMRAM] unsigned char 
  7888 ;;  u8StartAdd      1   31[COMRAM] unsigned char 
  7889 ;;  u8CopyBuffer    1   28[COMRAM] unsigned char 
  7890 ;; Return value:  Size  Location     Type
  7891 ;;                  1    wreg      unsigned char 
  7892 ;; Registers used:
  7893 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7894 ;; Tracked objects:
  7895 ;;		On entry : E/1
  7896 ;;		On exit  : 0/0
  7897 ;;		Unchanged: 0/0
  7898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7899 ;;      Params:         3       0       0       0       0       0       0
  7900 ;;      Locals:         5       0       0       0       0       0       0
  7901 ;;      Temps:          4       0       0       0       0       0       0
  7902 ;;      Totals:        12       0       0       0       0       0       0
  7903 ;;Total ram usage:       12 bytes
  7904 ;; Hardware stack levels used:    1
  7905 ;; Hardware stack levels required when called:    4
  7906 ;; This function calls:
  7907 ;;		_ModbusSendTxBuffer
  7908 ;; This function is called by:
  7909 ;;		_ModbusPoll
  7910 ;; This function uses a non-reentrant model
  7911 ;;
  7912                           
  7913                           	psect	text32
  7914  002150                     __ptext32:
  7915                           	opt stack 0
  7916  002150                     _ModbusProcess_FC3:
  7917                           	opt stack 25
  7918                           
  7919                           ;incstack = 0
  7920  002150  FFFF               	dw	65535
  7921                           
  7922                           ;ModbusRtu.c: 954: _lastCommand = MODBUS_COM_READ_HOLDING;
  7923  002152  0E03               	movlw	3
  7924  002154  0100               	movlb	0	; () banked
  7925  002156  6FDA               	movwf	__lastCommand& (0+255),b
  7926                           
  7927                           ; BSR set to: 0
  7928                           ;ModbusRtu.c: 956: uint8_t u8StartAdd = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[
      +                           ADD_LO ]);
  7929  002158  C103  F020         	movff	__au8Buffer+3,ModbusProcess_FC3@u8StartAdd
  7930                           
  7931                           ; BSR set to: 0
  7932                           ;ModbusRtu.c: 957: _lastAddress = u8StartAdd;
  7933  00215C  C020  F0B6         	movff	ModbusProcess_FC3@u8StartAdd,__lastAddress
  7934  002160  6BB7               	clrf	(__lastAddress+1)& (0+255),b
  7935                           
  7936                           ;ModbusRtu.c: 958: uint16_t u16regsno = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ 
      +                          NB_LO ]);
  7937  002162  0101               	movlb	1	; () banked
  7938  002164  5104               	movf	(__au8Buffer+4)& (0+255),w,b
  7939  002166  6E19               	movwf	??_ModbusProcess_FC3& (0+255),c
  7940  002168  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  7941  00216A  6E1E               	movwf	ModbusProcess_FC3@u16regsno,c
  7942  00216C  C019  F01F         	movff	??_ModbusProcess_FC3,ModbusProcess_FC3@u16regsno+1
  7943                           
  7944                           ; BSR set to: 1
  7945                           ;ModbusRtu.c: 959: _lastCount = u16regsno;
  7946  002170  C01E  F0B8         	movff	ModbusProcess_FC3@u16regsno,__lastCount
  7947  002174  C01F  F0B9         	movff	ModbusProcess_FC3@u16regsno+1,__lastCount+1
  7948                           
  7949                           ; BSR set to: 1
  7950                           ;ModbusRtu.c: 960: uint8_t u8CopyBufferSize;
  7951                           ;ModbusRtu.c: 961: uint8_t i;
  7952                           ;ModbusRtu.c: 963: _au8Buffer[ 2 ] = u16regsno * 2;
  7953  002178  501E               	movf	ModbusProcess_FC3@u16regsno,w,c
  7954  00217A  241E               	addwf	ModbusProcess_FC3@u16regsno,w,c
  7955  00217C  6F02               	movwf	(__au8Buffer+2)& (0+255),b
  7956                           
  7957                           ; BSR set to: 1
  7958                           ;ModbusRtu.c: 964: _u8BufferSize = 3;
  7959  00217E  0E03               	movlw	3
  7960  002180  6E6B               	movwf	__u8BufferSize,c
  7961                           
  7962                           ; BSR set to: 1
  7963                           ;ModbusRtu.c: 966: for (i = u8StartAdd; i < u8StartAdd + u16regsno; i++)
  7964  002182  C020  F021         	movff	ModbusProcess_FC3@u8StartAdd,ModbusProcess_FC3@i
  7965  002186  D02A               	goto	l4157
  7966  002188                     l4151:
  7967                           
  7968                           ; BSR set to: 1
  7969                           ;ModbusRtu.c: 967: {
  7970                           ;ModbusRtu.c: 968: _au8Buffer[ _u8BufferSize ] = ((unsigned char)(((regs[i])>>8)&0xFF));
  7971  002188  0E00               	movlw	low __au8Buffer
  7972  00218A  246B               	addwf	__u8BufferSize,w,c
  7973  00218C  6ED9               	movwf	fsr2l,c
  7974  00218E  6ADA               	clrf	fsr2h,c
  7975  002190  0E01               	movlw	high __au8Buffer
  7976  002192  22DA               	addwfc	fsr2h,f,c
  7977  002194  5021               	movf	ModbusProcess_FC3@i,w,c
  7978  002196  0D02               	mullw	2
  7979  002198  50F3               	movf	prodl,w,c
  7980  00219A  2416               	addwf	ModbusProcess_FC3@regs,w,c
  7981  00219C  6EE1               	movwf	fsr1l,c
  7982  00219E  50F4               	movf	prodh,w,c
  7983  0021A0  2017               	addwfc	ModbusProcess_FC3@regs+1,w,c
  7984  0021A2  6EE2               	movwf	fsr1h,c
  7985  0021A4  CFE6 F019          	movff	postinc1,??_ModbusProcess_FC3
  7986  0021A8  CFE5 F01A          	movff	postdec1,??_ModbusProcess_FC3+1
  7987  0021AC  C01A  F019         	movff	??_ModbusProcess_FC3+1,??_ModbusProcess_FC3
  7988  0021B0  6A1A               	clrf	??_ModbusProcess_FC3+1,c
  7989  0021B2  5019               	movf	??_ModbusProcess_FC3,w,c
  7990  0021B4  6EDF               	movwf	indf2,c
  7991                           
  7992                           ; BSR set to: 1
  7993                           ;ModbusRtu.c: 969: _u8BufferSize++;
  7994  0021B6  2A6B               	incf	__u8BufferSize,f,c
  7995                           
  7996                           ; BSR set to: 1
  7997                           ;ModbusRtu.c: 970: _au8Buffer[ _u8BufferSize ] = ((unsigned char)((regs[i])&0xFF));
  7998  0021B8  5021               	movf	ModbusProcess_FC3@i,w,c
  7999  0021BA  0D02               	mullw	2
  8000  0021BC  50F3               	movf	prodl,w,c
  8001  0021BE  2416               	addwf	ModbusProcess_FC3@regs,w,c
  8002  0021C0  6ED9               	movwf	fsr2l,c
  8003  0021C2  50F4               	movf	prodh,w,c
  8004  0021C4  2017               	addwfc	ModbusProcess_FC3@regs+1,w,c
  8005  0021C6  6EDA               	movwf	fsr2h,c
  8006  0021C8  0E00               	movlw	low __au8Buffer
  8007  0021CA  246B               	addwf	__u8BufferSize,w,c
  8008  0021CC  6EE1               	movwf	fsr1l,c
  8009  0021CE  6AE2               	clrf	fsr1h,c
  8010  0021D0  0E01               	movlw	high __au8Buffer
  8011  0021D2  22E2               	addwfc	fsr1h,f,c
  8012  0021D4  CFDF FFE7          	movff	indf2,indf1
  8013                           
  8014                           ;ModbusRtu.c: 971: _u8BufferSize++;
  8015  0021D8  2A6B               	incf	__u8BufferSize,f,c
  8016  0021DA  2A21               	incf	ModbusProcess_FC3@i,f,c
  8017  0021DC                     l4157:
  8018  0021DC  FFFF               	dw	65535	; assembler added errata NOP
  8019                           
  8020                           ; BSR set to: 1
  8021  0021DE  5020               	movf	ModbusProcess_FC3@u8StartAdd,w,c
  8022  0021E0  241E               	addwf	ModbusProcess_FC3@u16regsno,w,c
  8023  0021E2  6E19               	movwf	??_ModbusProcess_FC3& (0+255),c
  8024  0021E4  0E00               	movlw	0
  8025  0021E6  201F               	addwfc	ModbusProcess_FC3@u16regsno+1,w,c
  8026  0021E8  6E1A               	movwf	(??_ModbusProcess_FC3+1)& (0+255),c
  8027  0021EA  5021               	movf	ModbusProcess_FC3@i,w,c
  8028  0021EC  6E1B               	movwf	(??_ModbusProcess_FC3+2)& (0+255),c
  8029  0021EE  6A1C               	clrf	(??_ModbusProcess_FC3+3)& (0+255),c
  8030  0021F0  5019               	movf	??_ModbusProcess_FC3,w,c
  8031  0021F2  5C1B               	subwf	??_ModbusProcess_FC3+2,w,c
  8032  0021F4  501A               	movf	??_ModbusProcess_FC3+1,w,c
  8033  0021F6  581C               	subwfb	??_ModbusProcess_FC3+3,w,c
  8034  0021F8  E3C7               	bnc	l4151
  8035                           
  8036                           ; BSR set to: 1
  8037                           ;ModbusRtu.c: 972: }
  8038                           ;ModbusRtu.c: 973: u8CopyBufferSize = _u8BufferSize + 2;
  8039  0021FA  506B               	movf	__u8BufferSize,w,c
  8040  0021FC  0F02               	addlw	2
  8041  0021FE  6E1D               	movwf	ModbusProcess_FC3@u8CopyBufferSize,c
  8042                           
  8043                           ; BSR set to: 1
  8044                           ;ModbusRtu.c: 974: ModbusSendTxBuffer();
  8045  002200  EC16  F014         	call	_ModbusSendTxBuffer	;wreg free
  8046                           
  8047                           ;ModbusRtu.c: 976: return u8CopyBufferSize;
  8048  002204  501D               	movf	ModbusProcess_FC3@u8CopyBufferSize,w,c
  8049  002206  0012               	return		;funcret
  8050  002208  FFFF               	dw	65535	; errata NOP
  8051  00220A                     __end_of_ModbusProcess_FC3:
  8052                           	opt stack 0
  8053                           tblptru	equ	0xFF8
  8054                           tblptrh	equ	0xFF7
  8055                           tblptrl	equ	0xFF6
  8056                           tablat	equ	0xFF5
  8057                           prodh	equ	0xFF4
  8058                           prodl	equ	0xFF3
  8059                           intcon	equ	0xFF2
  8060                           postinc0	equ	0xFEE
  8061                           wreg	equ	0xFE8
  8062                           indf1	equ	0xFE7
  8063                           postinc1	equ	0xFE6
  8064                           postdec1	equ	0xFE5
  8065                           fsr1h	equ	0xFE2
  8066                           fsr1l	equ	0xFE1
  8067                           indf2	equ	0xFDF
  8068                           postinc2	equ	0xFDE
  8069                           postdec2	equ	0xFDD
  8070                           plusw2	equ	0xFDB
  8071                           fsr2h	equ	0xFDA
  8072                           fsr2l	equ	0xFD9
  8073                           status	equ	0xFD8
  8074                           
  8075 ;; *************** function _ModbusProcess_FC21 *****************
  8076 ;; Defined at:
  8077 ;;		line 1194 in file "ModbusRtu.c"
  8078 ;; Parameters:    Size  Location     Type
  8079 ;;		None
  8080 ;; Auto vars:     Size  Location     Type
  8081 ;;  recLenBytes     2   27[COMRAM] unsigned short 
  8082 ;;  startAddrsBy    2   25[COMRAM] unsigned short 
  8083 ;;  i               1   29[COMRAM] unsigned char 
  8084 ;;  u8CopyBuffer    1   24[COMRAM] unsigned char 
  8085 ;;  requestDataL    1   23[COMRAM] unsigned char 
  8086 ;; Return value:  Size  Location     Type
  8087 ;;                  1    wreg      unsigned char 
  8088 ;; Registers used:
  8089 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8090 ;; Tracked objects:
  8091 ;;		On entry : E/1
  8092 ;;		On exit  : 0/0
  8093 ;;		Unchanged: 0/0
  8094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8095 ;;      Params:         0       0       0       0       0       0       0
  8096 ;;      Locals:         7       0       0       0       0       0       0
  8097 ;;      Temps:          2       0       0       0       0       0       0
  8098 ;;      Totals:         9       0       0       0       0       0       0
  8099 ;;Total ram usage:        9 bytes
  8100 ;; Hardware stack levels used:    1
  8101 ;; Hardware stack levels required when called:    4
  8102 ;; This function calls:
  8103 ;;		_ModbusSendTxBuffer
  8104 ;; This function is called by:
  8105 ;;		_ModbusPoll
  8106 ;; This function uses a non-reentrant model
  8107 ;;
  8108                           
  8109                           	psect	text33
  8110  00220A                     __ptext33:
  8111                           	opt stack 0
  8112  00220A                     _ModbusProcess_FC21:
  8113                           	opt stack 25
  8114                           
  8115                           ;incstack = 0
  8116  00220A  FFFF               	dw	65535
  8117                           
  8118                           ;ModbusRtu.c: 1196: _lastCommand = MODBUS_COM_WRITE_FILE_RECORD;
  8119  00220C  0E15               	movlw	21
  8120  00220E  0100               	movlb	0	; () banked
  8121  002210  6FDA               	movwf	__lastCommand& (0+255),b
  8122                           
  8123                           ; BSR set to: 0
  8124                           ;ModbusRtu.c: 1199: int8_t requestDataLen = _au8Buffer[ FILE_DATA_LEN ];
  8125  002212  C102  F018         	movff	__au8Buffer+2,ModbusProcess_FC21@requestDataLen
  8126                           
  8127                           ; BSR set to: 0
  8128                           ;ModbusRtu.c: 1201: uint16_t startAddrsBytes = ((((uint16_t)_au8Buffer[ FILE_REC_HI ]<<8
      +                          )|_au8Buffer[ FILE_REC_LO ])) << 1;
  8129  002216  0101               	movlb	1	; () banked
  8130  002218  5107               	movf	(__au8Buffer+7)& (0+255),w,b
  8131  00221A  C106  F016         	movff	__au8Buffer+6,??_ModbusProcess_FC21
  8132  00221E  6A17               	clrf	(??_ModbusProcess_FC21+1)& (0+255),c
  8133  002220  C016  F017         	movff	??_ModbusProcess_FC21,??_ModbusProcess_FC21+1
  8134  002224  6A16               	clrf	??_ModbusProcess_FC21,c
  8135  002226  1216               	iorwf	??_ModbusProcess_FC21,f,c
  8136  002228  90D8               	bcf	status,0,c
  8137  00222A  3416               	rlcf	??_ModbusProcess_FC21,w,c
  8138  00222C  6E1A               	movwf	ModbusProcess_FC21@startAddrsBytes,c
  8139  00222E  3417               	rlcf	??_ModbusProcess_FC21+1,w,c
  8140  002230  6E1B               	movwf	ModbusProcess_FC21@startAddrsBytes+1,c
  8141                           
  8142                           ; BSR set to: 1
  8143                           ;ModbusRtu.c: 1202: _lastAddress = startAddrsBytes;
  8144  002232  C01A  F0B6         	movff	ModbusProcess_FC21@startAddrsBytes,__lastAddress
  8145  002236  C01B  F0B7         	movff	ModbusProcess_FC21@startAddrsBytes+1,__lastAddress+1
  8146                           
  8147                           ; BSR set to: 1
  8148                           ;ModbusRtu.c: 1203: uint16_t recLenBytes = ((((uint16_t)_au8Buffer[ FILE_REC_LEN_HI ]<<8
      +                          )|_au8Buffer[ FILE_REC_LEN_LO ])) << 1;
  8149  00223A  5109               	movf	(__au8Buffer+9)& (0+255),w,b
  8150  00223C  C108  F016         	movff	__au8Buffer+8,??_ModbusProcess_FC21
  8151  002240  6A17               	clrf	(??_ModbusProcess_FC21+1)& (0+255),c
  8152  002242  C016  F017         	movff	??_ModbusProcess_FC21,??_ModbusProcess_FC21+1
  8153  002246  6A16               	clrf	??_ModbusProcess_FC21,c
  8154  002248  1216               	iorwf	??_ModbusProcess_FC21,f,c
  8155  00224A  90D8               	bcf	status,0,c
  8156  00224C  3416               	rlcf	??_ModbusProcess_FC21,w,c
  8157  00224E  6E1C               	movwf	ModbusProcess_FC21@recLenBytes,c
  8158  002250  3417               	rlcf	??_ModbusProcess_FC21+1,w,c
  8159  002252  6E1D               	movwf	ModbusProcess_FC21@recLenBytes+1,c
  8160                           
  8161                           ; BSR set to: 1
  8162                           ;ModbusRtu.c: 1204: _lastCount = recLenBytes;
  8163  002254  C01C  F0B8         	movff	ModbusProcess_FC21@recLenBytes,__lastCount
  8164  002258  C01D  F0B9         	movff	ModbusProcess_FC21@recLenBytes+1,__lastCount+1
  8165                           
  8166                           ; BSR set to: 1
  8167                           ;ModbusRtu.c: 1205: uint8_t u8CopyBufferSize;
  8168                           ;ModbusRtu.c: 1206: uint8_t i;
  8169                           ;ModbusRtu.c: 1212: _u8BufferSize = requestDataLen + 1;
  8170  00225C  2818               	incf	ModbusProcess_FC21@requestDataLen,w,c
  8171  00225E  6E6B               	movwf	__u8BufferSize,c
  8172                           
  8173                           ; BSR set to: 1
  8174                           ;ModbusRtu.c: 1216: for (i = 0; i < recLenBytes; i++)
  8175  002260  6A1E               	clrf	ModbusProcess_FC21@i,c
  8176  002262  D01C               	goto	l4361
  8177  002264                     l874:
  8178  002264  FFFF               	dw	65535	; assembler added errata NOP
  8179                           
  8180                           ; BSR set to: 1
  8181  002266  B2A6               	btfsc	4006,1,c	;volatile
  8182  002268  D7FD               	goto	l874
  8183                           
  8184                           ; BSR set to: 1
  8185  00226A  501E               	movf	ModbusProcess_FC21@i,w,c
  8186  00226C  241A               	addwf	ModbusProcess_FC21@startAddrsBytes,w,c
  8187  00226E  6EA9               	movwf	4009,c	;volatile
  8188                           
  8189                           ; BSR set to: 1
  8190  002270  0E0A               	movlw	low (__au8Buffer+10)
  8191  002272  241E               	addwf	ModbusProcess_FC21@i,w,c
  8192  002274  6ED9               	movwf	fsr2l,c
  8193  002276  6ADA               	clrf	fsr2h,c
  8194  002278  0E01               	movlw	high (__au8Buffer+10)
  8195  00227A  22DA               	addwfc	fsr2h,f,c
  8196  00227C  50DF               	movf	indf2,w,c
  8197  00227E  6EA8               	movwf	4008,c	;volatile
  8198                           
  8199                           ; BSR set to: 1
  8200  002280  90D8               	bcf	status,0,c	;volatile
  8201                           
  8202                           ; BSR set to: 1
  8203  002282  BEF2               	btfsc	intcon,7,c	;volatile
  8204                           
  8205                           ; BSR set to: 1
  8206  002284  80D8               	bsf	status,0,c	;volatile
  8207                           
  8208                           ; BSR set to: 1
  8209  002286  9EF2               	bcf	intcon,7,c	;volatile
  8210  002288  84A6               	bsf	4006,2,c	;volatile
  8211                           
  8212                           ; BSR set to: 1
  8213  00228A  0E55               	movlw	85
  8214  00228C  6EA7               	movwf	4007,c	;volatile
  8215  00228E  0EAA               	movlw	170
  8216  002290  6EA7               	movwf	4007,c	;volatile
  8217                           
  8218                           ; BSR set to: 1
  8219  002292  82A6               	bsf	4006,1,c	;volatile
  8220                           
  8221                           ; BSR set to: 1
  8222  002294  94A6               	bcf	4006,2,c	;volatile
  8223                           
  8224                           ; BSR set to: 1
  8225  002296  E301               	bnc	l4359
  8226                           
  8227                           ; BSR set to: 1
  8228  002298  8EF2               	bsf	intcon,7,c	;volatile
  8229  00229A                     l4359:
  8230                           
  8231                           ; BSR set to: 1
  8232  00229A  2A1E               	incf	ModbusProcess_FC21@i,f,c
  8233  00229C                     l4361:
  8234  00229C  FFFF               	dw	65535	; assembler added errata NOP
  8235                           
  8236                           ; BSR set to: 1
  8237  00229E  501E               	movf	ModbusProcess_FC21@i,w,c
  8238  0022A0  6E16               	movwf	??_ModbusProcess_FC21& (0+255),c
  8239  0022A2  6A17               	clrf	(??_ModbusProcess_FC21+1)& (0+255),c
  8240  0022A4  501C               	movf	ModbusProcess_FC21@recLenBytes,w,c
  8241  0022A6  5C16               	subwf	??_ModbusProcess_FC21,w,c
  8242  0022A8  501D               	movf	ModbusProcess_FC21@recLenBytes+1,w,c
  8243  0022AA  5817               	subwfb	??_ModbusProcess_FC21+1,w,c
  8244  0022AC  E3DB               	bnc	l874
  8245                           
  8246                           ; BSR set to: 1
  8247                           ;ModbusRtu.c: 1219: }
  8248                           ;ModbusRtu.c: 1221: u8CopyBufferSize = _u8BufferSize;
  8249  0022AE  C06B  F019         	movff	__u8BufferSize,ModbusProcess_FC21@u8CopyBufferSize
  8250                           
  8251                           ; BSR set to: 1
  8252                           ;ModbusRtu.c: 1222: ModbusSendTxBuffer();
  8253  0022B2  EC16  F014         	call	_ModbusSendTxBuffer	;wreg free
  8254                           
  8255                           ;ModbusRtu.c: 1224: return u8CopyBufferSize;
  8256  0022B6  5019               	movf	ModbusProcess_FC21@u8CopyBufferSize,w,c
  8257  0022B8  0012               	return		;funcret
  8258  0022BA  FFFF               	dw	65535	; errata NOP
  8259  0022BC                     __end_of_ModbusProcess_FC21:
  8260                           	opt stack 0
  8261                           tblptru	equ	0xFF8
  8262                           tblptrh	equ	0xFF7
  8263                           tblptrl	equ	0xFF6
  8264                           tablat	equ	0xFF5
  8265                           prodh	equ	0xFF4
  8266                           prodl	equ	0xFF3
  8267                           intcon	equ	0xFF2
  8268                           postinc0	equ	0xFEE
  8269                           wreg	equ	0xFE8
  8270                           indf1	equ	0xFE7
  8271                           postinc1	equ	0xFE6
  8272                           postdec1	equ	0xFE5
  8273                           fsr1h	equ	0xFE2
  8274                           fsr1l	equ	0xFE1
  8275                           indf2	equ	0xFDF
  8276                           postinc2	equ	0xFDE
  8277                           postdec2	equ	0xFDD
  8278                           plusw2	equ	0xFDB
  8279                           fsr2h	equ	0xFDA
  8280                           fsr2l	equ	0xFD9
  8281                           status	equ	0xFD8
  8282                           
  8283 ;; *************** function _ModbusProcess_FC17 *****************
  8284 ;; Defined at:
  8285 ;;		line 1152 in file "ModbusRtu.c"
  8286 ;; Parameters:    Size  Location     Type
  8287 ;;		None
  8288 ;; Auto vars:     Size  Location     Type
  8289 ;;  i               1   23[COMRAM] unsigned char 
  8290 ;;  u8CopyBuffer    1   22[COMRAM] unsigned char 
  8291 ;; Return value:  Size  Location     Type
  8292 ;;                  1    wreg      unsigned char 
  8293 ;; Registers used:
  8294 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8295 ;; Tracked objects:
  8296 ;;		On entry : E/1
  8297 ;;		On exit  : 0/0
  8298 ;;		Unchanged: 0/0
  8299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8300 ;;      Params:         0       0       0       0       0       0       0
  8301 ;;      Locals:         2       0       0       0       0       0       0
  8302 ;;      Temps:          1       0       0       0       0       0       0
  8303 ;;      Totals:         3       0       0       0       0       0       0
  8304 ;;Total ram usage:        3 bytes
  8305 ;; Hardware stack levels used:    1
  8306 ;; Hardware stack levels required when called:    4
  8307 ;; This function calls:
  8308 ;;		_ModbusSendTxBuffer
  8309 ;; This function is called by:
  8310 ;;		_ModbusPoll
  8311 ;; This function uses a non-reentrant model
  8312 ;;
  8313                           
  8314                           	psect	text34
  8315  00260C                     __ptext34:
  8316                           	opt stack 0
  8317  00260C                     _ModbusProcess_FC17:
  8318                           	opt stack 25
  8319                           
  8320                           ;incstack = 0
  8321  00260C  FFFF               	dw	65535
  8322                           
  8323                           ;ModbusRtu.c: 1154: _au8Buffer[ 2 ] = sizeof("Tablo s raspisaniem turo") + 1 + 1;
  8324  00260E  0E1B               	movlw	27
  8325  002610  0101               	movlb	1	; () banked
  8326  002612  6F02               	movwf	(__au8Buffer+2)& (0+255),b
  8327                           
  8328                           ;ModbusRtu.c: 1156: _u8BufferSize = 3;
  8329  002614  0E03               	movlw	3
  8330  002616  6E6B               	movwf	__u8BufferSize,c
  8331                           
  8332                           ; BSR set to: 1
  8333                           ;ModbusRtu.c: 1158: for(uint8_t i = 0; i < sizeof("Tablo s raspisaniem turo"); i++, _u8B
      +                          ufferSize++)
  8334  002618  6A18               	clrf	ModbusProcess_FC17@i,c
  8335  00261A                     l4301:
  8336  00261A  FFFF               	dw	65535	; assembler added errata NOP
  8337                           
  8338                           ; BSR set to: 1
  8339                           ;ModbusRtu.c: 1159: _au8Buffer[_u8BufferSize] = "Tablo s raspisaniem turo"[i];
  8340  00261C  5018               	movf	ModbusProcess_FC17@i,w,c
  8341  00261E  0F0B               	addlw	low STR_3
  8342  002620  6E16               	movwf	??_ModbusProcess_FC17& (0+255),c
  8343  002622  C016  FFF6         	movff	??_ModbusProcess_FC17,tblptrl
  8344  002626                     	if	1	;There is more than 1 active tblptr byte
  8345  002626  0E06               	movlw	high __smallconst
  8346  002628  6EF7               	movwf	tblptrh,c
  8347  00262A                     	endif
  8348  00262A                     	if	0	;tblptru may be non-zero
  8349  00262A                     	endif
  8350  00262A                     	if	0	;tblptru may be non-zero
  8351  00262A                     	endif
  8352  00262A  0E00               	movlw	low __au8Buffer
  8353  00262C  246B               	addwf	__u8BufferSize,w,c
  8354  00262E  6ED9               	movwf	fsr2l,c
  8355  002630  6ADA               	clrf	fsr2h,c
  8356  002632  0E01               	movlw	high __au8Buffer
  8357  002634  22DA               	addwfc	fsr2h,f,c
  8358  002636  0008               	tblrd		*
  8359  002638  FFFF               	dw	65535	; errata NOP
  8360  00263A  CFF5 FFDF          	movff	tablat,indf2
  8361                           
  8362                           ; BSR set to: 1
  8363  00263E  2A18               	incf	ModbusProcess_FC17@i,f,c
  8364                           
  8365                           ; BSR set to: 1
  8366  002640  2A6B               	incf	__u8BufferSize,f,c
  8367                           
  8368                           ; BSR set to: 1
  8369  002642  0E18               	movlw	24
  8370  002644  6418               	cpfsgt	ModbusProcess_FC17@i,c
  8371  002646  D7E9               	goto	l4301
  8372                           
  8373                           ; BSR set to: 1
  8374                           ;ModbusRtu.c: 1178: _au8Buffer[_u8BufferSize++] = '!';
  8375  002648  0E00               	movlw	low __au8Buffer
  8376  00264A  246B               	addwf	__u8BufferSize,w,c
  8377  00264C  6ED9               	movwf	fsr2l,c
  8378  00264E  6ADA               	clrf	fsr2h,c
  8379  002650  0E01               	movlw	high __au8Buffer
  8380  002652  22DA               	addwfc	fsr2h,f,c
  8381  002654  0E21               	movlw	33
  8382  002656  6EDF               	movwf	indf2,c
  8383                           
  8384                           ; BSR set to: 1
  8385  002658  2A6B               	incf	__u8BufferSize,f,c
  8386                           
  8387                           ; BSR set to: 1
  8388                           ;ModbusRtu.c: 1179: _au8Buffer[_u8BufferSize++] = '>';
  8389  00265A  0E00               	movlw	low __au8Buffer
  8390  00265C  246B               	addwf	__u8BufferSize,w,c
  8391  00265E  6ED9               	movwf	fsr2l,c
  8392  002660  6ADA               	clrf	fsr2h,c
  8393  002662  0E01               	movlw	high __au8Buffer
  8394  002664  22DA               	addwfc	fsr2h,f,c
  8395  002666  0E3E               	movlw	62
  8396  002668  6EDF               	movwf	indf2,c
  8397  00266A  2A6B               	incf	__u8BufferSize,f,c
  8398                           
  8399                           ; BSR set to: 1
  8400                           ;ModbusRtu.c: 1180: uint8_t u8CopyBufferSize = _u8BufferSize;
  8401  00266C  C06B  F017         	movff	__u8BufferSize,ModbusProcess_FC17@u8CopyBufferSize
  8402                           
  8403                           ; BSR set to: 1
  8404                           ;ModbusRtu.c: 1181: ModbusSendTxBuffer();
  8405  002670  EC16  F014         	call	_ModbusSendTxBuffer	;wreg free
  8406                           
  8407                           ;ModbusRtu.c: 1183: return u8CopyBufferSize;
  8408  002674  5017               	movf	ModbusProcess_FC17@u8CopyBufferSize,w,c
  8409  002676  0012               	return		;funcret
  8410  002678  FFFF               	dw	65535	; errata NOP
  8411  00267A                     __end_of_ModbusProcess_FC17:
  8412                           	opt stack 0
  8413                           tblptru	equ	0xFF8
  8414                           tblptrh	equ	0xFF7
  8415                           tblptrl	equ	0xFF6
  8416                           tablat	equ	0xFF5
  8417                           prodh	equ	0xFF4
  8418                           prodl	equ	0xFF3
  8419                           intcon	equ	0xFF2
  8420                           postinc0	equ	0xFEE
  8421                           wreg	equ	0xFE8
  8422                           indf1	equ	0xFE7
  8423                           postinc1	equ	0xFE6
  8424                           postdec1	equ	0xFE5
  8425                           fsr1h	equ	0xFE2
  8426                           fsr1l	equ	0xFE1
  8427                           indf2	equ	0xFDF
  8428                           postinc2	equ	0xFDE
  8429                           postdec2	equ	0xFDD
  8430                           plusw2	equ	0xFDB
  8431                           fsr2h	equ	0xFDA
  8432                           fsr2l	equ	0xFD9
  8433                           status	equ	0xFD8
  8434                           
  8435 ;; *************** function _ModbusProcess_FC16 *****************
  8436 ;; Defined at:
  8437 ;;		line 1112 in file "ModbusRtu.c"
  8438 ;; Parameters:    Size  Location     Type
  8439 ;;  regs            2   21[COMRAM] PTR unsigned short 
  8440 ;;		 -> _MODBUSHoldingRegs(30), 
  8441 ;;  u8size          1   23[COMRAM] unsigned char 
  8442 ;; Auto vars:     Size  Location     Type
  8443 ;;  u16StartAdd     2   31[COMRAM] unsigned short 
  8444 ;;  temp            2   28[COMRAM] unsigned short 
  8445 ;;  i               1   34[COMRAM] unsigned char 
  8446 ;;  u8regsno        1   33[COMRAM] unsigned char 
  8447 ;;  u8CopyBuffer    1   30[COMRAM] unsigned char 
  8448 ;; Return value:  Size  Location     Type
  8449 ;;                  1    wreg      unsigned char 
  8450 ;; Registers used:
  8451 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8452 ;; Tracked objects:
  8453 ;;		On entry : E/1
  8454 ;;		On exit  : 0/0
  8455 ;;		Unchanged: 0/0
  8456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8457 ;;      Params:         3       0       0       0       0       0       0
  8458 ;;      Locals:         7       0       0       0       0       0       0
  8459 ;;      Temps:          4       0       0       0       0       0       0
  8460 ;;      Totals:        14       0       0       0       0       0       0
  8461 ;;Total ram usage:       14 bytes
  8462 ;; Hardware stack levels used:    1
  8463 ;; Hardware stack levels required when called:    4
  8464 ;; This function calls:
  8465 ;;		_ModbusSendTxBuffer
  8466 ;; This function is called by:
  8467 ;;		_ModbusPoll
  8468 ;; This function uses a non-reentrant model
  8469 ;;
  8470                           
  8471                           	psect	text35
  8472  001F00                     __ptext35:
  8473                           	opt stack 0
  8474  001F00                     _ModbusProcess_FC16:
  8475                           	opt stack 25
  8476                           
  8477                           ;incstack = 0
  8478  001F00  FFFF               	dw	65535
  8479                           
  8480                           ;ModbusRtu.c: 1114: _lastCommand = MODBUS_COM_WRITE_MULTIPLE_REGISTERS;
  8481  001F02  0E10               	movlw	16
  8482  001F04  0100               	movlb	0	; () banked
  8483  001F06  6FDA               	movwf	__lastCommand& (0+255),b
  8484                           
  8485                           ; BSR set to: 0
  8486                           ;ModbusRtu.c: 1116: uint16_t u16StartAdd = _au8Buffer[ ADD_HI ] << 8 | _au8Buffer[ ADD_L
      +                          O ];
  8487  001F08  0101               	movlb	1	; () banked
  8488  001F0A  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  8489  001F0C  C102  F019         	movff	__au8Buffer+2,??_ModbusProcess_FC16
  8490  001F10  6A1A               	clrf	(??_ModbusProcess_FC16+1)& (0+255),c
  8491  001F12  C019  F01A         	movff	??_ModbusProcess_FC16,??_ModbusProcess_FC16+1
  8492  001F16  6A19               	clrf	??_ModbusProcess_FC16,c
  8493  001F18  1019               	iorwf	??_ModbusProcess_FC16,w,c
  8494  001F1A  6E20               	movwf	ModbusProcess_FC16@u16StartAdd,c
  8495  001F1C  501A               	movf	??_ModbusProcess_FC16+1,w,c
  8496  001F1E  6E21               	movwf	ModbusProcess_FC16@u16StartAdd+1,c
  8497                           
  8498                           ; BSR set to: 1
  8499                           ;ModbusRtu.c: 1117: _lastAddress = u16StartAdd;
  8500  001F20  C020  F0B6         	movff	ModbusProcess_FC16@u16StartAdd,__lastAddress
  8501  001F24  C021  F0B7         	movff	ModbusProcess_FC16@u16StartAdd+1,__lastAddress+1
  8502                           
  8503                           ; BSR set to: 1
  8504                           ;ModbusRtu.c: 1118: int8_t u8regsno = _au8Buffer[ NB_HI ] << 8 | _au8Buffer[ NB_LO ];
  8505  001F28  C105  F022         	movff	__au8Buffer+5,ModbusProcess_FC16@u8regsno
  8506                           
  8507                           ; BSR set to: 1
  8508                           ;ModbusRtu.c: 1119: _lastCount = u8regsno;
  8509  001F2C  C022  F0B8         	movff	ModbusProcess_FC16@u8regsno,__lastCount
  8510  001F30  0100               	movlb	0	; () banked
  8511  001F32  6BB9               	clrf	(__lastCount+1)& (0+255),b
  8512                           
  8513                           ; BSR set to: 0
  8514                           ;ModbusRtu.c: 1120: uint8_t u8CopyBufferSize;
  8515                           ;ModbusRtu.c: 1121: uint8_t i;
  8516                           ;ModbusRtu.c: 1122: uint16_t temp;
  8517                           ;ModbusRtu.c: 1125: _au8Buffer[ NB_HI ] = 0;
  8518  001F34  0101               	movlb	1	; () banked
  8519  001F36  6B04               	clrf	(__au8Buffer+4)& (0+255),b
  8520                           
  8521                           ; BSR set to: 1
  8522                           ;ModbusRtu.c: 1126: _au8Buffer[ NB_LO ] = u8regsno;
  8523  001F38  C022  F105         	movff	ModbusProcess_FC16@u8regsno,__au8Buffer+5
  8524                           
  8525                           ; BSR set to: 1
  8526                           ;ModbusRtu.c: 1127: _u8BufferSize = RESPONSE_SIZE;
  8527  001F3C  0E06               	movlw	6
  8528  001F3E  6E6B               	movwf	__u8BufferSize,c
  8529                           
  8530                           ; BSR set to: 1
  8531                           ;ModbusRtu.c: 1130: for (i = 0; i < u8regsno && (u16StartAdd + i) < u8size; i++)
  8532  001F40  6A23               	clrf	ModbusProcess_FC16@i,c
  8533  001F42  D02C               	goto	l4281
  8534  001F44                     l4275:
  8535                           
  8536                           ; BSR set to: 1
  8537                           ;ModbusRtu.c: 1131: {
  8538                           ;ModbusRtu.c: 1132: temp = (((uint16_t)_au8Buffer[ (BYTE_CNT + 1) + i * 2 ]<<8)|_au8Buff
      +                          er[ (BYTE_CNT + 2) + i * 2 ]);
  8539  001F44  5023               	movf	ModbusProcess_FC16@i,w,c
  8540  001F46  0D02               	mullw	2
  8541  001F48  0E08               	movlw	low (__au8Buffer+8)
  8542  001F4A  24F3               	addwf	prodl,w,c
  8543  001F4C  6ED9               	movwf	fsr2l,c
  8544  001F4E  0E01               	movlw	high (__au8Buffer+8)
  8545  001F50  20F4               	addwfc	prodh,w,c
  8546  001F52  6EDA               	movwf	fsr2h,c
  8547  001F54  50DF               	movf	indf2,w,c
  8548  001F56  6E19               	movwf	??_ModbusProcess_FC16& (0+255),c
  8549  001F58  5023               	movf	ModbusProcess_FC16@i,w,c
  8550  001F5A  0D02               	mullw	2
  8551  001F5C  0E07               	movlw	low (__au8Buffer+7)
  8552  001F5E  24F3               	addwf	prodl,w,c
  8553  001F60  6ED9               	movwf	fsr2l,c
  8554  001F62  0E01               	movlw	high (__au8Buffer+7)
  8555  001F64  20F4               	addwfc	prodh,w,c
  8556  001F66  6EDA               	movwf	fsr2h,c
  8557  001F68  50DF               	movf	indf2,w,c
  8558  001F6A  6E1A               	movwf	(??_ModbusProcess_FC16+1)& (0+255),c
  8559  001F6C  5019               	movf	??_ModbusProcess_FC16,w,c
  8560  001F6E  6E1D               	movwf	ModbusProcess_FC16@temp,c
  8561  001F70  C01A  F01E         	movff	??_ModbusProcess_FC16+1,ModbusProcess_FC16@temp+1
  8562                           
  8563                           ; BSR set to: 1
  8564                           ;ModbusRtu.c: 1136: regs[ u16StartAdd + i ] = temp;
  8565  001F74  5023               	movf	ModbusProcess_FC16@i,w,c
  8566  001F76  2420               	addwf	ModbusProcess_FC16@u16StartAdd,w,c
  8567  001F78  6E19               	movwf	??_ModbusProcess_FC16& (0+255),c
  8568  001F7A  0E00               	movlw	0
  8569  001F7C  2021               	addwfc	ModbusProcess_FC16@u16StartAdd+1,w,c
  8570  001F7E  6E1A               	movwf	(??_ModbusProcess_FC16+1)& (0+255),c
  8571  001F80  90D8               	bcf	status,0,c
  8572  001F82  3619               	rlcf	??_ModbusProcess_FC16,f,c
  8573  001F84  361A               	rlcf	??_ModbusProcess_FC16+1,f,c
  8574  001F86  5019               	movf	??_ModbusProcess_FC16,w,c
  8575  001F88  2416               	addwf	ModbusProcess_FC16@regs,w,c
  8576  001F8A  6ED9               	movwf	fsr2l,c
  8577  001F8C  501A               	movf	??_ModbusProcess_FC16+1,w,c
  8578  001F8E  2017               	addwfc	ModbusProcess_FC16@regs+1,w,c
  8579  001F90  6EDA               	movwf	fsr2h,c
  8580  001F92  C01D  FFDE         	movff	ModbusProcess_FC16@temp,postinc2
  8581  001F96  C01E  FFDD         	movff	ModbusProcess_FC16@temp+1,postdec2
  8582                           
  8583                           ; BSR set to: 1
  8584  001F9A  2A23               	incf	ModbusProcess_FC16@i,f,c
  8585  001F9C                     l4281:
  8586  001F9C  FFFF               	dw	65535	; assembler added errata NOP
  8587                           
  8588                           ; BSR set to: 1
  8589  001F9E  5022               	movf	ModbusProcess_FC16@u8regsno,w,c
  8590  001FA0  5C23               	subwf	ModbusProcess_FC16@i,w,c
  8591  001FA2  E20E               	bc	l4285
  8592                           
  8593                           ; BSR set to: 1
  8594  001FA4  5018               	movf	ModbusProcess_FC16@u8size,w,c
  8595  001FA6  6E19               	movwf	??_ModbusProcess_FC16& (0+255),c
  8596  001FA8  6A1A               	clrf	(??_ModbusProcess_FC16+1)& (0+255),c
  8597  001FAA  5023               	movf	ModbusProcess_FC16@i,w,c
  8598  001FAC  2420               	addwf	ModbusProcess_FC16@u16StartAdd,w,c
  8599  001FAE  6E1B               	movwf	(??_ModbusProcess_FC16+2)& (0+255),c
  8600  001FB0  0E00               	movlw	0
  8601  001FB2  2021               	addwfc	ModbusProcess_FC16@u16StartAdd+1,w,c
  8602  001FB4  6E1C               	movwf	(??_ModbusProcess_FC16+3)& (0+255),c
  8603  001FB6  5019               	movf	??_ModbusProcess_FC16,w,c
  8604  001FB8  5C1B               	subwf	??_ModbusProcess_FC16+2,w,c
  8605  001FBA  501A               	movf	??_ModbusProcess_FC16+1,w,c
  8606  001FBC  581C               	subwfb	??_ModbusProcess_FC16+3,w,c
  8607  001FBE  E3C2               	bnc	l4275
  8608  001FC0                     l4285:
  8609                           
  8610                           ; BSR set to: 1
  8611                           ;ModbusRtu.c: 1137: }
  8612                           ;ModbusRtu.c: 1138: u8CopyBufferSize = _u8BufferSize + 2;
  8613  001FC0  506B               	movf	__u8BufferSize,w,c
  8614  001FC2  0F02               	addlw	2
  8615  001FC4  6E1F               	movwf	ModbusProcess_FC16@u8CopyBufferSize,c
  8616                           
  8617                           ; BSR set to: 1
  8618                           ;ModbusRtu.c: 1139: ModbusSendTxBuffer();
  8619  001FC6  EC16  F014         	call	_ModbusSendTxBuffer	;wreg free
  8620                           
  8621                           ;ModbusRtu.c: 1141: return u8CopyBufferSize;
  8622  001FCA  501F               	movf	ModbusProcess_FC16@u8CopyBufferSize,w,c
  8623  001FCC  0012               	return		;funcret
  8624  001FCE  FFFF               	dw	65535	; errata NOP
  8625  001FD0                     __end_of_ModbusProcess_FC16:
  8626                           	opt stack 0
  8627                           tblptru	equ	0xFF8
  8628                           tblptrh	equ	0xFF7
  8629                           tblptrl	equ	0xFF6
  8630                           tablat	equ	0xFF5
  8631                           prodh	equ	0xFF4
  8632                           prodl	equ	0xFF3
  8633                           intcon	equ	0xFF2
  8634                           postinc0	equ	0xFEE
  8635                           wreg	equ	0xFE8
  8636                           indf1	equ	0xFE7
  8637                           postinc1	equ	0xFE6
  8638                           postdec1	equ	0xFE5
  8639                           fsr1h	equ	0xFE2
  8640                           fsr1l	equ	0xFE1
  8641                           indf2	equ	0xFDF
  8642                           postinc2	equ	0xFDE
  8643                           postdec2	equ	0xFDD
  8644                           plusw2	equ	0xFDB
  8645                           fsr2h	equ	0xFDA
  8646                           fsr2l	equ	0xFD9
  8647                           status	equ	0xFD8
  8648                           
  8649 ;; *************** function _ModbusProcess_FC15 *****************
  8650 ;; Defined at:
  8651 ;;		line 1053 in file "ModbusRtu.c"
  8652 ;; Parameters:    Size  Location     Type
  8653 ;;  regs            1    wreg     PTR unsigned short 
  8654 ;;		 -> _MODBUSCoils(2), 
  8655 ;; Auto vars:     Size  Location     Type
  8656 ;;  regs            1   38[COMRAM] PTR unsigned short 
  8657 ;;		 -> _MODBUSCoils(2), 
  8658 ;;  u16currentCo    2   35[COMRAM] unsigned short 
  8659 ;;  u16Coilno       2   33[COMRAM] unsigned short 
  8660 ;;  u16StartCoil    2   31[COMRAM] unsigned short 
  8661 ;;  u16coil         2   26[COMRAM] unsigned short 
  8662 ;;  u8bitsno        1   39[COMRAM] unsigned char 
  8663 ;;  u8currentBit    1   37[COMRAM] unsigned char 
  8664 ;;  u8frameByte     1   30[COMRAM] unsigned char 
  8665 ;;  bTemp           1   29[COMRAM] unsigned char 
  8666 ;;  u8CopyBuffer    1   28[COMRAM] unsigned char 
  8667 ;; Return value:  Size  Location     Type
  8668 ;;                  1    wreg      unsigned char 
  8669 ;; Registers used:
  8670 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8671 ;; Tracked objects:
  8672 ;;		On entry : E/1
  8673 ;;		On exit  : 0/0
  8674 ;;		Unchanged: 0/0
  8675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8676 ;;      Params:         0       0       0       0       0       0       0
  8677 ;;      Locals:        14       0       0       0       0       0       0
  8678 ;;      Temps:          5       0       0       0       0       0       0
  8679 ;;      Totals:        19       0       0       0       0       0       0
  8680 ;;Total ram usage:       19 bytes
  8681 ;; Hardware stack levels used:    1
  8682 ;; Hardware stack levels required when called:    4
  8683 ;; This function calls:
  8684 ;;		_ModbusSendTxBuffer
  8685 ;; This function is called by:
  8686 ;;		_ModbusPoll
  8687 ;; This function uses a non-reentrant model
  8688 ;;
  8689                           
  8690                           	psect	text36
  8691  001AF8                     __ptext36:
  8692                           	opt stack 0
  8693  001AF8                     _ModbusProcess_FC15:
  8694                           	opt stack 25
  8695                           
  8696                           ;incstack = 0
  8697  001AF8  FFFF               	dw	65535
  8698                           
  8699                           ;ModbusProcess_FC15@regs stored from wreg
  8700  001AFA  6E27               	movwf	ModbusProcess_FC15@regs,c
  8701                           
  8702                           ;ModbusRtu.c: 1055: _lastCommand = MODBUS_COM_WRITE_MULTIPLE_COILS;
  8703  001AFC  0E0F               	movlw	15
  8704  001AFE  0100               	movlb	0	; () banked
  8705  001B00  6FDA               	movwf	__lastCommand& (0+255),b
  8706                           
  8707                           ; BSR set to: 0
  8708                           ;ModbusRtu.c: 1057: uint8_t u8currentBit, u8frameByte, u8bitsno;
  8709                           ;ModbusRtu.c: 1058: uint8_t u8CopyBufferSize;
  8710                           ;ModbusRtu.c: 1059: uint16_t u16currentCoil, u16coil;
  8711                           ;ModbusRtu.c: 1060: boolean bTemp;
  8712                           ;ModbusRtu.c: 1063: uint16_t u16StartCoil = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buf
      +                          fer[ ADD_LO ]);
  8713  001B02  0101               	movlb	1	; () banked
  8714  001B04  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  8715  001B06  6E16               	movwf	??_ModbusProcess_FC15& (0+255),c
  8716  001B08  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  8717  001B0A  6E20               	movwf	ModbusProcess_FC15@u16StartCoil,c
  8718  001B0C  C016  F021         	movff	??_ModbusProcess_FC15,ModbusProcess_FC15@u16StartCoil+1
  8719                           
  8720                           ; BSR set to: 1
  8721                           ;ModbusRtu.c: 1064: _lastAddress = u16StartCoil;
  8722  001B10  C020  F0B6         	movff	ModbusProcess_FC15@u16StartCoil,__lastAddress
  8723  001B14  C021  F0B7         	movff	ModbusProcess_FC15@u16StartCoil+1,__lastAddress+1
  8724                           
  8725                           ; BSR set to: 1
  8726                           ;ModbusRtu.c: 1065: uint16_t u16Coilno = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[
      +                           NB_LO ]);
  8727  001B18  5104               	movf	(__au8Buffer+4)& (0+255),w,b
  8728  001B1A  6E16               	movwf	??_ModbusProcess_FC15& (0+255),c
  8729  001B1C  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  8730  001B1E  6E22               	movwf	ModbusProcess_FC15@u16Coilno,c
  8731  001B20  C016  F023         	movff	??_ModbusProcess_FC15,ModbusProcess_FC15@u16Coilno+1
  8732                           
  8733                           ; BSR set to: 1
  8734                           ;ModbusRtu.c: 1066: _lastCount = u16Coilno;
  8735  001B24  C022  F0B8         	movff	ModbusProcess_FC15@u16Coilno,__lastCount
  8736  001B28  C023  F0B9         	movff	ModbusProcess_FC15@u16Coilno+1,__lastCount+1
  8737                           
  8738                           ; BSR set to: 1
  8739                           ;ModbusRtu.c: 1069: u8bitsno = 0;
  8740  001B2C  6A28               	clrf	ModbusProcess_FC15@u8bitsno,c
  8741                           
  8742                           ; BSR set to: 1
  8743                           ;ModbusRtu.c: 1070: u8frameByte = 7;
  8744  001B2E  0E07               	movlw	7
  8745  001B30  6E1F               	movwf	ModbusProcess_FC15@u8frameByte,c
  8746                           
  8747                           ; BSR set to: 1
  8748                           ;ModbusRtu.c: 1071: for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil+
      +                          +)
  8749  001B32  6A24               	clrf	ModbusProcess_FC15@u16currentCoil,c
  8750  001B34  6A25               	clrf	ModbusProcess_FC15@u16currentCoil+1,c
  8751  001B36  D058               	goto	l4245
  8752  001B38                     l4225:
  8753                           
  8754                           ;ModbusRtu.c: 1072: {
  8755                           ;ModbusRtu.c: 1074: u16coil = u16StartCoil + u16currentCoil;
  8756  001B38  5024               	movf	ModbusProcess_FC15@u16currentCoil,w,c
  8757  001B3A  2420               	addwf	ModbusProcess_FC15@u16StartCoil,w,c
  8758  001B3C  6E1B               	movwf	ModbusProcess_FC15@u16coil,c
  8759  001B3E  5025               	movf	ModbusProcess_FC15@u16currentCoil+1,w,c
  8760  001B40  2021               	addwfc	ModbusProcess_FC15@u16StartCoil+1,w,c
  8761  001B42  6E1C               	movwf	ModbusProcess_FC15@u16coil+1,c
  8762                           
  8763                           ;ModbusRtu.c: 1076: u8currentBit = (uint8_t) u16coil;
  8764  001B44  C01B  F026         	movff	ModbusProcess_FC15@u16coil,ModbusProcess_FC15@u8currentBit
  8765                           
  8766                           ;ModbusRtu.c: 1078: bTemp = (((_au8Buffer[ u8frameByte ]) >> (u8bitsno)) & 0x01);
  8767  001B48  C028  F016         	movff	ModbusProcess_FC15@u8bitsno,??_ModbusProcess_FC15
  8768  001B4C  0E00               	movlw	low __au8Buffer
  8769  001B4E  241F               	addwf	ModbusProcess_FC15@u8frameByte,w,c
  8770  001B50  6ED9               	movwf	fsr2l,c
  8771  001B52  6ADA               	clrf	fsr2h,c
  8772  001B54  0E01               	movlw	high __au8Buffer
  8773  001B56  22DA               	addwfc	fsr2h,f,c
  8774  001B58  50DF               	movf	indf2,w,c
  8775  001B5A  6E17               	movwf	(??_ModbusProcess_FC15+1)& (0+255),c
  8776  001B5C  2A16               	incf	??_ModbusProcess_FC15,f,c
  8777  001B5E  D003               	goto	u3614
  8778  001B60                     u3615:
  8779  001B60  FFFF               	dw	65535	; assembler added errata NOP
  8780  001B62  90D8               	bcf	status,0,c
  8781  001B64  3217               	rrcf	??_ModbusProcess_FC15+1,f,c
  8782  001B66                     u3614:
  8783  001B66  FFFF               	dw	65535	; assembler added errata NOP
  8784  001B68  2E16               	decfsz	??_ModbusProcess_FC15,f,c
  8785  001B6A  D7FA               	goto	u3615
  8786  001B6C  5017               	movf	??_ModbusProcess_FC15+1,w,c
  8787  001B6E  0B01               	andlw	1
  8788  001B70  6E1E               	movwf	ModbusProcess_FC15@bTemp,c
  8789                           
  8790                           ;ModbusRtu.c: 1082: (bTemp ? ((*regs) |= ((unsigned short)1 << (u8currentBit))) : ((*reg
      +                          s) &= ~((unsigned short)1 << (u8currentBit))));
  8791  001B72  501E               	movf	ModbusProcess_FC15@bTemp,w,c
  8792  001B74  E016               	bz	l4235
  8793  001B76  C026  F016         	movff	ModbusProcess_FC15@u8currentBit,??_ModbusProcess_FC15
  8794  001B7A  0E01               	movlw	1
  8795  001B7C  6E17               	movwf	(??_ModbusProcess_FC15+1)& (0+255),c
  8796  001B7E  6A18               	clrf	(??_ModbusProcess_FC15+2)& (0+255),c
  8797  001B80  2A16               	incf	??_ModbusProcess_FC15,f,c
  8798  001B82  D004               	goto	u3634
  8799  001B84                     u3635:
  8800  001B84  FFFF               	dw	65535	; assembler added errata NOP
  8801  001B86  90D8               	bcf	status,0,c
  8802  001B88  3617               	rlcf	??_ModbusProcess_FC15+1,f,c
  8803  001B8A  3618               	rlcf	??_ModbusProcess_FC15+2,f,c
  8804  001B8C                     u3634:
  8805  001B8C  FFFF               	dw	65535	; assembler added errata NOP
  8806  001B8E  2E16               	decfsz	??_ModbusProcess_FC15,f,c
  8807  001B90  D7F9               	goto	u3635
  8808  001B92  5027               	movf	ModbusProcess_FC15@regs,w,c
  8809  001B94  6ED9               	movwf	fsr2l,c
  8810  001B96  6ADA               	clrf	fsr2h,c
  8811  001B98  5017               	movf	??_ModbusProcess_FC15+1,w,c
  8812  001B9A  12DE               	iorwf	postinc2,f,c
  8813  001B9C  5018               	movf	??_ModbusProcess_FC15+2,w,c
  8814  001B9E  12DD               	iorwf	postdec2,f,c
  8815  001BA0  D019               	goto	l4237
  8816  001BA2                     l4235:
  8817  001BA2  C026  F016         	movff	ModbusProcess_FC15@u8currentBit,??_ModbusProcess_FC15
  8818  001BA6  0E01               	movlw	1
  8819  001BA8  6E17               	movwf	(??_ModbusProcess_FC15+1)& (0+255),c
  8820  001BAA  6A18               	clrf	(??_ModbusProcess_FC15+2)& (0+255),c
  8821  001BAC  2A16               	incf	??_ModbusProcess_FC15,f,c
  8822  001BAE  D004               	goto	u3644
  8823  001BB0                     u3645:
  8824  001BB0  FFFF               	dw	65535	; assembler added errata NOP
  8825  001BB2  90D8               	bcf	status,0,c
  8826  001BB4  3617               	rlcf	??_ModbusProcess_FC15+1,f,c
  8827  001BB6  3618               	rlcf	??_ModbusProcess_FC15+2,f,c
  8828  001BB8                     u3644:
  8829  001BB8  FFFF               	dw	65535	; assembler added errata NOP
  8830  001BBA  2E16               	decfsz	??_ModbusProcess_FC15,f,c
  8831  001BBC  D7F9               	goto	u3645
  8832  001BBE  1C17               	comf	??_ModbusProcess_FC15+1,w,c
  8833  001BC0  6E19               	movwf	(??_ModbusProcess_FC15+3)& (0+255),c
  8834  001BC2  1C18               	comf	??_ModbusProcess_FC15+2,w,c
  8835  001BC4  6E1A               	movwf	(??_ModbusProcess_FC15+4)& (0+255),c
  8836  001BC6  5027               	movf	ModbusProcess_FC15@regs,w,c
  8837  001BC8  6ED9               	movwf	fsr2l,c
  8838  001BCA  6ADA               	clrf	fsr2h,c
  8839  001BCC  5019               	movf	??_ModbusProcess_FC15+3,w,c
  8840  001BCE  16DE               	andwf	postinc2,f,c
  8841  001BD0  501A               	movf	??_ModbusProcess_FC15+4,w,c
  8842  001BD2  16DD               	andwf	postdec2,f,c
  8843  001BD4                     l4237:
  8844  001BD4  FFFF               	dw	65535	; assembler added errata NOP
  8845                           
  8846                           ;ModbusRtu.c: 1087: u8bitsno++;
  8847  001BD6  2A28               	incf	ModbusProcess_FC15@u8bitsno,f,c
  8848                           
  8849                           ;ModbusRtu.c: 1089: if (u8bitsno > 7)
  8850  001BD8  0E07               	movlw	7
  8851  001BDA  6428               	cpfsgt	ModbusProcess_FC15@u8bitsno,c
  8852  001BDC  D002               	goto	l853
  8853                           
  8854                           ;ModbusRtu.c: 1090: {
  8855                           ;ModbusRtu.c: 1091: u8bitsno = 0;
  8856  001BDE  6A28               	clrf	ModbusProcess_FC15@u8bitsno,c
  8857                           
  8858                           ;ModbusRtu.c: 1092: u8frameByte++;
  8859  001BE0  2A1F               	incf	ModbusProcess_FC15@u8frameByte,f,c
  8860  001BE2                     l853:
  8861  001BE2  FFFF               	dw	65535	; assembler added errata NOP
  8862  001BE4  4A24               	infsnz	ModbusProcess_FC15@u16currentCoil,f,c
  8863  001BE6  2A25               	incf	ModbusProcess_FC15@u16currentCoil+1,f,c
  8864  001BE8                     l4245:
  8865  001BE8  FFFF               	dw	65535	; assembler added errata NOP
  8866  001BEA  5022               	movf	ModbusProcess_FC15@u16Coilno,w,c
  8867  001BEC  5C24               	subwf	ModbusProcess_FC15@u16currentCoil,w,c
  8868  001BEE  5023               	movf	ModbusProcess_FC15@u16Coilno+1,w,c
  8869  001BF0  5825               	subwfb	ModbusProcess_FC15@u16currentCoil+1,w,c
  8870  001BF2  E3A2               	bnc	l4225
  8871                           
  8872                           ;ModbusRtu.c: 1093: }
  8873                           ;ModbusRtu.c: 1094: }
  8874                           ;ModbusRtu.c: 1098: _u8BufferSize = 6;
  8875  001BF4  0E06               	movlw	6
  8876  001BF6  6E6B               	movwf	__u8BufferSize,c
  8877                           
  8878                           ;ModbusRtu.c: 1099: u8CopyBufferSize = _u8BufferSize + 2;
  8879  001BF8  506B               	movf	__u8BufferSize,w,c
  8880  001BFA  0F02               	addlw	2
  8881  001BFC  6E1D               	movwf	ModbusProcess_FC15@u8CopyBufferSize,c
  8882                           
  8883                           ;ModbusRtu.c: 1100: ModbusSendTxBuffer();
  8884  001BFE  EC16  F014         	call	_ModbusSendTxBuffer	;wreg free
  8885                           
  8886                           ;ModbusRtu.c: 1101: return u8CopyBufferSize;
  8887  001C02  501D               	movf	ModbusProcess_FC15@u8CopyBufferSize,w,c
  8888  001C04  0012               	return		;funcret
  8889  001C06  FFFF               	dw	65535	; errata NOP
  8890  001C08                     __end_of_ModbusProcess_FC15:
  8891                           	opt stack 0
  8892                           tblptru	equ	0xFF8
  8893                           tblptrh	equ	0xFF7
  8894                           tblptrl	equ	0xFF6
  8895                           tablat	equ	0xFF5
  8896                           prodh	equ	0xFF4
  8897                           prodl	equ	0xFF3
  8898                           intcon	equ	0xFF2
  8899                           postinc0	equ	0xFEE
  8900                           wreg	equ	0xFE8
  8901                           indf1	equ	0xFE7
  8902                           postinc1	equ	0xFE6
  8903                           postdec1	equ	0xFE5
  8904                           fsr1h	equ	0xFE2
  8905                           fsr1l	equ	0xFE1
  8906                           indf2	equ	0xFDF
  8907                           postinc2	equ	0xFDE
  8908                           postdec2	equ	0xFDD
  8909                           plusw2	equ	0xFDB
  8910                           fsr2h	equ	0xFDA
  8911                           fsr2l	equ	0xFD9
  8912                           status	equ	0xFD8
  8913                           
  8914 ;; *************** function _ModbusProcess_FC1 *****************
  8915 ;; Defined at:
  8916 ;;		line 893 in file "ModbusRtu.c"
  8917 ;; Parameters:    Size  Location     Type
  8918 ;;  regs            2   21[COMRAM] unsigned short 
  8919 ;; Auto vars:     Size  Location     Type
  8920 ;;  u16Coilno       2   36[COMRAM] unsigned short 
  8921 ;;  u16currentCo    2   33[COMRAM] unsigned short 
  8922 ;;  u16StartCoil    2   31[COMRAM] unsigned short 
  8923 ;;  u16coil         2   26[COMRAM] unsigned short 
  8924 ;;  u8bitsno        1   35[COMRAM] unsigned char 
  8925 ;;  u8bytesno       1   30[COMRAM] unsigned char 
  8926 ;;  u8CopyBuffer    1   29[COMRAM] unsigned char 
  8927 ;;  u8currentBit    1   28[COMRAM] unsigned char 
  8928 ;; Return value:  Size  Location     Type
  8929 ;;                  1    wreg      unsigned char 
  8930 ;; Registers used:
  8931 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8932 ;; Tracked objects:
  8933 ;;		On entry : E/1
  8934 ;;		On exit  : 0/0
  8935 ;;		Unchanged: 0/0
  8936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8937 ;;      Params:         2       0       0       0       0       0       0
  8938 ;;      Locals:        12       0       0       0       0       0       0
  8939 ;;      Temps:          3       0       0       0       0       0       0
  8940 ;;      Totals:        17       0       0       0       0       0       0
  8941 ;;Total ram usage:       17 bytes
  8942 ;; Hardware stack levels used:    1
  8943 ;; Hardware stack levels required when called:    4
  8944 ;; This function calls:
  8945 ;;		_ModbusSendTxBuffer
  8946 ;; This function is called by:
  8947 ;;		_ModbusPoll
  8948 ;; This function uses a non-reentrant model
  8949 ;;
  8950                           
  8951                           	psect	text37
  8952  0019C6                     __ptext37:
  8953                           	opt stack 0
  8954  0019C6                     _ModbusProcess_FC1:
  8955                           	opt stack 25
  8956                           
  8957                           ;incstack = 0
  8958  0019C6  FFFF               	dw	65535
  8959                           
  8960                           ;ModbusRtu.c: 895: _lastCommand = MODBUS_COM_READ_COILS;
  8961  0019C8  0E01               	movlw	1
  8962  0019CA  0100               	movlb	0	; () banked
  8963  0019CC  6FDA               	movwf	__lastCommand& (0+255),b
  8964                           
  8965                           ;ModbusRtu.c: 898: uint8_t u8currentBit, u8bytesno, u8bitsno;
  8966                           ;ModbusRtu.c: 899: uint8_t u8CopyBufferSize;
  8967                           ;ModbusRtu.c: 900: uint16_t u16currentCoil, u16coil;
  8968                           ;ModbusRtu.c: 903: uint16_t u16StartCoil = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buff
      +                          er[ ADD_LO ]);
  8969  0019CE  0101               	movlb	1	; () banked
  8970  0019D0  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  8971  0019D2  6E18               	movwf	??_ModbusProcess_FC1& (0+255),c
  8972  0019D4  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  8973  0019D6  6E20               	movwf	ModbusProcess_FC1@u16StartCoil,c
  8974  0019D8  C018  F021         	movff	??_ModbusProcess_FC1,ModbusProcess_FC1@u16StartCoil+1
  8975                           
  8976                           ; BSR set to: 1
  8977                           ;ModbusRtu.c: 904: _lastAddress = u16StartCoil;
  8978  0019DC  C020  F0B6         	movff	ModbusProcess_FC1@u16StartCoil,__lastAddress
  8979  0019E0  C021  F0B7         	movff	ModbusProcess_FC1@u16StartCoil+1,__lastAddress+1
  8980                           
  8981                           ;ModbusRtu.c: 905: uint16_t u16Coilno = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ 
      +                          NB_LO ]);
  8982  0019E4  5104               	movf	(__au8Buffer+4)& (0+255),w,b
  8983  0019E6  6E18               	movwf	??_ModbusProcess_FC1& (0+255),c
  8984  0019E8  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  8985  0019EA  6E25               	movwf	ModbusProcess_FC1@u16Coilno,c
  8986  0019EC  C018  F026         	movff	??_ModbusProcess_FC1,ModbusProcess_FC1@u16Coilno+1
  8987                           
  8988                           ; BSR set to: 1
  8989                           ;ModbusRtu.c: 906: _lastCount = u16Coilno;
  8990  0019F0  C025  F0B8         	movff	ModbusProcess_FC1@u16Coilno,__lastCount
  8991  0019F4  C026  F0B9         	movff	ModbusProcess_FC1@u16Coilno+1,__lastCount+1
  8992                           
  8993                           ; BSR set to: 1
  8994                           ;ModbusRtu.c: 908: u8bytesno = (uint8_t) (u16Coilno / 8);
  8995  0019F8  C025  F018         	movff	ModbusProcess_FC1@u16Coilno,??_ModbusProcess_FC1
  8996  0019FC  C026  F019         	movff	ModbusProcess_FC1@u16Coilno+1,??_ModbusProcess_FC1+1
  8997  001A00  90D8               	bcf	status,0,c
  8998  001A02  3219               	rrcf	??_ModbusProcess_FC1+1,f,c
  8999  001A04  3218               	rrcf	??_ModbusProcess_FC1,f,c
  9000  001A06  90D8               	bcf	status,0,c
  9001  001A08  3219               	rrcf	??_ModbusProcess_FC1+1,f,c
  9002  001A0A  3218               	rrcf	??_ModbusProcess_FC1,f,c
  9003  001A0C  90D8               	bcf	status,0,c
  9004  001A0E  3219               	rrcf	??_ModbusProcess_FC1+1,f,c
  9005  001A10  3218               	rrcf	??_ModbusProcess_FC1,f,c
  9006  001A12  5018               	movf	??_ModbusProcess_FC1,w,c
  9007  001A14  6E1F               	movwf	ModbusProcess_FC1@u8bytesno,c
  9008                           
  9009                           ; BSR set to: 1
  9010                           ;ModbusRtu.c: 909: if (u16Coilno % 8 != 0)
  9011  001A16  C025  F018         	movff	ModbusProcess_FC1@u16Coilno,??_ModbusProcess_FC1
  9012  001A1A  0E07               	movlw	7
  9013  001A1C  1618               	andwf	??_ModbusProcess_FC1,f,c
  9014  001A1E  E001               	bz	l4097
  9015                           
  9016                           ; BSR set to: 1
  9017                           ;ModbusRtu.c: 910: u8bytesno++;
  9018  001A20  2A1F               	incf	ModbusProcess_FC1@u8bytesno,f,c
  9019  001A22                     l4097:
  9020                           
  9021                           ; BSR set to: 1
  9022                           ;ModbusRtu.c: 911: _au8Buffer[ ADD_HI ] = u8bytesno;
  9023  001A22  C01F  F102         	movff	ModbusProcess_FC1@u8bytesno,__au8Buffer+2
  9024                           
  9025                           ; BSR set to: 1
  9026                           ;ModbusRtu.c: 912: _u8BufferSize = ADD_LO;
  9027  001A26  0E03               	movlw	3
  9028  001A28  6E6B               	movwf	__u8BufferSize,c
  9029                           
  9030                           ; BSR set to: 1
  9031                           ;ModbusRtu.c: 915: u8bitsno = 0;
  9032  001A2A  6A24               	clrf	ModbusProcess_FC1@u8bitsno,c
  9033                           
  9034                           ; BSR set to: 1
  9035                           ;ModbusRtu.c: 917: for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++
      +                          )
  9036  001A2C  6A22               	clrf	ModbusProcess_FC1@u16currentCoil,c
  9037  001A2E  6A23               	clrf	ModbusProcess_FC1@u16currentCoil+1,c
  9038  001A30  D04F               	goto	l4123
  9039  001A32                     l4105:
  9040                           
  9041                           ;ModbusRtu.c: 918: {
  9042                           ;ModbusRtu.c: 919: u16coil = u16StartCoil + u16currentCoil;
  9043  001A32  5022               	movf	ModbusProcess_FC1@u16currentCoil,w,c
  9044  001A34  2420               	addwf	ModbusProcess_FC1@u16StartCoil,w,c
  9045  001A36  6E1B               	movwf	ModbusProcess_FC1@u16coil,c
  9046  001A38  5023               	movf	ModbusProcess_FC1@u16currentCoil+1,w,c
  9047  001A3A  2021               	addwfc	ModbusProcess_FC1@u16StartCoil+1,w,c
  9048  001A3C  6E1C               	movwf	ModbusProcess_FC1@u16coil+1,c
  9049                           
  9050                           ;ModbusRtu.c: 921: u8currentBit = (uint8_t) u16coil;
  9051  001A3E  C01B  F01D         	movff	ModbusProcess_FC1@u16coil,ModbusProcess_FC1@u8currentBit
  9052                           
  9053                           ;ModbusRtu.c: 923: ((((regs) >> (u8currentBit)) & 0x01) ? ((_au8Buffer[ _u8BufferSize ])
      +                           |= ((unsigned short)1 << (u8bitsno))) : ((_au8Buffer[ _u8BufferSize ]) &= ~((unsigned s
      +                          hort)1 << (u8bitsno))));
  9054  001A42  C01D  F018         	movff	ModbusProcess_FC1@u8currentBit,??_ModbusProcess_FC1
  9055  001A46  C016  F019         	movff	ModbusProcess_FC1@regs,??_ModbusProcess_FC1+1
  9056  001A4A  C017  F01A         	movff	ModbusProcess_FC1@regs+1,??_ModbusProcess_FC1+2
  9057  001A4E  2A18               	incf	??_ModbusProcess_FC1,f,c
  9058  001A50  D004               	goto	u3504
  9059  001A52                     u3505:
  9060  001A52  FFFF               	dw	65535	; assembler added errata NOP
  9061  001A54  90D8               	bcf	status,0,c
  9062  001A56  321A               	rrcf	??_ModbusProcess_FC1+2,f,c
  9063  001A58  3219               	rrcf	??_ModbusProcess_FC1+1,f,c
  9064  001A5A                     u3504:
  9065  001A5A  FFFF               	dw	65535	; assembler added errata NOP
  9066  001A5C  2E18               	decfsz	??_ModbusProcess_FC1,f,c
  9067  001A5E  D7F9               	goto	u3505
  9068  001A60  A019               	btfss	??_ModbusProcess_FC1+1,0,c
  9069  001A62  D015               	goto	l4113
  9070  001A64  C024  F018         	movff	ModbusProcess_FC1@u8bitsno,??_ModbusProcess_FC1
  9071  001A68  0E01               	movlw	1
  9072  001A6A  6E19               	movwf	(??_ModbusProcess_FC1+1)& (0+255),c
  9073  001A6C  2A18               	incf	??_ModbusProcess_FC1,f,c
  9074  001A6E  D003               	goto	u3524
  9075  001A70                     u3525:
  9076  001A70  FFFF               	dw	65535	; assembler added errata NOP
  9077  001A72  90D8               	bcf	status,0,c
  9078  001A74  3619               	rlcf	??_ModbusProcess_FC1+1,f,c
  9079  001A76                     u3524:
  9080  001A76  FFFF               	dw	65535	; assembler added errata NOP
  9081  001A78  2E18               	decfsz	??_ModbusProcess_FC1,f,c
  9082  001A7A  D7FA               	goto	u3525
  9083  001A7C  0E00               	movlw	low __au8Buffer
  9084  001A7E  246B               	addwf	__u8BufferSize,w,c
  9085  001A80  6ED9               	movwf	fsr2l,c
  9086  001A82  6ADA               	clrf	fsr2h,c
  9087  001A84  0E01               	movlw	high __au8Buffer
  9088  001A86  22DA               	addwfc	fsr2h,f,c
  9089  001A88  5019               	movf	??_ModbusProcess_FC1+1,w,c
  9090  001A8A  12DF               	iorwf	indf2,f,c
  9091  001A8C  D017               	goto	l4115
  9092  001A8E                     l4113:
  9093  001A8E  FFFF               	dw	65535	; assembler added errata NOP
  9094  001A90  C024  F018         	movff	ModbusProcess_FC1@u8bitsno,??_ModbusProcess_FC1
  9095  001A94  0E01               	movlw	1
  9096  001A96  6E19               	movwf	(??_ModbusProcess_FC1+1)& (0+255),c
  9097  001A98  2A18               	incf	??_ModbusProcess_FC1,f,c
  9098  001A9A  D003               	goto	u3534
  9099  001A9C                     u3535:
  9100  001A9C  FFFF               	dw	65535	; assembler added errata NOP
  9101  001A9E  90D8               	bcf	status,0,c
  9102  001AA0  3619               	rlcf	??_ModbusProcess_FC1+1,f,c
  9103  001AA2                     u3534:
  9104  001AA2  FFFF               	dw	65535	; assembler added errata NOP
  9105  001AA4  2E18               	decfsz	??_ModbusProcess_FC1,f,c
  9106  001AA6  D7FA               	goto	u3535
  9107  001AA8  1C19               	comf	??_ModbusProcess_FC1+1,w,c
  9108  001AAA  6E1A               	movwf	(??_ModbusProcess_FC1+2)& (0+255),c
  9109  001AAC  0E00               	movlw	low __au8Buffer
  9110  001AAE  246B               	addwf	__u8BufferSize,w,c
  9111  001AB0  6ED9               	movwf	fsr2l,c
  9112  001AB2  6ADA               	clrf	fsr2h,c
  9113  001AB4  0E01               	movlw	high __au8Buffer
  9114  001AB6  22DA               	addwfc	fsr2h,f,c
  9115  001AB8  501A               	movf	??_ModbusProcess_FC1+2,w,c
  9116  001ABA  16DF               	andwf	indf2,f,c
  9117  001ABC                     l4115:
  9118  001ABC  FFFF               	dw	65535	; assembler added errata NOP
  9119                           
  9120                           ;ModbusRtu.c: 927: u8bitsno++;
  9121  001ABE  2A24               	incf	ModbusProcess_FC1@u8bitsno,f,c
  9122                           
  9123                           ;ModbusRtu.c: 929: if (u8bitsno > 7)
  9124  001AC0  0E07               	movlw	7
  9125  001AC2  6424               	cpfsgt	ModbusProcess_FC1@u8bitsno,c
  9126  001AC4  D002               	goto	l825
  9127                           
  9128                           ;ModbusRtu.c: 930: {
  9129                           ;ModbusRtu.c: 931: u8bitsno = 0;
  9130  001AC6  6A24               	clrf	ModbusProcess_FC1@u8bitsno,c
  9131                           
  9132                           ;ModbusRtu.c: 932: _u8BufferSize++;
  9133  001AC8  2A6B               	incf	__u8BufferSize,f,c
  9134  001ACA                     l825:
  9135  001ACA  FFFF               	dw	65535	; assembler added errata NOP
  9136  001ACC  4A22               	infsnz	ModbusProcess_FC1@u16currentCoil,f,c
  9137  001ACE  2A23               	incf	ModbusProcess_FC1@u16currentCoil+1,f,c
  9138  001AD0                     l4123:
  9139  001AD0  FFFF               	dw	65535	; assembler added errata NOP
  9140  001AD2  5025               	movf	ModbusProcess_FC1@u16Coilno,w,c
  9141  001AD4  5C22               	subwf	ModbusProcess_FC1@u16currentCoil,w,c
  9142  001AD6  5026               	movf	ModbusProcess_FC1@u16Coilno+1,w,c
  9143  001AD8  5823               	subwfb	ModbusProcess_FC1@u16currentCoil+1,w,c
  9144  001ADA  E3AB               	bnc	l4105
  9145                           
  9146                           ;ModbusRtu.c: 933: }
  9147                           ;ModbusRtu.c: 934: }
  9148                           ;ModbusRtu.c: 937: if (u16Coilno % 8 != 0)
  9149  001ADC  C025  F018         	movff	ModbusProcess_FC1@u16Coilno,??_ModbusProcess_FC1
  9150  001AE0  0E07               	movlw	7
  9151  001AE2  1618               	andwf	??_ModbusProcess_FC1,f,c
  9152  001AE4  E001               	bz	l4129
  9153                           
  9154                           ;ModbusRtu.c: 938: _u8BufferSize++;
  9155  001AE6  2A6B               	incf	__u8BufferSize,f,c
  9156  001AE8                     l4129:
  9157                           
  9158                           ;ModbusRtu.c: 939: u8CopyBufferSize = _u8BufferSize + 2;
  9159  001AE8  506B               	movf	__u8BufferSize,w,c
  9160  001AEA  0F02               	addlw	2
  9161  001AEC  6E1E               	movwf	ModbusProcess_FC1@u8CopyBufferSize,c
  9162                           
  9163                           ;ModbusRtu.c: 940: ModbusSendTxBuffer();
  9164  001AEE  EC16  F014         	call	_ModbusSendTxBuffer	;wreg free
  9165                           
  9166                           ;ModbusRtu.c: 941: return u8CopyBufferSize;
  9167  001AF2  501E               	movf	ModbusProcess_FC1@u8CopyBufferSize,w,c
  9168  001AF4  0012               	return		;funcret
  9169  001AF6  FFFF               	dw	65535	; errata NOP
  9170  001AF8                     __end_of_ModbusProcess_FC1:
  9171                           	opt stack 0
  9172                           tblptru	equ	0xFF8
  9173                           tblptrh	equ	0xFF7
  9174                           tblptrl	equ	0xFF6
  9175                           tablat	equ	0xFF5
  9176                           prodh	equ	0xFF4
  9177                           prodl	equ	0xFF3
  9178                           intcon	equ	0xFF2
  9179                           postinc0	equ	0xFEE
  9180                           wreg	equ	0xFE8
  9181                           indf1	equ	0xFE7
  9182                           postinc1	equ	0xFE6
  9183                           postdec1	equ	0xFE5
  9184                           fsr1h	equ	0xFE2
  9185                           fsr1l	equ	0xFE1
  9186                           indf2	equ	0xFDF
  9187                           postinc2	equ	0xFDE
  9188                           postdec2	equ	0xFDD
  9189                           plusw2	equ	0xFDB
  9190                           fsr2h	equ	0xFDA
  9191                           fsr2l	equ	0xFD9
  9192                           status	equ	0xFD8
  9193                           
  9194 ;; *************** function _ModbusSendTxBuffer *****************
  9195 ;; Defined at:
  9196 ;;		line 549 in file "ModbusRtu.c"
  9197 ;; Parameters:    Size  Location     Type
  9198 ;;		None
  9199 ;; Auto vars:     Size  Location     Type
  9200 ;;  u16crc          2   19[COMRAM] unsigned short 
  9201 ;; Return value:  Size  Location     Type
  9202 ;;                  1    wreg      void 
  9203 ;; Registers used:
  9204 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9205 ;; Tracked objects:
  9206 ;;		On entry : 0/1
  9207 ;;		On exit  : 0/0
  9208 ;;		Unchanged: 0/0
  9209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9210 ;;      Params:         0       0       0       0       0       0       0
  9211 ;;      Locals:         2       0       0       0       0       0       0
  9212 ;;      Temps:          0       0       0       0       0       0       0
  9213 ;;      Totals:         2       0       0       0       0       0       0
  9214 ;;Total ram usage:        2 bytes
  9215 ;; Hardware stack levels used:    1
  9216 ;; Hardware stack levels required when called:    3
  9217 ;; This function calls:
  9218 ;;		_ModbusCalcCRC
  9219 ;;		_PortWrite
  9220 ;;		_millis
  9221 ;; This function is called by:
  9222 ;;		_ModbusPoll
  9223 ;;		_ModbusProcess_FC1
  9224 ;;		_ModbusProcess_FC3
  9225 ;;		_ModbusProcess_FC5
  9226 ;;		_ModbusProcess_FC6
  9227 ;;		_ModbusProcess_FC15
  9228 ;;		_ModbusProcess_FC16
  9229 ;;		_ModbusProcess_FC17
  9230 ;;		_ModbusProcess_FC21
  9231 ;; This function uses a non-reentrant model
  9232 ;;
  9233                           
  9234                           	psect	text38
  9235  00282C                     __ptext38:
  9236                           	opt stack 0
  9237  00282C                     _ModbusSendTxBuffer:
  9238                           	opt stack 26
  9239                           
  9240                           ;incstack = 0
  9241  00282C  FFFF               	dw	65535
  9242                           
  9243                           ;ModbusRtu.c: 554: uint16_t u16crc = ModbusCalcCRC(_u8BufferSize);
  9244  00282E  506B               	movf	__u8BufferSize,w,c
  9245  002830  ECCC  F012         	call	_ModbusCalcCRC
  9246  002834  C007  F014         	movff	?_ModbusCalcCRC,ModbusSendTxBuffer@u16crc
  9247  002838  C008  F015         	movff	?_ModbusCalcCRC+1,ModbusSendTxBuffer@u16crc+1
  9248                           
  9249                           ;ModbusRtu.c: 555: _au8Buffer[ _u8BufferSize ] = u16crc >> 8;
  9250  00283C  0E00               	movlw	low __au8Buffer
  9251  00283E  246B               	addwf	__u8BufferSize,w,c
  9252  002840  6ED9               	movwf	fsr2l,c
  9253  002842  6ADA               	clrf	fsr2h,c
  9254  002844  0E01               	movlw	high __au8Buffer
  9255  002846  22DA               	addwfc	fsr2h,f,c
  9256  002848  C015  FFDF         	movff	ModbusSendTxBuffer@u16crc+1,indf2
  9257                           
  9258                           ;ModbusRtu.c: 556: _u8BufferSize++;
  9259  00284C  2A6B               	incf	__u8BufferSize,f,c
  9260                           
  9261                           ;ModbusRtu.c: 557: _au8Buffer[ _u8BufferSize ] = u16crc & 0x00ff;
  9262  00284E  0E00               	movlw	low __au8Buffer
  9263  002850  246B               	addwf	__u8BufferSize,w,c
  9264  002852  6ED9               	movwf	fsr2l,c
  9265  002854  6ADA               	clrf	fsr2h,c
  9266  002856  0E01               	movlw	high __au8Buffer
  9267  002858  22DA               	addwfc	fsr2h,f,c
  9268  00285A  C014  FFDF         	movff	ModbusSendTxBuffer@u16crc,indf2
  9269                           
  9270                           ;ModbusRtu.c: 558: _u8BufferSize++;
  9271  00285E  2A6B               	incf	__u8BufferSize,f,c
  9272                           
  9273                           ;ModbusRtu.c: 562: PortWrite(_au8Buffer, _u8BufferSize);
  9274  002860  0E00               	movlw	low __au8Buffer
  9275  002862  6E07               	movwf	PortWrite@buf,c
  9276  002864  0E01               	movlw	high __au8Buffer
  9277  002866  6E08               	movwf	PortWrite@buf+1,c
  9278  002868  C06B  F009         	movff	__u8BufferSize,PortWrite@buflen
  9279  00286C  ECE8  F014         	call	_PortWrite	;wreg free
  9280                           
  9281                           ;ModbusRtu.c: 568: _u8BufferSize = 0;
  9282  002870  6A6B               	clrf	__u8BufferSize,c
  9283                           
  9284                           ;ModbusRtu.c: 574: _u16OutCnt++;
  9285  002872  EF4F  F015         	goto	_millis	;wreg free
  9286  002876  FFFF               	dw	65535	; errata NOP
  9287  002878                     __end_of_ModbusSendTxBuffer:
  9288                           	opt stack 0
  9289                           tblptru	equ	0xFF8
  9290                           tblptrh	equ	0xFF7
  9291                           tblptrl	equ	0xFF6
  9292                           tablat	equ	0xFF5
  9293                           prodh	equ	0xFF4
  9294                           prodl	equ	0xFF3
  9295                           intcon	equ	0xFF2
  9296                           postinc0	equ	0xFEE
  9297                           wreg	equ	0xFE8
  9298                           indf1	equ	0xFE7
  9299                           postinc1	equ	0xFE6
  9300                           postdec1	equ	0xFE5
  9301                           fsr1h	equ	0xFE2
  9302                           fsr1l	equ	0xFE1
  9303                           indf2	equ	0xFDF
  9304                           postinc2	equ	0xFDE
  9305                           postdec2	equ	0xFDD
  9306                           plusw2	equ	0xFDB
  9307                           fsr2h	equ	0xFDA
  9308                           fsr2l	equ	0xFD9
  9309                           status	equ	0xFD8
  9310                           
  9311 ;; *************** function _millis *****************
  9312 ;; Defined at:
  9313 ;;		line 236 in file "interrupts.c"
  9314 ;; Parameters:    Size  Location     Type
  9315 ;;		None
  9316 ;; Auto vars:     Size  Location     Type
  9317 ;;  ret             4   10[COMRAM] unsigned long 
  9318 ;; Return value:  Size  Location     Type
  9319 ;;                  4    6[COMRAM] unsigned long 
  9320 ;; Registers used:
  9321 ;;		None
  9322 ;; Tracked objects:
  9323 ;;		On entry : 0/0
  9324 ;;		On exit  : 0/0
  9325 ;;		Unchanged: 0/0
  9326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9327 ;;      Params:         4       0       0       0       0       0       0
  9328 ;;      Locals:         4       0       0       0       0       0       0
  9329 ;;      Temps:          0       0       0       0       0       0       0
  9330 ;;      Totals:         8       0       0       0       0       0       0
  9331 ;;Total ram usage:        8 bytes
  9332 ;; Hardware stack levels used:    1
  9333 ;; Hardware stack levels required when called:    2
  9334 ;; This function calls:
  9335 ;;		Nothing
  9336 ;; This function is called by:
  9337 ;;		_main
  9338 ;;		_ModbusPoll
  9339 ;;		_ModbusSendTxBuffer
  9340 ;; This function uses a non-reentrant model
  9341 ;;
  9342                           
  9343                           	psect	text39
  9344  002A9E                     __ptext39:
  9345                           	opt stack 0
  9346  002A9E                     _millis:
  9347                           	opt stack 28
  9348                           
  9349                           ;incstack = 0
  9350  002A9E  FFFF               	dw	65535
  9351                           
  9352                           ;interrupts.c: 239: (INTCONbits.GIE = 0);
  9353  002AA0  9EF2               	bcf	intcon,7,c	;volatile
  9354                           
  9355                           ;interrupts.c: 240: unsigned long ret = millisecondsFromStart;
  9356  002AA2  C0AC  F00B         	movff	_millisecondsFromStart,millis@ret	;volatile
  9357  002AA6  C0AD  F00C         	movff	_millisecondsFromStart+1,millis@ret+1	;volatile
  9358  002AAA  C0AE  F00D         	movff	_millisecondsFromStart+2,millis@ret+2	;volatile
  9359  002AAE  C0AF  F00E         	movff	_millisecondsFromStart+3,millis@ret+3	;volatile
  9360                           
  9361                           ;interrupts.c: 241: (INTCONbits.GIE = 1);
  9362  002AB2  8EF2               	bsf	intcon,7,c	;volatile
  9363                           
  9364                           ;interrupts.c: 242: return ret;
  9365  002AB4  C00B  F007         	movff	millis@ret,?_millis
  9366  002AB8  C00C  F008         	movff	millis@ret+1,?_millis+1
  9367  002ABC  C00D  F009         	movff	millis@ret+2,?_millis+2
  9368  002AC0  C00E  F00A         	movff	millis@ret+3,?_millis+3
  9369  002AC4  0012               	return		;funcret
  9370  002AC6  FFFF               	dw	65535	; errata NOP
  9371  002AC8                     __end_of_millis:
  9372                           	opt stack 0
  9373                           tblptru	equ	0xFF8
  9374                           tblptrh	equ	0xFF7
  9375                           tblptrl	equ	0xFF6
  9376                           tablat	equ	0xFF5
  9377                           prodh	equ	0xFF4
  9378                           prodl	equ	0xFF3
  9379                           intcon	equ	0xFF2
  9380                           postinc0	equ	0xFEE
  9381                           wreg	equ	0xFE8
  9382                           indf1	equ	0xFE7
  9383                           postinc1	equ	0xFE6
  9384                           postdec1	equ	0xFE5
  9385                           fsr1h	equ	0xFE2
  9386                           fsr1l	equ	0xFE1
  9387                           indf2	equ	0xFDF
  9388                           postinc2	equ	0xFDE
  9389                           postdec2	equ	0xFDD
  9390                           plusw2	equ	0xFDB
  9391                           fsr2h	equ	0xFDA
  9392                           fsr2l	equ	0xFD9
  9393                           status	equ	0xFD8
  9394                           
  9395 ;; *************** function _PortWrite *****************
  9396 ;; Defined at:
  9397 ;;		line 93 in file "interrupts.c"
  9398 ;; Parameters:    Size  Location     Type
  9399 ;;  buf             2    6[COMRAM] PTR unsigned char 
  9400 ;;		 -> _au8Buffer(140), 
  9401 ;;  buflen          1    8[COMRAM] unsigned char 
  9402 ;; Auto vars:     Size  Location     Type
  9403 ;;  i               1    9[COMRAM] unsigned char 
  9404 ;; Return value:  Size  Location     Type
  9405 ;;                  1    wreg      void 
  9406 ;; Registers used:
  9407 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9408 ;; Tracked objects:
  9409 ;;		On entry : 0/1
  9410 ;;		On exit  : 0/0
  9411 ;;		Unchanged: 0/0
  9412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9413 ;;      Params:         3       0       0       0       0       0       0
  9414 ;;      Locals:         1       0       0       0       0       0       0
  9415 ;;      Temps:          0       0       0       0       0       0       0
  9416 ;;      Totals:         4       0       0       0       0       0       0
  9417 ;;Total ram usage:        4 bytes
  9418 ;; Hardware stack levels used:    1
  9419 ;; Hardware stack levels required when called:    2
  9420 ;; This function calls:
  9421 ;;		Nothing
  9422 ;; This function is called by:
  9423 ;;		_ModbusSendTxBuffer
  9424 ;; This function uses a non-reentrant model
  9425 ;;
  9426                           
  9427                           	psect	text40
  9428  0029D0                     __ptext40:
  9429                           	opt stack 0
  9430  0029D0                     _PortWrite:
  9431                           	opt stack 26
  9432                           
  9433                           ;incstack = 0
  9434  0029D0  FFFF               	dw	65535
  9435                           
  9436                           ;interrupts.c: 95: LATCbits.LATC5 = 1;
  9437  0029D2  8A8B               	bsf	3979,5,c	;volatile
  9438                           
  9439                           ;interrupts.c: 96: _delay((unsigned long)((10)*(10000000L/4000000.0)));
  9440  0029D4  0E06               	movlw	6
  9441  0029D6                     u7007:
  9442  0029D6  FFFF               	dw	65535	; errata NOP
  9443  0029D8  2EE8               	decfsz	wreg,f,c
  9444  0029DA  D7FD               	goto	u7007
  9445  0029DC  F000               	nop	
  9446                           
  9447                           ;interrupts.c: 97: for(uint8_t i = 0; i < buflen; i++)
  9448  0029DE  6A0A               	clrf	PortWrite@i,c
  9449  0029E0  D00C               	goto	l3545
  9450  0029E2                     l67:
  9451  0029E2  FFFF               	dw	65535	; assembler added errata NOP
  9452  0029E4  A2AC               	btfss	4012,1,c	;volatile
  9453  0029E6  D7FD               	goto	l67
  9454                           
  9455                           ;interrupts.c: 100: TXREG = buf[i];
  9456  0029E8  500A               	movf	PortWrite@i,w,c
  9457  0029EA  2407               	addwf	PortWrite@buf,w,c
  9458  0029EC  6ED9               	movwf	fsr2l,c
  9459  0029EE  0E00               	movlw	0
  9460  0029F0  2008               	addwfc	PortWrite@buf+1,w,c
  9461  0029F2  6EDA               	movwf	fsr2h,c
  9462  0029F4  50DF               	movf	indf2,w,c
  9463  0029F6  6EAD               	movwf	4013,c	;volatile
  9464  0029F8  2A0A               	incf	PortWrite@i,f,c
  9465  0029FA                     l3545:
  9466  0029FA  FFFF               	dw	65535	; assembler added errata NOP
  9467  0029FC  5009               	movf	PortWrite@buflen,w,c
  9468  0029FE  5C0A               	subwf	PortWrite@i,w,c
  9469  002A00  E3F0               	bnc	l67
  9470  002A02                     l71:
  9471  002A02  FFFF               	dw	65535	; assembler added errata NOP
  9472  002A04  A2AC               	btfss	4012,1,c	;volatile
  9473  002A06  D7FD               	goto	l71
  9474                           
  9475                           ;interrupts.c: 103: LATCbits.LATC5 = 0;
  9476  002A08  9A8B               	bcf	3979,5,c	;volatile
  9477  002A0A  0012               	return		;funcret
  9478  002A0C  FFFF               	dw	65535	; errata NOP
  9479  002A0E                     __end_of_PortWrite:
  9480                           	opt stack 0
  9481                           tblptru	equ	0xFF8
  9482                           tblptrh	equ	0xFF7
  9483                           tblptrl	equ	0xFF6
  9484                           tablat	equ	0xFF5
  9485                           prodh	equ	0xFF4
  9486                           prodl	equ	0xFF3
  9487                           intcon	equ	0xFF2
  9488                           postinc0	equ	0xFEE
  9489                           wreg	equ	0xFE8
  9490                           indf1	equ	0xFE7
  9491                           postinc1	equ	0xFE6
  9492                           postdec1	equ	0xFE5
  9493                           fsr1h	equ	0xFE2
  9494                           fsr1l	equ	0xFE1
  9495                           indf2	equ	0xFDF
  9496                           postinc2	equ	0xFDE
  9497                           postdec2	equ	0xFDD
  9498                           plusw2	equ	0xFDB
  9499                           fsr2h	equ	0xFDA
  9500                           fsr2l	equ	0xFD9
  9501                           status	equ	0xFD8
  9502                           
  9503 ;; *************** function _ModbusCalcCRC *****************
  9504 ;; Defined at:
  9505 ;;		line 659 in file "ModbusRtu.c"
  9506 ;; Parameters:    Size  Location     Type
  9507 ;;  u8length        1    wreg     unsigned char 
  9508 ;; Auto vars:     Size  Location     Type
  9509 ;;  u8length        1   14[COMRAM] unsigned char 
  9510 ;;  j               1   16[COMRAM] unsigned char 
  9511 ;;  i               1   15[COMRAM] unsigned char 
  9512 ;;  temp            2   17[COMRAM] unsigned int 
  9513 ;;  flag            2   12[COMRAM] unsigned int 
  9514 ;;  temp2           2   10[COMRAM] unsigned int 
  9515 ;; Return value:  Size  Location     Type
  9516 ;;                  2    6[COMRAM] unsigned short 
  9517 ;; Registers used:
  9518 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9519 ;; Tracked objects:
  9520 ;;		On entry : 0/1
  9521 ;;		On exit  : 0/0
  9522 ;;		Unchanged: 0/0
  9523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9524 ;;      Params:         2       0       0       0       0       0       0
  9525 ;;      Locals:         9       0       0       0       0       0       0
  9526 ;;      Temps:          2       0       0       0       0       0       0
  9527 ;;      Totals:        13       0       0       0       0       0       0
  9528 ;;Total ram usage:       13 bytes
  9529 ;; Hardware stack levels used:    1
  9530 ;; Hardware stack levels required when called:    2
  9531 ;; This function calls:
  9532 ;;		Nothing
  9533 ;; This function is called by:
  9534 ;;		_ModbusSendTxBuffer
  9535 ;;		_ModbusValidateRequest
  9536 ;; This function uses a non-reentrant model
  9537 ;;
  9538                           
  9539                           	psect	text41
  9540  002598                     __ptext41:
  9541                           	opt stack 0
  9542  002598                     _ModbusCalcCRC:
  9543                           	opt stack 26
  9544                           
  9545                           ;incstack = 0
  9546  002598  FFFF               	dw	65535
  9547                           
  9548                           ;ModbusCalcCRC@u8length stored from wreg
  9549  00259A  6E0F               	movwf	ModbusCalcCRC@u8length,c
  9550                           
  9551                           ;ModbusRtu.c: 661: unsigned int temp, temp2, flag;
  9552                           ;ModbusRtu.c: 662: temp = 0xFFFF;
  9553  00259C  6812               	setf	ModbusCalcCRC@temp,c
  9554  00259E  6813               	setf	ModbusCalcCRC@temp+1,c
  9555                           
  9556                           ;ModbusRtu.c: 663: for (uint8_t i = 0; i < u8length; i++)
  9557  0025A0  6A10               	clrf	ModbusCalcCRC@i,c
  9558  0025A2  D01E               	goto	l3593
  9559  0025A4                     l3571:
  9560                           
  9561                           ;ModbusRtu.c: 664: {
  9562                           ;ModbusRtu.c: 665: temp = temp ^ _au8Buffer[i];
  9563  0025A4  0E00               	movlw	low __au8Buffer
  9564  0025A6  2410               	addwf	ModbusCalcCRC@i,w,c
  9565  0025A8  6ED9               	movwf	fsr2l,c
  9566  0025AA  6ADA               	clrf	fsr2h,c
  9567  0025AC  0E01               	movlw	high __au8Buffer
  9568  0025AE  22DA               	addwfc	fsr2h,f,c
  9569  0025B0  50DF               	movf	indf2,w,c
  9570  0025B2  1A12               	xorwf	ModbusCalcCRC@temp,f,c
  9571                           
  9572                           ;ModbusRtu.c: 666: for (uint8_t j = 1; j <= 8; j++)
  9573  0025B4  0E01               	movlw	1
  9574  0025B6  6E11               	movwf	ModbusCalcCRC@j,c
  9575  0025B8                     l3579:
  9576  0025B8  FFFF               	dw	65535	; assembler added errata NOP
  9577                           
  9578                           ;ModbusRtu.c: 667: {
  9579                           ;ModbusRtu.c: 668: flag = temp & 0x0001;
  9580  0025BA  0E01               	movlw	1
  9581  0025BC  1412               	andwf	ModbusCalcCRC@temp,w,c
  9582  0025BE  6E0D               	movwf	ModbusCalcCRC@flag,c
  9583  0025C0  6A0E               	clrf	ModbusCalcCRC@flag+1,c
  9584                           
  9585                           ;ModbusRtu.c: 669: temp >>= 1;
  9586  0025C2  90D8               	bcf	status,0,c
  9587  0025C4  3213               	rrcf	ModbusCalcCRC@temp+1,f,c
  9588  0025C6  3212               	rrcf	ModbusCalcCRC@temp,f,c
  9589                           
  9590                           ;ModbusRtu.c: 670: if (flag)
  9591  0025C8  500D               	movf	ModbusCalcCRC@flag,w,c
  9592  0025CA  100E               	iorwf	ModbusCalcCRC@flag+1,w,c
  9593  0025CC  E004               	bz	l3587
  9594                           
  9595                           ;ModbusRtu.c: 671: temp ^= 0xA001;
  9596  0025CE  0E01               	movlw	1
  9597  0025D0  1A12               	xorwf	ModbusCalcCRC@temp,f,c
  9598  0025D2  0EA0               	movlw	160
  9599  0025D4  1A13               	xorwf	ModbusCalcCRC@temp+1,f,c
  9600  0025D6                     l3587:
  9601  0025D6  2A11               	incf	ModbusCalcCRC@j,f,c
  9602  0025D8  0E08               	movlw	8
  9603  0025DA  6411               	cpfsgt	ModbusCalcCRC@j,c
  9604  0025DC  D7ED               	goto	l3579
  9605  0025DE  2A10               	incf	ModbusCalcCRC@i,f,c
  9606  0025E0                     l3593:
  9607  0025E0  FFFF               	dw	65535	; assembler added errata NOP
  9608  0025E2  500F               	movf	ModbusCalcCRC@u8length,w,c
  9609  0025E4  5C10               	subwf	ModbusCalcCRC@i,w,c
  9610  0025E6  E3DE               	bnc	l3571
  9611                           
  9612                           ;ModbusRtu.c: 672: }
  9613                           ;ModbusRtu.c: 673: }
  9614                           ;ModbusRtu.c: 675: temp2 = temp >> 8;
  9615  0025E8  C013  F00B         	movff	ModbusCalcCRC@temp+1,ModbusCalcCRC@temp2
  9616  0025EC  6A0C               	clrf	ModbusCalcCRC@temp2+1,c
  9617                           
  9618                           ;ModbusRtu.c: 676: temp = (temp << 8) | temp2;
  9619  0025EE  5012               	movf	ModbusCalcCRC@temp,w,c
  9620  0025F0  6E0A               	movwf	(??_ModbusCalcCRC+1)& (0+255),c
  9621  0025F2  6A09               	clrf	??_ModbusCalcCRC& (0+255),c
  9622  0025F4  500B               	movf	ModbusCalcCRC@temp2,w,c
  9623  0025F6  1009               	iorwf	??_ModbusCalcCRC,w,c
  9624  0025F8  6E12               	movwf	ModbusCalcCRC@temp,c
  9625  0025FA  500C               	movf	ModbusCalcCRC@temp2+1,w,c
  9626  0025FC  100A               	iorwf	??_ModbusCalcCRC+1,w,c
  9627  0025FE  6E13               	movwf	ModbusCalcCRC@temp+1,c
  9628                           
  9629                           ;ModbusRtu.c: 680: return temp;
  9630  002600  C012  F007         	movff	ModbusCalcCRC@temp,?_ModbusCalcCRC
  9631  002604  C013  F008         	movff	ModbusCalcCRC@temp+1,?_ModbusCalcCRC+1
  9632  002608  0012               	return		;funcret
  9633  00260A  FFFF               	dw	65535	; errata NOP
  9634  00260C                     __end_of_ModbusCalcCRC:
  9635                           	opt stack 0
  9636                           tblptru	equ	0xFF8
  9637                           tblptrh	equ	0xFF7
  9638                           tblptrl	equ	0xFF6
  9639                           tablat	equ	0xFF5
  9640                           prodh	equ	0xFF4
  9641                           prodl	equ	0xFF3
  9642                           intcon	equ	0xFF2
  9643                           postinc0	equ	0xFEE
  9644                           wreg	equ	0xFE8
  9645                           indf1	equ	0xFE7
  9646                           postinc1	equ	0xFE6
  9647                           postdec1	equ	0xFE5
  9648                           fsr1h	equ	0xFE2
  9649                           fsr1l	equ	0xFE1
  9650                           indf2	equ	0xFDF
  9651                           postinc2	equ	0xFDE
  9652                           postdec2	equ	0xFDD
  9653                           plusw2	equ	0xFDB
  9654                           fsr2h	equ	0xFDA
  9655                           fsr2l	equ	0xFD9
  9656                           status	equ	0xFD8
  9657                           
  9658 ;; *************** function _ModbusGetRxBuffer *****************
  9659 ;; Defined at:
  9660 ;;		line 509 in file "ModbusRtu.c"
  9661 ;; Parameters:    Size  Location     Type
  9662 ;;		None
  9663 ;; Auto vars:     Size  Location     Type
  9664 ;;  bBuffOverflo    1    8[COMRAM] unsigned char 
  9665 ;; Return value:  Size  Location     Type
  9666 ;;                  1    wreg      unsigned char 
  9667 ;; Registers used:
  9668 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9669 ;; Tracked objects:
  9670 ;;		On entry : F/0
  9671 ;;		On exit  : 0/0
  9672 ;;		Unchanged: 0/0
  9673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9674 ;;      Params:         0       0       0       0       0       0       0
  9675 ;;      Locals:         1       0       0       0       0       0       0
  9676 ;;      Temps:          1       0       0       0       0       0       0
  9677 ;;      Totals:         2       0       0       0       0       0       0
  9678 ;;Total ram usage:        2 bytes
  9679 ;; Hardware stack levels used:    1
  9680 ;; Hardware stack levels required when called:    3
  9681 ;; This function calls:
  9682 ;;		_PortAvailable
  9683 ;;		_PortRead
  9684 ;; This function is called by:
  9685 ;;		_ModbusPoll
  9686 ;; This function uses a non-reentrant model
  9687 ;;
  9688                           
  9689                           	psect	text42
  9690  00294C                     __ptext42:
  9691                           	opt stack 0
  9692  00294C                     _ModbusGetRxBuffer:
  9693                           	opt stack 26
  9694                           
  9695                           ;incstack = 0
  9696  00294C  FFFF               	dw	65535
  9697                           
  9698                           ; BSR set to: 0
  9699                           ;ModbusRtu.c: 511: bool bBuffOverflow = 0;
  9700  00294E  6A09               	clrf	ModbusGetRxBuffer@bBuffOverflow,c
  9701                           
  9702                           ;ModbusRtu.c: 516: _u8BufferSize = 0;
  9703  002950  6A6B               	clrf	__u8BufferSize,c
  9704                           
  9705                           ;ModbusRtu.c: 518: while (PortAvailable())
  9706  002952  D011               	goto	l3945
  9707  002954                     l3937:
  9708                           
  9709                           ;ModbusRtu.c: 519: {
  9710                           ;ModbusRtu.c: 520: _au8Buffer[ _u8BufferSize ] = PortRead();
  9711  002954  EC07  F015         	call	_PortRead	;wreg free
  9712  002958  6E08               	movwf	??_ModbusGetRxBuffer& (0+255),c
  9713  00295A  0E00               	movlw	low __au8Buffer
  9714  00295C  246B               	addwf	__u8BufferSize,w,c
  9715  00295E  6ED9               	movwf	fsr2l,c
  9716  002960  6ADA               	clrf	fsr2h,c
  9717  002962  0E01               	movlw	high __au8Buffer
  9718  002964  22DA               	addwfc	fsr2h,f,c
  9719  002966  C008  FFDF         	movff	??_ModbusGetRxBuffer,indf2
  9720                           
  9721                           ;ModbusRtu.c: 522: _u8BufferSize++;
  9722  00296A  2A6B               	incf	__u8BufferSize,f,c
  9723                           
  9724                           ;ModbusRtu.c: 524: if (_u8BufferSize >= 140)
  9725  00296C  0E8B               	movlw	139
  9726  00296E  646B               	cpfsgt	__u8BufferSize,c
  9727  002970  D002               	goto	l3945
  9728                           
  9729                           ;ModbusRtu.c: 525: bBuffOverflow = 1;
  9730  002972  0E01               	movlw	1
  9731  002974  6E09               	movwf	ModbusGetRxBuffer@bBuffOverflow,c
  9732  002976                     l3945:
  9733  002976  FFFF               	dw	65535	; assembler added errata NOP
  9734  002978  ECE1  F015         	call	_PortAvailable	;wreg free
  9735  00297C  0900               	iorlw	0
  9736  00297E  E1EA               	bnz	l3937
  9737                           
  9738                           ;ModbusRtu.c: 530: {
  9739                           ;ModbusRtu.c: 531: _u16errCnt++;
  9740  002980  5009               	movf	ModbusGetRxBuffer@bBuffOverflow,w,c
  9741  002982  E002               	bz	l3953
  9742                           
  9743                           ;ModbusRtu.c: 532: return ERR_BUFF_OVERFLOW;
  9744  002984  0EFD               	movlw	253
  9745  002986  D001               	goto	l761
  9746  002988                     l3953:
  9747                           
  9748                           ;ModbusRtu.c: 533: }
  9749                           ;ModbusRtu.c: 534: return _u8BufferSize;
  9750  002988  506B               	movf	__u8BufferSize,w,c
  9751  00298A                     l761:
  9752  00298A  FFFF               	dw	65535	; assembler added errata NOP
  9753  00298C  0012               	return		;funcret
  9754  00298E  FFFF               	dw	65535	; errata NOP
  9755  002990                     __end_of_ModbusGetRxBuffer:
  9756                           	opt stack 0
  9757                           tblptru	equ	0xFF8
  9758                           tblptrh	equ	0xFF7
  9759                           tblptrl	equ	0xFF6
  9760                           tablat	equ	0xFF5
  9761                           prodh	equ	0xFF4
  9762                           prodl	equ	0xFF3
  9763                           intcon	equ	0xFF2
  9764                           postinc0	equ	0xFEE
  9765                           wreg	equ	0xFE8
  9766                           indf1	equ	0xFE7
  9767                           postinc1	equ	0xFE6
  9768                           postdec1	equ	0xFE5
  9769                           fsr1h	equ	0xFE2
  9770                           fsr1l	equ	0xFE1
  9771                           indf2	equ	0xFDF
  9772                           postinc2	equ	0xFDE
  9773                           postdec2	equ	0xFDD
  9774                           plusw2	equ	0xFDB
  9775                           fsr2h	equ	0xFDA
  9776                           fsr2l	equ	0xFD9
  9777                           status	equ	0xFD8
  9778                           
  9779 ;; *************** function _PortRead *****************
  9780 ;; Defined at:
  9781 ;;		line 57 in file "interrupts.c"
  9782 ;; Parameters:    Size  Location     Type
  9783 ;;		None
  9784 ;; Auto vars:     Size  Location     Type
  9785 ;;  ret             1    6[COMRAM] unsigned char 
  9786 ;; Return value:  Size  Location     Type
  9787 ;;                  1    wreg      unsigned char 
  9788 ;; Registers used:
  9789 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9790 ;; Tracked objects:
  9791 ;;		On entry : 0/0
  9792 ;;		On exit  : 0/0
  9793 ;;		Unchanged: 0/0
  9794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9795 ;;      Params:         0       0       0       0       0       0       0
  9796 ;;      Locals:         1       0       0       0       0       0       0
  9797 ;;      Temps:          0       0       0       0       0       0       0
  9798 ;;      Totals:         1       0       0       0       0       0       0
  9799 ;;Total ram usage:        1 bytes
  9800 ;; Hardware stack levels used:    1
  9801 ;; Hardware stack levels required when called:    2
  9802 ;; This function calls:
  9803 ;;		Nothing
  9804 ;; This function is called by:
  9805 ;;		_ModbusGetRxBuffer
  9806 ;; This function uses a non-reentrant model
  9807 ;;
  9808                           
  9809                           	psect	text43
  9810  002A0E                     __ptext43:
  9811                           	opt stack 0
  9812  002A0E                     _PortRead:
  9813                           	opt stack 26
  9814                           
  9815                           ;incstack = 0
  9816  002A0E  FFFF               	dw	65535
  9817                           
  9818                           ;interrupts.c: 59: (INTCONbits.GIE = 0);
  9819  002A10  9EF2               	bcf	intcon,7,c	;volatile
  9820                           
  9821                           ;interrupts.c: 60: if(UartBufferLen > 0)
  9822  002A12  5069               	movf	_UartBufferLen,w,c	;volatile
  9823  002A14  E012               	bz	l59
  9824                           
  9825                           ;interrupts.c: 61: {
  9826                           ;interrupts.c: 63: uint8_t ret = UartRingBuffer[UartBufferTail];
  9827  002A16  0E00               	movlw	low _UartRingBuffer
  9828  002A18  246A               	addwf	_UartBufferTail,w,c	;volatile
  9829  002A1A  6ED9               	movwf	fsr2l,c
  9830  002A1C  6ADA               	clrf	fsr2h,c
  9831  002A1E  0E02               	movlw	high _UartRingBuffer
  9832  002A20  22DA               	addwfc	fsr2h,f,c
  9833  002A22  50DF               	movf	indf2,w,c
  9834  002A24  6E07               	movwf	PortRead@ret,c
  9835                           
  9836                           ;interrupts.c: 64: UartBufferLen--;
  9837  002A26  0669               	decf	_UartBufferLen,f,c	;volatile
  9838                           
  9839                           ;interrupts.c: 65: if(UartBufferTail == 256u - 1)
  9840  002A28  286A               	incf	_UartBufferTail,w,c
  9841  002A2A  E102               	bnz	l3637
  9842                           
  9843                           ;interrupts.c: 66: UartBufferTail = 0;
  9844  002A2C  6A6A               	clrf	_UartBufferTail,c	;volatile
  9845  002A2E  D001               	goto	l3639
  9846  002A30                     l3637:
  9847                           
  9848                           ;interrupts.c: 67: else
  9849                           ;interrupts.c: 68: UartBufferTail++;
  9850  002A30  2A6A               	incf	_UartBufferTail,f,c	;volatile
  9851  002A32                     l3639:
  9852  002A32  FFFF               	dw	65535	; assembler added errata NOP
  9853                           
  9854                           ;interrupts.c: 69: (INTCONbits.GIE = 1);
  9855  002A34  8EF2               	bsf	intcon,7,c	;volatile
  9856                           
  9857                           ;interrupts.c: 70: return ret;
  9858  002A36  5007               	movf	PortRead@ret,w,c
  9859  002A38  D002               	goto	l62
  9860  002A3A                     l59:
  9861                           
  9862                           ;interrupts.c: 71: }
  9863                           ;interrupts.c: 72: (INTCONbits.GIE = 1);
  9864  002A3A  8EF2               	bsf	intcon,7,c	;volatile
  9865                           
  9866                           ;interrupts.c: 73: return 0;
  9867  002A3C  0E00               	movlw	0
  9868  002A3E                     l62:
  9869  002A3E  FFFF               	dw	65535	; assembler added errata NOP
  9870  002A40  0012               	return		;funcret
  9871  002A42  FFFF               	dw	65535	; errata NOP
  9872  002A44                     __end_of_PortRead:
  9873                           	opt stack 0
  9874                           tblptru	equ	0xFF8
  9875                           tblptrh	equ	0xFF7
  9876                           tblptrl	equ	0xFF6
  9877                           tablat	equ	0xFF5
  9878                           prodh	equ	0xFF4
  9879                           prodl	equ	0xFF3
  9880                           intcon	equ	0xFF2
  9881                           postinc0	equ	0xFEE
  9882                           wreg	equ	0xFE8
  9883                           indf1	equ	0xFE7
  9884                           postinc1	equ	0xFE6
  9885                           postdec1	equ	0xFE5
  9886                           fsr1h	equ	0xFE2
  9887                           fsr1l	equ	0xFE1
  9888                           indf2	equ	0xFDF
  9889                           postinc2	equ	0xFDE
  9890                           postdec2	equ	0xFDD
  9891                           plusw2	equ	0xFDB
  9892                           fsr2h	equ	0xFDA
  9893                           fsr2l	equ	0xFD9
  9894                           status	equ	0xFD8
  9895                           
  9896 ;; *************** function _PortAvailable *****************
  9897 ;; Defined at:
  9898 ;;		line 52 in file "interrupts.c"
  9899 ;; Parameters:    Size  Location     Type
  9900 ;;		None
  9901 ;; Auto vars:     Size  Location     Type
  9902 ;;		None
  9903 ;; Return value:  Size  Location     Type
  9904 ;;                  1    wreg      unsigned char 
  9905 ;; Registers used:
  9906 ;;		wreg, status,2
  9907 ;; Tracked objects:
  9908 ;;		On entry : 0/0
  9909 ;;		On exit  : 0/0
  9910 ;;		Unchanged: 0/0
  9911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9912 ;;      Params:         0       0       0       0       0       0       0
  9913 ;;      Locals:         0       0       0       0       0       0       0
  9914 ;;      Temps:          0       0       0       0       0       0       0
  9915 ;;      Totals:         0       0       0       0       0       0       0
  9916 ;;Total ram usage:        0 bytes
  9917 ;; Hardware stack levels used:    1
  9918 ;; Hardware stack levels required when called:    2
  9919 ;; This function calls:
  9920 ;;		Nothing
  9921 ;; This function is called by:
  9922 ;;		_ModbusPoll
  9923 ;;		_ModbusGetRxBuffer
  9924 ;; This function uses a non-reentrant model
  9925 ;;
  9926                           
  9927                           	psect	text44
  9928  002BC2                     __ptext44:
  9929                           	opt stack 0
  9930  002BC2                     _PortAvailable:
  9931                           	opt stack 27
  9932                           
  9933                           ;incstack = 0
  9934  002BC2  FFFF               	dw	65535
  9935                           
  9936                           ;interrupts.c: 54: return UartBufferLen;
  9937  002BC4  5069               	movf	_UartBufferLen,w,c	;volatile
  9938  002BC6  0012               	return		;funcret
  9939  002BC8  FFFF               	dw	65535	; errata NOP
  9940  002BCA                     __end_of_PortAvailable:
  9941                           	opt stack 0
  9942                           tblptru	equ	0xFF8
  9943                           tblptrh	equ	0xFF7
  9944                           tblptrl	equ	0xFF6
  9945                           tablat	equ	0xFF5
  9946                           prodh	equ	0xFF4
  9947                           prodl	equ	0xFF3
  9948                           intcon	equ	0xFF2
  9949                           postinc0	equ	0xFEE
  9950                           wreg	equ	0xFE8
  9951                           indf1	equ	0xFE7
  9952                           postinc1	equ	0xFE6
  9953                           postdec1	equ	0xFE5
  9954                           fsr1h	equ	0xFE2
  9955                           fsr1l	equ	0xFE1
  9956                           indf2	equ	0xFDF
  9957                           postinc2	equ	0xFDE
  9958                           postdec2	equ	0xFDD
  9959                           plusw2	equ	0xFDB
  9960                           fsr2h	equ	0xFDA
  9961                           fsr2l	equ	0xFD9
  9962                           status	equ	0xFD8
  9963                           
  9964 ;; *************** function _ModbusBuildException *****************
  9965 ;; Defined at:
  9966 ;;		line 829 in file "ModbusRtu.c"
  9967 ;; Parameters:    Size  Location     Type
  9968 ;;  u8exception     1    wreg     unsigned char 
  9969 ;; Auto vars:     Size  Location     Type
  9970 ;;  u8exception     1    6[COMRAM] unsigned char 
  9971 ;;  u8func          1    7[COMRAM] unsigned char 
  9972 ;; Return value:  Size  Location     Type
  9973 ;;                  1    wreg      void 
  9974 ;; Registers used:
  9975 ;;		wreg, status,2, status,0
  9976 ;; Tracked objects:
  9977 ;;		On entry : 0/1
  9978 ;;		On exit  : F/1
  9979 ;;		Unchanged: 0/0
  9980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9981 ;;      Params:         0       0       0       0       0       0       0
  9982 ;;      Locals:         2       0       0       0       0       0       0
  9983 ;;      Temps:          0       0       0       0       0       0       0
  9984 ;;      Totals:         2       0       0       0       0       0       0
  9985 ;;Total ram usage:        2 bytes
  9986 ;; Hardware stack levels used:    1
  9987 ;; Hardware stack levels required when called:    2
  9988 ;; This function calls:
  9989 ;;		Nothing
  9990 ;; This function is called by:
  9991 ;;		_ModbusPoll
  9992 ;; This function uses a non-reentrant model
  9993 ;;
  9994                           
  9995                           	psect	text45
  9996  002AEE                     __ptext45:
  9997                           	opt stack 0
  9998  002AEE                     _ModbusBuildException:
  9999                           	opt stack 27
 10000                           
 10001                           ;incstack = 0
 10002  002AEE  FFFF               	dw	65535
 10003                           
 10004                           ;ModbusBuildException@u8exception stored from wreg
 10005  002AF0  6E07               	movwf	ModbusBuildException@u8exception,c
 10006                           
 10007                           ;ModbusRtu.c: 831: uint8_t u8func = _au8Buffer[ FUNC ];
 10008  002AF2  C101  F008         	movff	__au8Buffer+1,ModbusBuildException@u8func
 10009                           
 10010                           ;ModbusRtu.c: 833: _au8Buffer[ ID ] = _u8id;
 10011  002AF6  C0C3  F100         	movff	__u8id,__au8Buffer
 10012                           
 10013                           ;ModbusRtu.c: 834: _au8Buffer[ FUNC ] = u8func + 0x80;
 10014  002AFA  5008               	movf	ModbusBuildException@u8func,w,c
 10015  002AFC  0F80               	addlw	128
 10016  002AFE  0101               	movlb	1	; () banked
 10017  002B00  6F01               	movwf	(__au8Buffer+1)& (0+255),b
 10018                           
 10019                           ; BSR set to: 1
 10020                           ;ModbusRtu.c: 835: _au8Buffer[ 2 ] = u8exception;
 10021  002B02  C007  F102         	movff	ModbusBuildException@u8exception,__au8Buffer+2
 10022                           
 10023                           ; BSR set to: 1
 10024                           ;ModbusRtu.c: 836: _u8BufferSize = EXCEPTION_SIZE;
 10025  002B06  0E03               	movlw	3
 10026  002B08  6E6B               	movwf	__u8BufferSize,c
 10027                           
 10028                           ; BSR set to: 1
 10029  002B0A  0C03               	retlw	3	;funcret
 10030  002B0C  FFFF               	dw	65535	; errata NOP
 10031  002B0E                     __end_of_ModbusBuildException:
 10032                           	opt stack 0
 10033                           tblptru	equ	0xFF8
 10034                           tblptrh	equ	0xFF7
 10035                           tblptrl	equ	0xFF6
 10036                           tablat	equ	0xFF5
 10037                           prodh	equ	0xFF4
 10038                           prodl	equ	0xFF3
 10039                           intcon	equ	0xFF2
 10040                           postinc0	equ	0xFEE
 10041                           wreg	equ	0xFE8
 10042                           indf1	equ	0xFE7
 10043                           postinc1	equ	0xFE6
 10044                           postdec1	equ	0xFE5
 10045                           fsr1h	equ	0xFE2
 10046                           fsr1l	equ	0xFE1
 10047                           indf2	equ	0xFDF
 10048                           postinc2	equ	0xFDE
 10049                           postdec2	equ	0xFDD
 10050                           plusw2	equ	0xFDB
 10051                           fsr2h	equ	0xFDA
 10052                           fsr2l	equ	0xFD9
 10053                           status	equ	0xFD8
 10054                           
 10055 ;; *************** function _InitApp *****************
 10056 ;; Defined at:
 10057 ;;		line 66 in file "user.c"
 10058 ;; Parameters:    Size  Location     Type
 10059 ;;		None
 10060 ;; Auto vars:     Size  Location     Type
 10061 ;;  i               1    6[COMRAM] unsigned char 
 10062 ;; Return value:  Size  Location     Type
 10063 ;;                  1    wreg      void 
 10064 ;; Registers used:
 10065 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10066 ;; Tracked objects:
 10067 ;;		On entry : 0/0
 10068 ;;		On exit  : 0/0
 10069 ;;		Unchanged: 0/0
 10070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10071 ;;      Params:         0       0       0       0       0       0       0
 10072 ;;      Locals:         1       0       0       0       0       0       0
 10073 ;;      Temps:          0       0       0       0       0       0       0
 10074 ;;      Totals:         1       0       0       0       0       0       0
 10075 ;;Total ram usage:        1 bytes
 10076 ;; Hardware stack levels used:    1
 10077 ;; Hardware stack levels required when called:    3
 10078 ;; This function calls:
 10079 ;;		_InitUartBuffer
 10080 ;;		_PortBegin
 10081 ;; This function is called by:
 10082 ;;		_main
 10083 ;; This function uses a non-reentrant model
 10084 ;;
 10085                           
 10086                           	psect	text46
 10087  00248E                     __ptext46:
 10088                           	opt stack 0
 10089  00248E                     _InitApp:
 10090                           	opt stack 27
 10091                           
 10092                           ; BSR set to: 1
 10093                           ;incstack = 0
 10094  00248E  FFFF               	dw	65535
 10095                           
 10096                           ;user.c: 77: INTCONbits.PEIE = 1;
 10097  002490  8CF2               	bsf	intcon,6,c	;volatile
 10098                           
 10099                           ;user.c: 78: (INTCONbits.GIE = 1);
 10100  002492  8EF2               	bsf	intcon,7,c	;volatile
 10101                           
 10102                           ;user.c: 79: RCONbits.IPEN = 1;
 10103  002494  8ED0               	bsf	4048,7,c	;volatile
 10104                           
 10105                           ;user.c: 84: T1CONbits.RD16 = 1;
 10106  002496  8ECD               	bsf	4045,7,c	;volatile
 10107                           
 10108                           ;user.c: 85: T1CONbits.T1SYNC = 0;
 10109  002498  94CD               	bcf	4045,2,c	;volatile
 10110                           
 10111                           ;user.c: 86: T1CONbits.TMR1CS = 0;
 10112  00249A  92CD               	bcf	4045,1,c	;volatile
 10113                           
 10114                           ;user.c: 88: T1CONbits.T1CKPS = 0;
 10115  00249C  0ECF               	movlw	-49
 10116  00249E  16CD               	andwf	4045,f,c	;volatile
 10117                           
 10118                           ;user.c: 92: PIE1bits.TMR1IE = 1;
 10119  0024A0  809D               	bsf	3997,0,c	;volatile
 10120                           
 10121                           ;user.c: 93: IPR1bits.TMR1IP = 1;
 10122  0024A2  809F               	bsf	3999,0,c	;volatile
 10123                           
 10124                           ;user.c: 94: ((void)(TMR1H=((0x10000 - 10000000L/4 / 1000)>>8),TMR1L=((0x10000 - 1000000
      +                          0L/4 / 1000)&0xFF)));
 10125  0024A4  0EF6               	movlw	246
 10126  0024A6  6ECF               	movwf	4047,c	;volatile
 10127  0024A8  0E3C               	movlw	60
 10128  0024AA  6ECE               	movwf	4046,c	;volatile
 10129                           
 10130                           ;user.c: 97: PIR1bits.TMR1IF = 0;
 10131  0024AC  909E               	bcf	3998,0,c	;volatile
 10132                           
 10133                           ;user.c: 99: T1CONbits.TMR1ON = 1;
 10134  0024AE  80CD               	bsf	4045,0,c	;volatile
 10135                           
 10136                           ;user.c: 102: T0CONbits.T08BIT = 0;
 10137  0024B0  9CD5               	bcf	4053,6,c	;volatile
 10138                           
 10139                           ;user.c: 103: T0CONbits.T0CS = 0;
 10140  0024B2  9AD5               	bcf	4053,5,c	;volatile
 10141                           
 10142                           ;user.c: 105: T0CONbits.PSA = 0;
 10143  0024B4  96D5               	bcf	4053,3,c	;volatile
 10144                           
 10145                           ;user.c: 116: T0CONbits.T0PS = 7;
 10146  0024B6  0E07               	movlw	7
 10147  0024B8  12D5               	iorwf	4053,f,c	;volatile
 10148                           
 10149                           ;user.c: 120: INTCONbits.TMR0IE = 1;
 10150  0024BA  8AF2               	bsf	intcon,5,c	;volatile
 10151                           
 10152                           ;user.c: 121: INTCON2bits.TMR0IP = 1;
 10153  0024BC  84F1               	bsf	intcon2,2,c	;volatile
 10154                           
 10155                           ;user.c: 122: ((void)(TMR0H=((0x10000 - (10000000L/4 * 6 / 256 + 0))>>8),TMR0L=((0x10000
      +                           - (10000000L/4 * 6 / 256 + 0))&0xFF)));
 10156  0024BE  0E1B               	movlw	27
 10157  0024C0  6ED7               	movwf	4055,c	;volatile
 10158  0024C2  0E1F               	movlw	31
 10159  0024C4  6ED6               	movwf	4054,c	;volatile
 10160                           
 10161                           ;user.c: 125: INTCONbits.TMR0IF = 0;
 10162  0024C6  94F2               	bcf	intcon,2,c	;volatile
 10163                           
 10164                           ;user.c: 127: T0CONbits.TMR0ON = 1;
 10165  0024C8  8ED5               	bsf	4053,7,c	;volatile
 10166                           
 10167                           ;user.c: 132: InitUartBuffer();
 10168  0024CA  ECD6  F015         	call	_InitUartBuffer	;wreg free
 10169                           
 10170                           ;user.c: 134: PortBegin();
 10171  0024CE  ECA4  F015         	call	_PortBegin	;wreg free
 10172                           
 10173                           ; BSR set to: 0
 10174                           ;user.c: 135: PIE1bits.RCIE = 1;
 10175  0024D2  8A9D               	bsf	3997,5,c	;volatile
 10176                           
 10177                           ; BSR set to: 0
 10178                           ;user.c: 137: IPR1bits.RCIP = 0;
 10179  0024D4  9A9F               	bcf	3999,5,c	;volatile
 10180                           
 10181                           ; BSR set to: 0
 10182                           ;user.c: 141: for (unsigned char i = 0; i < 15; i++)
 10183  0024D6  6A07               	clrf	InitApp@i,c
 10184  0024D8                     l4633:
 10185  0024D8  FFFF               	dw	65535	; assembler added errata NOP
 10186                           
 10187                           ;user.c: 142: _MODBUSInputRegs[i] = 0;
 10188  0024DA  5007               	movf	InitApp@i,w,c
 10189  0024DC  0D02               	mullw	2
 10190  0024DE  0EAA               	movlw	low __MODBUSInputRegs
 10191  0024E0  24F3               	addwf	prodl,w,c
 10192  0024E2  6ED9               	movwf	fsr2l,c
 10193  0024E4  0E01               	movlw	high __MODBUSInputRegs
 10194  0024E6  20F4               	addwfc	prodh,w,c
 10195  0024E8  6EDA               	movwf	fsr2h,c
 10196  0024EA  6ADE               	clrf	postinc2,c
 10197  0024EC  6ADD               	clrf	postdec2,c
 10198  0024EE  2A07               	incf	InitApp@i,f,c
 10199  0024F0  0E0E               	movlw	14
 10200  0024F2  6407               	cpfsgt	InitApp@i,c
 10201  0024F4  D7F1               	goto	l4633
 10202                           
 10203                           ;user.c: 148: TRISB = 0;
 10204  0024F6  6A93               	clrf	3987,c	;volatile
 10205                           
 10206                           ;user.c: 151: LATAbits.LATA0 = 0;
 10207  0024F8  9089               	bcf	3977,0,c	;volatile
 10208                           
 10209                           ;user.c: 152: LATAbits.LATA1 = 0;
 10210  0024FA  9289               	bcf	3977,1,c	;volatile
 10211                           
 10212                           ;user.c: 153: LATAbits.LATA2 = 0;
 10213  0024FC  9489               	bcf	3977,2,c	;volatile
 10214                           
 10215                           ;user.c: 154: LATAbits.LATA3 = 0;
 10216  0024FE  9689               	bcf	3977,3,c	;volatile
 10217                           
 10218                           ;user.c: 155: TRISAbits.RA0 = 0;
 10219  002500  9092               	bcf	3986,0,c	;volatile
 10220                           
 10221                           ;user.c: 156: TRISAbits.RA1 = 0;
 10222  002502  9292               	bcf	3986,1,c	;volatile
 10223                           
 10224                           ;user.c: 157: TRISAbits.RA2 = 0;
 10225  002504  9492               	bcf	3986,2,c	;volatile
 10226                           
 10227                           ;user.c: 158: TRISAbits.RA3 = 0;
 10228  002506  9692               	bcf	3986,3,c	;volatile
 10229                           
 10230                           ;user.c: 160: TRISCbits.RC3 = 1;
 10231  002508  8694               	bsf	3988,3,c	;volatile
 10232                           
 10233                           ;user.c: 161: TRISCbits.RC1 = 1;
 10234  00250A  8294               	bsf	3988,1,c	;volatile
 10235                           
 10236                           ;user.c: 162: TRISCbits.RC0 = 0;
 10237  00250C  9094               	bcf	3988,0,c	;volatile
 10238                           
 10239                           ;user.c: 164: LATCbits.LATC2 = 0;
 10240  00250E  948B               	bcf	3979,2,c	;volatile
 10241  002510  0012               	return		;funcret
 10242  002512  FFFF               	dw	65535	; errata NOP
 10243  002514                     __end_of_InitApp:
 10244                           	opt stack 0
 10245                           tblptru	equ	0xFF8
 10246                           tblptrh	equ	0xFF7
 10247                           tblptrl	equ	0xFF6
 10248                           tablat	equ	0xFF5
 10249                           prodh	equ	0xFF4
 10250                           prodl	equ	0xFF3
 10251                           intcon	equ	0xFF2
 10252                           intcon2	equ	0xFF1
 10253                           postinc0	equ	0xFEE
 10254                           wreg	equ	0xFE8
 10255                           indf1	equ	0xFE7
 10256                           postinc1	equ	0xFE6
 10257                           postdec1	equ	0xFE5
 10258                           fsr1h	equ	0xFE2
 10259                           fsr1l	equ	0xFE1
 10260                           indf2	equ	0xFDF
 10261                           postinc2	equ	0xFDE
 10262                           postdec2	equ	0xFDD
 10263                           plusw2	equ	0xFDB
 10264                           fsr2h	equ	0xFDA
 10265                           fsr2l	equ	0xFD9
 10266                           status	equ	0xFD8
 10267                           
 10268 ;; *************** function _PortBegin *****************
 10269 ;; Defined at:
 10270 ;;		line 48 in file "user.c"
 10271 ;; Parameters:    Size  Location     Type
 10272 ;;		None
 10273 ;; Auto vars:     Size  Location     Type
 10274 ;;		None
 10275 ;; Return value:  Size  Location     Type
 10276 ;;                  1    wreg      void 
 10277 ;; Registers used:
 10278 ;;		wreg, status,2
 10279 ;; Tracked objects:
 10280 ;;		On entry : F/0
 10281 ;;		On exit  : F/0
 10282 ;;		Unchanged: F/0
 10283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10284 ;;      Params:         0       0       0       0       0       0       0
 10285 ;;      Locals:         0       0       0       0       0       0       0
 10286 ;;      Temps:          0       0       0       0       0       0       0
 10287 ;;      Totals:         0       0       0       0       0       0       0
 10288 ;;Total ram usage:        0 bytes
 10289 ;; Hardware stack levels used:    1
 10290 ;; Hardware stack levels required when called:    2
 10291 ;; This function calls:
 10292 ;;		Nothing
 10293 ;; This function is called by:
 10294 ;;		_InitApp
 10295 ;; This function uses a non-reentrant model
 10296 ;;
 10297                           
 10298                           	psect	text47
 10299  002B48                     __ptext47:
 10300                           	opt stack 0
 10301  002B48                     _PortBegin:
 10302                           	opt stack 27
 10303                           
 10304                           ;incstack = 0
 10305  002B48  FFFF               	dw	65535
 10306                           
 10307                           ; BSR set to: 0
 10308                           ;user.c: 50: TXSTA = 0;
 10309  002B4A  6AAC               	clrf	4012,c	;volatile
 10310                           
 10311                           ;user.c: 51: TXSTAbits.TXEN = 1;
 10312  002B4C  8AAC               	bsf	4012,5,c	;volatile
 10313                           
 10314                           ;user.c: 52: TXSTAbits.BRGH = 1;
 10315  002B4E  84AC               	bsf	4012,2,c	;volatile
 10316                           
 10317                           ; BSR set to: 0
 10318                           ;user.c: 54: SPBRG = ( (((10000000L / 9600) / 8) - 1) / 2 );
 10319  002B50  0E40               	movlw	64
 10320  002B52  6EAF               	movwf	4015,c	;volatile
 10321                           
 10322                           ; BSR set to: 0
 10323                           ;user.c: 55: RCSTA = 0;
 10324  002B54  6AAB               	clrf	4011,c	;volatile
 10325                           
 10326                           ; BSR set to: 0
 10327                           ;user.c: 56: RCSTAbits.SPEN = 1;
 10328  002B56  8EAB               	bsf	4011,7,c	;volatile
 10329                           
 10330                           ; BSR set to: 0
 10331                           ;user.c: 57: RCSTAbits.CREN = 1;
 10332  002B58  88AB               	bsf	4011,4,c	;volatile
 10333                           
 10334                           ; BSR set to: 0
 10335                           ;user.c: 59: TRISCbits.RC5 = 0;
 10336  002B5A  9A94               	bcf	3988,5,c	;volatile
 10337                           
 10338                           ; BSR set to: 0
 10339                           ;user.c: 60: LATCbits.LATC5 = 0;
 10340  002B5C  9A8B               	bcf	3979,5,c	;volatile
 10341                           
 10342                           ; BSR set to: 0
 10343  002B5E  0012               	return		;funcret
 10344  002B60  FFFF               	dw	65535	; errata NOP
 10345  002B62                     __end_of_PortBegin:
 10346                           	opt stack 0
 10347                           tblptru	equ	0xFF8
 10348                           tblptrh	equ	0xFF7
 10349                           tblptrl	equ	0xFF6
 10350                           tablat	equ	0xFF5
 10351                           prodh	equ	0xFF4
 10352                           prodl	equ	0xFF3
 10353                           intcon	equ	0xFF2
 10354                           intcon2	equ	0xFF1
 10355                           postinc0	equ	0xFEE
 10356                           wreg	equ	0xFE8
 10357                           indf1	equ	0xFE7
 10358                           postinc1	equ	0xFE6
 10359                           postdec1	equ	0xFE5
 10360                           fsr1h	equ	0xFE2
 10361                           fsr1l	equ	0xFE1
 10362                           indf2	equ	0xFDF
 10363                           postinc2	equ	0xFDE
 10364                           postdec2	equ	0xFDD
 10365                           plusw2	equ	0xFDB
 10366                           fsr2h	equ	0xFDA
 10367                           fsr2l	equ	0xFD9
 10368                           status	equ	0xFD8
 10369                           
 10370 ;; *************** function _InitUartBuffer *****************
 10371 ;; Defined at:
 10372 ;;		line 43 in file "interrupts.c"
 10373 ;; Parameters:    Size  Location     Type
 10374 ;;		None
 10375 ;; Auto vars:     Size  Location     Type
 10376 ;;		None
 10377 ;; Return value:  Size  Location     Type
 10378 ;;                  1    wreg      void 
 10379 ;; Registers used:
 10380 ;;		None
 10381 ;; Tracked objects:
 10382 ;;		On entry : 0/0
 10383 ;;		On exit  : F/0
 10384 ;;		Unchanged: 0/0
 10385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10386 ;;      Params:         0       0       0       0       0       0       0
 10387 ;;      Locals:         0       0       0       0       0       0       0
 10388 ;;      Temps:          0       0       0       0       0       0       0
 10389 ;;      Totals:         0       0       0       0       0       0       0
 10390 ;;Total ram usage:        0 bytes
 10391 ;; Hardware stack levels used:    1
 10392 ;; Hardware stack levels required when called:    2
 10393 ;; This function calls:
 10394 ;;		Nothing
 10395 ;; This function is called by:
 10396 ;;		_InitApp
 10397 ;; This function uses a non-reentrant model
 10398 ;;
 10399                           
 10400                           	psect	text48
 10401  002BAC                     __ptext48:
 10402                           	opt stack 0
 10403  002BAC                     _InitUartBuffer:
 10404                           	opt stack 27
 10405                           
 10406                           ; BSR set to: 0
 10407                           ;incstack = 0
 10408  002BAC  FFFF               	dw	65535
 10409                           
 10410                           ;interrupts.c: 45: UartBufferHead = 0;
 10411  002BAE  0100               	movlb	0	; () banked
 10412  002BB0  6BBF               	clrf	_UartBufferHead& (0+255),b
 10413                           
 10414                           ;interrupts.c: 46: UartBufferTail = 0;
 10415  002BB2  6A6A               	clrf	_UartBufferTail,c	;volatile
 10416                           
 10417                           ;interrupts.c: 47: UartBufferLen = 0;
 10418  002BB4  6A69               	clrf	_UartBufferLen,c	;volatile
 10419                           
 10420                           ; BSR set to: 0
 10421  002BB6  0012               	return		;funcret
 10422  002BB8  FFFF               	dw	65535	; errata NOP
 10423  002BBA                     __end_of_InitUartBuffer:
 10424                           	opt stack 0
 10425                           tblptru	equ	0xFF8
 10426                           tblptrh	equ	0xFF7
 10427                           tblptrl	equ	0xFF6
 10428                           tablat	equ	0xFF5
 10429                           prodh	equ	0xFF4
 10430                           prodl	equ	0xFF3
 10431                           intcon	equ	0xFF2
 10432                           intcon2	equ	0xFF1
 10433                           postinc0	equ	0xFEE
 10434                           wreg	equ	0xFE8
 10435                           indf1	equ	0xFE7
 10436                           postinc1	equ	0xFE6
 10437                           postdec1	equ	0xFE5
 10438                           fsr1h	equ	0xFE2
 10439                           fsr1l	equ	0xFE1
 10440                           indf2	equ	0xFDF
 10441                           postinc2	equ	0xFDE
 10442                           postdec2	equ	0xFDD
 10443                           plusw2	equ	0xFDB
 10444                           fsr2h	equ	0xFDA
 10445                           fsr2l	equ	0xFD9
 10446                           status	equ	0xFD8
 10447                           
 10448 ;; *************** function _ConfigureOscillator *****************
 10449 ;; Defined at:
 10450 ;;		line 50 in file "system.c"
 10451 ;; Parameters:    Size  Location     Type
 10452 ;;		None
 10453 ;; Auto vars:     Size  Location     Type
 10454 ;;		None
 10455 ;; Return value:  Size  Location     Type
 10456 ;;                  1    wreg      void 
 10457 ;; Registers used:
 10458 ;;		None
 10459 ;; Tracked objects:
 10460 ;;		On entry : 0/0
 10461 ;;		On exit  : 0/0
 10462 ;;		Unchanged: 0/0
 10463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10464 ;;      Params:         0       0       0       0       0       0       0
 10465 ;;      Locals:         0       0       0       0       0       0       0
 10466 ;;      Temps:          0       0       0       0       0       0       0
 10467 ;;      Totals:         0       0       0       0       0       0       0
 10468 ;;Total ram usage:        0 bytes
 10469 ;; Hardware stack levels used:    1
 10470 ;; Hardware stack levels required when called:    2
 10471 ;; This function calls:
 10472 ;;		Nothing
 10473 ;; This function is called by:
 10474 ;;		_main
 10475 ;; This function uses a non-reentrant model
 10476 ;;
 10477                           
 10478                           	psect	text49
 10479  002BCA                     __ptext49:
 10480                           	opt stack 0
 10481  002BCA                     _ConfigureOscillator:
 10482                           	opt stack 28
 10483                           
 10484                           ; BSR set to: 0
 10485                           ;incstack = 0
 10486  002BCA  FFFF               	dw	65535
 10487  002BCC  0012               	return		;funcret
 10488  002BCE  FFFF               	dw	65535	; errata NOP
 10489  002BD0                     __end_of_ConfigureOscillator:
 10490                           	opt stack 0
 10491                           tblptru	equ	0xFF8
 10492                           tblptrh	equ	0xFF7
 10493                           tblptrl	equ	0xFF6
 10494                           tablat	equ	0xFF5
 10495                           prodh	equ	0xFF4
 10496                           prodl	equ	0xFF3
 10497                           intcon	equ	0xFF2
 10498                           intcon2	equ	0xFF1
 10499                           postinc0	equ	0xFEE
 10500                           wreg	equ	0xFE8
 10501                           indf1	equ	0xFE7
 10502                           postinc1	equ	0xFE6
 10503                           postdec1	equ	0xFE5
 10504                           fsr1h	equ	0xFE2
 10505                           fsr1l	equ	0xFE1
 10506                           indf2	equ	0xFDF
 10507                           postinc2	equ	0xFDE
 10508                           postdec2	equ	0xFDD
 10509                           plusw2	equ	0xFDB
 10510                           fsr2h	equ	0xFDA
 10511                           fsr2l	equ	0xFD9
 10512                           status	equ	0xFD8
 10513                           
 10514 ;; *************** function _AddSecond *****************
 10515 ;; Defined at:
 10516 ;;		line 179 in file "user.c"
 10517 ;; Parameters:    Size  Location     Type
 10518 ;;		None
 10519 ;; Auto vars:     Size  Location     Type
 10520 ;;		None
 10521 ;; Return value:  Size  Location     Type
 10522 ;;                  1    wreg      void 
 10523 ;; Registers used:
 10524 ;;		wreg, status,2, status,0
 10525 ;; Tracked objects:
 10526 ;;		On entry : F/0
 10527 ;;		On exit  : F/0
 10528 ;;		Unchanged: 0/0
 10529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10530 ;;      Params:         0       0       0       0       0       0       0
 10531 ;;      Locals:         0       0       0       0       0       0       0
 10532 ;;      Temps:          0       0       0       0       0       0       0
 10533 ;;      Totals:         0       0       0       0       0       0       0
 10534 ;;Total ram usage:        0 bytes
 10535 ;; Hardware stack levels used:    1
 10536 ;; Hardware stack levels required when called:    2
 10537 ;; This function calls:
 10538 ;;		Nothing
 10539 ;; This function is called by:
 10540 ;;		_main
 10541 ;; This function uses a non-reentrant model
 10542 ;;
 10543                           
 10544                           	psect	text50
 10545  002B9C                     __ptext50:
 10546                           	opt stack 0
 10547  002B9C                     _AddSecond:
 10548                           	opt stack 28
 10549                           
 10550                           ;incstack = 0
 10551  002B9C  FFFF               	dw	65535
 10552                           
 10553                           ; BSR set to: 0
 10554                           ;user.c: 181: currentTime++;
 10555  002B9E  2BD4               	incf	_currentTime& (0+255),f,b
 10556  002BA0  0E00               	movlw	0
 10557  002BA2  23D5               	addwfc	(_currentTime+1)& (0+255),f,b
 10558  002BA4  23D6               	addwfc	(_currentTime+2)& (0+255),f,b
 10559  002BA6  23D7               	addwfc	(_currentTime+3)& (0+255),f,b
 10560                           
 10561                           ; BSR set to: 0
 10562  002BA8  0C00               	retlw	0	;funcret
 10563  002BAA  FFFF               	dw	65535	; errata NOP
 10564  002BAC                     __end_of_AddSecond:
 10565                           	opt stack 0
 10566                           tblptru	equ	0xFF8
 10567                           tblptrh	equ	0xFF7
 10568                           tblptrl	equ	0xFF6
 10569                           tablat	equ	0xFF5
 10570                           prodh	equ	0xFF4
 10571                           prodl	equ	0xFF3
 10572                           intcon	equ	0xFF2
 10573                           intcon2	equ	0xFF1
 10574                           postinc0	equ	0xFEE
 10575                           wreg	equ	0xFE8
 10576                           indf1	equ	0xFE7
 10577                           postinc1	equ	0xFE6
 10578                           postdec1	equ	0xFE5
 10579                           fsr1h	equ	0xFE2
 10580                           fsr1l	equ	0xFE1
 10581                           indf2	equ	0xFDF
 10582                           postinc2	equ	0xFDE
 10583                           postdec2	equ	0xFDD
 10584                           plusw2	equ	0xFDB
 10585                           fsr2h	equ	0xFDA
 10586                           fsr2l	equ	0xFD9
 10587                           status	equ	0xFD8
 10588                           
 10589 ;; *************** function _low_isr *****************
 10590 ;; Defined at:
 10591 ;;		line 172 in file "interrupts.c"
 10592 ;; Parameters:    Size  Location     Type
 10593 ;;		None
 10594 ;; Auto vars:     Size  Location     Type
 10595 ;;  c               1    5[COMRAM] unsigned char 
 10596 ;; Return value:  Size  Location     Type
 10597 ;;                  1    wreg      void 
 10598 ;; Registers used:
 10599 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10600 ;; Tracked objects:
 10601 ;;		On entry : 0/0
 10602 ;;		On exit  : 0/0
 10603 ;;		Unchanged: 0/0
 10604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10605 ;;      Params:         0       0       0       0       0       0       0
 10606 ;;      Locals:         1       0       0       0       0       0       0
 10607 ;;      Temps:          5       0       0       0       0       0       0
 10608 ;;      Totals:         6       0       0       0       0       0       0
 10609 ;;Total ram usage:        6 bytes
 10610 ;; Hardware stack levels used:    1
 10611 ;; Hardware stack levels required when called:    1
 10612 ;; This function calls:
 10613 ;;		Nothing
 10614 ;; This function is called by:
 10615 ;;		Interrupt level 1
 10616 ;; This function uses a non-reentrant model
 10617 ;;
 10618                           
 10619                           	psect	intcodelo
 10620  000018                     __pintcodelo:
 10621                           	opt stack 0
 10622  000018                     _low_isr:
 10623                           	opt stack 0
 10624  000018  FFFF               	dw	65535	; assembler added errata NOP
 10625                           
 10626                           ; BSR set to: 0
 10627                           ;incstack = 0
 10628  00001A  8072               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
 10629  00001C  FFFF               	dw	65535	; errata NOP
 10630  00001E  CFD8 F001          	movff	status,??_low_isr
 10631  000022  CFE8 F002          	movff	wreg,??_low_isr+1
 10632  000026  CFE0 F003          	movff	bsr,??_low_isr+2
 10633  00002A  CFD9 F004          	movff	fsr2l,??_low_isr+3
 10634  00002E  CFDA F005          	movff	fsr2h,??_low_isr+4
 10635                           
 10636                           ;interrupts.c: 186: if (PIR1bits.RCIF && PIE1bits.RCIE)
 10637  000032  BA9E               	btfsc	3998,5,c	;volatile
 10638  000034  AA9D               	btfss	3997,5,c	;volatile
 10639  000036  D016               	goto	i1l90
 10640  000038                     i1l91:
 10641  000038  FFFF               	dw	65535	; assembler added errata NOP
 10642  00003A  AA9E               	btfss	3998,5,c	;volatile
 10643  00003C  D7FD               	goto	i1l91
 10644                           
 10645                           ;interrupts.c: 200: uint8_t c = RCREG;
 10646  00003E  CFAE F006          	movff	4014,low_isr@c	;volatile
 10647                           
 10648                           ;interrupts.c: 203: UartRingBuffer[UartBufferHead] = c;
 10649  000042  0E00               	movlw	low _UartRingBuffer
 10650  000044  0100               	movlb	0	; () banked
 10651  000046  25BF               	addwf	_UartBufferHead& (0+255),w,b
 10652  000048  6ED9               	movwf	fsr2l,c
 10653  00004A  6ADA               	clrf	fsr2h,c
 10654  00004C  0E02               	movlw	high _UartRingBuffer
 10655  00004E  22DA               	addwfc	fsr2h,f,c
 10656  000050  C006  FFDF         	movff	low_isr@c,indf2
 10657                           
 10658                           ; BSR set to: 0
 10659                           ;interrupts.c: 204: UartBufferLen++;
 10660  000054  2A69               	incf	_UartBufferLen,f,c	;volatile
 10661                           
 10662                           ; BSR set to: 0
 10663                           ;interrupts.c: 205: if(UartBufferHead == 256u - 1)
 10664  000056  29BF               	incf	_UartBufferHead& (0+255),w,b
 10665  000058  E102               	bnz	i1l5323
 10666                           
 10667                           ; BSR set to: 0
 10668                           ;interrupts.c: 206: UartBufferHead = 0;
 10669  00005A  6BBF               	clrf	_UartBufferHead& (0+255),b
 10670  00005C  D001               	goto	i1l5325
 10671  00005E                     i1l5323:
 10672                           
 10673                           ; BSR set to: 0
 10674                           ;interrupts.c: 207: else
 10675                           ;interrupts.c: 208: UartBufferHead++;
 10676  00005E  2BBF               	incf	_UartBufferHead& (0+255),f,b
 10677  000060                     i1l5325:
 10678  000060  FFFF               	dw	65535	; assembler added errata NOP
 10679                           
 10680                           ; BSR set to: 0
 10681                           ;interrupts.c: 211: PIR1bits.RCIF = 0;
 10682  000062  9A9E               	bcf	3998,5,c	;volatile
 10683  000064                     i1l90:
 10684  000064  FFFF               	dw	65535	; assembler added errata NOP
 10685  000066  C005  FFDA         	movff	??_low_isr+4,fsr2h
 10686  00006A  C004  FFD9         	movff	??_low_isr+3,fsr2l
 10687  00006E  C003  FFE0         	movff	??_low_isr+2,bsr
 10688  000072  C002  FFE8         	movff	??_low_isr+1,wreg
 10689  000076  C001  FFD8         	movff	??_low_isr,status
 10690  00007A  9072               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
 10691  00007C  0010               	retfie	
 10692  00007E  FFFF               	dw	65535	; errata NOP
 10693  000080                     __end_of_low_isr:
 10694                           	opt stack 0
 10695                           tblptru	equ	0xFF8
 10696                           tblptrh	equ	0xFF7
 10697                           tblptrl	equ	0xFF6
 10698                           tablat	equ	0xFF5
 10699                           prodh	equ	0xFF4
 10700                           prodl	equ	0xFF3
 10701                           intcon	equ	0xFF2
 10702                           intcon2	equ	0xFF1
 10703                           postinc0	equ	0xFEE
 10704                           wreg	equ	0xFE8
 10705                           indf1	equ	0xFE7
 10706                           postinc1	equ	0xFE6
 10707                           postdec1	equ	0xFE5
 10708                           fsr1h	equ	0xFE2
 10709                           fsr1l	equ	0xFE1
 10710                           bsr	equ	0xFE0
 10711                           indf2	equ	0xFDF
 10712                           postinc2	equ	0xFDE
 10713                           postdec2	equ	0xFDD
 10714                           plusw2	equ	0xFDB
 10715                           fsr2h	equ	0xFDA
 10716                           fsr2l	equ	0xFD9
 10717                           status	equ	0xFD8
 10718                           
 10719 ;; *************** function _high_isr *****************
 10720 ;; Defined at:
 10721 ;;		line 113 in file "interrupts.c"
 10722 ;; Parameters:    Size  Location     Type
 10723 ;;		None
 10724 ;; Auto vars:     Size  Location     Type
 10725 ;;		None
 10726 ;; Return value:  Size  Location     Type
 10727 ;;                  1    wreg      void 
 10728 ;; Registers used:
 10729 ;;		wreg, status,2, status,0
 10730 ;; Tracked objects:
 10731 ;;		On entry : 0/0
 10732 ;;		On exit  : 0/0
 10733 ;;		Unchanged: 0/0
 10734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10735 ;;      Params:         0       0       0       0       0       0       0
 10736 ;;      Locals:         0       0       0       0       0       0       0
 10737 ;;      Temps:          0       0       0       0       0       0       0
 10738 ;;      Totals:         0       0       0       0       0       0       0
 10739 ;;Total ram usage:        0 bytes
 10740 ;; Hardware stack levels used:    1
 10741 ;; This function calls:
 10742 ;;		Nothing
 10743 ;; This function is called by:
 10744 ;;		Interrupt level 2
 10745 ;; This function uses a non-reentrant model
 10746 ;;
 10747                           
 10748                           	psect	intcode
 10749  000008                     __pintcode:
 10750                           	opt stack 0
 10751  000008                     _high_isr:
 10752                           	opt stack 0
 10753  000008  FFFF               	dw	65535	; assembler added errata NOP
 10754                           
 10755                           ;incstack = 0
 10756  00000A  8272               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 10757  00000C  FFFF               	dw	65535	; errata NOP
 10758  00000E  EF9A  F013         	goto	int_func
 10759                           tblptru	equ	0xFF8
 10760                           tblptrh	equ	0xFF7
 10761                           tblptrl	equ	0xFF6
 10762                           tablat	equ	0xFF5
 10763                           prodh	equ	0xFF4
 10764                           prodl	equ	0xFF3
 10765                           intcon	equ	0xFF2
 10766                           intcon2	equ	0xFF1
 10767                           postinc0	equ	0xFEE
 10768                           wreg	equ	0xFE8
 10769                           indf1	equ	0xFE7
 10770                           postinc1	equ	0xFE6
 10771                           postdec1	equ	0xFE5
 10772                           fsr1h	equ	0xFE2
 10773                           fsr1l	equ	0xFE1
 10774                           bsr	equ	0xFE0
 10775                           indf2	equ	0xFDF
 10776                           postinc2	equ	0xFDE
 10777                           postdec2	equ	0xFDD
 10778                           plusw2	equ	0xFDB
 10779                           fsr2h	equ	0xFDA
 10780                           fsr2l	equ	0xFD9
 10781                           status	equ	0xFD8
 10782                           
 10783                           	psect	intcode_body
 10784  002734                     __pintcode_body:
 10785                           	opt stack 23
 10786  002734                     int_func:
 10787                           	opt stack 23
 10788  002734  FFFF               	dw	65535	; errata NOP
 10789                           
 10790                           ;interrupts.c: 134: if(PIR1bits.TMR1IF && PIE1bits.TMR1IE)
 10791  002736  B09E               	btfsc	3998,0,c	;volatile
 10792  002738  A09D               	btfss	3997,0,c	;volatile
 10793  00273A  D00C               	goto	i2l77
 10794                           
 10795                           ;interrupts.c: 135: {
 10796                           ;interrupts.c: 136: PIR1bits.TMR1IF = 0;
 10797  00273C  909E               	bcf	3998,0,c	;volatile
 10798                           
 10799                           ;interrupts.c: 137: millisecondsFromStart++;
 10800  00273E  0100               	movlb	0	; () banked
 10801  002740  2BAC               	incf	_millisecondsFromStart& (0+255),f,b	;volatile
 10802  002742  0E00               	movlw	0
 10803  002744  23AD               	addwfc	(_millisecondsFromStart+1)& (0+255),f,b	;volatile
 10804  002746  23AE               	addwfc	(_millisecondsFromStart+2)& (0+255),f,b	;volatile
 10805  002748  23AF               	addwfc	(_millisecondsFromStart+3)& (0+255),f,b	;volatile
 10806                           
 10807                           ; BSR set to: 0
 10808                           ;interrupts.c: 138: ((void)(TMR1H=((0x10000 - 10000000L/4 / 1000)>>8),TMR1L=((0x10000 - 
      +                          10000000L/4 / 1000)&0xFF)));
 10809  00274A  0EF6               	movlw	246
 10810  00274C  6ECF               	movwf	4047,c	;volatile
 10811                           
 10812                           ; BSR set to: 0
 10813  00274E  0E3C               	movlw	60
 10814  002750  6ECE               	movwf	4046,c	;volatile
 10815  002752  D018               	goto	i2l78
 10816  002754                     i2l77:
 10817  002754  FFFF               	dw	65535	; assembler added errata NOP
 10818                           
 10819                           ;interrupts.c: 140: }
 10820                           ;interrupts.c: 142: if(INTCONbits.TMR0IF)
 10821  002756  A4F2               	btfss	intcon,2,c	;volatile
 10822  002758  D015               	goto	i2l78
 10823                           
 10824                           ;interrupts.c: 143: {
 10825                           ;interrupts.c: 144: INTCONbits.TMR0IF = 0;
 10826  00275A  94F2               	bcf	intcon,2,c	;volatile
 10827                           
 10828                           ;interrupts.c: 145: _6sCounter++;
 10829  00275C  0100               	movlb	0	; () banked
 10830  00275E  2BC0               	incf	__6sCounter& (0+255),f,b	;volatile
 10831                           
 10832                           ; BSR set to: 0
 10833                           ;interrupts.c: 146: if(_6sCounter == 10)
 10834  002760  0E0A               	movlw	10
 10835  002762  19C0               	xorwf	__6sCounter& (0+255),w,b	;volatile
 10836  002764  E10B               	bnz	i2l5303
 10837                           
 10838                           ; BSR set to: 0
 10839                           ;interrupts.c: 147: {
 10840                           ;interrupts.c: 148: _6sCounter = 0;
 10841  002766  6BC0               	clrf	__6sCounter& (0+255),b	;volatile
 10842                           
 10843                           ; BSR set to: 0
 10844                           ;interrupts.c: 149: globalMinutes++;
 10845  002768  2A6E               	incf	_globalMinutes,f,c	;volatile
 10846                           
 10847                           ; BSR set to: 0
 10848                           ;interrupts.c: 150: if(globalMinutes == 60)
 10849  00276A  0E3C               	movlw	60
 10850  00276C  186E               	xorwf	_globalMinutes,w,c	;volatile
 10851  00276E  E106               	bnz	i2l5303
 10852                           
 10853                           ; BSR set to: 0
 10854                           ;interrupts.c: 151: {
 10855                           ;interrupts.c: 152: globalMinutes = 0;
 10856  002770  6A6E               	clrf	_globalMinutes,c	;volatile
 10857                           
 10858                           ; BSR set to: 0
 10859                           ;interrupts.c: 153: globalHours++;
 10860  002772  2A71               	incf	_globalHours,f,c	;volatile
 10861                           
 10862                           ; BSR set to: 0
 10863                           ;interrupts.c: 154: if(globalHours == 24)
 10864  002774  0E18               	movlw	24
 10865  002776  1871               	xorwf	_globalHours,w,c	;volatile
 10866  002778  E101               	bnz	i2l5303
 10867                           
 10868                           ; BSR set to: 0
 10869                           ;interrupts.c: 155: {
 10870                           ;interrupts.c: 156: globalHours = 0;
 10871  00277A  6A71               	clrf	_globalHours,c	;volatile
 10872  00277C                     i2l5303:
 10873                           
 10874                           ; BSR set to: 0
 10875                           ;interrupts.c: 157: }
 10876                           ;interrupts.c: 158: }
 10877                           ;interrupts.c: 159: }
 10878                           ;interrupts.c: 160: ((void)(TMR0H=((0x10000 - (10000000L/4 * 6 / 256 + 0))>>8),TMR0L=((0
      +                          x10000 - (10000000L/4 * 6 / 256 + 0))&0xFF)));
 10879  00277C  0E1B               	movlw	27
 10880  00277E  6ED7               	movwf	4055,c	;volatile
 10881  002780  0E1F               	movlw	31
 10882  002782  6ED6               	movwf	4054,c	;volatile
 10883  002784                     i2l78:
 10884  002784  FFFF               	dw	65535	; assembler added errata NOP
 10885  002786  9272               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 10886  002788  0011               	retfie		f
 10887  00278A  FFFF               	dw	65535	; errata NOP
 10888  00278C                     __end_of_high_isr:
 10889                           	opt stack 0
 10890                           tblptru	equ	0xFF8
 10891                           tblptrh	equ	0xFF7
 10892                           tblptrl	equ	0xFF6
 10893                           tablat	equ	0xFF5
 10894                           prodh	equ	0xFF4
 10895                           prodl	equ	0xFF3
 10896                           intcon	equ	0xFF2
 10897                           intcon2	equ	0xFF1
 10898                           postinc0	equ	0xFEE
 10899                           wreg	equ	0xFE8
 10900                           indf1	equ	0xFE7
 10901                           postinc1	equ	0xFE6
 10902                           postdec1	equ	0xFE5
 10903                           fsr1h	equ	0xFE2
 10904                           fsr1l	equ	0xFE1
 10905                           bsr	equ	0xFE0
 10906                           indf2	equ	0xFDF
 10907                           postinc2	equ	0xFDE
 10908                           postdec2	equ	0xFDD
 10909                           plusw2	equ	0xFDB
 10910                           fsr2h	equ	0xFDA
 10911                           fsr2l	equ	0xFD9
 10912                           status	equ	0xFD8
 10913                           tblptru	equ	0xFF8
 10914                           tblptrh	equ	0xFF7
 10915                           tblptrl	equ	0xFF6
 10916                           tablat	equ	0xFF5
 10917                           prodh	equ	0xFF4
 10918                           prodl	equ	0xFF3
 10919                           intcon	equ	0xFF2
 10920                           intcon2	equ	0xFF1
 10921                           postinc0	equ	0xFEE
 10922                           wreg	equ	0xFE8
 10923                           indf1	equ	0xFE7
 10924                           postinc1	equ	0xFE6
 10925                           postdec1	equ	0xFE5
 10926                           fsr1h	equ	0xFE2
 10927                           fsr1l	equ	0xFE1
 10928                           bsr	equ	0xFE0
 10929                           indf2	equ	0xFDF
 10930                           postinc2	equ	0xFDE
 10931                           postdec2	equ	0xFDD
 10932                           plusw2	equ	0xFDB
 10933                           fsr2h	equ	0xFDA
 10934                           fsr2l	equ	0xFD9
 10935                           status	equ	0xFD8
 10936                           
 10937                           	psect	rparam
 10938  0000                     tblptru	equ	0xFF8
 10939                           tblptrh	equ	0xFF7
 10940                           tblptrl	equ	0xFF6
 10941                           tablat	equ	0xFF5
 10942                           prodh	equ	0xFF4
 10943                           prodl	equ	0xFF3
 10944                           intcon	equ	0xFF2
 10945                           intcon2	equ	0xFF1
 10946                           postinc0	equ	0xFEE
 10947                           wreg	equ	0xFE8
 10948                           indf1	equ	0xFE7
 10949                           postinc1	equ	0xFE6
 10950                           postdec1	equ	0xFE5
 10951                           fsr1h	equ	0xFE2
 10952                           fsr1l	equ	0xFE1
 10953                           bsr	equ	0xFE0
 10954                           indf2	equ	0xFDF
 10955                           postinc2	equ	0xFDE
 10956                           postdec2	equ	0xFDD
 10957                           plusw2	equ	0xFDB
 10958                           fsr2h	equ	0xFDA
 10959                           fsr2l	equ	0xFD9
 10960                           status	equ	0xFD8
 10961                           
 10962                           	psect	temp
 10963  000072                     btemp:
 10964                           	opt stack 0
 10965  000072                     	ds	1
 10966  0000                     int$flags	set	btemp
 10967                           tblptru	equ	0xFF8
 10968                           tblptrh	equ	0xFF7
 10969                           tblptrl	equ	0xFF6
 10970                           tablat	equ	0xFF5
 10971                           prodh	equ	0xFF4
 10972                           prodl	equ	0xFF3
 10973                           intcon	equ	0xFF2
 10974                           intcon2	equ	0xFF1
 10975                           postinc0	equ	0xFEE
 10976                           wreg	equ	0xFE8
 10977                           indf1	equ	0xFE7
 10978                           postinc1	equ	0xFE6
 10979                           postdec1	equ	0xFE5
 10980                           fsr1h	equ	0xFE2
 10981                           fsr1l	equ	0xFE1
 10982                           bsr	equ	0xFE0
 10983                           indf2	equ	0xFDF
 10984                           postinc2	equ	0xFDE
 10985                           postdec2	equ	0xFDD
 10986                           plusw2	equ	0xFDB
 10987                           fsr2h	equ	0xFDA
 10988                           fsr2l	equ	0xFD9
 10989                           status	equ	0xFD8


Data Sizes:
    Strings     25
    Constant    10
    Data        7
    BSS         553
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    104     113
    BANK0           128     28     123
    BANK1           256      0     200
    BANK2           256      0     256
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    mktime@timeptr	PTR struct tm size(1) Largest target is 18
		 -> SetTimeFromRegs@newTime(COMRAM[18]), 

    ModbusProcess_FC16@regs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSHoldingRegs(BANK1[30]), 

    ModbusProcess_FC15@regs	PTR unsigned short  size(1) Largest target is 2
		 -> _MODBUSCoils(BANK0[2]), 

    ModbusProcess_FC6@regs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSHoldingRegs(BANK1[30]), 

    ModbusProcess_FC5@regs	PTR unsigned short  size(1) Largest target is 2
		 -> _MODBUSCoils(BANK0[2]), 

    ModbusProcess_FC3@regs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSHoldingRegs(BANK1[30]), _MODBUSInputRegs(BANK1[30]), 

    ModbusGetLastCommand@count	PTR unsigned short  size(1) Largest target is 2
		 -> io_poll@lastEndAddress(BANK0[2]), 

    ModbusGetLastCommand@address	PTR unsigned short  size(1) Largest target is 2
		 -> io_poll@lastAddress(BANK0[2]), 

    ModbusPoll@inputRegs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSInputRegs(BANK1[30]), 

    ModbusPoll@holdingRegs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSHoldingRegs(BANK1[30]), 

    ModbusPoll@coils	PTR unsigned short  size(1) Largest target is 2
		 -> _MODBUSCoils(BANK0[2]), 

    SetTime@newTime	PTR long  size(1) Largest target is 4
		 -> SetTimeFromRegs@newRawTime(COMRAM[4]), 

    sp__ModbusGetLastCommand	PTR enum E2336 size(1) Largest target is 1
		 -> _lastCommand(BANK0[1]), 

    io_poll@lastCommand	PTR enum E2336 size(1) Largest target is 1
		 -> _lastCommand(BANK0[1]), 

    SetTimeFromRegs@hourMin	PTR unsigned int  size(1) Largest target is 2
		 -> io_poll@hourMin(BANK0[2]), 

    SetTimeFromRegs@daySec	PTR unsigned int  size(1) Largest target is 2
		 -> io_poll@daySec(BANK0[2]), 

    SetTimeFromRegs@yearMonth	PTR unsigned int  size(1) Largest target is 2
		 -> io_poll@yearMonth(BANK0[2]), 

    sp__GetTime	PTR long  size(1) Largest target is 4
		 -> currentTime(BANK0[4]), 

    ProcessLightBlock@curMs	PTR unsigned long  size(1) Largest target is 4
		 -> main@curMs(BANK0[4]), 

    SetHourMin@newMin	PTR int  size(1) Largest target is 18
		 -> SetTimeFromRegs@newTime(COMRAM[18]), 

    SetHourMin@newHour	PTR int  size(1) Largest target is 18
		 -> SetTimeFromRegs@newTime(COMRAM[18]), 

    getHourMin@min	PTR unsigned char  size(1) Largest target is 1
		 -> main@minute(BANK0[1]), ProcessDiary@minute(COMRAM[1]), LoadNextEvent@minute(COMRAM[1]), 

    getHourMin@hour	PTR unsigned char  size(1) Largest target is 1
		 -> main@hour(BANK0[1]), ProcessDiary@hour(COMRAM[1]), LoadNextEvent@hour(COMRAM[1]), 

    PortWrite@buf	PTR unsigned char  size(2) Largest target is 140
		 -> _au8Buffer(BANK1[140]), 


Critical Paths under _main in COMRAM

    _main->_io_poll
    _io_poll->_SetTimeFromRegs
    _SetTimeFromRegs->_mktime
    _mktime->_ymd_to_scalar
    _ymd_to_scalar->_years_to_days
    _years_to_days->___lwdiv
    _months_to_days->___lwdiv
    _isleap->___lwmod
    _InitFromEeprom->_Modbus
    _Modbus->_ModbusInit
    _ResetEvent->_LightLed
    _ProcessLightBlock->_UpdateLedRegister
    _ProcessDiary->_LightLed
    _LoadNextEvent->_getHourMin
    _ModbusPoll->_ModbusProcess_FC15
    _ModbusPoll->_ModbusValidateRequest
    _ModbusValidateRequest->_ModbusCalcCRC
    _ModbusProcess_FC6->_ModbusSendTxBuffer
    _ModbusProcess_FC5->_ModbusSendTxBuffer
    _ModbusProcess_FC3->_ModbusSendTxBuffer
    _ModbusProcess_FC21->_ModbusSendTxBuffer
    _ModbusProcess_FC17->_ModbusSendTxBuffer
    _ModbusProcess_FC16->_ModbusSendTxBuffer
    _ModbusProcess_FC15->_ModbusSendTxBuffer
    _ModbusProcess_FC1->_ModbusSendTxBuffer
    _ModbusSendTxBuffer->_ModbusCalcCRC
    _ModbusGetRxBuffer->_PortRead

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_io_poll

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                20    20      0   29876
                                             99 COMRAM     5     5      0
                                             13 BANK0     15    15      0
                          _AddSecond
                _ConfigureOscillator
                            _GetTime
                            _InitApp
                     _InitFromEeprom
                     _LightStatusLed
                         _ModbusPoll
                       _ProcessDiary
                  _ProcessLightBlock
                         _ResetEvent
                      _SetBuzzerDuty
                         _getHourMin
                            _io_poll
                             _millis
                           _pwm_init
 ---------------------------------------------------------------------------------
 (1) _pwm_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _io_poll                                             17    17      0   11545
                                             95 COMRAM     4     4      0
                                              0 BANK0     13    13      0
                     _InitFromEeprom
                           _LightLed
               _ModbusGetLastCommand
                      _SetBuzzerDuty
                    _SetTimeFromRegs
 ---------------------------------------------------------------------------------
 (2) _SetTimeFromRegs                                     27    25      2    5944
                                             68 COMRAM    27    25      2
                     _LightStatusLed
                      _LoadNextEvent
                         _SetHourMin
                            _SetTime
                             _mktime
 ---------------------------------------------------------------------------------
 (3) _mktime                                              23    19      4    3622
                                             45 COMRAM    23    19      4
                      _ymd_to_scalar
 ---------------------------------------------------------------------------------
 (4) _ymd_to_scalar                                       16    10      6    3199
                                             29 COMRAM    16    10      6
                             _isleap
                     _months_to_days
                      _years_to_days
 ---------------------------------------------------------------------------------
 (5) _years_to_days                                       16    12      4     944
                                             13 COMRAM    16    12      4
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (5) _months_to_days                                       6     4      2     811
                                             13 COMRAM     6     4      2
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              7     3      4     703
                                              6 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) _isleap                                               4     2      2     747
                                             11 COMRAM     4     2      2
                            ___lwmod
 ---------------------------------------------------------------------------------
 (6) ___lwmod                                              5     1      4     540
                                              6 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (3) _SetTime                                              1     1      0      64
                                              6 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _SetHourMin                                           2     1      1     172
                                              6 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (3) _LightStatusLed                                       8     6      2     772
                                              6 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (2) _ModbusGetLastCommand                                 3     1      2     234
                                              6 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _InitFromEeprom                                       2     2      0    1573
                                             14 COMRAM     2     2      0
                      _LoadNextEvent
                             _Modbus
                      _SetBuzzerDuty
                   _SwitchOffAllLeds
 ---------------------------------------------------------------------------------
 (2) _SetBuzzerDuty                                        4     2      2     324
                                              6 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _Modbus                                               3     1      2     526
                                             11 COMRAM     3     1      2
                         _ModbusInit
 ---------------------------------------------------------------------------------
 (4) _ModbusInit                                           5     3      2     279
                                              6 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _ResetEvent                                           5     5      0    2086
                                             14 COMRAM     5     5      0
                           _LightLed
 ---------------------------------------------------------------------------------
 (1) _ProcessLightBlock                                    5     5      0      96
                                              7 COMRAM     5     5      0
                  _UpdateLedRegister
 ---------------------------------------------------------------------------------
 (2) _UpdateLedRegister                                    1     1      0      22
                                              6 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ProcessDiary                                         6     6      0    3331
                                             14 COMRAM     6     6      0
                            _GetTime
                           _LightLed
                      _LoadNextEvent
                   _SwitchOffAllLeds
                         _getHourMin
 ---------------------------------------------------------------------------------
 (3) _SwitchOffAllLeds                                     1     1      0     130
                                              6 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _LoadNextEvent                                        5     5      0     593
                                              8 COMRAM     5     5      0
                         _getHourMin
 ---------------------------------------------------------------------------------
 (4) _getHourMin                                           2     1      1     392
                                              6 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _LightLed                                             8     6      2    2018
                                              6 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (2) _GetTime                                              2     0      2       0
                                              6 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _ModbusPoll                                          12     3      9    9125
                                             40 COMRAM    12     3      9
               _ModbusBuildException
                  _ModbusGetRxBuffer
                  _ModbusProcess_FC1
                 _ModbusProcess_FC15
                 _ModbusProcess_FC16
                 _ModbusProcess_FC17
                 _ModbusProcess_FC21
                  _ModbusProcess_FC3
                  _ModbusProcess_FC5
                  _ModbusProcess_FC6
                 _ModbusSendTxBuffer
              _ModbusValidateRequest
                      _PortAvailable
                             _millis
 ---------------------------------------------------------------------------------
 (2) _ModbusValidateRequest                               21    21      0     715
                                             19 COMRAM    21    21      0
                      _ModbusCalcCRC
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC6                                   10     7      3     749
                                             21 COMRAM    10     7      3
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC5                                   10    10      0     728
                                             21 COMRAM    10    10      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC3                                   12     9      3    1000
                                             21 COMRAM    12     9      3
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC21                                   9     9      0     745
                                             21 COMRAM     9     9      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC17                                   3     3      0     632
                                             21 COMRAM     3     3      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC16                                  14    11      3     972
                                             21 COMRAM    14    11      3
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC15                                  19    19      0     936
                                             21 COMRAM    19    19      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC1                                   17    15      2    1055
                                             21 COMRAM    17    15      2
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusSendTxBuffer                                   2     2      0     541
                                             19 COMRAM     2     2      0
                      _ModbusCalcCRC
                          _PortWrite
                             _millis
 ---------------------------------------------------------------------------------
 (1) _millis                                               8     4      4      23
                                              6 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _PortWrite                                            4     1      3     218
                                              6 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (3) _ModbusCalcCRC                                       13    11      2     254
                                              6 COMRAM    13    11      2
 ---------------------------------------------------------------------------------
 (2) _ModbusGetRxBuffer                                    2     2      0      47
                                              7 COMRAM     2     2      0
                      _PortAvailable
                           _PortRead
 ---------------------------------------------------------------------------------
 (3) _PortRead                                             1     1      0      23
                                              6 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _PortAvailable                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ModbusBuildException                                 2     2      0      45
                                              6 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              1     1      0      68
                                              6 COMRAM     1     1      0
                     _InitUartBuffer
                          _PortBegin
 ---------------------------------------------------------------------------------
 (2) _PortBegin                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitUartBuffer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _AddSecond                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _low_isr                                              6     6      0      23
                                              0 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _high_isr                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AddSecond
   _ConfigureOscillator
   _GetTime
   _InitApp
     _InitUartBuffer
     _PortBegin
   _InitFromEeprom
     _LoadNextEvent
       _getHourMin
     _Modbus
       _ModbusInit
     _SetBuzzerDuty
     _SwitchOffAllLeds
   _LightStatusLed
   _ModbusPoll
     _ModbusBuildException
     _ModbusGetRxBuffer
       _PortAvailable
       _PortRead
     _ModbusProcess_FC1
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC15
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC16
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC17
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC21
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC3
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC5
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC6
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusSendTxBuffer
       _ModbusCalcCRC
       _PortWrite
       _millis
     _ModbusValidateRequest
       _ModbusCalcCRC
     _PortAvailable
     _millis
   _ProcessDiary
     _GetTime
     _LightLed
     _LoadNextEvent
       _getHourMin
     _SwitchOffAllLeds
     _getHourMin
   _ProcessLightBlock
     _UpdateLedRegister
   _ResetEvent
     _LightLed
   _SetBuzzerDuty
   _getHourMin
   _io_poll
     _InitFromEeprom
       _LoadNextEvent
         _getHourMin
       _Modbus
         _ModbusInit
       _SetBuzzerDuty
       _SwitchOffAllLeds
     _LightLed
     _ModbusGetLastCommand
     _SetBuzzerDuty
     _SetTimeFromRegs
       _LightStatusLed
       _LoadNextEvent
         _getHourMin
       _SetHourMin
       _SetTime
       _mktime
         _ymd_to_scalar
           _isleap
             ___lwmod
           _months_to_days
             ___lwdiv
           _years_to_days
             ___lwdiv
   _millis
   _pwm_init

 _low_isr (ROOT)

 _high_isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0     100       9      100.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      C8       7       78.1%
BITBANK0            80      0       0       4        0.0%
BANK0               80     1C      7B       5       96.1%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     68      71       1       89.7%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2B4      15        0.0%
DATA                 0      0     2B4       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Wed May 11 14:28:34 2016

                                                   LoadNextEvent@minute 000D  
                                                         _years_to_days 1C08  
                                    ModbusProcess_FC15@u8CopyBufferSize 001D  
                                                        _ResetEvent$818 0012  
                                            ModbusProcess_FC16@u8regsno 0022  
                                                                    l62 2A3E  
                                                                    l71 2A02  
                                                                    l59 2A3A  
                                                                    l67 29E2  
                                                                    _RD 007D30  
                                                                    _WR 007D31  
                                                   months_to_days@month 000E  
                                                           __CFG_BOR$ON 000000  
                                                                    bsr 000FE0  
                                         ModbusProcess_FC5@u8currentBit 001E  
                                        ModbusProcess_FC15@u16StartCoil 0020  
                                                          __CFG_CP0$OFF 000000  
                                                          __CFG_CP1$OFF 000000  
                                                          __CFG_CP2$OFF 000000  
                                                          __CFG_CP3$OFF 000000  
                                                           __CFG_OSC$HS 000000  
                                                                   l101 2A7E  
                                                                   l102 2A98  
                                                   ModbusPoll@inputRegs 002C  
                                                                   l410 073E  
                                                                   l243 290C  
                                                                   l245 2916  
                                                                   l246 2920  
                                                                   l502 0A96  
                                                                   l422 0794  
                                                                   l247 292A  
                                                                   l415 0766  
                                                                   l360 248A  
                                                                   l248 2946  
                                                                   l424 07AA  
                                                                   l441 0866  
                                                                   l417 076A  
                                                                   l370 214C  
                                                                   l522 0B38  
                                                                   l434 083A  
                                                                   l267 1364  
                                                                   l259 1446  
                                                                   l507 0ABE  
                                                                   l276 1EFA  
                                                                   l532 0B8C  
                                                                   l524 0B3C  
                                                                   l380 1768  
                                                                   l517 0B10  
                                                                   l509 0AC2  
                                                                   l454 08DC  
                                                                   l471 0974  
                                                                   l439 0862  
                                                                   l376 2106  
                                                                   l464 093E  
                                                                   l456 08E0  
                                                                   l449 08B4  
                                                                   l539 0BCA  
                                                                   l492 0A44  
                                                                   l484 09EE  
                                                                   l494 0A48  
                                                                   l398 0C72  
                                                                   l727 19C0  
                                                                   l487 0A1C  
                                                                   l479 09C6  
                                                                   l761 298A  
                                                                   l825 1ACA  
                                                                   l753 2B84  
                                                                   l853 1BE2  
                                                                   l781 14C6  
                                                                   l776 148E  
                                                                   l777 166E  
                                                                   l874 2264  
                                                                   _GIE 007F97  
                                                          __CFG_CPB$OFF 000000  
                                                                   _PR2 000FCB  
                                                          __CFG_CPD$OFF 000000  
                                              __end_of_SwitchOffAllLeds 2AEE  
                                                      ProcessDiary@hour 0013  
                                      ModbusValidateRequest@recLenBytes 001C  
                                                 ModbusPoll@holdingRegs 002F  
                                                          __CFG_BORV$42 000000  
                                                          __CFG_IDLOC0$ 000000  
                                                          __CFG_IDLOC1$ 000001  
                                                          __CFG_IDLOC2$ 000000  
                                                                   prod 000FF3  
                                                                   wreg 000FE8  
                                      ModbusValidateRequest@isSupported 0022  
                                                SetTimeFromRegs@newTime 004E  
                                                SetTimeFromRegs@hourMin 004D  
                                                         _LoadNextEvent 2408  
                                                     _buzzeLoudDuration 00C6  
                                                   main@oldBuzzerOnTime 00EC  
                                                         _globalMinutes 006E  
                                                          __CFG_WDT$OFF 000000  
                                                                  l1304 2822  
                                                                  l1324 0CB0  
                                                                  l1278 27D4  
                                                                  l4015 153E  
                                                                  l1288 28B4  
                                                                  l4113 1A8E  
                                                                  l4105 1A32  
                                                                  l4025 155C  
                                                                  l4017 154A  
                                                                  l4009 1534  
                                                                  l4115 1ABC  
                                                                  l4123 1AD0  
                                                                  l4301 261A  
                                                                  l4037 158C  
                                                                  l4151 2188  
                                                                  l4071 1634  
                                                                  l4129 1AE8  
                                                                  l4225 1B38  
                                                                  l4049 15B2  
                                                                  l4073 166A  
                                                                  l4401 1036  
                                                                  l4235 1BA2  
                                                                  l4237 1BD4  
                                                                  l4245 1BE8  
                                                                  l4157 21DC  
                                                                  l4181 231C  
                                                                  l4501 116C  
                                                                  l4183 234E  
                                                                  l4423 107C  
                                                                  l4415 1062  
                                                                  l4407 1048  
                                                                  l6023 0908  
                                                                  l3545 29FA  
                                                                  l4097 1A22  
                                                                  l4281 1F9C  
                                                                  l4361 229C  
                                                                  l4425 1084  
                                                                  l4417 106A  
                                                                  l4409 1050  
                                                                  l6025 0910  
                                                                  l3571 25A4  
                                                                  l4275 1F44  
                                                                  l4531 11C6  
                                                                  l4523 11AC  
                                                                  l4515 1192  
                                                                  l4507 117A  
                                                                  l4451 10D0  
                                                                  l4443 10B6  
                                                                  l4435 109E  
                                                                  l6203 0AEA  
                                                                  l3637 2A30  
                                                                  l4285 1FC0  
                                                                  l4701 191E  
                                                                  l4533 11CE  
                                                                  l4525 11B4  
                                                                  l4517 119A  
                                                                  l4509 1180  
                                                                  l4461 10F2  
                                                                  l4453 10D8  
                                                                  l4445 10BE  
                                                                  l4437 10A4  
                                                                  l4429 1090  
                                                                  l4541 11F0  
                                                                  l5421 27AE  
                                                                  l6205 0AF2  
                                                                  l6109 09FE  
                                                                  l3639 2A32  
                                                                  l4359 229A  
                                                                  l4471 110C  
                                                                  l5503 23D2  
                                                                  l6303 0BF2  
                                                                  l6055 0966  
                                                                  l4633 24D8  
                                                                  l3593 25E0  
                                                                  l4721 196A  
                                                                  l4713 1950  
                                                                  l4705 192C  
                                                                  l5521 2ACC  
                                                                  l4481 112C  
                                                                  l4473 1112  
                                                                  l4465 10FE  
                                                                  l4393 1022  
                                                                  l5441 2896  
                                                                  l5409 2820  
                                                                  l5417 279E  
                                                                  l6081 09AC  
                                                                  l3587 25D6  
                                                                  l3579 25B8  
                                                                  l4651 1884  
                                                                  l3771 2934  
                                                                  l4459 10EA  
                                                                  l4539 11DA  
                                                                  l4387 0FF8  
                                                                  l5531 1E16  
                                                                  l5419 27A8  
                                                                  l6307 0C0A  
                                                                  l6251 0B64  
                                                                  l6155 0A70  
                                                                  l4733 198A  
                                                                  l4725 1972  
                                                                  l4717 1958  
                                                                  l4709 193E  
                                                                  l4661 18B0  
                                                                  l5541 1E80  
                                                                  l5445 28AA  
                                                                  l5437 2886  
                                                                  l5429 27CA  
                                                                  l6253 0B6C  
                                                                  l6157 0A78  
                                                                  l6325 0C60  
                                                                  l6405 1818  
                                                                  l4671 18D6  
                                                                  l4647 187E  
                                                                  l5631 133A  
                                                                  l5623 122A  
                                                                  l4495 1158  
                                                                  l4487 113E  
                                                                  l4479 1124  
                                                                  l4399 1030  
                                                                  l5543 1E9E  
                                                                  l5535 1E3C  
                                                                  l5439 2890  
                                                                  l5607 0F74  
                                                                  l6079 099C  
                                                                  l3953 2988  
                                                                  l3937 2954  
                                                                  l3945 2976  
                                                                  l4729 1984  
                                                                  l5633 1392  
                                                                  l5625 12C0  
                                                                  l5617 120E  
                                                                  l5561 241C  
                                                                  l4497 1160  
                                                                  l4489 1146  
                                                                  l5537 1E5A  
                                                                  l6409 1838  
                                                                  l4739 1990  
                                                                  l4691 1900  
                                                                  l4675 18DC  
                                                                  l5643 1434  
                                                                  l5803 20F8  
                                                                  l5547 1ECC  
                                                                  l3973 14B4  
                                                                  l5565 2424  
                                                                  l5821 0676  
                                                                  l6349 16C0  
                                                                  l3991 14F2  
                                                                  l3983 14CC  
                                                                  l4695 1904  
                                                                  l5567 2426  
                                                                  l6279 0BB4  
                                                                  l3977 14BC  
                                                                  l3969 1492  
                                                                  l4697 190A  
                                                                  l5761 299E  
                                                                  l5753 2A6C  
                                                                  l5913 07D2  
                                                                  l5841 06EE  
                                                                  l6369 1740  
                                                                  l3995 1516  
                                                                  l3987 14EE  
                                                                  l5499 23A8  
                                                                  l5915 07DC  
                                                                  l6379 1778  
                                                                  l5749 2A5A  
                                                                  l5597 0CBC  
                                                                  l5917 07E4  
                                                                  l5845 0708  
                                                                  l5837 06E2  
                                                                  l5829 06AA  
                                                                  l6389 17D6  
                                                                  l3999 151C  
                                                                  l5929 0820  
                                                                  l5797 20E0  
                                                                  l5789 20C2  
                                                                  l5975 088E  
                                                                  l5977 0896  
                                                                  STR_3 060B  
                                                     _UpdateLedRegister 2906  
                                                                  _LATA 000F89  
                                                                  _LATB 000F8A  
                                                                  u3320 148A  
                                                                  u3504 1A5A  
                                                                  u3360 14EE  
                                                                  u3505 1A52  
                                                                  u6001 06B6  
                                                                  u6010 06C4  
                                                                  u3524 1A76  
                                                                  u3604 2332  
                                                                  u3380 1516  
                                                                  u3525 1A70  
                                                                  u3605 232A  
                                                                  u3534 1AA2  
                                                                  u3614 1B66  
                                                                  u3535 1A9C  
                                                                  u3615 1B60  
                                                                  u3480 1632  
                                                                  u6025 06D0  
                                                                  u3634 1B8C  
                                                                  u3635 1B84  
                                                                  u3644 1BB8  
                                                                  u6300 08AC  
                                                                  u3645 1BB0  
                                                                  u5510 26E8  
                                                                  u6070 071C  
                                                                  u7007 29D6  
                                                                  u5504 1EE2  
                                                                  u5505 1EDA  
                                                                  u3594 2306  
                                                                  u5530 2704  
                                                                  u5434 1E2E  
                                                                  u5610 0C96  
                                                                  u3595 22FE  
                                                                  u5435 1E28  
                                                                  u5444 1E4E  
                                                                  u5380 2390  
                                                                  u5620 0CB0  
                                                                  _RCIF 007CF5  
                                                                  u5445 1E48  
                                                                  u6510 0A14  
                                                                  u5704 12F8  
                                                                  u5528 26EC  
                                                                  u5464 1E72  
                                                                  u5705 12F2  
                                                                  u5465 1E6C  
                                                                  i1l90 0064  
                                                                  u5474 1E92  
                                                                  i1l91 0038  
                                                                  u5475 1E8C  
                                                                  u5724 1326  
                                                                  u5548 2708  
                                                                  u6460 09C2  
                                                                  u6380 0934  
                                                                  u5725 1320  
                                                                  u5805 1DA2  
                                                                  u5734 134E  
                                                                  u5654 123E  
                                                                  u5494 1EBA  
                                                                  u5735 1348  
                                                                  u5655 1238  
                                                                  u5815 1DC4  
                                                                  u5495 1EB2  
                                                                  u5744 1378  
                                                                  u5664 1266  
                                                                  u5745 1372  
                                                                  u5665 1260  
                                                                  u5754 13A6  
                                                                  u5674 1290  
                                                                  u5755 13A0  
                                                                  u5675 128A  
                                                                  u5764 13CE  
                                                                  u5684 12B8  
                                                                  i2l77 2754  
                                                                  u5765 13C8  
                                                                  u5685 12B2  
                                                                  i2l78 2784  
                                                                  u5774 13F4  
                                                                  u5694 12D4  
                                                                  u6750 0B82  
                                                                  u6670 0B08  
                                                                  u6590 0A8E  
                                                                  u5775 13EE  
                                                                  u5695 12CE  
                                                                  u5794 1420  
                                                                  u6850 0C20  
                                                                  u5970 068A  
                                                                  u5795 141A  
                                                                  u6835 0BF6  
                                                                  u6870 0C34  
                                                                  u6950 17A4  
                                                                  u5985 0696  
                                                                  u6795 0BB8  
                                                ??_ModbusGetLastCommand 0009  
                                                                  _TRMT 007D61  
                                                                  _WREN 007D32  
                                         ModbusValidateRequest@u16count 0023  
                                                    ?_UpdateLedRegister 0001  
                                                                  _main 1674  
                                                                  fsr1h 000FE2  
                                                                  fsr2h 000FDA  
                                                                  indf1 000FE7  
                                                                  fsr1l 000FE1  
                                                                  indf2 000FDF  
                                                                  fsr2l 000FD9  
                                                                  btemp 0072  
                                                                  prodh 000FF4  
                                                                  prodl 000FF3  
                                                                  start 0080  
                                                       __end_of_GetTime 2BC2  
                                                          ___param_bank 000010  
                                                   ??_UpdateLedRegister 0007  
                                                        ?_years_to_days 000E  
                                                _currentAlarmedEventNum 0070  
                                                       __end_of_InitApp 2514  
                                                            __6sCounter 00C0  
                                                      ?_SetTimeFromRegs 0045  
                                                       __end_of_SetTime 2B2C  
                                                                 ?_main 0001  
                                                __size_of_ymd_to_scalar 00A4  
                                                                 _EEADR 000FA9  
                                                                 _CARRY 007EC0  
                                                       __end_of___lwdiv 27E0  
                                                       __end_of___lwmod 28C0  
                                            __end_of_ModbusSendTxBuffer 2878  
                                                                 _RCREG 000FAE  
                                                                 _RCSTA 000FAB  
                                                                 _TMR0H 000FD7  
                                                                 _TMR1H 000FCF  
                                                                 _TMR0L 000FD6  
                                                                 _TMR1L 000FCE  
                                                                 _SPBRG 000FAF  
                                                                 _TRISB 000F93  
                                                            _IsBusserOn 00BE  
                                                                 _TXREG 000FAD  
                                                                 _TXSTA 000FAC  
                                                   _ConfigureOscillator 2BCA  
                                           ModbusProcess_FC3@u8StartAdd 0020  
                                                         __CFG_WRT0$OFF 000000  
                                                         __CFG_WRT1$OFF 000000  
                                                         __CFG_WRT2$OFF 000000  
                                                         __CFG_WRT3$OFF 000000  
                                                        __CFG_EBTR0$OFF 000000  
                                                        __CFG_EBTR1$OFF 000000  
                                                        __CFG_EBTR2$OFF 000000  
                                                        __CFG_EBTR3$OFF 000000  
                                                        _InitFromEeprom 1D0A  
                                                        ?_LoadNextEvent 0001  
                                                    ProcessDiary@minute 0014  
                                                            Modbus@u8id 000E  
                                                                 __u8id 00C3  
                                                         __CFG_WRTB$OFF 000000  
                                                         __CFG_WRTC$OFF 000000  
                                                         __CFG_WRTD$OFF 000000  
                                             __end_of_UpdateLedRegister 294C  
                                            ModbusBuildException@u8func 0008  
                                                        __CFG_EBTRB$OFF 000000  
                                                       __end_of_io_poll 0C78  
                                                       __end_of_low_isr 0080  
                                                    __size_of_AddSecond 0010  
                                                                 tablat 000FF5  
                                                      ymd_to_scalar@day 0022  
                                                        _UartBufferHead 00BF  
                                                        _UartBufferTail 006A  
                                                                 plusw2 000FDB  
                                             ModbusProcess_FC1@u8bitsno 0024  
                                                                 status 000FD8  
                                                       years_to_days@yr 000E  
                                            __size_of_ProcessLightBlock 0272  
                                                  ?_ConfigureOscillator 0001  
                                          __end_of_ModbusBuildException 2B0E  
                                                       __initialization 2514  
                                                          __end_of_main 1866  
                                                      __end_of_LightLed 144C  
                                     ModbusProcess_FC5@u8CopyBufferSize 001B  
                                            ModbusProcess_FC1@u16Coilno 0025  
                                                                ??_main 0064  
                                                       ResetEvent@state 0011  
                                                         __activetblptr 000002  
                                                __end_of_InitFromEeprom 1E0A  
                                                            _ModbusInit 2B76  
                                                            _ModbusPoll 1866  
                                                      __end_of_PortRead 2A44  
                                                        _InitUartBuffer 2BAC  
                                                __size_of_ModbusCalcCRC 0074  
                                    ModbusProcess_FC16@u8CopyBufferSize 001F  
                                              ModbusSendTxBuffer@u16crc 0014  
                                                                _EEDATA 000FA8  
                                                                _CCPR1L 000FBE  
                                                                _EECON2 000FA7  
                                                            _SetHourMin 2B2C  
                                              SetTimeFromRegs@yearMonth 0046  
                                                        _LightStatusLed 1E0A  
                                                                i1l5323 005E  
                                                                i1l5325 0060  
                                                                i2l5303 277C  
                                                         _ymd_to_scalar 2364  
                                                             ??_GetTime 0009  
                                                     LightStatusLed@row 000E  
                                                            _ResetEvent 2990  
                                                         main@oldMinute 00F0  
                                      ModbusProcess_FC15@u16currentCoil 0024  
                                                             ??_InitApp 0007  
                                                 ??_ConfigureOscillator 0007  
                                                       _currentLedBlock 00CE  
                                                       ??_years_to_days 0012  
                                                                _Modbus 2B62  
                                                             ??_SetTime 0007  
                                                      __end_of_high_isr 278C  
                                                        _UartRingBuffer 0200  
                                                          __lastAddress 00B6  
                                            ModbusProcess_FC3@u16regsno 001E  
                                              ModbusProcess_FC16@u8size 0018  
                                                             ??___lwdiv 000B  
                                                             ??___lwmod 000B  
                                                                _isleap 27E0  
                                                                _millis 2A9E  
                                                                clear_0 251C  
                                                                clear_1 252E  
                                                                clear_2 253A  
                                                     __end_of_AddSecond 2BAC  
                                                                _mktime 0C78  
                                                          __lastCommand 00DA  
                                                 __end_of_PortAvailable 2BCA  
                                                            __au8Buffer 0100  
                                                    __size_of_PortBegin 001A  
                                                             ??_io_poll 0060  
                                                       ?_InitFromEeprom 0001  
                                                       ??_LoadNextEvent 0009  
                                                          __pdataCOMRAM 006F  
                                                __end_of_InitUartBuffer 2BBA  
                                                          __MODBUSCoils 00D8  
                                                            PortWrite@i 000A  
                                                    __size_of_PortWrite 003E  
                                                          __mediumconst 0000  
                                       ModbusBuildException@u8exception 0007  
                                                             ??_low_isr 0001  
                                                                tblptrh 000FF7  
                                                                tblptrl 000FF6  
                                                                tblptru 000FF8  
                                            __size_of_UpdateLedRegister 0046  
                                                      __end_of_pwm_init 2B9C  
                                                __end_of_LightStatusLed 1F00  
                                            ModbusProcess_FC1@u8bytesno 001F  
                                                      years_to_days@ret 001A  
                                              ModbusProcess_FC1@u16coil 001B  
                                                        ?_ymd_to_scalar 001E  
                                                            __u8lastRec 00C4  
                                                            __accesstop 0080  
                                               __end_of__initialization 258A  
                                            __end_of_ModbusProcess_FC21 22BC  
                                            __end_of_ModbusProcess_FC15 1C08  
                                            __end_of_ModbusProcess_FC16 1FD0  
                                            __end_of_ModbusProcess_FC17 267A  
                                                       Modbus@u8txenpin 000D  
                                                      io_poll@yearMonth 00DF  
                                                         ___rparam_used 000001  
                                              ModbusProcess_FC5@u16coil 001C  
                                        __size_of_ModbusValidateRequest 0228  
                                     ModbusProcess_FC21@startAddrsBytes 001A  
                                         __end_of_ModbusValidateRequest 1674  
                                   ModbusValidateRequest@startAddrBytes 0018  
                                                        __pcstackCOMRAM 0001  
                                                         _ModbusCalcCRC 2598  
                                                          __pidataBANK0 2BD0  
                                                  __end_of_fctsupported 060B  
                                         ModbusProcess_FC16@u16StartAdd 0020  
                                                     ?_SwitchOffAllLeds 0001  
                                                           ?_ModbusInit 0007  
                                                           ?_ModbusPoll 0029  
                                                       ?_InitUartBuffer 0001  
                                               __size_of_months_to_days 0046  
                                                  _ModbusBuildException 2AEE  
                                                    ??_SwitchOffAllLeds 0007  
                                                            __lastCount 00B8  
                                                       ?_LightStatusLed 0007  
                                                        io_poll@hourMin 00DB  
                                                           ?_SetHourMin 0007  
                                                            __pbssBANK0 0080  
                                                            __pbssBANK1 0100  
                                                            __pbssBANK2 0200  
                                     ModbusProcess_FC6@u8CopyBufferSize 001D  
                                                             ?_LightLed 0007  
                                                __size_of_SetBuzzerDuty 0058  
                                                           ?_ResetEvent 0001  
                                                     __end_of_PortBegin 2B62  
                                                               ?_Modbus 000C  
                                                     __end_of_PortWrite 2A0E  
                                                        ?_ModbusCalcCRC 0007  
                                                       PortWrite@buflen 0009  
                                                             ?_PortRead 0001  
                                                      _buzzerInfoPeriod 00C9  
                                    ModbusProcess_FC17@u8CopyBufferSize 0017  
                                                 _millisecondsFromStart 00AC  
                                                        SetTime@newTime 0007  
                                                            _getHourMin 2A72  
                                                               ?_isleap 000C  
                                                               ?_millis 0007  
                                                               ?_mktime 002E  
                                      ModbusProcess_FC21@requestDataLen 0018  
                                                         LightLed@blink 0008  
                                                 ?_ModbusBuildException 0001  
                                                       ??_ymd_to_scalar 0024  
                                                       LoadNextEvent@v1 000B  
                                                             ?_high_isr 0001  
                                                        _oldBlinkOnTime 00B0  
                                        ModbusGetRxBuffer@bBuffOverflow 0009  
                                                            ??_LightLed 0009  
                                                    _ModbusSendTxBuffer 282C  
                                                               _GetTime 2BBA  
                                         __size_of_ModbusGetLastCommand 002E  
                                                       __inputRegsCount 00C2  
                                                               _InitApp 248E  
                                                   LightLed@statusShift 000E  
                                                               __Hparam 0000  
                                                               _SetTime 2B0E  
                                                               __Lparam 0000  
                                                   __size_of_ModbusInit 0014  
                                                   ?_ModbusSendTxBuffer 0001  
                                                   __size_of_ModbusPoll 0160  
                                                       __size_of_Modbus 0014  
                                                            _eventCount 006D  
                                                         ?_ProcessDiary 0001  
                                                            ??_PortRead 0007  
                                                             ?_pwm_init 0001  
                                                               ___lwdiv 278C  
                                                               ___lwmod 2878  
                                                       SetBuzzerDuty@dc 0007  
                                                          __psmallconst 0600  
                                       ModbusProcess_FC1@u16currentCoil 0022  
                                                   __size_of_SetHourMin 001C  
                                                               __pcinit 2514  
                                                       __size_of_isleap 004C  
                                                         _SetBuzzerDuty 26DC  
                                                       __size_of_millis 002A  
                                                               __ramtop 0600  
                                                               _blinkOn 006C  
                                                       __size_of_mktime 0312  
                                                               __ptext0 1674  
                                                               __ptext1 2B8A  
                                                               __ptext2 0626  
                                                               __ptext3 1FD0  
                                                               __ptext4 0C78  
                                                               __ptext5 2364  
                                                               __ptext6 1C08  
                                                               __ptext7 28C0  
                                                               __ptext8 278C  
                                                               __ptext9 27E0  
                                                             _T0CONbits 000FD5  
                                                             _T1CONbits 000FCD  
                                                           PortRead@ret 0007  
                                                               _io_poll 0626  
                                                             _T2CONbits 000FCA  
                                                     SetHourMin@newHour 0008  
                                                   __size_of_ResetEvent 0040  
                                              __size_of_SetTimeFromRegs 00C2  
                                                         mktime@timeptr 0044  
                                                  ??_ModbusSendTxBuffer 0014  
                                                               _low_isr 0018  
                                                       ModbusPoll@coils 002B  
                                                            ??_high_isr 0001  
                                                        __pintcode_body 2734  
                                                  end_of_initialization 258A  
                                                         __Lmediumconst 0000  
                                                               int_func 2734  
                                             UpdateLedRegister@regIndex 0007  
                                                       ??_ModbusCalcCRC 0009  
                                                        ??_ProcessDiary 000F  
                                                   LightLed@ststusIndex 000D  
                                                             _RCSTAbits 000FAB  
                                                               postdec1 000FE5  
                                                               postdec2 000FDD  
                                                               postinc0 000FEE  
                                                               postinc1 000FE6  
                                                               postinc2 000FDE  
                                         ModbusProcess_FC1@u8currentBit 001D  
                                                   ModbusProcess_FC21@i 001E  
                                                   ModbusProcess_FC16@i 0023  
                                                   ModbusProcess_FC17@i 0018  
                                                            ??_pwm_init 0007  
                                                     SwitchOffAllLeds@i 0007  
                                                      ??_InitFromEeprom 000F  
                                                           ?_getHourMin 0007  
                                                        ?_SetBuzzerDuty 0007  
                                     ModbusProcess_FC1@u8CopyBufferSize 001E  
                                                             _PORTCbits 000F82  
                                                          _curEventHour 00CB  
                                                ??_ModbusBuildException 0007  
                                                          _curEventType 00CD  
                                                     ModbusInit@u8serno 0007  
                                                             _AddSecond 2B9C  
                                                        _months_to_days 28C0  
                                                     _ModbusGetRxBuffer 294C  
                                                             _TRISAbits 000F92  
                                                             _TRISCbits 000F94  
                                           ModbusProcess_FC15@u16Coilno 0022  
                                                     LoadNextEvent@hour 000C  
                                                    ?_ModbusGetRxBuffer 0001  
                                           __end_of_ConfigureOscillator 2BD0  
                                                 SetTimeFromRegs@daySec 0045  
                                                          _fctsupported 0601  
                                                           _CCP1CONbits 000FBD  
                                         ModbusProcess_FC15@u8frameByte 001F  
                                                   ??_ModbusGetRxBuffer 0008  
                                                             _TXSTAbits 000FAC  
                                                            main@lastMs 00E8  
                                          ModbusValidateRequest@u16regs 0027  
                                                            main@minute 00F6  
                                                     _buzzerAlarmPeriod 00C8  
                                             ModbusGetLastCommand@count 0007  
                                                    _buzzeQuietDuration 00C7  
                                                 __end_of_years_to_days 1D0A  
                                                        __end_of_Modbus 2B76  
                                                      ??_InitUartBuffer 0007  
                                                    _ModbusProcess_FC21 220A  
                                                    _ModbusProcess_FC15 1AF8  
                                                    _ModbusProcess_FC16 1F00  
                                                    _ModbusProcess_FC17 260C  
                                                         __pidataCOMRAM 2BD4  
                                              ModbusPoll@discreteInputs 0029  
                                                        __end_of_isleap 282C  
                                                        __end_of_millis 2AC8  
                                                __end_of_months_to_days 2906  
                                             __end_of_ModbusGetRxBuffer 2990  
                                                        __end_of_mktime 0F8A  
                                                      ??_LightStatusLed 0009  
                                                       ymd_to_scalar@mo 0020  
                                                         _UartBufferLen 0069  
                                                       ymd_to_scalar@yr 001E  
                                                          ??_ModbusInit 0009  
                                                          ??_ModbusPoll 0032  
                                                            ?_AddSecond 0001  
                                                   start_initialization 2514  
                                                   ?_ModbusProcess_FC21 0001  
                                                   ?_ModbusProcess_FC15 0001  
                                                   ?_ModbusProcess_FC16 0016  
                                                   ?_ModbusProcess_FC17 0001  
                                                 __end_of_LoadNextEvent 248E  
                                                          ??_SetHourMin 0008  
                                                     ??_SetTimeFromRegs 0047  
                                                   __size_of_getHourMin 002C  
                                                          ??_ResetEvent 000F  
                                             __size_of_SwitchOffAllLeds 0026  
                                                __size_of_PortAvailable 0008  
                                                     __size_of_LightLed 0250  
                                                      LightStatusLed@on 0007  
                                                        getHourMin@hour 0008  
                                                  ??_ModbusProcess_FC21 0016  
                                                  ??_ModbusProcess_FC15 0016  
                                                  ??_ModbusProcess_FC16 0019  
                                                  ??_ModbusProcess_FC17 0016  
                                                              ??_Modbus 000E  
                                               ModbusProcess_FC15@bTemp 001E  
                                                    __end_of_ModbusInit 2B8A  
                                                    __end_of_ModbusPoll 19C6  
                                                             _PortBegin 2B48  
                                                       ??_SetBuzzerDuty 0009  
                                                 _ModbusValidateRequest 144C  
                                                           __pdataBANK0 00F7  
                                                             _PortWrite 29D0  
                                                     __size_of_PortRead 0036  
                                                              ??_isleap 000E  
                                                              ??_millis 000B  
                                                              ??_mktime 0032  
                                                    __end_of_SetHourMin 2B48  
                                                     __holdingRegsCount 00C1  
                                                       ?_months_to_days 000E  
                                                        ModbusCalcCRC@i 0010  
                                                        ModbusCalcCRC@j 0011  
                                         ModbusProcess_FC21@recLenBytes 001C  
                                                           __pbssCOMRAM 0069  
                                                    __end_of_ResetEvent 29D0  
                                                         __pcstackBANK0 00DB  
                                               ModbusProcess_FC6@u16add 001E  
                                               ModbusProcess_FC6@u16val 001B  
                                                  __end_of_ProcessDiary 2150  
                                               ModbusProcess_FC3@u8size 0018  
                                               ModbusProcess_FC6@u8size 0018  
                                                         io_poll@daySec 00DD  
                                                     __size_of_high_isr 2784  
                                                              ?_GetTime 0007  
                                                              ?_InitApp 0001  
                                                              ?_SetTime 0001  
                                                      ___lwdiv@dividend 0007  
                                        ModbusProcess_FC15@u8currentBit 0026  
                                        ModbusValidateRequest@u16MsgCRC 0020  
                                                             __pintcode 0008  
                                                            ?_PortBegin 0001  
                                    ModbusProcess_FC21@u8CopyBufferSize 0019  
                                                     _buzzerOnOffPeriod 00F9  
                                                          _nightEndHour 00D2  
                                                              ?___lwdiv 0007  
                                                              ?___lwmod 0007  
                                                           _blinkPeriod 00BC  
                                                            ?_PortWrite 0007  
                                                           __pintcodelo 0018  
                                                   _buzzerOnOffDuration 00F7  
                                          __end_of_ModbusGetLastCommand 2A72  
                                                     __size_of_pwm_init 0012  
                                                        ModbusInit@u8id 000B  
                                              ModbusPoll@inputRegsCount 002E  
                                            __size_of_ModbusGetRxBuffer 0044  
                                           ModbusGetLastCommand@address 0009  
                                                         _PortAvailable 2BC2  
                                                      __MODBUSInputRegs 01AA  
                                                           __smallconst 0600  
                                                              ?_io_poll 0001  
                                                         __u8BufferSize 006B  
                                                           ??_AddSecond 0007  
                                                    __MODBUSHoldingRegs 018C  
                                                              ?_low_isr 0001  
                                                         _blinkDuration 00BA  
                                                 io_poll@lastEndAddress 00E4  
                                                      ___lwdiv@quotient 000C  
                                                      SetHourMin@newMin 0007  
                                                 __end_of_ymd_to_scalar 2408  
                                                ModbusValidateRequest@i 0025  
                                                              _LATAbits 000F89  
                                                              _LATCbits 000F8B  
                                                       _eventAcceptTime 00D0  
                                                        LightLed@ledNum 000C  
                                                              _IPR1bits 000F9F  
                                                              _PIE1bits 000F9D  
                                                     ModbusPoll@i8state 0033  
                                                              _PIR1bits 000F9E  
                                                           _ledStatuses 0090  
                                                              _RCONbits 000FD0  
                                                ?_ModbusValidateRequest 0001  
                                                    ModbusProcess_FC3@i 0021  
                                                 ModbusCalcCRC@u8length 000F  
                                                   LightStatusLed@blink 0008  
                                                          ??_getHourMin 0008  
                                                           _curEventNum 006F  
                                                        ?_PortAvailable 0001  
                                                     _buzzeEscaladeTime 00C5  
                                                              InitApp@i 0007  
                                                           _globalHours 0071  
                                                             main@curMs 00F2  
                                           __size_of_ModbusSendTxBuffer 004C  
                                                     _ModbusProcess_FC1 19C6  
                                                     _ModbusProcess_FC3 2150  
                                                     _ModbusProcess_FC5 22BC  
                                                     _ModbusProcess_FC6 267A  
                                                           _INTCON2bits 000FF1  
                                                             copy_data0 2560  
                                                        _nightStartHour 00D3  
                                                    ?_ModbusProcess_FC1 0016  
                                                    ?_ModbusProcess_FC3 0016  
                                                    ?_ModbusProcess_FC5 0001  
                                                    ?_ModbusProcess_FC6 0016  
                                                              _LightLed 11FC  
                                                    __end_of_getHourMin 2A9E  
                                                 ModbusPoll@u8exception 0034  
                                                      _SwitchOffAllLeds 2AC8  
                                                      __size_of_GetTime 0008  
                                                             io_poll@v1 00E2  
                                                      __size_of_InitApp 0086  
                                                              __Hrparam 0000  
                                                              __u32time 00A0  
                                                         getHourMin@min 0007  
                                                   ??_ModbusProcess_FC1 0018  
                                                   ??_ModbusProcess_FC3 0019  
                                                   ??_ModbusProcess_FC5 0016  
                                                   ??_ModbusProcess_FC6 0019  
                                                 __end_of_ModbusCalcCRC 260C  
                                                              __Lrparam 0000  
                                                      __size_of_SetTime 001E  
                                                           ??_PortBegin 0007  
                                                ModbusProcess_FC15@regs 0027  
                                                              _PortRead 2A0E  
                                                ModbusProcess_FC16@regs 0016  
                                                ModbusProcess_FC16@temp 001D  
                                                      _eventResetSecond 00A8  
                                                           ??_PortWrite 000A  
                                                         Modbus@u8serno 000C  
                                                      __size_of___lwdiv 0054  
                                                      __size_of___lwmod 0048  
                                     ModbusProcess_FC3@u8CopyBufferSize 001D  
                                                             millis@ret 000B  
                                         ModbusProcess_FC1@u16StartCoil 0020  
                                                 __size_of_ProcessDiary 00BE  
                                                           _isleap$2090 000F  
                                                       _SetTimeFromRegs 1FD0  
                                                           _currentTime 00D4  
                                                      __size_of_io_poll 0652  
                                                              _diffTime 00A4  
                                             __end_of_ModbusProcess_FC1 1AF8  
                                             __end_of_ModbusProcess_FC3 220A  
                                             __end_of_ModbusProcess_FC5 2364  
                                             __end_of_ModbusProcess_FC6 26DC  
                                         __size_of_ModbusBuildException 0020  
                                                       ___lwdiv@divisor 0009  
                                                    io_poll@lastAddress 00E6  
                                                       ___lwdiv@counter 000B  
                                                              _ledBlink 0080  
                                                      __size_of_low_isr 0068  
                                                              __ptext10 2878  
                                                              __ptext11 2B0E  
                                                              __ptext20 0F8A  
                                                              __ptext12 2B2C  
                                                              __ptext21 2906  
                                                              __ptext13 1E0A  
                                                              __ptext30 267A  
                                                              __ptext22 2092  
                                                              __ptext14 2A44  
                                                              __ptext31 22BC  
                                                              __ptext23 2AC8  
                                                              __ptext15 1D0A  
                                                              __ptext40 29D0  
                                                              __ptext32 2150  
                                                              __ptext24 2408  
                                                              __ptext16 26DC  
                                                              __ptext41 2598  
                                                              __ptext33 220A  
                                                              __ptext25 2A72  
                                                              __ptext17 2B62  
                                                              __ptext50 2B9C  
                                                              __ptext42 294C  
                                                              __ptext34 260C  
                                                              __ptext26 11FC  
                                                              __ptext18 2B76  
                                                              __ptext43 2A0E  
                                                              __ptext35 1F00  
                                                              __ptext27 2BBA  
                                                              __ptext19 2990  
                                                              __ptext44 2BC2  
                                                              __ptext36 1AF8  
                                                              __ptext28 1866  
                                                              __ptext45 2AEE  
                                                              __ptext37 19C6  
                                                              __ptext29 144C  
                                                              __ptext46 248E  
                                                              __ptext38 282C  
                                                              __ptext47 2B48  
                                                              __ptext39 2A9E  
                                                              __ptext48 2BAC  
                                                              __ptext49 2BCA  
                                                              _high_isr 0008  
                                                    io_poll@lastCommand 00E3  
                                                    io_poll@eventEeAddr 00E1  
                                                         __size_of_main 01F2  
                                                  _ModbusGetLastCommand 2A44  
                                          __size_of_ConfigureOscillator 0006  
                                                          _ProcessDiary 2092  
                                             SetTimeFromRegs@newRawTime 0049  
                                                              int$flags 0072  
                                                      ??_months_to_days 0010  
                                                              _pwm_init 2B8A  
                                                       ??_PortAvailable 0007  
                                                              main@hour 00F1  
                                                      LightLed@ledState 0007  
                                                    _ymd_to_scalar$2103 0028  
                                                            _INTCONbits 000FF2  
                                                       _eveningTimeHour 00CF  
                                               __size_of_InitFromEeprom 0100  
                                                ProcessLightBlock@curMs 000C  
                                                __size_of_years_to_days 0102  
                                                              isleap@yr 000C  
                                                 ModbusProcess_FC1@regs 0016  
                                                 ModbusProcess_FC3@regs 0016  
                                                              intlevel1 2BD8  
                                                              intlevel2 2BD8  
                                                 ModbusProcess_FC5@regs 001F  
                                                 ModbusProcess_FC6@regs 0016  
                                                          PortWrite@buf 0007  
                                                      ___lwmod@dividend 0007  
                                                 ?_ModbusGetLastCommand 0007  
                                                              mktime@tt 0040  
                                                              low_isr@c 0006  
                                                   ymd_to_scalar@scalar 002A  
                                           __size_of_ModbusProcess_FC21 00B2  
                                           __size_of_ModbusProcess_FC15 0110  
                                           __size_of_ModbusProcess_FC16 00D0  
                                           __size_of_ModbusProcess_FC17 006E  
                                                     _ProcessLightBlock 0F8A  
                                                 __MODBUSDiscreteInputs 00B4  
                                                __size_of_LoadNextEvent 0086  
                                                    ?_ProcessLightBlock 0001  
                                               __end_of_SetTimeFromRegs 2092  
                                                 __end_of_SetBuzzerDuty 2734  
                                                   ModbusPoll@u8current 0032  
                                                   ??_ProcessLightBlock 0008  
                                                       ___lwmod@divisor 0009  
                                                       ___lwmod@counter 000B  
                                                _buzzerStartDurationDiv 00CA  
                                                        _curEventMinute 00CC  
                                            __size_of_ModbusProcess_FC1 0132  
                                            __size_of_ModbusProcess_FC3 00BA  
                                            __size_of_ModbusProcess_FC5 00A8  
                                            __size_of_ModbusProcess_FC6 0062  
                                               __size_of_InitUartBuffer 000E  
                                                    ModbusCalcCRC@temp2 000B  
                                           ModbusValidateRequest@u8regs 0026  
                                             ModbusProcess_FC15@u16coil 001B  
                                               __size_of_LightStatusLed 00F6  
                                                   ModbusInit@u8txenpin 0008  
                                                     ModbusCalcCRC@flag 000D  
                                                     ModbusCalcCRC@temp 0012  
                                             __end_of_ProcessLightBlock 11FC  
                                               ??_ModbusValidateRequest 0014  
                                            ModbusPoll@holdingRegsCount 0031  
                                            ModbusProcess_FC15@u8bitsno 0028  
                                                       _morningTimeHour 00D1  
