

Microchip Technology PIC18 PRO Macro Assembler V1.37 build -260352376 
                                                                                               Tue May 10 17:57:14 2016

Microchip Technology Omniscient Code Generator v1.37 (PRO mode) build 201603110536
     1                           	processor	18F252
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	eeprom_data,global,class=EEDATA,delta=1
     6                           	psect	idataCOMRAM,global,class=CODE,delta=1
     7                           	psect	idataBANK0,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    70                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    71                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    72                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    73                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    74                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    75  0000                     
    76                           	psect	eeprom_data
    77  F00000  11 0A 80 0F 80 FF 01 04 	db	17,10,128,15,128,255,1,4	;# 
    78  F00008  10 03 FF 15 17 09 0B 06 	db	16,3,255,21,23,9,11,6	;# 
    79  F00010  09 00 01 30 20 00 00 00 	db	9,0,1,48,32,0,0,0	;# 
    80  0000                     
    81                           	psect	idataCOMRAM
    82  002686                     __pidataCOMRAM:
    83                           	opt stack 0
    84                           
    85                           ;initializer for _curEventNum
    86  002686  FF                 	db	255
    87                           
    88                           ;initializer for _globalHours
    89  002687  FF                 	db	255
    90                           
    91                           ;initializer for _oldEventNum
    92  002688  FF                 	db	255
    93                           
    94                           	psect	idataBANK0
    95  002682                     __pidataBANK0:
    96                           	opt stack 0
    97                           
    98                           ;initializer for _buzzerOnOffDuration
    99  002682  0100               	dw	256
   100                           
   101                           ;initializer for _buzzerOnOffPeriod
   102  002684  0400               	dw	1024
   103                           
   104                           	psect	mediumconst
   105  007D9C                     __pmediumconst:
   106                           	opt stack 0
   107  007D9C  00                 	db	0
   108  007D9D                     _fctsupported:
   109                           	opt stack 0
   110  007D9D  01                 	db	1
   111  007D9E  02                 	db	2
   112  007D9F  03                 	db	3
   113  007DA0  04                 	db	4
   114  007DA1  05                 	db	5
   115  007DA2  06                 	db	6
   116  007DA3  0F                 	db	15
   117  007DA4  10                 	db	16
   118  007DA5  15                 	db	21
   119  007DA6                     __end_of_fctsupported:
   120                           	opt stack 0
   121  0000                     _CCP1CONbits	set	4029
   122  0000                     _CCPR1L	set	4030
   123  0000                     _EEADR	set	4009
   124  0000                     _EECON2	set	4007
   125  0000                     _EEDATA	set	4008
   126  0000                     _INTCON2bits	set	4081
   127  0000                     _INTCONbits	set	4082
   128  0000                     _IPR1bits	set	3999
   129  0000                     _LATA	set	3977
   130  0000                     _LATAbits	set	3977
   131  0000                     _LATB	set	3978
   132  0000                     _LATCbits	set	3979
   133  0000                     _PIE1bits	set	3997
   134  0000                     _PIR1bits	set	3998
   135  0000                     _PORTCbits	set	3970
   136  0000                     _PR2	set	4043
   137  0000                     _RCONbits	set	4048
   138  0000                     _RCREG	set	4014
   139  0000                     _RCSTA	set	4011
   140  0000                     _RCSTAbits	set	4011
   141  0000                     _SPBRG	set	4015
   142  0000                     _T0CONbits	set	4053
   143  0000                     _T1CONbits	set	4045
   144  0000                     _T2CONbits	set	4042
   145  0000                     _TMR0H	set	4055
   146  0000                     _TMR0L	set	4054
   147  0000                     _TMR1H	set	4047
   148  0000                     _TMR1L	set	4046
   149  0000                     _TRISAbits	set	3986
   150  0000                     _TRISB	set	3987
   151  0000                     _TRISCbits	set	3988
   152  0000                     _TXREG	set	4013
   153  0000                     _TXSTA	set	4012
   154  0000                     _TXSTAbits	set	4012
   155  0000                     _CARRY	set	32448
   156  0000                     _GIE	set	32663
   157  0000                     _RCIF	set	31989
   158  0000                     _RD	set	32048
   159  0000                     _TRMT	set	32097
   160  0000                     _WR	set	32049
   161  0000                     _WREN	set	32050
   162  007DA6                     STR_3:
   163  007DA6  54                 	db	84	;'T'
   164  007DA7  61                 	db	97	;'a'
   165  007DA8  62                 	db	98	;'b'
   166  007DA9  6C                 	db	108	;'l'
   167  007DAA  6F                 	db	111	;'o'
   168  007DAB  20                 	db	32
   169  007DAC  73                 	db	115	;'s'
   170  007DAD  20                 	db	32
   171  007DAE  72                 	db	114	;'r'
   172  007DAF  61                 	db	97	;'a'
   173  007DB0  73                 	db	115	;'s'
   174  007DB1  70                 	db	112	;'p'
   175  007DB2  69                 	db	105	;'i'
   176  007DB3  73                 	db	115	;'s'
   177  007DB4  61                 	db	97	;'a'
   178  007DB5  6E                 	db	110	;'n'
   179  007DB6  69                 	db	105	;'i'
   180  007DB7  65                 	db	101	;'e'
   181  007DB8  6D                 	db	109	;'m'
   182  007DB9  00                 	db	0
   183                           
   184                           ; #config settings
   185  007DBA  00                 	db	0	; dummy byte at the end
   186  0000                     
   187                           	psect	cinit
   188  002054                     __pcinit:
   189                           	opt stack 0
   190  002054                     start_initialization:
   191                           	opt stack 0
   192  002054                     __initialization:
   193                           	opt stack 0
   194                           
   195                           ; Clear objects allocated to BANK2 (256 bytes)
   196  002054  EE02  F000         	lfsr	0,__pbssBANK2
   197  002058  EE11 F000          	lfsr	1,256
   198  00205C                     clear_0:
   199  00205C  6AEE               	clrf	postinc0,c
   200  00205E  50E5               	movf	postdec1,w,c
   201  002060  50E1               	movf	fsr1l,w,c
   202  002062  E1FC               	bnz	clear_0
   203  002064  50E2               	movf	fsr1h,w,c
   204  002066  E1FA               	bnz	clear_0
   205                           
   206                           ; Clear objects allocated to BANK1 (200 bytes)
   207  002068  EE01  F000         	lfsr	0,__pbssBANK1
   208  00206C  0EC8               	movlw	200
   209  00206E                     clear_1:
   210  00206E  6AEE               	clrf	postinc0,c
   211  002070  06E8               	decf	wreg,f,c
   212  002072  E1FD               	bnz	clear_1
   213                           
   214                           ; Clear objects allocated to BANK0 (89 bytes)
   215  002074  EE00  F080         	lfsr	0,__pbssBANK0
   216  002078  0E59               	movlw	89
   217  00207A                     clear_2:
   218  00207A  6AEE               	clrf	postinc0,c
   219  00207C  06E8               	decf	wreg,f,c
   220  00207E  E1FD               	bnz	clear_2
   221                           
   222                           ; Clear objects allocated to COMRAM (8 bytes)
   223  002080  EE00  F06F         	lfsr	0,__pbssCOMRAM
   224  002084  0E08               	movlw	8
   225  002086                     clear_3:
   226  002086  6AEE               	clrf	postinc0,c
   227  002088  06E8               	decf	wreg,f,c
   228  00208A  E1FD               	bnz	clear_3
   229                           
   230                           ; Initialize objects allocated to BANK0 (4 bytes)
   231                           ; load TBLPTR registers with __pidataBANK0
   232  00208C  0E82               	movlw	low __pidataBANK0
   233  00208E  6EF6               	movwf	tblptrl,c
   234  002090  0E26               	movlw	high __pidataBANK0
   235  002092  6EF7               	movwf	tblptrh,c
   236  002094  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   237  002096  6EF8               	movwf	tblptru,c
   238  002098  EE00  F0ED         	lfsr	0,__pdataBANK0
   239  00209C  EE10 F004          	lfsr	1,4
   240  0020A0                     copy_data0:
   241  0020A0  0009               	tblrd		*+
   242  0020A2  CFF5 FFEE          	movff	tablat,postinc0
   243  0020A6  50E5               	movf	postdec1,w,c
   244  0020A8  50E1               	movf	fsr1l,w,c
   245  0020AA  E1FA               	bnz	copy_data0
   246                           
   247                           ; Initialize objects allocated to COMRAM (3 bytes)
   248                           ; load TBLPTR registers with __pidataCOMRAM
   249  0020AC  0E86               	movlw	low __pidataCOMRAM
   250  0020AE  6EF6               	movwf	tblptrl,c
   251  0020B0  0E26               	movlw	high __pidataCOMRAM
   252  0020B2  6EF7               	movwf	tblptrh,c
   253  0020B4  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   254  0020B6  6EF8               	movwf	tblptru,c
   255  0020B8  0009               	tblrd		*+	;fetch initializer
   256  0020BA  CFF5 F077          	movff	tablat,__pdataCOMRAM
   257  0020BE  0009               	tblrd		*+	;fetch initializer
   258  0020C0  CFF5 F078          	movff	tablat,__pdataCOMRAM+1
   259  0020C4  0009               	tblrd		*+	;fetch initializer
   260  0020C6  CFF5 F079          	movff	tablat,__pdataCOMRAM+2
   261  0020CA                     end_of_initialization:
   262                           	opt stack 0
   263  0020CA                     __end_of__initialization:
   264                           	opt stack 0
   265  0020CA  907A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   266  0020CC  927A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   267  0020CE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   268  0020D0  6EF8               	movwf	tblptru,c
   269  0020D2  0100               	movlb	0
   270  0020D4  EF2F  F003         	goto	_main	;jump to C main() function
   271                           tblptru	equ	0xFF8
   272                           tblptrh	equ	0xFF7
   273                           tblptrl	equ	0xFF6
   274                           tablat	equ	0xFF5
   275                           postinc0	equ	0xFEE
   276                           wreg	equ	0xFE8
   277                           postdec1	equ	0xFE5
   278                           fsr1h	equ	0xFE2
   279                           fsr1l	equ	0xFE1
   280                           
   281                           	psect	bssCOMRAM
   282  00006F                     __pbssCOMRAM:
   283                           	opt stack 0
   284  00006F                     _UartBufferLen:
   285                           	opt stack 0
   286  00006F                     	ds	1
   287  000070                     _UartBufferTail:
   288                           	opt stack 0
   289  000070                     	ds	1
   290  000071                     __u8BufferSize:
   291                           	opt stack 0
   292  000071                     	ds	1
   293  000072                     _blinkOn:
   294                           	opt stack 0
   295  000072                     	ds	1
   296  000073                     _buzzeLoudDuration:
   297                           	opt stack 0
   298  000073                     	ds	1
   299  000074                     _buzzerAlarmPeriod:
   300                           	opt stack 0
   301  000074                     	ds	1
   302  000075                     _eventCount:
   303                           	opt stack 0
   304  000075                     	ds	1
   305  000076                     _globalMinutes:
   306                           	opt stack 0
   307  000076                     	ds	1
   308                           tblptru	equ	0xFF8
   309                           tblptrh	equ	0xFF7
   310                           tblptrl	equ	0xFF6
   311                           tablat	equ	0xFF5
   312                           postinc0	equ	0xFEE
   313                           wreg	equ	0xFE8
   314                           postdec1	equ	0xFE5
   315                           fsr1h	equ	0xFE2
   316                           fsr1l	equ	0xFE1
   317                           
   318                           	psect	dataCOMRAM
   319  000077                     __pdataCOMRAM:
   320                           	opt stack 0
   321  000077                     _curEventNum:
   322                           	opt stack 0
   323  000077                     	ds	1
   324  000078                     _globalHours:
   325                           	opt stack 0
   326  000078                     	ds	1
   327  000079                     _oldEventNum:
   328                           	opt stack 0
   329  000079                     	ds	1
   330                           tblptru	equ	0xFF8
   331                           tblptrh	equ	0xFF7
   332                           tblptrl	equ	0xFF6
   333                           tablat	equ	0xFF5
   334                           postinc0	equ	0xFEE
   335                           wreg	equ	0xFE8
   336                           postdec1	equ	0xFE5
   337                           fsr1h	equ	0xFE2
   338                           fsr1l	equ	0xFE1
   339                           
   340                           	psect	bssBANK0
   341  000080                     __pbssBANK0:
   342                           	opt stack 0
   343  000080                     _ledBlink:
   344                           	opt stack 0
   345  000080                     	ds	16
   346  000090                     _ledStatuses:
   347                           	opt stack 0
   348  000090                     	ds	16
   349  0000A0                     __u32time:
   350                           	opt stack 0
   351  0000A0                     	ds	4
   352  0000A4                     _diffTime:
   353                           	opt stack 0
   354  0000A4                     	ds	4
   355  0000A8                     _eventResetSecond:
   356                           	opt stack 0
   357  0000A8                     	ds	4
   358  0000AC                     _millisecondsFromStart:
   359                           	opt stack 0
   360  0000AC                     	ds	4
   361  0000B0                     _oldBlinkOnTime:
   362                           	opt stack 0
   363  0000B0                     	ds	4
   364  0000B4                     __MODBUSDiscreteInputs:
   365                           	opt stack 0
   366  0000B4                     	ds	2
   367  0000B6                     __lastAddress:
   368                           	opt stack 0
   369  0000B6                     	ds	2
   370  0000B8                     __lastCount:
   371                           	opt stack 0
   372  0000B8                     	ds	2
   373  0000BA                     _blinkDuration:
   374                           	opt stack 0
   375  0000BA                     	ds	2
   376  0000BC                     _blinkPeriod:
   377                           	opt stack 0
   378  0000BC                     	ds	2
   379  0000BE                     _IsBusserOn:
   380                           	opt stack 0
   381  0000BE                     	ds	1
   382  0000BF                     _UartBufferHead:
   383                           	opt stack 0
   384  0000BF                     	ds	1
   385  0000C0                     __6sCounter:
   386                           	opt stack 0
   387  0000C0                     	ds	1
   388  0000C1                     __holdingRegsCount:
   389                           	opt stack 0
   390  0000C1                     	ds	1
   391  0000C2                     __inputRegsCount:
   392                           	opt stack 0
   393  0000C2                     	ds	1
   394  0000C3                     __u8id:
   395                           	opt stack 0
   396  0000C3                     	ds	1
   397  0000C4                     __u8lastRec:
   398                           	opt stack 0
   399  0000C4                     	ds	1
   400  0000C5                     _buzzeEscaladeTime:
   401                           	opt stack 0
   402  0000C5                     	ds	1
   403  0000C6                     _buzzeQuietDuration:
   404                           	opt stack 0
   405  0000C6                     	ds	1
   406  0000C7                     _buzzerInfoPeriod:
   407                           	opt stack 0
   408  0000C7                     	ds	1
   409  0000C8                     _buzzerStartDurationDiv:
   410                           	opt stack 0
   411  0000C8                     	ds	1
   412  0000C9                     _curEventHour:
   413                           	opt stack 0
   414  0000C9                     	ds	1
   415  0000CA                     _curEventMinute:
   416                           	opt stack 0
   417  0000CA                     	ds	1
   418  0000CB                     _curEventType:
   419                           	opt stack 0
   420  0000CB                     	ds	1
   421  0000CC                     _currentLedBlock:
   422                           	opt stack 0
   423  0000CC                     	ds	1
   424  0000CD                     _eveningTimeHour:
   425                           	opt stack 0
   426  0000CD                     	ds	1
   427  0000CE                     _eventAcceptTime:
   428                           	opt stack 0
   429  0000CE                     	ds	1
   430  0000CF                     _morningTimeHour:
   431                           	opt stack 0
   432  0000CF                     	ds	1
   433  0000D0                     _nightEndHour:
   434                           	opt stack 0
   435  0000D0                     	ds	1
   436  0000D1                     _nightStartHour:
   437                           	opt stack 0
   438  0000D1                     	ds	1
   439  0000D2                     _currentTime:
   440                           	opt stack 0
   441  0000D2                     	ds	4
   442  0000D6                     __MODBUSCoils:
   443                           	opt stack 0
   444  0000D6                     	ds	2
   445  0000D8                     __lastCommand:
   446                           	opt stack 0
   447  0000D8                     	ds	1
   448                           tblptru	equ	0xFF8
   449                           tblptrh	equ	0xFF7
   450                           tblptrl	equ	0xFF6
   451                           tablat	equ	0xFF5
   452                           postinc0	equ	0xFEE
   453                           wreg	equ	0xFE8
   454                           postdec1	equ	0xFE5
   455                           fsr1h	equ	0xFE2
   456                           fsr1l	equ	0xFE1
   457                           
   458                           	psect	dataBANK0
   459  0000ED                     __pdataBANK0:
   460                           	opt stack 0
   461  0000ED                     _buzzerOnOffDuration:
   462                           	opt stack 0
   463  0000ED                     	ds	2
   464  0000EF                     _buzzerOnOffPeriod:
   465                           	opt stack 0
   466  0000EF                     	ds	2
   467                           tblptru	equ	0xFF8
   468                           tblptrh	equ	0xFF7
   469                           tblptrl	equ	0xFF6
   470                           tablat	equ	0xFF5
   471                           postinc0	equ	0xFEE
   472                           wreg	equ	0xFE8
   473                           postdec1	equ	0xFE5
   474                           fsr1h	equ	0xFE2
   475                           fsr1l	equ	0xFE1
   476                           
   477                           	psect	bssBANK1
   478  000100                     __pbssBANK1:
   479                           	opt stack 0
   480  000100                     __au8Buffer:
   481                           	opt stack 0
   482  000100                     	ds	140
   483  00018C                     __MODBUSHoldingRegs:
   484                           	opt stack 0
   485  00018C                     	ds	30
   486  0001AA                     __MODBUSInputRegs:
   487                           	opt stack 0
   488  0001AA                     	ds	30
   489                           tblptru	equ	0xFF8
   490                           tblptrh	equ	0xFF7
   491                           tblptrl	equ	0xFF6
   492                           tablat	equ	0xFF5
   493                           postinc0	equ	0xFEE
   494                           wreg	equ	0xFE8
   495                           postdec1	equ	0xFE5
   496                           fsr1h	equ	0xFE2
   497                           fsr1l	equ	0xFE1
   498                           
   499                           	psect	bssBANK2
   500  000200                     __pbssBANK2:
   501                           	opt stack 0
   502  000200                     _UartRingBuffer:
   503                           	opt stack 0
   504  000200                     	ds	256
   505                           tblptru	equ	0xFF8
   506                           tblptrh	equ	0xFF7
   507                           tblptrl	equ	0xFF6
   508                           tablat	equ	0xFF5
   509                           postinc0	equ	0xFEE
   510                           wreg	equ	0xFE8
   511                           postdec1	equ	0xFE5
   512                           fsr1h	equ	0xFE2
   513                           fsr1l	equ	0xFE1
   514                           
   515                           	psect	cstackBANK0
   516  0000D9                     __pcstackBANK0:
   517                           	opt stack 0
   518  0000D9                     ??_main:
   519                           
   520                           ; 1 bytes @ 0x0
   521  0000D9                     	ds	5
   522  0000DE                     main@lastMs:
   523                           	opt stack 0
   524                           
   525                           ; 4 bytes @ 0x5
   526  0000DE                     	ds	4
   527  0000E2                     main@oldBuzzerOnTime:
   528                           	opt stack 0
   529                           
   530                           ; 4 bytes @ 0x9
   531  0000E2                     	ds	4
   532  0000E6                     main@oldMinute:
   533                           	opt stack 0
   534                           
   535                           ; 1 bytes @ 0xD
   536  0000E6                     	ds	1
   537  0000E7                     main@hour:
   538                           	opt stack 0
   539                           
   540                           ; 1 bytes @ 0xE
   541  0000E7                     	ds	1
   542  0000E8                     main@curMs:
   543                           	opt stack 0
   544                           
   545                           ; 4 bytes @ 0xF
   546  0000E8                     	ds	4
   547  0000EC                     main@minute:
   548                           	opt stack 0
   549                           
   550                           ; 1 bytes @ 0x13
   551  0000EC                     	ds	1
   552                           tblptru	equ	0xFF8
   553                           tblptrh	equ	0xFF7
   554                           tblptrl	equ	0xFF6
   555                           tablat	equ	0xFF5
   556                           postinc0	equ	0xFEE
   557                           wreg	equ	0xFE8
   558                           postdec1	equ	0xFE5
   559                           fsr1h	equ	0xFE2
   560                           fsr1l	equ	0xFE1
   561                           
   562                           	psect	cstackCOMRAM
   563  000001                     __pcstackCOMRAM:
   564                           	opt stack 0
   565  000001                     ??_high_isr:
   566  000001                     
   567                           ; 1 bytes @ 0x0
   568  000001                     	ds	2
   569  000003                     high_isr@c:
   570                           	opt stack 0
   571                           
   572                           ; 1 bytes @ 0x2
   573  000003                     	ds	1
   574  000004                     ??_low_isr:
   575                           
   576                           ; 1 bytes @ 0x3
   577  000004                     	ds	1
   578  000005                     ?_ModbusCalcCRC:
   579                           	opt stack 0
   580  000005                     ?___lwdiv:
   581                           	opt stack 0
   582  000005                     ?___lwmod:
   583                           	opt stack 0
   584  000005                     ?_millis:
   585                           	opt stack 0
   586  000005                     PortRead@ret:
   587                           	opt stack 0
   588  000005                     getHourMin@min:
   589                           	opt stack 0
   590  000005                     SetHourMin@newMin:
   591                           	opt stack 0
   592  000005                     UpdateLedRegister@regIndex:
   593                           	opt stack 0
   594  000005                     SwitchOffAllLeds@i:
   595                           	opt stack 0
   596  000005                     LightLed@ledState:
   597                           	opt stack 0
   598  000005                     LightStatusLed@on:
   599                           	opt stack 0
   600  000005                     InitApp@i:
   601                           	opt stack 0
   602  000005                     SetTime@newTime:
   603                           	opt stack 0
   604  000005                     ModbusInit@u8serno:
   605                           	opt stack 0
   606  000005                     ModbusBuildException@u8exception:
   607                           	opt stack 0
   608  000005                     ModbusGetLastCommand@count:
   609                           	opt stack 0
   610  000005                     PortWrite@buf:
   611                           	opt stack 0
   612  000005                     SetBuzzerDuty@dc:
   613                           	opt stack 0
   614  000005                     ___lwdiv@dividend:
   615                           	opt stack 0
   616  000005                     ___lwmod@dividend:
   617                           	opt stack 0
   618                           
   619                           ; 2 bytes @ 0x4
   620  000005                     	ds	1
   621  000006                     ??_ModbusGetRxBuffer:
   622  000006                     ??_ProcessLightBlock:
   623  000006                     getHourMin@hour:
   624                           	opt stack 0
   625  000006                     SetHourMin@newHour:
   626                           	opt stack 0
   627  000006                     LightLed@blink:
   628                           	opt stack 0
   629  000006                     LightStatusLed@blink:
   630                           	opt stack 0
   631  000006                     ModbusInit@u8txenpin:
   632                           	opt stack 0
   633  000006                     ModbusBuildException@u8func:
   634                           	opt stack 0
   635                           
   636                           ; 1 bytes @ 0x5
   637  000006                     	ds	1
   638  000007                     ??_LoadNextEvent:
   639  000007                     ??_ModbusCalcCRC:
   640  000007                     ??_LightLed:
   641  000007                     ??_LightStatusLed:
   642  000007                     ??_SetBuzzerDuty:
   643  000007                     PortWrite@buflen:
   644                           	opt stack 0
   645  000007                     ModbusGetRxBuffer@bBuffOverflow:
   646                           	opt stack 0
   647  000007                     ModbusGetLastCommand@address:
   648                           	opt stack 0
   649  000007                     ___lwdiv@divisor:
   650                           	opt stack 0
   651  000007                     ___lwmod@divisor:
   652                           	opt stack 0
   653                           
   654                           ; 2 bytes @ 0x6
   655  000007                     	ds	1
   656  000008                     PortWrite@i:
   657                           	opt stack 0
   658                           
   659                           ; 1 bytes @ 0x7
   660  000008                     	ds	1
   661  000009                     LoadNextEvent@v1:
   662                           	opt stack 0
   663  000009                     ModbusInit@u8id:
   664                           	opt stack 0
   665  000009                     ___lwmod@counter:
   666                           	opt stack 0
   667  000009                     ModbusCalcCRC@temp2:
   668                           	opt stack 0
   669  000009                     ___lwdiv@quotient:
   670                           	opt stack 0
   671  000009                     millis@ret:
   672                           	opt stack 0
   673                           
   674                           ; 4 bytes @ 0x8
   675  000009                     	ds	1
   676  00000A                     ?_isleap:
   677                           	opt stack 0
   678  00000A                     LightLed@ledNum:
   679                           	opt stack 0
   680  00000A                     ProcessLightBlock@curMs:
   681                           	opt stack 0
   682  00000A                     LoadNextEvent@hour:
   683                           	opt stack 0
   684  00000A                     Modbus@u8serno:
   685                           	opt stack 0
   686  00000A                     isleap@yr:
   687                           	opt stack 0
   688                           
   689                           ; 2 bytes @ 0x9
   690  00000A                     	ds	1
   691  00000B                     LightLed@ststusIndex:
   692                           	opt stack 0
   693  00000B                     LoadNextEvent@minute:
   694                           	opt stack 0
   695  00000B                     Modbus@u8txenpin:
   696                           	opt stack 0
   697  00000B                     ___lwdiv@counter:
   698                           	opt stack 0
   699  00000B                     ModbusCalcCRC@flag:
   700                           	opt stack 0
   701                           
   702                           ; 2 bytes @ 0xA
   703  00000B                     	ds	1
   704  00000C                     ??_isleap:
   705  00000C                     ?_months_to_days:
   706                           	opt stack 0
   707  00000C                     ?_years_to_days:
   708                           	opt stack 0
   709  00000C                     LightLed@statusShift:
   710                           	opt stack 0
   711  00000C                     LightStatusLed@row:
   712                           	opt stack 0
   713  00000C                     Modbus@u8id:
   714                           	opt stack 0
   715  00000C                     months_to_days@month:
   716                           	opt stack 0
   717  00000C                     years_to_days@yr:
   718                           	opt stack 0
   719                           
   720                           ; 2 bytes @ 0xB
   721  00000C                     	ds	1
   722  00000D                     ??_InitFromEeprom:
   723  00000D                     ??_ResetEvent:
   724  00000D                     ??_ProcessDiary:
   725  00000D                     ModbusCalcCRC@u8length:
   726                           	opt stack 0
   727  00000D                     _isleap$2110:
   728                           	opt stack 0
   729                           
   730                           ; 1 bytes @ 0xC
   731  00000D                     	ds	1
   732  00000E                     ??_months_to_days:
   733  00000E                     ModbusCalcCRC@i:
   734                           	opt stack 0
   735                           
   736                           ; 1 bytes @ 0xD
   737  00000E                     	ds	1
   738  00000F                     ResetEvent@state:
   739                           	opt stack 0
   740  00000F                     ModbusCalcCRC@j:
   741                           	opt stack 0
   742                           
   743                           ; 1 bytes @ 0xE
   744  00000F                     	ds	1
   745  000010                     ??_years_to_days:
   746  000010                     _ResetEvent$826:
   747                           	opt stack 0
   748  000010                     ModbusCalcCRC@temp:
   749                           	opt stack 0
   750                           
   751                           ; 2 bytes @ 0xF
   752  000010                     	ds	1
   753  000011                     ProcessDiary@hour:
   754                           	opt stack 0
   755                           
   756                           ; 1 bytes @ 0x10
   757  000011                     	ds	1
   758  000012                     ??_ModbusValidateRequest:
   759  000012                     ProcessDiary@minute:
   760                           	opt stack 0
   761  000012                     ModbusSendTxBuffer@u16crc:
   762                           	opt stack 0
   763                           
   764                           ; 2 bytes @ 0x11
   765  000012                     	ds	2
   766  000014                     ??_ModbusProcess_FC5:
   767  000014                     ??_ModbusProcess_FC15:
   768  000014                     ??_ModbusProcess_FC21:
   769  000014                     ModbusProcess_FC17@u8CopyBufferSize:
   770                           	opt stack 0
   771  000014                     ModbusProcess_FC1@regs:
   772                           	opt stack 0
   773  000014                     ModbusProcess_FC3@regs:
   774                           	opt stack 0
   775  000014                     ModbusProcess_FC6@regs:
   776                           	opt stack 0
   777  000014                     ModbusProcess_FC16@regs:
   778                           	opt stack 0
   779                           
   780                           ; 2 bytes @ 0x13
   781  000014                     	ds	1
   782  000015                     ModbusProcess_FC17@i:
   783                           	opt stack 0
   784                           
   785                           ; 1 bytes @ 0x14
   786  000015                     	ds	1
   787  000016                     ??_ModbusProcess_FC1:
   788  000016                     ModbusProcess_FC3@u8size:
   789                           	opt stack 0
   790  000016                     ModbusProcess_FC6@u8size:
   791                           	opt stack 0
   792  000016                     ModbusProcess_FC16@u8size:
   793                           	opt stack 0
   794  000016                     ModbusProcess_FC21@requestDataLen:
   795                           	opt stack 0
   796  000016                     ModbusValidateRequest@startAddrBytes:
   797                           	opt stack 0
   798                           
   799                           ; 4 bytes @ 0x15
   800  000016                     	ds	1
   801  000017                     ??_ModbusProcess_FC3:
   802  000017                     ??_ModbusProcess_FC6:
   803  000017                     ??_ModbusProcess_FC16:
   804  000017                     ModbusProcess_FC21@u8CopyBufferSize:
   805                           	opt stack 0
   806                           
   807                           ; 1 bytes @ 0x16
   808  000017                     	ds	1
   809  000018                     ModbusProcess_FC21@startAddrsBytes:
   810                           	opt stack 0
   811  000018                     years_to_days@ret:
   812                           	opt stack 0
   813                           
   814                           ; 4 bytes @ 0x17
   815  000018                     	ds	1
   816  000019                     ModbusProcess_FC5@u8CopyBufferSize:
   817                           	opt stack 0
   818  000019                     ModbusProcess_FC1@u16coil:
   819                           	opt stack 0
   820  000019                     ModbusProcess_FC6@u16val:
   821                           	opt stack 0
   822  000019                     ModbusProcess_FC15@u16coil:
   823                           	opt stack 0
   824                           
   825                           ; 2 bytes @ 0x18
   826  000019                     	ds	1
   827  00001A                     ModbusProcess_FC5@u16coil:
   828                           	opt stack 0
   829  00001A                     ModbusProcess_FC21@recLenBytes:
   830                           	opt stack 0
   831  00001A                     ModbusValidateRequest@recLenBytes:
   832                           	opt stack 0
   833                           
   834                           ; 4 bytes @ 0x19
   835  00001A                     	ds	1
   836  00001B                     ModbusProcess_FC1@u8currentBit:
   837                           	opt stack 0
   838  00001B                     ModbusProcess_FC3@u8CopyBufferSize:
   839                           	opt stack 0
   840  00001B                     ModbusProcess_FC6@u8CopyBufferSize:
   841                           	opt stack 0
   842  00001B                     ModbusProcess_FC15@u8CopyBufferSize:
   843                           	opt stack 0
   844  00001B                     ModbusProcess_FC16@temp:
   845                           	opt stack 0
   846                           
   847                           ; 2 bytes @ 0x1A
   848  00001B                     	ds	1
   849  00001C                     ?_ymd_to_scalar:
   850                           	opt stack 0
   851  00001C                     ModbusProcess_FC1@u8CopyBufferSize:
   852                           	opt stack 0
   853  00001C                     ModbusProcess_FC5@u8currentBit:
   854                           	opt stack 0
   855  00001C                     ModbusProcess_FC15@bTemp:
   856                           	opt stack 0
   857  00001C                     ModbusProcess_FC21@i:
   858                           	opt stack 0
   859  00001C                     ModbusProcess_FC3@u16regsno:
   860                           	opt stack 0
   861  00001C                     ModbusProcess_FC6@u16add:
   862                           	opt stack 0
   863  00001C                     ymd_to_scalar@yr:
   864                           	opt stack 0
   865                           
   866                           ; 2 bytes @ 0x1B
   867  00001C                     	ds	1
   868  00001D                     ModbusProcess_FC1@u8bytesno:
   869                           	opt stack 0
   870  00001D                     ModbusProcess_FC5@regs:
   871                           	opt stack 0
   872  00001D                     ModbusProcess_FC15@u8frameByte:
   873                           	opt stack 0
   874  00001D                     ModbusProcess_FC16@u8CopyBufferSize:
   875                           	opt stack 0
   876                           
   877                           ; 1 bytes @ 0x1C
   878  00001D                     	ds	1
   879  00001E                     ModbusProcess_FC3@u8StartAdd:
   880                           	opt stack 0
   881  00001E                     ModbusValidateRequest@u16MsgCRC:
   882                           	opt stack 0
   883  00001E                     ModbusProcess_FC1@u16StartCoil:
   884                           	opt stack 0
   885  00001E                     ModbusProcess_FC15@u16StartCoil:
   886                           	opt stack 0
   887  00001E                     ModbusProcess_FC16@u16StartAdd:
   888                           	opt stack 0
   889  00001E                     ymd_to_scalar@mo:
   890                           	opt stack 0
   891                           
   892                           ; 2 bytes @ 0x1D
   893  00001E                     	ds	1
   894  00001F                     ModbusProcess_FC3@i:
   895                           	opt stack 0
   896                           
   897                           ; 1 bytes @ 0x1E
   898  00001F                     	ds	1
   899  000020                     ModbusValidateRequest@isSupported:
   900                           	opt stack 0
   901  000020                     ModbusProcess_FC16@u8regsno:
   902                           	opt stack 0
   903  000020                     ModbusProcess_FC1@u16currentCoil:
   904                           	opt stack 0
   905  000020                     ModbusProcess_FC15@u16Coilno:
   906                           	opt stack 0
   907  000020                     ymd_to_scalar@day:
   908                           	opt stack 0
   909                           
   910                           ; 2 bytes @ 0x1F
   911  000020                     	ds	1
   912  000021                     ModbusProcess_FC16@i:
   913                           	opt stack 0
   914  000021                     ModbusValidateRequest@u16count:
   915                           	opt stack 0
   916                           
   917                           ; 2 bytes @ 0x20
   918  000021                     	ds	1
   919  000022                     ??_ymd_to_scalar:
   920  000022                     ModbusProcess_FC1@u8bitsno:
   921                           	opt stack 0
   922  000022                     ModbusProcess_FC15@u16currentCoil:
   923                           	opt stack 0
   924                           
   925                           ; 2 bytes @ 0x21
   926  000022                     	ds	1
   927  000023                     ModbusValidateRequest@i:
   928                           	opt stack 0
   929  000023                     ModbusProcess_FC1@u16Coilno:
   930                           	opt stack 0
   931                           
   932                           ; 2 bytes @ 0x22
   933  000023                     	ds	1
   934  000024                     ModbusValidateRequest@u8regs:
   935                           	opt stack 0
   936  000024                     ModbusProcess_FC15@u8currentBit:
   937                           	opt stack 0
   938                           
   939                           ; 1 bytes @ 0x23
   940  000024                     	ds	1
   941  000025                     ModbusProcess_FC15@regs:
   942                           	opt stack 0
   943  000025                     ModbusValidateRequest@u16regs:
   944                           	opt stack 0
   945                           
   946                           ; 2 bytes @ 0x24
   947  000025                     	ds	1
   948  000026                     ModbusProcess_FC15@u8bitsno:
   949                           	opt stack 0
   950  000026                     _ymd_to_scalar$2123:
   951                           	opt stack 0
   952                           
   953                           ; 2 bytes @ 0x25
   954  000026                     	ds	1
   955  000027                     ModbusPoll@discreteInputs:
   956                           	opt stack 0
   957                           
   958                           ; 2 bytes @ 0x26
   959  000027                     	ds	1
   960  000028                     ymd_to_scalar@scalar:
   961                           	opt stack 0
   962                           
   963                           ; 4 bytes @ 0x27
   964  000028                     	ds	1
   965  000029                     ModbusPoll@coils:
   966                           	opt stack 0
   967                           
   968                           ; 1 bytes @ 0x28
   969  000029                     	ds	1
   970  00002A                     ModbusPoll@inputRegs:
   971                           	opt stack 0
   972                           
   973                           ; 2 bytes @ 0x29
   974  00002A                     	ds	2
   975  00002C                     ?_mktime:
   976                           	opt stack 0
   977  00002C                     ModbusPoll@inputRegsCount:
   978                           	opt stack 0
   979                           
   980                           ; 1 bytes @ 0x2B
   981  00002C                     	ds	1
   982  00002D                     ModbusPoll@holdingRegs:
   983                           	opt stack 0
   984                           
   985                           ; 2 bytes @ 0x2C
   986  00002D                     	ds	2
   987  00002F                     ModbusPoll@holdingRegsCount:
   988                           	opt stack 0
   989                           
   990                           ; 1 bytes @ 0x2E
   991  00002F                     	ds	1
   992  000030                     ??_mktime:
   993  000030                     ModbusPoll@u8current:
   994                           	opt stack 0
   995                           
   996                           ; 1 bytes @ 0x2F
   997  000030                     	ds	1
   998  000031                     ModbusPoll@i8state:
   999                           	opt stack 0
  1000                           
  1001                           ; 1 bytes @ 0x30
  1002  000031                     	ds	1
  1003  000032                     ModbusPoll@u8exception:
  1004                           	opt stack 0
  1005                           
  1006                           ; 1 bytes @ 0x31
  1007  000032                     	ds	12
  1008  00003E                     mktime@tt:
  1009                           	opt stack 0
  1010                           
  1011                           ; 4 bytes @ 0x3D
  1012  00003E                     	ds	4
  1013  000042                     mktime@timeptr:
  1014                           	opt stack 0
  1015                           
  1016                           ; 1 bytes @ 0x41
  1017  000042                     	ds	1
  1018  000043                     SetTimeFromRegs@daySec:
  1019                           	opt stack 0
  1020                           
  1021                           ; 1 bytes @ 0x42
  1022  000043                     	ds	1
  1023  000044                     SetTimeFromRegs@yearMonth:
  1024                           	opt stack 0
  1025                           
  1026                           ; 1 bytes @ 0x43
  1027  000044                     	ds	1
  1028  000045                     ??_SetTimeFromRegs:
  1029                           
  1030                           ; 1 bytes @ 0x44
  1031  000045                     	ds	2
  1032  000047                     SetTimeFromRegs@newRawTime:
  1033                           	opt stack 0
  1034                           
  1035                           ; 4 bytes @ 0x46
  1036  000047                     	ds	4
  1037  00004B                     SetTimeFromRegs@hourMin:
  1038                           	opt stack 0
  1039                           
  1040                           ; 1 bytes @ 0x4A
  1041  00004B                     	ds	1
  1042  00004C                     SetTimeFromRegs@newTime:
  1043                           	opt stack 0
  1044                           
  1045                           ; 18 bytes @ 0x4B
  1046  00004C                     	ds	18
  1047  00005E                     ??_io_poll:
  1048                           
  1049                           ; 1 bytes @ 0x5D
  1050  00005E                     	ds	4
  1051  000062                     io_poll@hourMin:
  1052                           	opt stack 0
  1053                           
  1054                           ; 2 bytes @ 0x61
  1055  000062                     	ds	2
  1056  000064                     io_poll@daySec:
  1057                           	opt stack 0
  1058                           
  1059                           ; 2 bytes @ 0x63
  1060  000064                     	ds	2
  1061  000066                     io_poll@yearMonth:
  1062                           	opt stack 0
  1063                           
  1064                           ; 2 bytes @ 0x65
  1065  000066                     	ds	2
  1066  000068                     io_poll@eventEeAddr:
  1067                           	opt stack 0
  1068                           
  1069                           ; 1 bytes @ 0x67
  1070  000068                     	ds	1
  1071  000069                     io_poll@v1:
  1072                           	opt stack 0
  1073                           
  1074                           ; 1 bytes @ 0x68
  1075  000069                     	ds	1
  1076  00006A                     io_poll@lastCommand:
  1077                           	opt stack 0
  1078                           
  1079                           ; 1 bytes @ 0x69
  1080  00006A                     	ds	1
  1081  00006B                     io_poll@lastEndAddress:
  1082                           	opt stack 0
  1083                           
  1084                           ; 2 bytes @ 0x6A
  1085  00006B                     	ds	2
  1086  00006D                     io_poll@lastAddress:
  1087                           	opt stack 0
  1088                           
  1089                           ; 2 bytes @ 0x6C
  1090  00006D                     	ds	2
  1091                           tblptru	equ	0xFF8
  1092                           tblptrh	equ	0xFF7
  1093                           tblptrl	equ	0xFF6
  1094                           tablat	equ	0xFF5
  1095                           postinc0	equ	0xFEE
  1096                           wreg	equ	0xFE8
  1097                           postdec1	equ	0xFE5
  1098                           fsr1h	equ	0xFE2
  1099                           fsr1l	equ	0xFE1
  1100                           
  1101 ;;
  1102 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
  1103 ;;
  1104 ;; *************** function _main *****************
  1105 ;; Defined at:
  1106 ;;		line 666 in file "main.c"
  1107 ;; Parameters:    Size  Location     Type
  1108 ;;		None
  1109 ;; Auto vars:     Size  Location     Type
  1110 ;;  minute          1   19[BANK0 ] unsigned char 
  1111 ;;  hour            1   14[BANK0 ] unsigned char 
  1112 ;;  curMs           4   15[BANK0 ] unsigned long 
  1113 ;;  oldBuzzerOnT    4    9[BANK0 ] unsigned long 
  1114 ;;  lastMs          4    5[BANK0 ] unsigned long 
  1115 ;;  oldMinute       1   13[BANK0 ] unsigned char 
  1116 ;; Return value:  Size  Location     Type
  1117 ;;                  1    wreg      void 
  1118 ;; Registers used:
  1119 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1120 ;; Tracked objects:
  1121 ;;		On entry : 0/0
  1122 ;;		On exit  : 0/0
  1123 ;;		Unchanged: 0/0
  1124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1125 ;;      Params:         0       0       0       0       0       0       0
  1126 ;;      Locals:         0      15       0       0       0       0       0
  1127 ;;      Temps:          0       5       0       0       0       0       0
  1128 ;;      Totals:         0      20       0       0       0       0       0
  1129 ;;Total ram usage:       20 bytes
  1130 ;; Hardware stack levels required when called:    8
  1131 ;; This function calls:
  1132 ;;		_AddSecond
  1133 ;;		_ConfigureOscillator
  1134 ;;		_GetTime
  1135 ;;		_InitApp
  1136 ;;		_InitFromEeprom
  1137 ;;		_LightStatusLed
  1138 ;;		_ModbusPoll
  1139 ;;		_ProcessDiary
  1140 ;;		_ProcessLightBlock
  1141 ;;		_ResetEvent
  1142 ;;		_SetBuzzerDuty
  1143 ;;		_getHourMin
  1144 ;;		_io_poll
  1145 ;;		_millis
  1146 ;;		_pwm_init
  1147 ;; This function is called by:
  1148 ;;		Startup code after reset
  1149 ;; This function uses a non-reentrant model
  1150 ;;
  1151                           
  1152                           	psect	text0
  1153  00065E                     __ptext0:
  1154                           	opt stack 0
  1155  00065E                     _main:
  1156                           	opt stack 23
  1157                           
  1158                           ;incstack = 0
  1159  00065E  FFFF               	dw	65535
  1160                           
  1161                           ;main.c: 669: ConfigureOscillator();
  1162  000660  EC3E  F013         	call	_ConfigureOscillator	;wreg free
  1163                           
  1164                           ;main.c: 672: InitApp();
  1165  000664  ECE7  F00F         	call	_InitApp	;wreg free
  1166                           
  1167                           ;main.c: 676: InitFromEeprom();
  1168  000668  ECDA  F00B         	call	_InitFromEeprom	;wreg free
  1169                           
  1170                           ;main.c: 685: unsigned long lastMs = millis();
  1171  00066C  ECB1  F012         	call	_millis	;wreg free
  1172  000670  C005  F0DE         	movff	?_millis,main@lastMs
  1173  000674  C006  F0DF         	movff	?_millis+1,main@lastMs+1
  1174  000678  C007  F0E0         	movff	?_millis+2,main@lastMs+2
  1175  00067C  C008  F0E1         	movff	?_millis+3,main@lastMs+3
  1176  000680                     i1L__ptext1:
  1177                           	opt stack 0
  1178  000680                     i1L_pwm_init:
  1179                           	opt stack 28
  1180                           
  1181                           ;incstack = 0
  1182  000680  FFFF               	dw	65535
  1183  000682                     i1Ll4398:
  1184                           	opt stack 0
  1185  000682  FFFF               	dw	65535	; assembler added errata NOP
  1186                           
  1187                           ;main.c: 413: CCP1CONbits.CCP1M = 0x0f;
  1188  000684  0E0F               	movlw	15
  1189  000686  12BD               	iorwf	4029,f,c	;volatile
  1190  000688                     i1Ll4400:
  1191                           	opt stack 0
  1192  000688  FFFF               	dw	65535	; assembler added errata NOP
  1193                           
  1194                           ;main.c: 418: PR2 = 255;
  1195  00068A  68CB               	setf	4043,c	;volatile
  1196  00068C                     i1Ll4402:
  1197                           	opt stack 0
  1198  00068C  FFFF               	dw	65535	; assembler added errata NOP
  1199                           
  1200                           ;main.c: 421: T2CONbits.T2CKPS1 = 1;
  1201  00068E  82CA               	bsf	4042,1,c	;volatile
  1202  000690                     i1Ll4404:
  1203                           	opt stack 0
  1204  000690  FFFF               	dw	65535	; assembler added errata NOP
  1205                           
  1206                           ;main.c: 422: T2CONbits.T2CKPS0 = 0;
  1207  000692  90CA               	bcf	4042,0,c	;volatile
  1208  000694                     i1Ll4406:
  1209                           	opt stack 0
  1210  000694  FFFF               	dw	65535	; assembler added errata NOP
  1211                           
  1212                           ;main.c: 425: TRISCbits.RC2 = 0;
  1213  000696  9494               	bcf	3988,2,c	;volatile
  1214  000698                     i1Ll305:
  1215                           	opt stack 0
  1216  000698  FFFF               	dw	65535	; assembler added errata NOP
  1217  00069A  D001               	goto	l5440
  1218  00069C  FFFF               	dw	65535	; errata NOP
  1219  00069E                     l5440:
  1220  00069E  FFFF               	dw	65535	; assembler added errata NOP
  1221                           
  1222                           ;main.c: 694: unsigned long oldBuzzerOnTime = 0;
  1223  0006A0  0100               	movlb	0	; () banked
  1224  0006A2  6BE2               	clrf	main@oldBuzzerOnTime& (0+255),b
  1225  0006A4  6BE3               	clrf	(main@oldBuzzerOnTime+1)& (0+255),b
  1226  0006A6  6BE4               	clrf	(main@oldBuzzerOnTime+2)& (0+255),b
  1227  0006A8  6BE5               	clrf	(main@oldBuzzerOnTime+3)& (0+255),b
  1228                           
  1229                           ; BSR set to: 0
  1230                           ;main.c: 695: uint8_t oldMinute = 0xff;
  1231  0006AA  69E6               	setf	main@oldMinute& (0+255),b
  1232                           
  1233                           ; BSR set to: 0
  1234                           ;main.c: 697: LightStatusLed(0x07, 1, 0);
  1235  0006AC  0E01               	movlw	1
  1236  0006AE  6E05               	movwf	LightStatusLed@on,c
  1237  0006B0  0E00               	movlw	0
  1238  0006B2  6E06               	movwf	LightStatusLed@blink,c
  1239  0006B4  0E07               	movlw	7
  1240  0006B6  EC5A  F00C         	call	_LightStatusLed
  1241                           
  1242                           ;main.c: 698: LightStatusLed(0x05, 1, 1);
  1243  0006BA  0E01               	movlw	1
  1244  0006BC  6E05               	movwf	LightStatusLed@on,c
  1245  0006BE  6E06               	movwf	LightStatusLed@blink,c
  1246  0006C0  0E05               	movlw	5
  1247  0006C2  EC5A  F00C         	call	_LightStatusLed
  1248  0006C6                     l5448:
  1249  0006C6  FFFF               	dw	65535	; assembler added errata NOP
  1250                           
  1251                           ;main.c: 700: {
  1252                           ;main.c: 701: unsigned long curMs = millis();
  1253  0006C8  ECB1  F012         	call	_millis	;wreg free
  1254  0006CC  C005  F0E8         	movff	?_millis,main@curMs
  1255  0006D0  C006  F0E9         	movff	?_millis+1,main@curMs+1
  1256  0006D4  C007  F0EA         	movff	?_millis+2,main@curMs+2
  1257  0006D8  C008  F0EB         	movff	?_millis+3,main@curMs+3
  1258                           
  1259                           ;main.c: 702: ProcessLightBlock(&curMs);
  1260  0006DC  0EE8               	movlw	main@curMs& (0+255)
  1261  0006DE                     i2L__ptext20:
  1262                           	opt stack 0
  1263  0006DE                     i2L_ProcessLightBlock:
  1264                           	opt stack 27
  1265                           
  1266                           ; BSR set to: 1
  1267                           ;incstack = 0
  1268  0006DE  FFFF               	dw	65535
  1269                           
  1270                           ;ProcessLightBlock@curMs stored from wreg
  1271  0006E0  6E0A               	movwf	ProcessLightBlock@curMs,c
  1272  0006E2                     i2Ll4408:
  1273                           	opt stack 0
  1274  0006E2  FFFF               	dw	65535	; assembler added errata NOP
  1275                           
  1276                           ;main.c: 504: diffTime = *curMs - oldBlinkOnTime;
  1277  0006E4  500A               	movf	ProcessLightBlock@curMs,w,c
  1278  0006E6  6ED9               	movwf	fsr2l,c
  1279  0006E8  6ADA               	clrf	fsr2h,c
  1280  0006EA  CFDE F006          	movff	postinc2,??_ProcessLightBlock
  1281  0006EE  CFDE F007          	movff	postinc2,??_ProcessLightBlock+1
  1282  0006F2  CFDE F008          	movff	postinc2,??_ProcessLightBlock+2
  1283  0006F6  CFDE F009          	movff	postinc2,??_ProcessLightBlock+3
  1284  0006FA  0100               	movlb	0	; () banked
  1285  0006FC  51B0               	movf	_oldBlinkOnTime& (0+255),w,b
  1286  0006FE  5C06               	subwf	??_ProcessLightBlock,w,c
  1287  000700  6FA4               	movwf	_diffTime& (0+255),b
  1288  000702  51B1               	movf	(_oldBlinkOnTime+1)& (0+255),w,b
  1289  000704  5807               	subwfb	??_ProcessLightBlock+1,w,c
  1290  000706  6FA5               	movwf	(_diffTime+1)& (0+255),b
  1291  000708  51B2               	movf	(_oldBlinkOnTime+2)& (0+255),w,b
  1292  00070A  5808               	subwfb	??_ProcessLightBlock+2,w,c
  1293  00070C  6FA6               	movwf	(_diffTime+2)& (0+255),b
  1294  00070E  51B3               	movf	(_oldBlinkOnTime+3)& (0+255),w,b
  1295  000710  5809               	subwfb	??_ProcessLightBlock+3,w,c
  1296  000712  6FA7               	movwf	(_diffTime+3)& (0+255),b
  1297  000714                     i2Ll4410:
  1298                           	opt stack 0
  1299  000714  FFFF               	dw	65535	; assembler added errata NOP
  1300                           
  1301                           ; BSR set to: 0
  1302                           ;main.c: 505: if(diffTime > blinkPeriod)
  1303  000716  51BC               	movf	_blinkPeriod& (0+255),w,b
  1304  000718  6E06               	movwf	??_ProcessLightBlock& (0+255),c
  1305  00071A  51BD               	movf	(_blinkPeriod+1)& (0+255),w,b
  1306  00071C  6E07               	movwf	(??_ProcessLightBlock+1)& (0+255),c
  1307  00071E  6A08               	clrf	(??_ProcessLightBlock+2)& (0+255),c
  1308  000720  6A09               	clrf	(??_ProcessLightBlock+3)& (0+255),c
  1309  000722  51A4               	movf	_diffTime& (0+255),w,b
  1310  000724  5C06               	subwf	??_ProcessLightBlock,w,c
  1311  000726  51A5               	movf	(_diffTime+1)& (0+255),w,b
  1312  000728  5807               	subwfb	??_ProcessLightBlock+1,w,c
  1313  00072A  51A6               	movf	(_diffTime+2)& (0+255),w,b
  1314  00072C  5808               	subwfb	??_ProcessLightBlock+2,w,c
  1315  00072E  51A7               	movf	(_diffTime+3)& (0+255),w,b
  1316  000730  5809               	subwfb	??_ProcessLightBlock+3,w,c
  1317  000732  B0D8               	btfsc	status,0,c
  1318  000734                     i2Lu3731:
  1319                           	opt stack 0
  1320  000734  FFFF               	dw	65535	; assembler added errata NOP
  1321  000736  D010               	goto	i2Ll4416
  1322  000738                     i2Lu3730:
  1323                           	opt stack 0
  1324  000738                     i2Ll4412:
  1325                           	opt stack 0
  1326  000738  FFFF               	dw	65535	; assembler added errata NOP
  1327                           
  1328                           ; BSR set to: 0
  1329                           ;main.c: 506: {
  1330                           ;main.c: 507: blinkOn = 1;
  1331  00073A  0E01               	movlw	1
  1332  00073C  6E72               	movwf	_blinkOn,c
  1333  00073E                     i2Ll4414:
  1334                           	opt stack 0
  1335  00073E  FFFF               	dw	65535	; assembler added errata NOP
  1336                           
  1337                           ; BSR set to: 0
  1338                           ;main.c: 508: oldBlinkOnTime = *curMs;
  1339  000740  500A               	movf	ProcessLightBlock@curMs,w,c
  1340  000742  6ED9               	movwf	fsr2l,c
  1341  000744  6ADA               	clrf	fsr2h,c
  1342  000746  CFDE F0B0          	movff	postinc2,_oldBlinkOnTime
  1343  00074A  CFDE F0B1          	movff	postinc2,_oldBlinkOnTime+1
  1344  00074E  CFDE F0B2          	movff	postinc2,_oldBlinkOnTime+2
  1345  000752  CFDE F0B3          	movff	postinc2,_oldBlinkOnTime+3
  1346  000756  D019               	goto	i2Ll4422
  1347  000758                     i2Ll4416:
  1348                           	opt stack 0
  1349  000758  FFFF               	dw	65535	; assembler added errata NOP
  1350                           
  1351                           ; BSR set to: 0
  1352                           ;main.c: 510: else if(blinkOn && diffTime > blinkDuration)
  1353  00075A  5072               	movf	_blinkOn,w,c
  1354  00075C  B4D8               	btfsc	status,2,c
  1355  00075E                     i2Lu3741:
  1356                           	opt stack 0
  1357  00075E  FFFF               	dw	65535	; assembler added errata NOP
  1358  000760  D014               	goto	i2Ll4422
  1359  000762                     i2Lu3740:
  1360                           	opt stack 0
  1361  000762                     i2Ll4418:
  1362                           	opt stack 0
  1363  000762  FFFF               	dw	65535	; assembler added errata NOP
  1364                           
  1365                           ; BSR set to: 0
  1366  000764  51BA               	movf	_blinkDuration& (0+255),w,b
  1367  000766  6E06               	movwf	??_ProcessLightBlock& (0+255),c
  1368  000768  51BB               	movf	(_blinkDuration+1)& (0+255),w,b
  1369  00076A  6E07               	movwf	(??_ProcessLightBlock+1)& (0+255),c
  1370  00076C  6A08               	clrf	(??_ProcessLightBlock+2)& (0+255),c
  1371  00076E  6A09               	clrf	(??_ProcessLightBlock+3)& (0+255),c
  1372  000770  51A4               	movf	_diffTime& (0+255),w,b
  1373  000772  5C06               	subwf	??_ProcessLightBlock,w,c
  1374  000774  51A5               	movf	(_diffTime+1)& (0+255),w,b
  1375  000776  5807               	subwfb	??_ProcessLightBlock+1,w,c
  1376  000778  51A6               	movf	(_diffTime+2)& (0+255),w,b
  1377  00077A  5808               	subwfb	??_ProcessLightBlock+2,w,c
  1378  00077C  51A7               	movf	(_diffTime+3)& (0+255),w,b
  1379  00077E  5809               	subwfb	??_ProcessLightBlock+3,w,c
  1380  000780  B0D8               	btfsc	status,0,c
  1381  000782                     i2Lu3751:
  1382                           	opt stack 0
  1383  000782  FFFF               	dw	65535	; assembler added errata NOP
  1384  000784  D002               	goto	i2Ll4422
  1385  000786                     i2Lu3750:
  1386                           	opt stack 0
  1387  000786                     i2Ll4420:
  1388                           	opt stack 0
  1389  000786  FFFF               	dw	65535	; assembler added errata NOP
  1390                           
  1391                           ; BSR set to: 0
  1392                           ;main.c: 511: {
  1393                           ;main.c: 512: blinkOn = 0;
  1394  000788  6A72               	clrf	_blinkOn,c
  1395  00078A                     i2Ll4422:
  1396                           	opt stack 0
  1397  00078A  FFFF               	dw	65535	; assembler added errata NOP
  1398                           
  1399                           ; BSR set to: 0
  1400                           ;main.c: 513: }
  1401                           ;main.c: 516: LATA &= 0xF0;
  1402  00078C  0EF0               	movlw	240
  1403  00078E  1689               	andwf	3977,f,c	;volatile
  1404  000790  D124               	goto	i2Ll4562
  1405  000792                     i2Ll4424:
  1406                           	opt stack 27
  1407                           
  1408                           ; BSR set to: 0
  1409                           ;main.c: 521: if(blinkOn) LATB = ledStatuses[0]; else LATB = ledStatuses[0] ^ ledBlink[0
      +                          ]; UpdateLedRegister(0);
  1410  000792  5072               	movf	_blinkOn,w,c
  1411  000794  B4D8               	btfsc	status,2,c
  1412  000796                     i2Lu3761:
  1413                           	opt stack 0
  1414  000796  FFFF               	dw	65535	; assembler added errata NOP
  1415  000798  D004               	goto	i2Ll4428
  1416  00079A                     i2Lu3760:
  1417                           	opt stack 0
  1418  00079A                     i2Ll4426:
  1419                           	opt stack 0
  1420  00079A  FFFF               	dw	65535	; assembler added errata NOP
  1421                           
  1422                           ; BSR set to: 0
  1423  00079C  C090  FF8A         	movff	_ledStatuses,3978	;volatile
  1424  0007A0  D004               	goto	i2Ll4430
  1425  0007A2                     i2Ll4428:
  1426                           	opt stack 0
  1427  0007A2  FFFF               	dw	65535	; assembler added errata NOP
  1428                           
  1429                           ; BSR set to: 0
  1430  0007A4  5190               	movf	_ledStatuses& (0+255),w,b
  1431  0007A6  1980               	xorwf	_ledBlink& (0+255),w,b
  1432  0007A8  6E8A               	movwf	3978,c	;volatile
  1433  0007AA                     i2Ll4430:
  1434                           	opt stack 0
  1435  0007AA  FFFF               	dw	65535	; assembler added errata NOP
  1436                           
  1437                           ; BSR set to: 0
  1438  0007AC  0E00               	movlw	0
  1439  0007AE  ECE5  F011         	call	_UpdateLedRegister
  1440  0007B2                     i2Ll4432:
  1441                           	opt stack 0
  1442  0007B2  FFFF               	dw	65535	; assembler added errata NOP
  1443                           
  1444                           ;main.c: 522: if(blinkOn) LATB = ledStatuses[1]; else LATB = ledStatuses[1] ^ ledBlink[1
      +                          ]; UpdateLedRegister(1);
  1445  0007B4  5072               	movf	_blinkOn,w,c
  1446  0007B6  B4D8               	btfsc	status,2,c
  1447  0007B8                     i2Lu3771:
  1448                           	opt stack 0
  1449  0007B8  FFFF               	dw	65535	; assembler added errata NOP
  1450  0007BA  D004               	goto	i2Ll4436
  1451  0007BC                     i2Lu3770:
  1452                           	opt stack 0
  1453  0007BC                     i2Ll4434:
  1454                           	opt stack 0
  1455  0007BC  FFFF               	dw	65535	; assembler added errata NOP
  1456  0007BE  C091  FF8A         	movff	_ledStatuses+1,3978	;volatile
  1457  0007C2  D005               	goto	i2Ll4438
  1458  0007C4                     i2Ll4436:
  1459                           	opt stack 0
  1460  0007C4  FFFF               	dw	65535	; assembler added errata NOP
  1461  0007C6  0100               	movlb	0	; () banked
  1462  0007C8  5191               	movf	(_ledStatuses+1)& (0+255),w,b
  1463  0007CA  1981               	xorwf	(_ledBlink+1)& (0+255),w,b
  1464  0007CC  6E8A               	movwf	3978,c	;volatile
  1465  0007CE                     i2Ll4438:
  1466                           	opt stack 0
  1467  0007CE  FFFF               	dw	65535	; assembler added errata NOP
  1468  0007D0  0E01               	movlw	1
  1469  0007D2  ECE5  F011         	call	_UpdateLedRegister
  1470  0007D6                     i2Ll4440:
  1471                           	opt stack 0
  1472  0007D6  FFFF               	dw	65535	; assembler added errata NOP
  1473                           
  1474                           ;main.c: 523: if(blinkOn) LATB = ledStatuses[2]; else LATB = ledStatuses[2] ^ ledBlink[2
      +                          ]; UpdateLedRegister(2);
  1475  0007D8  5072               	movf	_blinkOn,w,c
  1476  0007DA  B4D8               	btfsc	status,2,c
  1477  0007DC                     i2Lu3781:
  1478                           	opt stack 0
  1479  0007DC  FFFF               	dw	65535	; assembler added errata NOP
  1480  0007DE  D004               	goto	i2Ll4444
  1481  0007E0                     i2Lu3780:
  1482                           	opt stack 0
  1483  0007E0                     i2Ll4442:
  1484                           	opt stack 0
  1485  0007E0  FFFF               	dw	65535	; assembler added errata NOP
  1486  0007E2  C092  FF8A         	movff	_ledStatuses+2,3978	;volatile
  1487  0007E6  D005               	goto	i2Ll4446
  1488  0007E8                     i2Ll4444:
  1489                           	opt stack 0
  1490  0007E8  FFFF               	dw	65535	; assembler added errata NOP
  1491  0007EA  0100               	movlb	0	; () banked
  1492  0007EC  5192               	movf	(_ledStatuses+2)& (0+255),w,b
  1493  0007EE  1982               	xorwf	(_ledBlink+2)& (0+255),w,b
  1494  0007F0  6E8A               	movwf	3978,c	;volatile
  1495  0007F2                     i2Ll4446:
  1496                           	opt stack 0
  1497  0007F2  FFFF               	dw	65535	; assembler added errata NOP
  1498  0007F4  0E02               	movlw	2
  1499  0007F6  ECE5  F011         	call	_UpdateLedRegister
  1500  0007FA                     i2Ll4448:
  1501                           	opt stack 0
  1502  0007FA  FFFF               	dw	65535	; assembler added errata NOP
  1503                           
  1504                           ;main.c: 524: if(blinkOn) LATB = ledStatuses[12]; else LATB = ledStatuses[12] ^ ledBlink
      +                          [12]; UpdateLedRegister(3);
  1505  0007FC  5072               	movf	_blinkOn,w,c
  1506  0007FE  B4D8               	btfsc	status,2,c
  1507  000800                     i2Lu3791:
  1508                           	opt stack 0
  1509  000800  FFFF               	dw	65535	; assembler added errata NOP
  1510  000802  D004               	goto	i2Ll4452
  1511  000804                     i2Lu3790:
  1512                           	opt stack 0
  1513  000804                     i2Ll4450:
  1514                           	opt stack 0
  1515  000804  FFFF               	dw	65535	; assembler added errata NOP
  1516  000806  C09C  FF8A         	movff	_ledStatuses+12,3978	;volatile
  1517  00080A  D005               	goto	i2Ll4454
  1518  00080C                     i2Ll4452:
  1519                           	opt stack 0
  1520  00080C  FFFF               	dw	65535	; assembler added errata NOP
  1521  00080E  0100               	movlb	0	; () banked
  1522  000810  519C               	movf	(_ledStatuses+12)& (0+255),w,b
  1523  000812  198C               	xorwf	(_ledBlink+12)& (0+255),w,b
  1524  000814  6E8A               	movwf	3978,c	;volatile
  1525  000816                     i2Ll4454:
  1526                           	opt stack 0
  1527  000816  FFFF               	dw	65535	; assembler added errata NOP
  1528  000818  0E03               	movlw	3
  1529  00081A  ECE5  F011         	call	_UpdateLedRegister
  1530  00081E                     i2Ll4456:
  1531                           	opt stack 0
  1532  00081E  FFFF               	dw	65535	; assembler added errata NOP
  1533                           
  1534                           ;main.c: 525: LATAbits.LATA0 = 1;
  1535  000820  8089               	bsf	3977,0,c	;volatile
  1536  000822  D0E7               	goto	i2Ll4564
  1537  000824                     i2Ll4458:
  1538                           	opt stack 27
  1539                           
  1540                           ; BSR set to: 0
  1541                           ;main.c: 528: if(blinkOn) LATB = ledStatuses[3]; else LATB = ledStatuses[3] ^ ledBlink[3
      +                          ]; UpdateLedRegister(0);
  1542  000824  5072               	movf	_blinkOn,w,c
  1543  000826  B4D8               	btfsc	status,2,c
  1544  000828                     i2Lu3801:
  1545                           	opt stack 0
  1546  000828  FFFF               	dw	65535	; assembler added errata NOP
  1547  00082A  D004               	goto	i2Ll4462
  1548  00082C                     i2Lu3800:
  1549                           	opt stack 0
  1550  00082C                     i2Ll4460:
  1551                           	opt stack 0
  1552  00082C  FFFF               	dw	65535	; assembler added errata NOP
  1553                           
  1554                           ; BSR set to: 0
  1555  00082E  C093  FF8A         	movff	_ledStatuses+3,3978	;volatile
  1556  000832  D004               	goto	i2Ll4464
  1557  000834                     i2Ll4462:
  1558                           	opt stack 0
  1559  000834  FFFF               	dw	65535	; assembler added errata NOP
  1560                           
  1561                           ; BSR set to: 0
  1562  000836  5193               	movf	(_ledStatuses+3)& (0+255),w,b
  1563  000838  1983               	xorwf	(_ledBlink+3)& (0+255),w,b
  1564  00083A  6E8A               	movwf	3978,c	;volatile
  1565  00083C                     i2Ll4464:
  1566                           	opt stack 0
  1567  00083C  FFFF               	dw	65535	; assembler added errata NOP
  1568                           
  1569                           ; BSR set to: 0
  1570  00083E  0E00               	movlw	0
  1571  000840  ECE5  F011         	call	_UpdateLedRegister
  1572  000844                     i2Ll4466:
  1573                           	opt stack 0
  1574  000844  FFFF               	dw	65535	; assembler added errata NOP
  1575                           
  1576                           ;main.c: 529: if(blinkOn) LATB = ledStatuses[4]; else LATB = ledStatuses[4] ^ ledBlink[4
      +                          ]; UpdateLedRegister(1);
  1577  000846  5072               	movf	_blinkOn,w,c
  1578  000848  B4D8               	btfsc	status,2,c
  1579  00084A                     i2Lu3811:
  1580                           	opt stack 0
  1581  00084A  FFFF               	dw	65535	; assembler added errata NOP
  1582  00084C  D004               	goto	i2Ll4470
  1583  00084E                     i2Lu3810:
  1584                           	opt stack 0
  1585  00084E                     i2Ll4468:
  1586                           	opt stack 0
  1587  00084E  FFFF               	dw	65535	; assembler added errata NOP
  1588  000850  C094  FF8A         	movff	_ledStatuses+4,3978	;volatile
  1589  000854  D005               	goto	i2Ll4472
  1590  000856                     i2Ll4470:
  1591                           	opt stack 0
  1592  000856  FFFF               	dw	65535	; assembler added errata NOP
  1593  000858  0100               	movlb	0	; () banked
  1594  00085A  5194               	movf	(_ledStatuses+4)& (0+255),w,b
  1595  00085C  1984               	xorwf	(_ledBlink+4)& (0+255),w,b
  1596  00085E  6E8A               	movwf	3978,c	;volatile
  1597  000860                     i2Ll4472:
  1598                           	opt stack 0
  1599  000860  FFFF               	dw	65535	; assembler added errata NOP
  1600  000862  0E01               	movlw	1
  1601  000864  ECE5  F011         	call	_UpdateLedRegister
  1602  000868                     i2Ll4474:
  1603                           	opt stack 0
  1604  000868  FFFF               	dw	65535	; assembler added errata NOP
  1605                           
  1606                           ;main.c: 530: if(blinkOn) LATB = ledStatuses[5]; else LATB = ledStatuses[5] ^ ledBlink[5
      +                          ]; UpdateLedRegister(2);
  1607  00086A  5072               	movf	_blinkOn,w,c
  1608  00086C  B4D8               	btfsc	status,2,c
  1609  00086E                     i2Lu3821:
  1610                           	opt stack 0
  1611  00086E  FFFF               	dw	65535	; assembler added errata NOP
  1612  000870  D004               	goto	i2Ll4478
  1613  000872                     i2Lu3820:
  1614                           	opt stack 0
  1615  000872                     i2Ll4476:
  1616                           	opt stack 0
  1617  000872  FFFF               	dw	65535	; assembler added errata NOP
  1618  000874  C095  FF8A         	movff	_ledStatuses+5,3978	;volatile
  1619  000878  D005               	goto	i2Ll4480
  1620  00087A                     i2Ll4478:
  1621                           	opt stack 0
  1622  00087A  FFFF               	dw	65535	; assembler added errata NOP
  1623  00087C  0100               	movlb	0	; () banked
  1624  00087E  5195               	movf	(_ledStatuses+5)& (0+255),w,b
  1625  000880  1985               	xorwf	(_ledBlink+5)& (0+255),w,b
  1626  000882  6E8A               	movwf	3978,c	;volatile
  1627  000884                     i2Ll4480:
  1628                           	opt stack 0
  1629  000884  FFFF               	dw	65535	; assembler added errata NOP
  1630  000886  0E02               	movlw	2
  1631  000888  ECE5  F011         	call	_UpdateLedRegister
  1632  00088C                     i2Ll4482:
  1633                           	opt stack 0
  1634  00088C  FFFF               	dw	65535	; assembler added errata NOP
  1635                           
  1636                           ;main.c: 531: if(blinkOn) LATB = ledStatuses[13]; else LATB = ledStatuses[13] ^ ledBlink
      +                          [13]; UpdateLedRegister(3);
  1637  00088E  5072               	movf	_blinkOn,w,c
  1638  000890  B4D8               	btfsc	status,2,c
  1639  000892                     i2Lu3831:
  1640                           	opt stack 0
  1641  000892  FFFF               	dw	65535	; assembler added errata NOP
  1642  000894  D004               	goto	i2Ll4486
  1643  000896                     i2Lu3830:
  1644                           	opt stack 0
  1645  000896                     i2Ll4484:
  1646                           	opt stack 0
  1647  000896  FFFF               	dw	65535	; assembler added errata NOP
  1648  000898  C09D  FF8A         	movff	_ledStatuses+13,3978	;volatile
  1649  00089C  D005               	goto	i2Ll4488
  1650  00089E                     i2Ll4486:
  1651                           	opt stack 0
  1652  00089E  FFFF               	dw	65535	; assembler added errata NOP
  1653  0008A0  0100               	movlb	0	; () banked
  1654  0008A2  519D               	movf	(_ledStatuses+13)& (0+255),w,b
  1655  0008A4  198D               	xorwf	(_ledBlink+13)& (0+255),w,b
  1656  0008A6  6E8A               	movwf	3978,c	;volatile
  1657  0008A8                     i2Ll4488:
  1658                           	opt stack 0
  1659  0008A8  FFFF               	dw	65535	; assembler added errata NOP
  1660  0008AA  0E03               	movlw	3
  1661  0008AC  ECE5  F011         	call	_UpdateLedRegister
  1662  0008B0                     i2Ll4490:
  1663                           	opt stack 0
  1664  0008B0  FFFF               	dw	65535	; assembler added errata NOP
  1665                           
  1666                           ;main.c: 532: LATAbits.LATA1 = 1;
  1667  0008B2  8289               	bsf	3977,1,c	;volatile
  1668  0008B4  D09E               	goto	i2Ll4564
  1669  0008B6                     i2Ll4492:
  1670                           	opt stack 27
  1671                           
  1672                           ; BSR set to: 0
  1673                           ;main.c: 535: if(blinkOn) LATB = ledStatuses[6]; else LATB = ledStatuses[6] ^ ledBlink[6
      +                          ]; UpdateLedRegister(0);
  1674  0008B6  5072               	movf	_blinkOn,w,c
  1675  0008B8  B4D8               	btfsc	status,2,c
  1676  0008BA                     i2Lu3841:
  1677                           	opt stack 0
  1678  0008BA  FFFF               	dw	65535	; assembler added errata NOP
  1679  0008BC  D004               	goto	i2Ll4496
  1680  0008BE                     i2Lu3840:
  1681                           	opt stack 0
  1682  0008BE                     i2Ll4494:
  1683                           	opt stack 0
  1684  0008BE  FFFF               	dw	65535	; assembler added errata NOP
  1685                           
  1686                           ; BSR set to: 0
  1687  0008C0  C096  FF8A         	movff	_ledStatuses+6,3978	;volatile
  1688  0008C4  D004               	goto	i2Ll4498
  1689  0008C6                     i2Ll4496:
  1690                           	opt stack 0
  1691  0008C6  FFFF               	dw	65535	; assembler added errata NOP
  1692                           
  1693                           ; BSR set to: 0
  1694  0008C8  5196               	movf	(_ledStatuses+6)& (0+255),w,b
  1695  0008CA  1986               	xorwf	(_ledBlink+6)& (0+255),w,b
  1696  0008CC  6E8A               	movwf	3978,c	;volatile
  1697  0008CE                     i2Ll4498:
  1698                           	opt stack 0
  1699  0008CE  FFFF               	dw	65535	; assembler added errata NOP
  1700                           
  1701                           ; BSR set to: 0
  1702  0008D0  0E00               	movlw	0
  1703  0008D2  ECE5  F011         	call	_UpdateLedRegister
  1704  0008D6                     i2Ll4500:
  1705                           	opt stack 0
  1706  0008D6  FFFF               	dw	65535	; assembler added errata NOP
  1707                           
  1708                           ;main.c: 536: if(blinkOn) LATB = ledStatuses[7]; else LATB = ledStatuses[7] ^ ledBlink[7
      +                          ]; UpdateLedRegister(1);
  1709  0008D8  5072               	movf	_blinkOn,w,c
  1710  0008DA  B4D8               	btfsc	status,2,c
  1711  0008DC                     i2Lu3851:
  1712                           	opt stack 0
  1713  0008DC  FFFF               	dw	65535	; assembler added errata NOP
  1714  0008DE  D004               	goto	i2Ll4504
  1715  0008E0                     i2Lu3850:
  1716                           	opt stack 0
  1717  0008E0                     i2Ll4502:
  1718                           	opt stack 0
  1719  0008E0  FFFF               	dw	65535	; assembler added errata NOP
  1720  0008E2  C097  FF8A         	movff	_ledStatuses+7,3978	;volatile
  1721  0008E6  D005               	goto	i2Ll4506
  1722  0008E8                     i2Ll4504:
  1723                           	opt stack 0
  1724  0008E8  FFFF               	dw	65535	; assembler added errata NOP
  1725  0008EA  0100               	movlb	0	; () banked
  1726  0008EC  5197               	movf	(_ledStatuses+7)& (0+255),w,b
  1727  0008EE  1987               	xorwf	(_ledBlink+7)& (0+255),w,b
  1728  0008F0  6E8A               	movwf	3978,c	;volatile
  1729  0008F2                     i2Ll4506:
  1730                           	opt stack 0
  1731  0008F2  FFFF               	dw	65535	; assembler added errata NOP
  1732  0008F4  0E01               	movlw	1
  1733  0008F6  ECE5  F011         	call	_UpdateLedRegister
  1734  0008FA                     i2Ll4508:
  1735                           	opt stack 0
  1736  0008FA  FFFF               	dw	65535	; assembler added errata NOP
  1737                           
  1738                           ;main.c: 537: if(blinkOn) LATB = ledStatuses[8]; else LATB = ledStatuses[8] ^ ledBlink[8
      +                          ]; UpdateLedRegister(2);
  1739  0008FC  5072               	movf	_blinkOn,w,c
  1740  0008FE  B4D8               	btfsc	status,2,c
  1741  000900                     i2Lu3861:
  1742                           	opt stack 0
  1743  000900  FFFF               	dw	65535	; assembler added errata NOP
  1744  000902  D004               	goto	i2Ll4512
  1745  000904                     i2Lu3860:
  1746                           	opt stack 0
  1747  000904                     i2Ll4510:
  1748                           	opt stack 0
  1749  000904  FFFF               	dw	65535	; assembler added errata NOP
  1750  000906  C098  FF8A         	movff	_ledStatuses+8,3978	;volatile
  1751  00090A  D005               	goto	i2Ll4514
  1752  00090C                     i2Ll4512:
  1753                           	opt stack 0
  1754  00090C  FFFF               	dw	65535	; assembler added errata NOP
  1755  00090E  0100               	movlb	0	; () banked
  1756  000910  5198               	movf	(_ledStatuses+8)& (0+255),w,b
  1757  000912  1988               	xorwf	(_ledBlink+8)& (0+255),w,b
  1758  000914  6E8A               	movwf	3978,c	;volatile
  1759  000916                     i2Ll4514:
  1760                           	opt stack 0
  1761  000916  FFFF               	dw	65535	; assembler added errata NOP
  1762  000918  0E02               	movlw	2
  1763  00091A  ECE5  F011         	call	_UpdateLedRegister
  1764  00091E                     i2Ll4516:
  1765                           	opt stack 0
  1766  00091E  FFFF               	dw	65535	; assembler added errata NOP
  1767                           
  1768                           ;main.c: 538: if(blinkOn) LATB = ledStatuses[14]; else LATB = ledStatuses[14] ^ ledBlink
      +                          [14]; UpdateLedRegister(3);
  1769  000920  5072               	movf	_blinkOn,w,c
  1770  000922  B4D8               	btfsc	status,2,c
  1771  000924                     i2Lu3871:
  1772                           	opt stack 0
  1773  000924  FFFF               	dw	65535	; assembler added errata NOP
  1774  000926  D004               	goto	i2Ll4520
  1775  000928                     i2Lu3870:
  1776                           	opt stack 0
  1777  000928                     i2Ll4518:
  1778                           	opt stack 0
  1779  000928  FFFF               	dw	65535	; assembler added errata NOP
  1780  00092A  C09E  FF8A         	movff	_ledStatuses+14,3978	;volatile
  1781  00092E  D005               	goto	i2Ll4522
  1782  000930                     i2Ll4520:
  1783                           	opt stack 0
  1784  000930  FFFF               	dw	65535	; assembler added errata NOP
  1785  000932  0100               	movlb	0	; () banked
  1786  000934  519E               	movf	(_ledStatuses+14)& (0+255),w,b
  1787  000936  198E               	xorwf	(_ledBlink+14)& (0+255),w,b
  1788  000938  6E8A               	movwf	3978,c	;volatile
  1789  00093A                     i2Ll4522:
  1790                           	opt stack 0
  1791  00093A  FFFF               	dw	65535	; assembler added errata NOP
  1792  00093C  0E03               	movlw	3
  1793  00093E  ECE5  F011         	call	_UpdateLedRegister
  1794  000942                     i2Ll4524:
  1795                           	opt stack 0
  1796  000942  FFFF               	dw	65535	; assembler added errata NOP
  1797                           
  1798                           ;main.c: 539: LATAbits.LATA2 = 1;
  1799  000944  8489               	bsf	3977,2,c	;volatile
  1800  000946  D055               	goto	i2Ll4564
  1801  000948                     i2Ll4526:
  1802                           	opt stack 27
  1803                           
  1804                           ; BSR set to: 0
  1805                           ;main.c: 542: if(blinkOn) LATB = ledStatuses[9]; else LATB = ledStatuses[9] ^ ledBlink[9
      +                          ]; UpdateLedRegister(0);
  1806  000948  5072               	movf	_blinkOn,w,c
  1807  00094A  B4D8               	btfsc	status,2,c
  1808  00094C                     i2Lu3881:
  1809                           	opt stack 0
  1810  00094C  FFFF               	dw	65535	; assembler added errata NOP
  1811  00094E  D004               	goto	i2Ll4530
  1812  000950                     i2Lu3880:
  1813                           	opt stack 0
  1814  000950                     i2Ll4528:
  1815                           	opt stack 0
  1816  000950  FFFF               	dw	65535	; assembler added errata NOP
  1817                           
  1818                           ; BSR set to: 0
  1819  000952  C099  FF8A         	movff	_ledStatuses+9,3978	;volatile
  1820  000956  D004               	goto	i2Ll4532
  1821  000958                     i2Ll4530:
  1822                           	opt stack 0
  1823  000958  FFFF               	dw	65535	; assembler added errata NOP
  1824                           
  1825                           ; BSR set to: 0
  1826  00095A  5199               	movf	(_ledStatuses+9)& (0+255),w,b
  1827  00095C  1989               	xorwf	(_ledBlink+9)& (0+255),w,b
  1828  00095E  6E8A               	movwf	3978,c	;volatile
  1829  000960                     i2Ll4532:
  1830                           	opt stack 0
  1831  000960  FFFF               	dw	65535	; assembler added errata NOP
  1832                           
  1833                           ; BSR set to: 0
  1834  000962  0E00               	movlw	0
  1835  000964  ECE5  F011         	call	_UpdateLedRegister
  1836  000968                     i2Ll4534:
  1837                           	opt stack 0
  1838  000968  FFFF               	dw	65535	; assembler added errata NOP
  1839                           
  1840                           ;main.c: 543: if(blinkOn) LATB = ledStatuses[10]; else LATB = ledStatuses[10] ^ ledBlink
      +                          [10]; UpdateLedRegister(1);
  1841  00096A  5072               	movf	_blinkOn,w,c
  1842  00096C  B4D8               	btfsc	status,2,c
  1843  00096E                     i2Lu3891:
  1844                           	opt stack 0
  1845  00096E  FFFF               	dw	65535	; assembler added errata NOP
  1846  000970  D004               	goto	i2Ll4538
  1847  000972                     i2Lu3890:
  1848                           	opt stack 0
  1849  000972                     i2Ll4536:
  1850                           	opt stack 0
  1851  000972  FFFF               	dw	65535	; assembler added errata NOP
  1852  000974  C09A  FF8A         	movff	_ledStatuses+10,3978	;volatile
  1853  000978  D005               	goto	i2Ll4540
  1854  00097A                     i2Ll4538:
  1855                           	opt stack 0
  1856  00097A  FFFF               	dw	65535	; assembler added errata NOP
  1857  00097C  0100               	movlb	0	; () banked
  1858  00097E  519A               	movf	(_ledStatuses+10)& (0+255),w,b
  1859  000980  198A               	xorwf	(_ledBlink+10)& (0+255),w,b
  1860  000982  6E8A               	movwf	3978,c	;volatile
  1861  000984                     i2Ll4540:
  1862                           	opt stack 0
  1863  000984  FFFF               	dw	65535	; assembler added errata NOP
  1864  000986  0E01               	movlw	1
  1865  000988  ECE5  F011         	call	_UpdateLedRegister
  1866  00098C                     i2Ll4542:
  1867                           	opt stack 0
  1868  00098C  FFFF               	dw	65535	; assembler added errata NOP
  1869                           
  1870                           ;main.c: 544: if(blinkOn) LATB = ledStatuses[11]; else LATB = ledStatuses[11] ^ ledBlink
      +                          [11]; UpdateLedRegister(2);
  1871  00098E  5072               	movf	_blinkOn,w,c
  1872  000990  B4D8               	btfsc	status,2,c
  1873  000992                     i2Lu3901:
  1874                           	opt stack 0
  1875  000992  FFFF               	dw	65535	; assembler added errata NOP
  1876  000994  D004               	goto	i2Ll4546
  1877  000996                     i2Lu3900:
  1878                           	opt stack 0
  1879  000996                     i2Ll4544:
  1880                           	opt stack 0
  1881  000996  FFFF               	dw	65535	; assembler added errata NOP
  1882  000998  C09B  FF8A         	movff	_ledStatuses+11,3978	;volatile
  1883  00099C  D005               	goto	i2Ll4548
  1884  00099E                     i2Ll4546:
  1885                           	opt stack 0
  1886  00099E  FFFF               	dw	65535	; assembler added errata NOP
  1887  0009A0  0100               	movlb	0	; () banked
  1888  0009A2  519B               	movf	(_ledStatuses+11)& (0+255),w,b
  1889  0009A4  198B               	xorwf	(_ledBlink+11)& (0+255),w,b
  1890  0009A6  6E8A               	movwf	3978,c	;volatile
  1891  0009A8                     i2Ll4548:
  1892                           	opt stack 0
  1893  0009A8  FFFF               	dw	65535	; assembler added errata NOP
  1894  0009AA  0E02               	movlw	2
  1895  0009AC  ECE5  F011         	call	_UpdateLedRegister
  1896  0009B0                     i2Ll4550:
  1897                           	opt stack 0
  1898  0009B0  FFFF               	dw	65535	; assembler added errata NOP
  1899                           
  1900                           ;main.c: 545: if(blinkOn) LATB = ledStatuses[15]; else LATB = ledStatuses[15] ^ ledBlink
      +                          [15]; UpdateLedRegister(3);
  1901  0009B2  5072               	movf	_blinkOn,w,c
  1902  0009B4  B4D8               	btfsc	status,2,c
  1903  0009B6                     i2Lu3911:
  1904                           	opt stack 0
  1905  0009B6  FFFF               	dw	65535	; assembler added errata NOP
  1906  0009B8  D004               	goto	i2Ll4554
  1907  0009BA                     i2Lu3910:
  1908                           	opt stack 0
  1909  0009BA                     i2Ll4552:
  1910                           	opt stack 0
  1911  0009BA  FFFF               	dw	65535	; assembler added errata NOP
  1912  0009BC  C09F  FF8A         	movff	_ledStatuses+15,3978	;volatile
  1913  0009C0  D005               	goto	i2Ll4556
  1914  0009C2                     i2Ll4554:
  1915                           	opt stack 0
  1916  0009C2  FFFF               	dw	65535	; assembler added errata NOP
  1917  0009C4  0100               	movlb	0	; () banked
  1918  0009C6  519F               	movf	(_ledStatuses+15)& (0+255),w,b
  1919  0009C8  198F               	xorwf	(_ledBlink+15)& (0+255),w,b
  1920  0009CA  6E8A               	movwf	3978,c	;volatile
  1921  0009CC                     i2Ll4556:
  1922                           	opt stack 0
  1923  0009CC  FFFF               	dw	65535	; assembler added errata NOP
  1924  0009CE  0E03               	movlw	3
  1925  0009D0  ECE5  F011         	call	_UpdateLedRegister
  1926  0009D4                     i2Ll4558:
  1927                           	opt stack 0
  1928  0009D4  FFFF               	dw	65535	; assembler added errata NOP
  1929                           
  1930                           ;main.c: 546: LATAbits.LATA3 = 1;
  1931  0009D6  8689               	bsf	3977,3,c	;volatile
  1932  0009D8  D00C               	goto	i2Ll4564
  1933  0009DA                     i2Ll4562:
  1934                           	opt stack 0
  1935  0009DA  FFFF               	dw	65535	; assembler added errata NOP
  1936                           
  1937                           ; BSR set to: 0
  1938  0009DC  51CC               	movf	_currentLedBlock& (0+255),w,b
  1939                           
  1940                           ; Switch size 1, requested type "speed"
  1941                           ; Number of cases is 4, Range of values is 0 to 3
  1942                           ; switch strategies available:
  1943                           ; Name         Instructions Cycles
  1944                           ; simple_byte           13     7 (average)
  1945                           ;	Chosen strategy is simple_byte
  1946  0009DE  E101 D6D8          	bz	i2Ll4424
  1947  0009E2  0A01               	xorlw	1	; case 1
  1948  0009E4  E101 D71E          	bz	i2Ll4458
  1949  0009E8  0A03               	xorlw	3	; case 2
  1950  0009EA  E101 D764          	bz	i2Ll4492
  1951  0009EE  0A01               	xorlw	1	; case 3
  1952  0009F0  E0AB               	bz	i2Ll4526
  1953  0009F2                     i2Ll4564:
  1954                           	opt stack 0
  1955  0009F2  FFFF               	dw	65535	; assembler added errata NOP
  1956                           
  1957                           ;main.c: 550: currentLedBlock++;
  1958  0009F4  0100               	movlb	0	; () banked
  1959  0009F6  2BCC               	incf	_currentLedBlock& (0+255),f,b
  1960                           
  1961                           ;main.c: 553: currentLedBlock &= 0xFB;
  1962  0009F8  95CC               	bcf	_currentLedBlock& (0+255),2,b
  1963  0009FA                     i2Ll366:
  1964                           	opt stack 0
  1965  0009FA  FFFF               	dw	65535	; assembler added errata NOP
  1966  0009FC  D001               	goto	l5452
  1967  0009FE  FFFF               	dw	65535	; errata NOP
  1968  000A00                     l5452:
  1969  000A00  FFFF               	dw	65535	; assembler added errata NOP
  1970                           
  1971                           ; BSR set to: 0
  1972                           ;main.c: 705: if(PORTCbits.RC1 == 0)
  1973  000A02  B282               	btfsc	3970,1,c	;volatile
  1974  000A04  D047               	goto	l397
  1975                           
  1976                           ; BSR set to: 0
  1977                           ;main.c: 706: {
  1978                           ;main.c: 708: if(oldEventNum != 0xff)
  1979  000A06  2879               	incf	_oldEventNum,w,c
  1980  000A08  E003               	bz	l5458
  1981                           
  1982                           ; BSR set to: 0
  1983                           ;main.c: 709: {
  1984                           ;main.c: 710: ResetEvent(1);
  1985  000A0A  0E01               	movlw	1
  1986  000A0C  EC2A  F012         	call	_ResetEvent
  1987  000A10                     l5458:
  1988                           
  1989                           ;main.c: 711: }
  1990                           ;main.c: 715: diffTime = curMs - oldBuzzerOnTime;
  1991  000A10  0100               	movlb	0	; () banked
  1992  000A12  51E2               	movf	main@oldBuzzerOnTime& (0+255),w,b
  1993  000A14  5DE8               	subwf	main@curMs& (0+255),w,b
  1994  000A16  6FA4               	movwf	_diffTime& (0+255),b
  1995  000A18  51E3               	movf	(main@oldBuzzerOnTime+1)& (0+255),w,b
  1996  000A1A  59E9               	subwfb	(main@curMs+1)& (0+255),w,b
  1997  000A1C  6FA5               	movwf	(_diffTime+1)& (0+255),b
  1998  000A1E  51E4               	movf	(main@oldBuzzerOnTime+2)& (0+255),w,b
  1999  000A20  59EA               	subwfb	(main@curMs+2)& (0+255),w,b
  2000  000A22  6FA6               	movwf	(_diffTime+2)& (0+255),b
  2001  000A24  51E5               	movf	(main@oldBuzzerOnTime+3)& (0+255),w,b
  2002  000A26  59EB               	subwfb	(main@curMs+3)& (0+255),w,b
  2003  000A28  6FA7               	movwf	(_diffTime+3)& (0+255),b
  2004                           
  2005                           ; BSR set to: 0
  2006                           ;main.c: 716: if(diffTime > buzzerOnOffPeriod)
  2007  000A2A  51EF               	movf	_buzzerOnOffPeriod& (0+255),w,b
  2008  000A2C  6FD9               	movwf	??_main& (0+255),b
  2009  000A2E  51F0               	movf	(_buzzerOnOffPeriod+1)& (0+255),w,b
  2010  000A30  6FDA               	movwf	(??_main+1)& (0+255),b
  2011  000A32  6BDB               	clrf	(??_main+2)& (0+255),b
  2012  000A34  6BDC               	clrf	(??_main+3)& (0+255),b
  2013  000A36  51A4               	movf	_diffTime& (0+255),w,b
  2014  000A38  5DD9               	subwf	??_main& (0+255),w,b
  2015  000A3A  51A5               	movf	(_diffTime+1)& (0+255),w,b
  2016  000A3C  59DA               	subwfb	(??_main+1)& (0+255),w,b
  2017  000A3E  51A6               	movf	(_diffTime+2)& (0+255),w,b
  2018  000A40  59DB               	subwfb	(??_main+2)& (0+255),w,b
  2019  000A42  51A7               	movf	(_diffTime+3)& (0+255),w,b
  2020  000A44  59DC               	subwfb	(??_main+3)& (0+255),w,b
  2021  000A46  E215               	bc	l5474
  2022                           
  2023                           ; BSR set to: 0
  2024                           ;main.c: 717: {
  2025                           ;main.c: 718: SetBuzzerDuty(buzzeLoudDuration);
  2026  000A48  C073  F005         	movff	_buzzeLoudDuration,SetBuzzerDuty@dc
  2027  000A4C  6A06               	clrf	SetBuzzerDuty@dc+1,c
  2028  000A4E  ECD7  F010         	call	_SetBuzzerDuty	;wreg free
  2029                           
  2030                           ;main.c: 719: PR2 = buzzerAlarmPeriod;
  2031  000A52  C074  FFCB         	movff	_buzzerAlarmPeriod,4043	;volatile
  2032                           
  2033                           ;main.c: 720: TRISCbits.TRISC2 = 0; T2CONbits.TMR2ON = 1; IsBusserOn = 1;;
  2034  000A56  9494               	bcf	3988,2,c	;volatile
  2035  000A58  84CA               	bsf	4042,2,c	;volatile
  2036  000A5A  0E01               	movlw	1
  2037  000A5C  0100               	movlb	0	; () banked
  2038  000A5E  6FBE               	movwf	_IsBusserOn& (0+255),b
  2039                           
  2040                           ; BSR set to: 0
  2041                           ;main.c: 721: oldBuzzerOnTime = curMs;
  2042  000A60  C0E8  F0E2         	movff	main@curMs,main@oldBuzzerOnTime
  2043  000A64  C0E9  F0E3         	movff	main@curMs+1,main@oldBuzzerOnTime+1
  2044  000A68  C0EA  F0E4         	movff	main@curMs+2,main@oldBuzzerOnTime+2
  2045  000A6C  C0EB  F0E5         	movff	main@curMs+3,main@oldBuzzerOnTime+3
  2046                           
  2047                           ;main.c: 722: }
  2048  000A70  D015               	goto	l5480
  2049  000A72                     l5474:
  2050                           
  2051                           ; BSR set to: 0
  2052                           ;main.c: 723: else if(IsBusserOn && diffTime > buzzerOnOffDuration)
  2053  000A72  51BE               	movf	_IsBusserOn& (0+255),w,b
  2054  000A74  E013               	bz	l5480
  2055                           
  2056                           ; BSR set to: 0
  2057  000A76  51ED               	movf	_buzzerOnOffDuration& (0+255),w,b
  2058  000A78  6FD9               	movwf	??_main& (0+255),b
  2059  000A7A  51EE               	movf	(_buzzerOnOffDuration+1)& (0+255),w,b
  2060  000A7C  6FDA               	movwf	(??_main+1)& (0+255),b
  2061  000A7E  6BDB               	clrf	(??_main+2)& (0+255),b
  2062  000A80  6BDC               	clrf	(??_main+3)& (0+255),b
  2063  000A82  51A4               	movf	_diffTime& (0+255),w,b
  2064  000A84  5DD9               	subwf	??_main& (0+255),w,b
  2065  000A86  51A5               	movf	(_diffTime+1)& (0+255),w,b
  2066  000A88  59DA               	subwfb	(??_main+1)& (0+255),w,b
  2067  000A8A  51A6               	movf	(_diffTime+2)& (0+255),w,b
  2068  000A8C  59DB               	subwfb	(??_main+2)& (0+255),w,b
  2069  000A8E  51A7               	movf	(_diffTime+3)& (0+255),w,b
  2070  000A90  59DC               	subwfb	(??_main+3)& (0+255),w,b
  2071  000A92  E204               	bc	l5480
  2072  000A94                     l397:
  2073  000A94  FFFF               	dw	65535	; assembler added errata NOP
  2074                           
  2075                           ; BSR set to: 0
  2076                           ;main.c: 729: else
  2077                           ;main.c: 730: {
  2078                           ;main.c: 731: T2CONbits.TMR2ON = 0; TRISCbits.TRISC2 = 1; IsBusserOn = 0;;
  2079  000A96  94CA               	bcf	4042,2,c	;volatile
  2080  000A98  8494               	bsf	3988,2,c	;volatile
  2081  000A9A  6BBE               	clrf	_IsBusserOn& (0+255),b
  2082  000A9C                     l5480:
  2083  000A9C  FFFF               	dw	65535	; assembler added errata NOP
  2084                           
  2085                           ; BSR set to: 0
  2086                           ;main.c: 732: }
  2087                           ;main.c: 735: if(curMs - lastMs >= 1000)
  2088  000A9E  51DE               	movf	main@lastMs& (0+255),w,b
  2089  000AA0  5DE8               	subwf	main@curMs& (0+255),w,b
  2090  000AA2  6FD9               	movwf	??_main& (0+255),b
  2091  000AA4  51DF               	movf	(main@lastMs+1)& (0+255),w,b
  2092  000AA6  59E9               	subwfb	(main@curMs+1)& (0+255),w,b
  2093  000AA8  6FDA               	movwf	(??_main+1)& (0+255),b
  2094  000AAA  51E0               	movf	(main@lastMs+2)& (0+255),w,b
  2095  000AAC  59EA               	subwfb	(main@curMs+2)& (0+255),w,b
  2096  000AAE  6FDB               	movwf	(??_main+2)& (0+255),b
  2097  000AB0  51E1               	movf	(main@lastMs+3)& (0+255),w,b
  2098  000AB2  59EB               	subwfb	(main@curMs+3)& (0+255),w,b
  2099  000AB4  6FDC               	movwf	(??_main+3)& (0+255),b
  2100  000AB6  51DC               	movf	(??_main+3)& (0+255),w,b
  2101  000AB8  11DB               	iorwf	(??_main+2)& (0+255),w,b
  2102  000ABA  E105               	bnz	u5300
  2103  000ABC  0EE8               	movlw	232
  2104  000ABE  5DD9               	subwf	??_main& (0+255),w,b
  2105  000AC0  0E03               	movlw	3
  2106  000AC2  59DA               	subwfb	(??_main+1)& (0+255),w,b
  2107  000AC4  E34A               	bnc	l5510
  2108  000AC6                     u5300:
  2109                           
  2110                           ; BSR set to: 0
  2111                           ;main.c: 736: {
  2112                           ;main.c: 737: AddSecond();
  2113  000AC6  EC27  F013         	call	_AddSecond	;wreg free
  2114                           
  2115                           ; BSR set to: 0
  2116                           ;main.c: 739: if(oldEventNum != 0xff && *GetTime() >= eventResetSecond)
  2117  000ACA  2879               	incf	_oldEventNum,w,c
  2118  000ACC  E015               	bz	l5490
  2119                           
  2120                           ; BSR set to: 0
  2121  000ACE  EC36  F013         	call	_GetTime	;wreg free
  2122  000AD2  6ED9               	movwf	fsr2l,c
  2123  000AD4  6ADA               	clrf	fsr2h,c
  2124  000AD6  0100               	movlb	0	; () banked
  2125  000AD8  51A8               	movf	_eventResetSecond& (0+255),w,b
  2126  000ADA  5CDE               	subwf	postinc2,w,c
  2127  000ADC  51A9               	movf	(_eventResetSecond+1)& (0+255),w,b
  2128  000ADE  58DE               	subwfb	postinc2,w,c
  2129  000AE0  51AA               	movf	(_eventResetSecond+2)& (0+255),w,b
  2130  000AE2  58DE               	subwfb	postinc2,w,c
  2131  000AE4  50DE               	movf	postinc2,w,c
  2132  000AE6  0A80               	xorlw	128
  2133  000AE8  6FDD               	movwf	(??_main+4)& (0+255),b
  2134  000AEA  51AB               	movf	(_eventResetSecond+3)& (0+255),w,b
  2135  000AEC  0A80               	xorlw	128
  2136  000AEE  59DD               	subwfb	(??_main+4)& (0+255),w,b
  2137  000AF0  E303               	bnc	l5490
  2138                           
  2139                           ; BSR set to: 0
  2140                           ;main.c: 740: {
  2141                           ;main.c: 741: ResetEvent(0);
  2142  000AF2  0E00               	movlw	0
  2143  000AF4  EC2A  F012         	call	_ResetEvent
  2144  000AF8                     l5490:
  2145                           
  2146                           ;main.c: 742: }
  2147                           ;main.c: 744: _MODBUSInputRegs[5] = *GetTime();
  2148  000AF8  EC36  F013         	call	_GetTime	;wreg free
  2149  000AFC  6ED9               	movwf	fsr2l,c
  2150  000AFE  6ADA               	clrf	fsr2h,c
  2151  000B00  CFDE F1B4          	movff	postinc2,__MODBUSInputRegs+10
  2152  000B04  CFDD F1B5          	movff	postdec2,__MODBUSInputRegs+11
  2153                           
  2154                           ;main.c: 745: uint8_t hour = 0, minute = 0;
  2155  000B08  0100               	movlb	0	; () banked
  2156  000B0A  6BE7               	clrf	main@hour& (0+255),b
  2157                           
  2158                           ; BSR set to: 0
  2159  000B0C  6BEC               	clrf	main@minute& (0+255),b
  2160                           
  2161                           ; BSR set to: 0
  2162                           ;main.c: 747: if(getHourMin(&hour, &minute) && oldMinute != minute)
  2163  000B0E  0EEC               	movlw	low main@minute
  2164  000B10  6E05               	movwf	getHourMin@min,c
  2165  000B12  0EE7               	movlw	main@hour& (0+255)
  2166  000B14  EC9B  F012         	call	_getHourMin
  2167  000B18  0900               	iorlw	0
  2168  000B1A  E00F               	bz	l5506
  2169  000B1C  0100               	movlb	0	; () banked
  2170  000B1E  51EC               	movf	main@minute& (0+255),w,b
  2171  000B20  19E6               	xorwf	main@oldMinute& (0+255),w,b
  2172  000B22  E00B               	bz	l5506
  2173                           
  2174                           ; BSR set to: 0
  2175                           ;main.c: 748: {
  2176                           ;main.c: 749: _MODBUSInputRegs[1] = (((uint16_t)hour<<8)|minute);
  2177  000B24  51E7               	movf	main@hour& (0+255),w,b
  2178  000B26  6FD9               	movwf	??_main& (0+255),b
  2179  000B28  51EC               	movf	main@minute& (0+255),w,b
  2180  000B2A  0101               	movlb	1	; () banked
  2181  000B2C  6FAC               	movwf	(__MODBUSInputRegs+2)& (0+255),b
  2182  000B2E  C0D9  F1AD         	movff	??_main,__MODBUSInputRegs+3
  2183                           
  2184                           ; BSR set to: 1
  2185                           ;main.c: 750: oldMinute = minute;
  2186  000B32  C0EC  F0E6         	movff	main@minute,main@oldMinute
  2187                           
  2188                           ; BSR set to: 1
  2189                           ;main.c: 751: ProcessDiary();
  2190  000B36  EC9E  F00D         	call	_ProcessDiary	;wreg free
  2191  000B3A                     l5506:
  2192                           
  2193                           ;main.c: 752: }
  2194                           ;main.c: 754: _MODBUSInputRegs[4] = (((uint16_t)hour<<8)|minute);
  2195  000B3A  0100               	movlb	0	; () banked
  2196  000B3C  51E7               	movf	main@hour& (0+255),w,b
  2197  000B3E  6FD9               	movwf	??_main& (0+255),b
  2198  000B40  51EC               	movf	main@minute& (0+255),w,b
  2199  000B42  0101               	movlb	1	; () banked
  2200  000B44  6FB2               	movwf	(__MODBUSInputRegs+8)& (0+255),b
  2201  000B46  C0D9  F1B3         	movff	??_main,__MODBUSInputRegs+9
  2202                           
  2203                           ; BSR set to: 1
  2204                           ;main.c: 756: lastMs = curMs;
  2205  000B4A  C0E8  F0DE         	movff	main@curMs,main@lastMs
  2206  000B4E  C0E9  F0DF         	movff	main@curMs+1,main@lastMs+1
  2207  000B52  C0EA  F0E0         	movff	main@curMs+2,main@lastMs+2
  2208  000B56  C0EB  F0E1         	movff	main@curMs+3,main@lastMs+3
  2209  000B5A                     l5510:
  2210                           
  2211                           ;main.c: 758: }
  2212                           ;main.c: 759: modbusState = ModbusPoll(_MODBUSDiscreteInputs, &_MODBUSCoils, _MODBUSInpu
      +                          tRegs, 15, _MODBUSHoldingRegs, 15);
  2213  000B5A  C0B4  F027         	movff	__MODBUSDiscreteInputs,ModbusPoll@discreteInputs
  2214  000B5E  C0B5  F028         	movff	__MODBUSDiscreteInputs+1,ModbusPoll@discreteInputs+1
  2215  000B62  0ED6               	movlw	low __MODBUSCoils
  2216  000B64  6E29               	movwf	ModbusPoll@coils,c
  2217  000B66  0EAA               	movlw	low __MODBUSInputRegs
  2218  000B68  6E2A               	movwf	ModbusPoll@inputRegs,c
  2219  000B6A  0E01               	movlw	high __MODBUSInputRegs
  2220  000B6C  6E2B               	movwf	ModbusPoll@inputRegs+1,c
  2221  000B6E  0E0F               	movlw	15
  2222  000B70  6E2C               	movwf	ModbusPoll@inputRegsCount,c
  2223  000B72  0E8C               	movlw	low __MODBUSHoldingRegs
  2224  000B74  6E2D               	movwf	ModbusPoll@holdingRegs,c
  2225  000B76  0E01               	movlw	high __MODBUSHoldingRegs
  2226  000B78  6E2E               	movwf	ModbusPoll@holdingRegs+1,c
  2227  000B7A  0E0F               	movlw	15
  2228  000B7C  6E2F               	movwf	ModbusPoll@holdingRegsCount,c
  2229  000B7E  EC88  F009         	call	_ModbusPoll	;wreg free
  2230                           
  2231                           ;main.c: 760: io_poll();
  2232  000B82  EC18  F000         	call	_io_poll	;wreg free
  2233  000B86  D59F               	goto	l5448
  2234  000B88                     __end_of_main:
  2235                           	opt stack 0
  2236                           tblptru	equ	0xFF8
  2237                           tblptrh	equ	0xFF7
  2238                           tblptrl	equ	0xFF6
  2239                           tablat	equ	0xFF5
  2240                           postinc0	equ	0xFEE
  2241                           wreg	equ	0xFE8
  2242                           postdec1	equ	0xFE5
  2243                           fsr1h	equ	0xFE2
  2244                           fsr1l	equ	0xFE1
  2245                           postinc2	equ	0xFDE
  2246                           postdec2	equ	0xFDD
  2247                           fsr2h	equ	0xFDA
  2248                           fsr2l	equ	0xFD9
  2249                           status	equ	0xFD8
  2250                           
  2251 ;; *************** function _pwm_init *****************
  2252 ;; Defined at:
  2253 ;;		line 401 in file "main.c"
  2254 ;; Parameters:    Size  Location     Type
  2255 ;;		None
  2256 ;; Auto vars:     Size  Location     Type
  2257 ;;		None
  2258 ;; Return value:  Size  Location     Type
  2259 ;;                  1    wreg      void 
  2260 ;; Registers used:
  2261 ;;		wreg, status,2
  2262 ;; Tracked objects:
  2263 ;;		On entry : 0/0
  2264 ;;		On exit  : 0/0
  2265 ;;		Unchanged: 0/0
  2266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2267 ;;      Params:         0       0       0       0       0       0       0
  2268 ;;      Locals:         0       0       0       0       0       0       0
  2269 ;;      Temps:          0       0       0       0       0       0       0
  2270 ;;      Totals:         0       0       0       0       0       0       0
  2271 ;;Total ram usage:        0 bytes
  2272 ;; Hardware stack levels used:    1
  2273 ;; Hardware stack levels required when called:    2
  2274 ;; This function calls:
  2275 ;;		Nothing
  2276 ;; This function is called by:
  2277 ;;		_main
  2278 ;; This function uses a non-reentrant model
  2279 ;;
  2280                           
  2281                           	psect	text1
  2282  000000                     __ptext1:
  2283                           	opt stack 0
  2284  000000                     _pwm_init:
  2285                           	opt stack 0
  2286  000000                     __end_of_pwm_init:
  2287                           	opt stack 0
  2288                           tblptru	equ	0xFF8
  2289                           tblptrh	equ	0xFF7
  2290                           tblptrl	equ	0xFF6
  2291                           tablat	equ	0xFF5
  2292                           postinc0	equ	0xFEE
  2293                           wreg	equ	0xFE8
  2294                           postdec1	equ	0xFE5
  2295                           fsr1h	equ	0xFE2
  2296                           fsr1l	equ	0xFE1
  2297                           postinc2	equ	0xFDE
  2298                           postdec2	equ	0xFDD
  2299                           fsr2h	equ	0xFDA
  2300                           fsr2l	equ	0xFD9
  2301                           status	equ	0xFD8
  2302                           
  2303 ;; *************** function _io_poll *****************
  2304 ;; Defined at:
  2305 ;;		line 783 in file "main.c"
  2306 ;; Parameters:    Size  Location     Type
  2307 ;;		None
  2308 ;; Auto vars:     Size  Location     Type
  2309 ;;  eventEeAddr     1  103[COMRAM] unsigned char 
  2310 ;;  yearMonth       2  101[COMRAM] unsigned int 
  2311 ;;  daySec          2   99[COMRAM] unsigned int 
  2312 ;;  hourMin         2   97[COMRAM] unsigned int 
  2313 ;;  lastAddress     2  108[COMRAM] unsigned int 
  2314 ;;  lastEndAddre    2  106[COMRAM] unsigned int 
  2315 ;;  lastCommand     1  105[COMRAM] PTR enum E2336
  2316 ;;		 -> _lastCommand(1), 
  2317 ;;  v1              1  104[COMRAM] unsigned char 
  2318 ;; Return value:  Size  Location     Type
  2319 ;;                  1    wreg      void 
  2320 ;; Registers used:
  2321 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2322 ;; Tracked objects:
  2323 ;;		On entry : 0/0
  2324 ;;		On exit  : 0/0
  2325 ;;		Unchanged: 0/0
  2326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2327 ;;      Params:         0       0       0       0       0       0       0
  2328 ;;      Locals:        13       0       0       0       0       0       0
  2329 ;;      Temps:          4       0       0       0       0       0       0
  2330 ;;      Totals:        17       0       0       0       0       0       0
  2331 ;;Total ram usage:       17 bytes
  2332 ;; Hardware stack levels used:    1
  2333 ;; Hardware stack levels required when called:    7
  2334 ;; This function calls:
  2335 ;;		_InitFromEeprom
  2336 ;;		_LightLed
  2337 ;;		_ModbusGetLastCommand
  2338 ;;		_SetBuzzerDuty
  2339 ;;		_SetTimeFromRegs
  2340 ;; This function is called by:
  2341 ;;		_main
  2342 ;; This function uses a non-reentrant model
  2343 ;;
  2344                           
  2345                           	psect	text2
  2346  000030                     __ptext2:
  2347                           	opt stack 0
  2348  000030                     _io_poll:
  2349                           	opt stack 23
  2350                           
  2351                           ;incstack = 0
  2352  000030  FFFF               	dw	65535
  2353                           
  2354                           ;main.c: 785: uint16_t lastAddress;
  2355                           ;main.c: 786: uint16_t lastEndAddress;
  2356                           ;main.c: 788: MODBUS_COMMANDS_t *lastCommand = ModbusGetLastCommand(&lastAddress, &lastE
      +                          ndAddress);
  2357  000032  0E6B               	movlw	low io_poll@lastEndAddress
  2358  000034  6E05               	movwf	ModbusGetLastCommand@count,c
  2359  000036  0E6D               	movlw	io_poll@lastAddress& (0+255)
  2360  000038  EC84  F012         	call	_ModbusGetLastCommand
  2361  00003C  6E6A               	movwf	io_poll@lastCommand,c
  2362                           
  2363                           ;main.c: 789: if(*lastCommand == MODBUS_COM_NONE)
  2364  00003E  506A               	movf	io_poll@lastCommand,w,c
  2365  000040  6ED9               	movwf	fsr2l,c
  2366  000042  6ADA               	clrf	fsr2h,c
  2367  000044  50DF               	movf	indf2,w,c
  2368  000046  E101 D307          	bz	l415
  2369                           
  2370                           ;main.c: 792: lastEndAddress += lastAddress - 1;
  2371  00004A  685E               	setf	??_io_poll& (0+255),c
  2372  00004C  685F               	setf	(??_io_poll+1)& (0+255),c
  2373  00004E  C06D  F060         	movff	io_poll@lastAddress,??_io_poll+2
  2374  000052  C06E  F061         	movff	io_poll@lastAddress+1,??_io_poll+3
  2375  000056  505E               	movf	??_io_poll,w,c
  2376  000058  2660               	addwf	??_io_poll+2,f,c
  2377  00005A  505F               	movf	??_io_poll+1,w,c
  2378  00005C  2261               	addwfc	??_io_poll+3,f,c
  2379  00005E  5060               	movf	??_io_poll+2,w,c
  2380  000060  266B               	addwf	io_poll@lastEndAddress,f,c
  2381  000062  5061               	movf	??_io_poll+3,w,c
  2382  000064  226C               	addwfc	io_poll@lastEndAddress+1,f,c
  2383                           
  2384                           ;main.c: 794: if(*lastCommand == MODBUS_COM_WRITE_SINGLE_COIL || *lastCommand == MODBUS_
      +                          COM_WRITE_MULTIPLE_COILS)
  2385  000066  506A               	movf	io_poll@lastCommand,w,c
  2386  000068  6ED9               	movwf	fsr2l,c
  2387  00006A  6ADA               	clrf	fsr2h,c
  2388  00006C  0E05               	movlw	5
  2389  00006E  18DE               	xorwf	postinc2,w,c
  2390  000070  E006               	bz	l4780
  2391  000072  506A               	movf	io_poll@lastCommand,w,c
  2392  000074  6ED9               	movwf	fsr2l,c
  2393  000076  6ADA               	clrf	fsr2h,c
  2394  000078  0E0F               	movlw	15
  2395  00007A  18DE               	xorwf	postinc2,w,c
  2396  00007C  E13C               	bnz	l4800
  2397  00007E                     l4780:
  2398                           
  2399                           ;main.c: 795: {
  2400                           ;main.c: 796: if ((0x0f >= lastAddress && 0x0f <= lastEndAddress) && (((_MODBUSCoils) >>
      +                           (0x0f)) & 0x01))
  2401  00007E  506E               	movf	io_poll@lastAddress+1,w,c
  2402  000080  E118               	bnz	l4788
  2403  000082  0E10               	movlw	16
  2404  000084  5C6D               	subwf	io_poll@lastAddress,w,c
  2405  000086  E215               	bc	l4788
  2406  000088  506C               	movf	io_poll@lastEndAddress+1,w,c
  2407  00008A  E103               	bnz	u4130
  2408  00008C  0E0F               	movlw	15
  2409  00008E  5C6B               	subwf	io_poll@lastEndAddress,w,c
  2410  000090  E310               	bnc	l4788
  2411  000092                     u4130:
  2412  000092  C0D6  F05E         	movff	__MODBUSCoils,??_io_poll
  2413  000096  C0D7  F05F         	movff	__MODBUSCoils+1,??_io_poll+1
  2414  00009A  0E0F               	movlw	15
  2415  00009C  6E60               	movwf	(??_io_poll+2)& (0+255),c
  2416  00009E                     u4145:
  2417  00009E  FFFF               	dw	65535	; assembler added errata NOP
  2418  0000A0  90D8               	bcf	status,0,c
  2419  0000A2  325F               	rrcf	??_io_poll+1,f,c
  2420  0000A4  325E               	rrcf	??_io_poll,f,c
  2421  0000A6  2E60               	decfsz	(??_io_poll+2)& (0+255),f,c
  2422  0000A8  D7FA               	goto	u4145
  2423  0000AA  A05E               	btfss	??_io_poll,0,c
  2424  0000AC  D002               	goto	l4788
  2425  0000AE  00FF               	reset		; ;# 
  2426                           
  2427                           ;main.c: 801: return;
  2428  0000B0  D2D3               	goto	l415
  2429  0000B2                     l4788:
  2430  0000B2  FFFF               	dw	65535	; assembler added errata NOP
  2431                           
  2432                           ;main.c: 802: }
  2433                           ;main.c: 803: if ((0x09 >= lastAddress && 0x09 <= lastEndAddress) && (((_MODBUSCoils) >>
      +                           (0x09)) & 0x01))
  2434  0000B4  506E               	movf	io_poll@lastAddress+1,w,c
  2435  0000B6  E103               	bnz	u4161
  2436  0000B8  0E0A               	movlw	10
  2437  0000BA  5C6D               	subwf	io_poll@lastAddress,w,c
  2438  0000BC  B0D8               	btfsc	status,0,c
  2439  0000BE                     u4161:
  2440  0000BE  D2CC               	goto	l415
  2441  0000C0  506C               	movf	io_poll@lastEndAddress+1,w,c
  2442  0000C2  E104               	bnz	u4170
  2443  0000C4  0E09               	movlw	9
  2444  0000C6  5C6B               	subwf	io_poll@lastEndAddress,w,c
  2445  0000C8  E201 D2C6          	bnc	l415
  2446  0000CC                     u4170:
  2447  0000CC  C0D6  F05E         	movff	__MODBUSCoils,??_io_poll
  2448  0000D0  C0D7  F05F         	movff	__MODBUSCoils+1,??_io_poll+1
  2449  0000D4  0E09               	movlw	9
  2450  0000D6  6E60               	movwf	(??_io_poll+2)& (0+255),c
  2451  0000D8                     u4185:
  2452  0000D8  FFFF               	dw	65535	; assembler added errata NOP
  2453  0000DA  90D8               	bcf	status,0,c
  2454  0000DC  325F               	rrcf	??_io_poll+1,f,c
  2455  0000DE  325E               	rrcf	??_io_poll,f,c
  2456  0000E0  2E60               	decfsz	(??_io_poll+2)& (0+255),f,c
  2457  0000E2  D7FA               	goto	u4185
  2458  0000E4  A05E               	btfss	??_io_poll,0,c
  2459  0000E6  D2B8               	goto	l415
  2460                           
  2461                           ;main.c: 804: {
  2462                           ;main.c: 805: eventCount = 0;
  2463  0000E8  6A75               	clrf	_eventCount,c
  2464  0000EA                     l4796:
  2465  0000EA  FFFF               	dw	65535	; assembler added errata NOP
  2466                           
  2467                           ;main.c: 806: _MODBUSInputRegs[0] = 0x8080;
  2468  0000EC  0E80               	movlw	128
  2469  0000EE  0101               	movlb	1	; () banked
  2470  0000F0  6FAB               	movwf	(__MODBUSInputRegs+1)& (0+255),b
  2471  0000F2  6FAA               	movwf	__MODBUSInputRegs& (0+255),b
  2472  0000F4  D2B1               	goto	l415
  2473  0000F6                     l4800:
  2474                           
  2475                           ;main.c: 810: }
  2476                           ;main.c: 811: uint8_t v1;
  2477                           ;main.c: 812: if(*lastCommand == MODBUS_COM_WRITE_SINGLE_REGISTER || *lastCommand == MOD
      +                          BUS_COM_WRITE_MULTIPLE_REGISTERS)
  2478  0000F6  506A               	movf	io_poll@lastCommand,w,c
  2479  0000F8  6ED9               	movwf	fsr2l,c
  2480  0000FA  6ADA               	clrf	fsr2h,c
  2481  0000FC  0E06               	movlw	6
  2482  0000FE  18DE               	xorwf	postinc2,w,c
  2483  000100  E007               	bz	l4804
  2484  000102  506A               	movf	io_poll@lastCommand,w,c
  2485  000104  6ED9               	movwf	fsr2l,c
  2486  000106  6ADA               	clrf	fsr2h,c
  2487  000108  0E10               	movlw	16
  2488  00010A  18DE               	xorwf	postinc2,w,c
  2489  00010C  E001 D29B          	bnz	l5284
  2490  000110                     l4804:
  2491                           
  2492                           ;main.c: 813: {
  2493                           ;main.c: 815: if((13 >= lastAddress && 13 <= lastEndAddress) && _MODBUSHoldingRegs[13] >
      +                           0)
  2494  000110  506E               	movf	io_poll@lastAddress+1,w,c
  2495  000112  E168               	bnz	l4876
  2496  000114  0E0E               	movlw	14
  2497  000116  5C6D               	subwf	io_poll@lastAddress,w,c
  2498  000118  E265               	bc	l4876
  2499  00011A  506C               	movf	io_poll@lastEndAddress+1,w,c
  2500  00011C  E103               	bnz	u4230
  2501  00011E  0E0D               	movlw	13
  2502  000120  5C6B               	subwf	io_poll@lastEndAddress,w,c
  2503  000122  E360               	bnc	l4876
  2504  000124                     u4230:
  2505  000124  0101               	movlb	1	; () banked
  2506  000126  51A6               	movf	(__MODBUSHoldingRegs+26)& (0+255),w,b
  2507  000128  11A7               	iorwf	(__MODBUSHoldingRegs+27)& (0+255),w,b
  2508  00012A  E05C               	bz	l4876
  2509                           
  2510                           ; BSR set to: 1
  2511                           ;main.c: 816: {
  2512                           ;main.c: 817: if(eventCount < 60)
  2513  00012C  0E3C               	movlw	60
  2514  00012E  6075               	cpfslt	_eventCount,c
  2515  000130  D055               	goto	l4874
  2516                           
  2517                           ; BSR set to: 1
  2518                           ;main.c: 818: {
  2519                           ;main.c: 819: uint8_t eventEeAddr = 18 + 1 + (eventCount << 1);
  2520  000132  5075               	movf	_eventCount,w,c
  2521  000134  0D02               	mullw	2
  2522  000136  50F3               	movf	prodl,w,c
  2523  000138  0F13               	addlw	19
  2524  00013A  6E68               	movwf	io_poll@eventEeAddr,c
  2525                           
  2526                           ; BSR set to: 1
  2527                           ;main.c: 820: v1 = ((unsigned char)(((_MODBUSHoldingRegs[13])>>8)&0xFF));
  2528  00013C  51A7               	movf	(__MODBUSHoldingRegs+27)& (0+255),w,b
  2529  00013E  6E69               	movwf	io_poll@v1,c
  2530  000140                     l427:
  2531  000140  FFFF               	dw	65535	; assembler added errata NOP
  2532  000142  B2A6               	btfsc	4006,1,c	;volatile
  2533  000144  D7FD               	goto	l427
  2534  000146  C068  FFA9         	movff	io_poll@eventEeAddr,4009	;volatile
  2535  00014A  C069  FFA8         	movff	io_poll@v1,4008	;volatile
  2536  00014E  90D8               	bcf	status,0,c	;volatile
  2537  000150  BEF2               	btfsc	intcon,7,c	;volatile
  2538  000152  80D8               	bsf	status,0,c	;volatile
  2539  000154  9EF2               	bcf	intcon,7,c	;volatile
  2540  000156  84A6               	bsf	4006,2,c	;volatile
  2541  000158  0E55               	movlw	85
  2542  00015A  6EA7               	movwf	4007,c	;volatile
  2543  00015C  0EAA               	movlw	170
  2544  00015E  6EA7               	movwf	4007,c	;volatile
  2545  000160  82A6               	bsf	4006,1,c	;volatile
  2546  000162  94A6               	bcf	4006,2,c	;volatile
  2547  000164  E301               	bnc	l432
  2548  000166  8EF2               	bsf	intcon,7,c	;volatile
  2549  000168                     l432:
  2550                           
  2551                           ;main.c: 822: v1 = ((unsigned char)((_MODBUSHoldingRegs[13])&0xFF));
  2552  000168  C1A6  F069         	movff	__MODBUSHoldingRegs+26,io_poll@v1
  2553  00016C                     l434:
  2554  00016C  FFFF               	dw	65535	; assembler added errata NOP
  2555  00016E  B2A6               	btfsc	4006,1,c	;volatile
  2556  000170  D7FD               	goto	l434
  2557  000172  2868               	incf	io_poll@eventEeAddr,w,c
  2558  000174  6EA9               	movwf	4009,c	;volatile
  2559  000176  C069  FFA8         	movff	io_poll@v1,4008	;volatile
  2560  00017A  90D8               	bcf	status,0,c	;volatile
  2561  00017C  BEF2               	btfsc	intcon,7,c	;volatile
  2562  00017E  80D8               	bsf	status,0,c	;volatile
  2563  000180  9EF2               	bcf	intcon,7,c	;volatile
  2564  000182  84A6               	bsf	4006,2,c	;volatile
  2565  000184  0E55               	movlw	85
  2566  000186  6EA7               	movwf	4007,c	;volatile
  2567  000188  0EAA               	movlw	170
  2568  00018A  6EA7               	movwf	4007,c	;volatile
  2569  00018C  82A6               	bsf	4006,1,c	;volatile
  2570  00018E  94A6               	bcf	4006,2,c	;volatile
  2571  000190  E301               	bnc	l439
  2572  000192  8EF2               	bsf	intcon,7,c	;volatile
  2573  000194                     l439:
  2574                           
  2575                           ;main.c: 825: _MODBUSHoldingRegs[13] = 0;
  2576  000194  0101               	movlb	1	; () banked
  2577  000196  6BA6               	clrf	(__MODBUSHoldingRegs+26)& (0+255),b
  2578  000198  6BA7               	clrf	(__MODBUSHoldingRegs+27)& (0+255),b
  2579                           
  2580                           ; BSR set to: 1
  2581                           ;main.c: 827: LightLed(eventCount, LED_GREEN, 0);
  2582  00019A  0E01               	movlw	1
  2583  00019C  6E05               	movwf	LightLed@ledState,c
  2584  00019E  0E00               	movlw	0
  2585  0001A0  6E06               	movwf	LightLed@blink,c
  2586  0001A2  5075               	movf	_eventCount,w,c
  2587  0001A4  EC4D  F007         	call	_LightLed
  2588                           
  2589                           ;main.c: 829: eventCount++;
  2590  0001A8  2A75               	incf	_eventCount,f,c
  2591  0001AA                     l441:
  2592  0001AA  FFFF               	dw	65535	; assembler added errata NOP
  2593  0001AC  B2A6               	btfsc	4006,1,c	;volatile
  2594  0001AE  D7FD               	goto	l441
  2595  0001B0  0E12               	movlw	18
  2596  0001B2  6EA9               	movwf	4009,c	;volatile
  2597  0001B4  C075  FFA8         	movff	_eventCount,4008	;volatile
  2598  0001B8  90D8               	bcf	status,0,c	;volatile
  2599  0001BA  BEF2               	btfsc	intcon,7,c	;volatile
  2600  0001BC  80D8               	bsf	status,0,c	;volatile
  2601  0001BE  9EF2               	bcf	intcon,7,c	;volatile
  2602  0001C0  84A6               	bsf	4006,2,c	;volatile
  2603  0001C2  0E55               	movlw	85
  2604  0001C4  6EA7               	movwf	4007,c	;volatile
  2605  0001C6  0EAA               	movlw	170
  2606  0001C8  6EA7               	movwf	4007,c	;volatile
  2607  0001CA  82A6               	bsf	4006,1,c	;volatile
  2608  0001CC  94A6               	bcf	4006,2,c	;volatile
  2609  0001CE  E301               	bnc	l4872
  2610  0001D0  8EF2               	bsf	intcon,7,c	;volatile
  2611  0001D2                     l4872:
  2612                           
  2613                           ;main.c: 832: _MODBUSInputRegs[0] = 0x8080;
  2614  0001D2  0E80               	movlw	128
  2615  0001D4  0101               	movlb	1	; () banked
  2616  0001D6  6FAB               	movwf	(__MODBUSInputRegs+1)& (0+255),b
  2617  0001D8  6FAA               	movwf	__MODBUSInputRegs& (0+255),b
  2618                           
  2619                           ;main.c: 833: }
  2620  0001DA  D004               	goto	l4876
  2621  0001DC                     l4874:
  2622  0001DC  FFFF               	dw	65535	; assembler added errata NOP
  2623                           
  2624                           ; BSR set to: 1
  2625                           ;main.c: 834: else
  2626                           ;main.c: 835: _MODBUSInputRegs[0] = 0x0100;
  2627  0001DE  0E01               	movlw	1
  2628  0001E0  6FAB               	movwf	(__MODBUSInputRegs+1)& (0+255),b
  2629  0001E2  6BAA               	clrf	__MODBUSInputRegs& (0+255),b
  2630  0001E4                     l4876:
  2631  0001E4  FFFF               	dw	65535	; assembler added errata NOP
  2632                           
  2633                           ;main.c: 836: }
  2634                           ;main.c: 839: if((0 >= lastAddress && 0 <= lastEndAddress) && _MODBUSHoldingRegs[0] > 0)
  2635  0001E6  506D               	movf	io_poll@lastAddress,w,c
  2636  0001E8  106E               	iorwf	io_poll@lastAddress+1,w,c
  2637  0001EA  E117               	bnz	l4888
  2638  0001EC  0101               	movlb	1	; () banked
  2639  0001EE  518C               	movf	__MODBUSHoldingRegs& (0+255),w,b
  2640  0001F0  118D               	iorwf	(__MODBUSHoldingRegs+1)& (0+255),w,b
  2641  0001F2  E013               	bz	l4888
  2642                           
  2643                           ; BSR set to: 1
  2644                           ;main.c: 840: {
  2645                           ;main.c: 841: v1 = ((unsigned char)((_MODBUSHoldingRegs[0])&0xFF));
  2646  0001F4  C18C  F069         	movff	__MODBUSHoldingRegs,io_poll@v1
  2647                           
  2648                           ; BSR set to: 1
  2649                           ;main.c: 843: LightLed(((unsigned char)(((_MODBUSHoldingRegs[0])>>8)&0xFF)), v1 & 0x03, 
      +                          (((v1) >> (2)) & 0x01));
  2650  0001F8  5069               	movf	io_poll@v1,w,c
  2651  0001FA  0B03               	andlw	3
  2652  0001FC  6E05               	movwf	LightLed@ledState,c
  2653  0001FE  4069               	rrncf	io_poll@v1,w,c
  2654  000200  42E8               	rrncf	wreg,f,c
  2655  000202  0B3F               	andlw	63
  2656  000204  0B01               	andlw	1
  2657  000206  6E06               	movwf	LightLed@blink,c
  2658  000208  518D               	movf	(__MODBUSHoldingRegs+1)& (0+255),w,b
  2659  00020A  EC4D  F007         	call	_LightLed
  2660                           
  2661                           ;main.c: 844: _MODBUSHoldingRegs[0] = 0;
  2662  00020E  0101               	movlb	1	; () banked
  2663  000210  6B8C               	clrf	__MODBUSHoldingRegs& (0+255),b
  2664  000212  6B8D               	clrf	(__MODBUSHoldingRegs+1)& (0+255),b
  2665                           
  2666                           ; BSR set to: 1
  2667                           ;main.c: 845: _MODBUSInputRegs[0] = 0x8080;
  2668  000214  0E80               	movlw	128
  2669  000216  6FAB               	movwf	(__MODBUSInputRegs+1)& (0+255),b
  2670  000218  6FAA               	movwf	__MODBUSInputRegs& (0+255),b
  2671  00021A                     l4888:
  2672                           
  2673                           ;main.c: 846: }
  2674                           ;main.c: 847: if((1 >= lastAddress && 1 <= lastEndAddress)) { buzzeLoudDuration = ((unsi
      +                          gned char)(((_MODBUSHoldingRegs[1])>>8)&0xFF)); do{ while (WR) { continue; } EEADR = (2)
      +                          ; EEDATA = (buzzeLoudDuration); (void)0; CARRY = 0; if (GIE) { CARRY = 1; } GIE = 0; WRE
  2675  00021A  506E               	movf	io_poll@lastAddress+1,w,c
  2676  00021C  E137               	bnz	l4936
  2677  00021E  0E02               	movlw	2
  2678  000220  5C6D               	subwf	io_poll@lastAddress,w,c
  2679  000222  E234               	bc	l4936
  2680  000224  506B               	movf	io_poll@lastEndAddress,w,c
  2681  000226  106C               	iorwf	io_poll@lastEndAddress+1,w,c
  2682  000228  E031               	bz	l4936
  2683  00022A  0101               	movlb	1	; () banked
  2684  00022C  518F               	movf	(__MODBUSHoldingRegs+3)& (0+255),w,b
  2685  00022E  6E73               	movwf	_buzzeLoudDuration,c
  2686  000230                     l451:
  2687  000230  FFFF               	dw	65535	; assembler added errata NOP
  2688  000232  B2A6               	btfsc	4006,1,c	;volatile
  2689  000234  D7FD               	goto	l451
  2690  000236  0E02               	movlw	2
  2691  000238  6EA9               	movwf	4009,c	;volatile
  2692  00023A  C073  FFA8         	movff	_buzzeLoudDuration,4008	;volatile
  2693  00023E  90D8               	bcf	status,0,c	;volatile
  2694  000240  BEF2               	btfsc	intcon,7,c	;volatile
  2695  000242  80D8               	bsf	status,0,c	;volatile
  2696  000244  9EF2               	bcf	intcon,7,c	;volatile
  2697  000246  84A6               	bsf	4006,2,c	;volatile
  2698  000248  0E55               	movlw	85
  2699  00024A  6EA7               	movwf	4007,c	;volatile
  2700  00024C  0EAA               	movlw	170
  2701  00024E  6EA7               	movwf	4007,c	;volatile
  2702  000250  82A6               	bsf	4006,1,c	;volatile
  2703  000252  94A6               	bcf	4006,2,c	;volatile
  2704  000254  E301               	bnc	l456
  2705  000256  8EF2               	bsf	intcon,7,c	;volatile
  2706  000258                     l456:
  2707  000258  C18E  F0C6         	movff	__MODBUSHoldingRegs+2,_buzzeQuietDuration
  2708  00025C                     l458:
  2709  00025C  FFFF               	dw	65535	; assembler added errata NOP
  2710  00025E  B2A6               	btfsc	4006,1,c	;volatile
  2711  000260  D7FD               	goto	l458
  2712  000262  0E03               	movlw	3
  2713  000264  6EA9               	movwf	4009,c	;volatile
  2714  000266  C0C6  FFA8         	movff	_buzzeQuietDuration,4008	;volatile
  2715  00026A  90D8               	bcf	status,0,c	;volatile
  2716  00026C  BEF2               	btfsc	intcon,7,c	;volatile
  2717  00026E  80D8               	bsf	status,0,c	;volatile
  2718  000270  9EF2               	bcf	intcon,7,c	;volatile
  2719  000272  84A6               	bsf	4006,2,c	;volatile
  2720  000274  0E55               	movlw	85
  2721  000276  6EA7               	movwf	4007,c	;volatile
  2722  000278  0EAA               	movlw	170
  2723  00027A  6EA7               	movwf	4007,c	;volatile
  2724  00027C  82A6               	bsf	4006,1,c	;volatile
  2725  00027E  94A6               	bcf	4006,2,c	;volatile
  2726  000280  E301               	bnc	l4934
  2727  000282  8EF2               	bsf	intcon,7,c	;volatile
  2728  000284                     l4934:
  2729  000284  0E80               	movlw	128
  2730  000286  0101               	movlb	1	; () banked
  2731  000288  6FAB               	movwf	(__MODBUSInputRegs+1)& (0+255),b
  2732  00028A  6FAA               	movwf	__MODBUSInputRegs& (0+255),b
  2733  00028C                     l4936:
  2734                           
  2735                           ;main.c: 848: if((2 >= lastAddress && 2 <= lastEndAddress)) { buzzerInfoPeriod = ((unsig
      +                          ned char)(((_MODBUSHoldingRegs[2])>>8)&0xFF)); do{ while (WR) { continue; } EEADR = (4);
      +                           EEDATA = (buzzerInfoPeriod); (void)0; CARRY = 0; if (GIE) { CARRY = 1; } GIE = 0; WREN 
  2736  00028C  506E               	movf	io_poll@lastAddress+1,w,c
  2737  00028E  E13A               	bnz	l4984
  2738  000290  0E03               	movlw	3
  2739  000292  5C6D               	subwf	io_poll@lastAddress,w,c
  2740  000294  E237               	bc	l4984
  2741  000296  506C               	movf	io_poll@lastEndAddress+1,w,c
  2742  000298  E103               	bnz	u4460
  2743  00029A  0E02               	movlw	2
  2744  00029C  5C6B               	subwf	io_poll@lastEndAddress,w,c
  2745  00029E  E332               	bnc	l4984
  2746  0002A0                     u4460:
  2747  0002A0  0101               	movlb	1	; () banked
  2748  0002A2  5191               	movf	(__MODBUSHoldingRegs+5)& (0+255),w,b
  2749  0002A4  0100               	movlb	0	; () banked
  2750  0002A6  6FC7               	movwf	_buzzerInfoPeriod& (0+255),b
  2751  0002A8                     l466:
  2752  0002A8  FFFF               	dw	65535	; assembler added errata NOP
  2753  0002AA  B2A6               	btfsc	4006,1,c	;volatile
  2754  0002AC  D7FD               	goto	l466
  2755  0002AE  0E04               	movlw	4
  2756  0002B0  6EA9               	movwf	4009,c	;volatile
  2757  0002B2  C0C7  FFA8         	movff	_buzzerInfoPeriod,4008	;volatile
  2758  0002B6  90D8               	bcf	status,0,c	;volatile
  2759  0002B8  BEF2               	btfsc	intcon,7,c	;volatile
  2760  0002BA  80D8               	bsf	status,0,c	;volatile
  2761  0002BC  9EF2               	bcf	intcon,7,c	;volatile
  2762  0002BE  84A6               	bsf	4006,2,c	;volatile
  2763  0002C0  0E55               	movlw	85
  2764  0002C2  6EA7               	movwf	4007,c	;volatile
  2765  0002C4  0EAA               	movlw	170
  2766  0002C6  6EA7               	movwf	4007,c	;volatile
  2767  0002C8  82A6               	bsf	4006,1,c	;volatile
  2768  0002CA  94A6               	bcf	4006,2,c	;volatile
  2769  0002CC  E301               	bnc	l471
  2770  0002CE  8EF2               	bsf	intcon,7,c	;volatile
  2771  0002D0                     l471:
  2772  0002D0  C190  F074         	movff	__MODBUSHoldingRegs+4,_buzzerAlarmPeriod
  2773  0002D4                     l473:
  2774  0002D4  FFFF               	dw	65535	; assembler added errata NOP
  2775  0002D6  B2A6               	btfsc	4006,1,c	;volatile
  2776  0002D8  D7FD               	goto	l473
  2777  0002DA  0E05               	movlw	5
  2778  0002DC  6EA9               	movwf	4009,c	;volatile
  2779  0002DE  C074  FFA8         	movff	_buzzerAlarmPeriod,4008	;volatile
  2780  0002E2  90D8               	bcf	status,0,c	;volatile
  2781  0002E4  BEF2               	btfsc	intcon,7,c	;volatile
  2782  0002E6  80D8               	bsf	status,0,c	;volatile
  2783  0002E8  9EF2               	bcf	intcon,7,c	;volatile
  2784  0002EA  84A6               	bsf	4006,2,c	;volatile
  2785  0002EC  0E55               	movlw	85
  2786  0002EE  6EA7               	movwf	4007,c	;volatile
  2787  0002F0  0EAA               	movlw	170
  2788  0002F2  6EA7               	movwf	4007,c	;volatile
  2789  0002F4  82A6               	bsf	4006,1,c	;volatile
  2790  0002F6  94A6               	bcf	4006,2,c	;volatile
  2791  0002F8  E301               	bnc	l4982
  2792  0002FA  8EF2               	bsf	intcon,7,c	;volatile
  2793  0002FC                     l4982:
  2794  0002FC  0E80               	movlw	128
  2795  0002FE  0101               	movlb	1	; () banked
  2796  000300  6FAB               	movwf	(__MODBUSInputRegs+1)& (0+255),b
  2797  000302  6FAA               	movwf	__MODBUSInputRegs& (0+255),b
  2798  000304                     l4984:
  2799                           
  2800                           ;main.c: 849: SetBuzzerDuty(buzzeLoudDuration);
  2801  000304  C073  F005         	movff	_buzzeLoudDuration,SetBuzzerDuty@dc
  2802  000308  6A06               	clrf	SetBuzzerDuty@dc+1,c
  2803  00030A  ECD7  F010         	call	_SetBuzzerDuty	;wreg free
  2804                           
  2805                           ;main.c: 850: PR2 = buzzerAlarmPeriod;
  2806  00030E  C074  FFCB         	movff	_buzzerAlarmPeriod,4043	;volatile
  2807                           
  2808                           ;main.c: 851: if((3 >= lastAddress && 3 <= lastEndAddress)) { buzzerOnOffDuration = ((un
      +                          signed char)(((_MODBUSHoldingRegs[3])>>8)&0xFF)); do{ while (WR) { continue; } EEADR = (
      +                          6); EEDATA = (buzzerOnOffDuration); (void)0; CARRY = 0; if (GIE) { CARRY = 1; } GIE = 0;
  2809  000312  506E               	movf	io_poll@lastAddress+1,w,c
  2810  000314  E144               	bnz	l5040
  2811  000316  0E04               	movlw	4
  2812  000318  5C6D               	subwf	io_poll@lastAddress,w,c
  2813  00031A  E241               	bc	l5040
  2814  00031C  506C               	movf	io_poll@lastEndAddress+1,w,c
  2815  00031E  E103               	bnz	u4540
  2816  000320  0E03               	movlw	3
  2817  000322  5C6B               	subwf	io_poll@lastEndAddress,w,c
  2818  000324  E33C               	bnc	l5040
  2819  000326                     u4540:
  2820  000326  0101               	movlb	1	; () banked
  2821  000328  5193               	movf	(__MODBUSHoldingRegs+7)& (0+255),w,b
  2822  00032A  0100               	movlb	0	; () banked
  2823  00032C  6FED               	movwf	_buzzerOnOffDuration& (0+255),b
  2824  00032E  6BEE               	clrf	(_buzzerOnOffDuration+1)& (0+255),b
  2825  000330                     l481:
  2826  000330  FFFF               	dw	65535	; assembler added errata NOP
  2827  000332  B2A6               	btfsc	4006,1,c	;volatile
  2828  000334  D7FD               	goto	l481
  2829  000336  0E06               	movlw	6
  2830  000338  6EA9               	movwf	4009,c	;volatile
  2831  00033A  C0ED  FFA8         	movff	_buzzerOnOffDuration,4008	;volatile
  2832  00033E  90D8               	bcf	status,0,c	;volatile
  2833  000340  BEF2               	btfsc	intcon,7,c	;volatile
  2834  000342  80D8               	bsf	status,0,c	;volatile
  2835  000344  9EF2               	bcf	intcon,7,c	;volatile
  2836  000346  84A6               	bsf	4006,2,c	;volatile
  2837  000348  0E55               	movlw	85
  2838  00034A  6EA7               	movwf	4007,c	;volatile
  2839  00034C  0EAA               	movlw	170
  2840  00034E  6EA7               	movwf	4007,c	;volatile
  2841  000350  82A6               	bsf	4006,1,c	;volatile
  2842  000352  94A6               	bcf	4006,2,c	;volatile
  2843  000354  E301               	bnc	l5014
  2844  000356  8EF2               	bsf	intcon,7,c	;volatile
  2845  000358                     l5014:
  2846  000358  0100               	movlb	0	; () banked
  2847  00035A  51ED               	movf	_buzzerOnOffDuration& (0+255),w,b
  2848  00035C  6FEE               	movwf	(_buzzerOnOffDuration+1)& (0+255),b
  2849  00035E  6BED               	clrf	_buzzerOnOffDuration& (0+255),b
  2850                           
  2851                           ; BSR set to: 0
  2852  000360  C192  F0EF         	movff	__MODBUSHoldingRegs+6,_buzzerOnOffPeriod
  2853  000364  6BF0               	clrf	(_buzzerOnOffPeriod+1)& (0+255),b
  2854  000366                     l488:
  2855  000366  FFFF               	dw	65535	; assembler added errata NOP
  2856  000368  B2A6               	btfsc	4006,1,c	;volatile
  2857  00036A  D7FD               	goto	l488
  2858  00036C  0E07               	movlw	7
  2859  00036E  6EA9               	movwf	4009,c	;volatile
  2860  000370  C0EF  FFA8         	movff	_buzzerOnOffPeriod,4008	;volatile
  2861  000374  90D8               	bcf	status,0,c	;volatile
  2862  000376  BEF2               	btfsc	intcon,7,c	;volatile
  2863  000378  80D8               	bsf	status,0,c	;volatile
  2864  00037A  9EF2               	bcf	intcon,7,c	;volatile
  2865  00037C  84A6               	bsf	4006,2,c	;volatile
  2866  00037E  0E55               	movlw	85
  2867  000380  6EA7               	movwf	4007,c	;volatile
  2868  000382  0EAA               	movlw	170
  2869  000384  6EA7               	movwf	4007,c	;volatile
  2870  000386  82A6               	bsf	4006,1,c	;volatile
  2871  000388  94A6               	bcf	4006,2,c	;volatile
  2872  00038A  E301               	bnc	l5038
  2873  00038C  8EF2               	bsf	intcon,7,c	;volatile
  2874  00038E                     l5038:
  2875  00038E  0100               	movlb	0	; () banked
  2876  000390  51EF               	movf	_buzzerOnOffPeriod& (0+255),w,b
  2877  000392  6FF0               	movwf	(_buzzerOnOffPeriod+1)& (0+255),b
  2878  000394  6BEF               	clrf	_buzzerOnOffPeriod& (0+255),b
  2879  000396  0E80               	movlw	128
  2880  000398  0101               	movlb	1	; () banked
  2881  00039A  6FAB               	movwf	(__MODBUSInputRegs+1)& (0+255),b
  2882  00039C  6FAA               	movwf	__MODBUSInputRegs& (0+255),b
  2883  00039E                     l5040:
  2884                           
  2885                           ;main.c: 854: if((4 >= lastAddress && 4 <= lastEndAddress)) { eventAcceptTime = ((unsign
      +                          ed char)((_MODBUSHoldingRegs[4])&0xFF)); do{ while (WR) { continue; } EEADR = (10); EEDA
      +                          TA = (eventAcceptTime); (void)0; CARRY = 0; if (GIE) { CARRY = 1; } GIE = 0; WREN = 1; E
  2886  00039E  506E               	movf	io_poll@lastAddress+1,w,c
  2887  0003A0  E126               	bnz	l5068
  2888  0003A2  0E05               	movlw	5
  2889  0003A4  5C6D               	subwf	io_poll@lastAddress,w,c
  2890  0003A6  E223               	bc	l5068
  2891  0003A8  506C               	movf	io_poll@lastEndAddress+1,w,c
  2892  0003AA  E103               	bnz	u4620
  2893  0003AC  0E04               	movlw	4
  2894  0003AE  5C6B               	subwf	io_poll@lastEndAddress,w,c
  2895  0003B0  E31E               	bnc	l5068
  2896  0003B2                     u4620:
  2897  0003B2  C194  F0CE         	movff	__MODBUSHoldingRegs+8,_eventAcceptTime
  2898  0003B6                     l496:
  2899  0003B6  FFFF               	dw	65535	; assembler added errata NOP
  2900  0003B8  B2A6               	btfsc	4006,1,c	;volatile
  2901  0003BA  D7FD               	goto	l496
  2902  0003BC  0E0A               	movlw	10
  2903  0003BE  6EA9               	movwf	4009,c	;volatile
  2904  0003C0  C0CE  FFA8         	movff	_eventAcceptTime,4008	;volatile
  2905  0003C4  90D8               	bcf	status,0,c	;volatile
  2906  0003C6  BEF2               	btfsc	intcon,7,c	;volatile
  2907  0003C8  80D8               	bsf	status,0,c	;volatile
  2908  0003CA  9EF2               	bcf	intcon,7,c	;volatile
  2909  0003CC  84A6               	bsf	4006,2,c	;volatile
  2910  0003CE  0E55               	movlw	85
  2911  0003D0  6EA7               	movwf	4007,c	;volatile
  2912  0003D2  0EAA               	movlw	170
  2913  0003D4  6EA7               	movwf	4007,c	;volatile
  2914  0003D6  82A6               	bsf	4006,1,c	;volatile
  2915  0003D8  94A6               	bcf	4006,2,c	;volatile
  2916  0003DA  E301               	bnc	l501
  2917  0003DC  8EF2               	bsf	intcon,7,c	;volatile
  2918  0003DE                     l501:
  2919  0003DE  C194  F1B2         	movff	__MODBUSHoldingRegs+8,__MODBUSInputRegs+8
  2920  0003E2  C195  F1B3         	movff	__MODBUSHoldingRegs+9,__MODBUSInputRegs+9
  2921  0003E6  0E80               	movlw	128
  2922  0003E8  0101               	movlb	1	; () banked
  2923  0003EA  6FAB               	movwf	(__MODBUSInputRegs+1)& (0+255),b
  2924  0003EC  6FAA               	movwf	__MODBUSInputRegs& (0+255),b
  2925  0003EE                     l5068:
  2926                           
  2927                           ;main.c: 855: if((5 >= lastAddress && 5 <= lastEndAddress)) { buzzeEscaladeTime = ((unsi
      +                          gned char)(((_MODBUSHoldingRegs[5])>>8)&0xFF)); do{ while (WR) { continue; } EEADR = (8)
      +                          ; EEDATA = (buzzeEscaladeTime); (void)0; CARRY = 0; if (GIE) { CARRY = 1; } GIE = 0; WRE
  2928  0003EE  506E               	movf	io_poll@lastAddress+1,w,c
  2929  0003F0  E13A               	bnz	l5116
  2930  0003F2  0E06               	movlw	6
  2931  0003F4  5C6D               	subwf	io_poll@lastAddress,w,c
  2932  0003F6  E237               	bc	l5116
  2933  0003F8  506C               	movf	io_poll@lastEndAddress+1,w,c
  2934  0003FA  E103               	bnz	u4670
  2935  0003FC  0E05               	movlw	5
  2936  0003FE  5C6B               	subwf	io_poll@lastEndAddress,w,c
  2937  000400  E332               	bnc	l5116
  2938  000402                     u4670:
  2939  000402  0101               	movlb	1	; () banked
  2940  000404  5197               	movf	(__MODBUSHoldingRegs+11)& (0+255),w,b
  2941  000406  0100               	movlb	0	; () banked
  2942  000408  6FC5               	movwf	_buzzeEscaladeTime& (0+255),b
  2943  00040A                     l504:
  2944  00040A  FFFF               	dw	65535	; assembler added errata NOP
  2945  00040C  B2A6               	btfsc	4006,1,c	;volatile
  2946  00040E  D7FD               	goto	l504
  2947  000410  0E08               	movlw	8
  2948  000412  6EA9               	movwf	4009,c	;volatile
  2949  000414  C0C5  FFA8         	movff	_buzzeEscaladeTime,4008	;volatile
  2950  000418  90D8               	bcf	status,0,c	;volatile
  2951  00041A  BEF2               	btfsc	intcon,7,c	;volatile
  2952  00041C  80D8               	bsf	status,0,c	;volatile
  2953  00041E  9EF2               	bcf	intcon,7,c	;volatile
  2954  000420  84A6               	bsf	4006,2,c	;volatile
  2955  000422  0E55               	movlw	85
  2956  000424  6EA7               	movwf	4007,c	;volatile
  2957  000426  0EAA               	movlw	170
  2958  000428  6EA7               	movwf	4007,c	;volatile
  2959  00042A  82A6               	bsf	4006,1,c	;volatile
  2960  00042C  94A6               	bcf	4006,2,c	;volatile
  2961  00042E  E301               	bnc	l509
  2962  000430  8EF2               	bsf	intcon,7,c	;volatile
  2963  000432                     l509:
  2964  000432  C196  F0C8         	movff	__MODBUSHoldingRegs+10,_buzzerStartDurationDiv
  2965  000436                     l511:
  2966  000436  FFFF               	dw	65535	; assembler added errata NOP
  2967  000438  B2A6               	btfsc	4006,1,c	;volatile
  2968  00043A  D7FD               	goto	l511
  2969  00043C  0E09               	movlw	9
  2970  00043E  6EA9               	movwf	4009,c	;volatile
  2971  000440  C0C8  FFA8         	movff	_buzzerStartDurationDiv,4008	;volatile
  2972  000444  90D8               	bcf	status,0,c	;volatile
  2973  000446  BEF2               	btfsc	intcon,7,c	;volatile
  2974  000448  80D8               	bsf	status,0,c	;volatile
  2975  00044A  9EF2               	bcf	intcon,7,c	;volatile
  2976  00044C  84A6               	bsf	4006,2,c	;volatile
  2977  00044E  0E55               	movlw	85
  2978  000450  6EA7               	movwf	4007,c	;volatile
  2979  000452  0EAA               	movlw	170
  2980  000454  6EA7               	movwf	4007,c	;volatile
  2981  000456  82A6               	bsf	4006,1,c	;volatile
  2982  000458  94A6               	bcf	4006,2,c	;volatile
  2983  00045A  E301               	bnc	l5114
  2984  00045C  8EF2               	bsf	intcon,7,c	;volatile
  2985  00045E                     l5114:
  2986  00045E  0E80               	movlw	128
  2987  000460  0101               	movlb	1	; () banked
  2988  000462  6FAB               	movwf	(__MODBUSInputRegs+1)& (0+255),b
  2989  000464  6FAA               	movwf	__MODBUSInputRegs& (0+255),b
  2990  000466                     l5116:
  2991                           
  2992                           ;main.c: 856: if((6 >= lastAddress && 6 <= lastEndAddress)) { eveningTimeHour = ((unsign
      +                          ed char)(((_MODBUSHoldingRegs[6])>>8)&0xFF)); do{ while (WR) { continue; } EEADR = (11);
      +                           EEDATA = (eveningTimeHour); (void)0; CARRY = 0; if (GIE) { CARRY = 1; } GIE = 0; WREN =
  2993  000466  506E               	movf	io_poll@lastAddress+1,w,c
  2994  000468  E13A               	bnz	l5164
  2995  00046A  0E07               	movlw	7
  2996  00046C  5C6D               	subwf	io_poll@lastAddress,w,c
  2997  00046E  E237               	bc	l5164
  2998  000470  506C               	movf	io_poll@lastEndAddress+1,w,c
  2999  000472  E103               	bnz	u4750
  3000  000474  0E06               	movlw	6
  3001  000476  5C6B               	subwf	io_poll@lastEndAddress,w,c
  3002  000478  E332               	bnc	l5164
  3003  00047A                     u4750:
  3004  00047A  0101               	movlb	1	; () banked
  3005  00047C  5199               	movf	(__MODBUSHoldingRegs+13)& (0+255),w,b
  3006  00047E  0100               	movlb	0	; () banked
  3007  000480  6FCD               	movwf	_eveningTimeHour& (0+255),b
  3008  000482                     l519:
  3009  000482  FFFF               	dw	65535	; assembler added errata NOP
  3010  000484  B2A6               	btfsc	4006,1,c	;volatile
  3011  000486  D7FD               	goto	l519
  3012  000488  0E0B               	movlw	11
  3013  00048A  6EA9               	movwf	4009,c	;volatile
  3014  00048C  C0CD  FFA8         	movff	_eveningTimeHour,4008	;volatile
  3015  000490  90D8               	bcf	status,0,c	;volatile
  3016  000492  BEF2               	btfsc	intcon,7,c	;volatile
  3017  000494  80D8               	bsf	status,0,c	;volatile
  3018  000496  9EF2               	bcf	intcon,7,c	;volatile
  3019  000498  84A6               	bsf	4006,2,c	;volatile
  3020  00049A  0E55               	movlw	85
  3021  00049C  6EA7               	movwf	4007,c	;volatile
  3022  00049E  0EAA               	movlw	170
  3023  0004A0  6EA7               	movwf	4007,c	;volatile
  3024  0004A2  82A6               	bsf	4006,1,c	;volatile
  3025  0004A4  94A6               	bcf	4006,2,c	;volatile
  3026  0004A6  E301               	bnc	l524
  3027  0004A8  8EF2               	bsf	intcon,7,c	;volatile
  3028  0004AA                     l524:
  3029  0004AA  C198  F0CF         	movff	__MODBUSHoldingRegs+12,_morningTimeHour
  3030  0004AE                     l526:
  3031  0004AE  FFFF               	dw	65535	; assembler added errata NOP
  3032  0004B0  B2A6               	btfsc	4006,1,c	;volatile
  3033  0004B2  D7FD               	goto	l526
  3034  0004B4  0E0E               	movlw	14
  3035  0004B6  6EA9               	movwf	4009,c	;volatile
  3036  0004B8  C0CF  FFA8         	movff	_morningTimeHour,4008	;volatile
  3037  0004BC  90D8               	bcf	status,0,c	;volatile
  3038  0004BE  BEF2               	btfsc	intcon,7,c	;volatile
  3039  0004C0  80D8               	bsf	status,0,c	;volatile
  3040  0004C2  9EF2               	bcf	intcon,7,c	;volatile
  3041  0004C4  84A6               	bsf	4006,2,c	;volatile
  3042  0004C6  0E55               	movlw	85
  3043  0004C8  6EA7               	movwf	4007,c	;volatile
  3044  0004CA  0EAA               	movlw	170
  3045  0004CC  6EA7               	movwf	4007,c	;volatile
  3046  0004CE  82A6               	bsf	4006,1,c	;volatile
  3047  0004D0  94A6               	bcf	4006,2,c	;volatile
  3048  0004D2  E301               	bnc	l5162
  3049  0004D4  8EF2               	bsf	intcon,7,c	;volatile
  3050  0004D6                     l5162:
  3051  0004D6  0E80               	movlw	128
  3052  0004D8  0101               	movlb	1	; () banked
  3053  0004DA  6FAB               	movwf	(__MODBUSInputRegs+1)& (0+255),b
  3054  0004DC  6FAA               	movwf	__MODBUSInputRegs& (0+255),b
  3055  0004DE                     l5164:
  3056                           
  3057                           ;main.c: 857: if((7 >= lastAddress && 7 <= lastEndAddress)) { nightStartHour = ((unsigne
      +                          d char)(((_MODBUSHoldingRegs[7])>>8)&0xFF)); do{ while (WR) { continue; } EEADR = (12); 
      +                          EEDATA = (nightStartHour); (void)0; CARRY = 0; if (GIE) { CARRY = 1; } GIE = 0; WREN = 1
  3058  0004DE  506E               	movf	io_poll@lastAddress+1,w,c
  3059  0004E0  E13A               	bnz	l5212
  3060  0004E2  0E08               	movlw	8
  3061  0004E4  5C6D               	subwf	io_poll@lastAddress,w,c
  3062  0004E6  E237               	bc	l5212
  3063  0004E8  506C               	movf	io_poll@lastEndAddress+1,w,c
  3064  0004EA  E103               	bnz	u4830
  3065  0004EC  0E07               	movlw	7
  3066  0004EE  5C6B               	subwf	io_poll@lastEndAddress,w,c
  3067  0004F0  E332               	bnc	l5212
  3068  0004F2                     u4830:
  3069  0004F2  0101               	movlb	1	; () banked
  3070  0004F4  519B               	movf	(__MODBUSHoldingRegs+15)& (0+255),w,b
  3071  0004F6  0100               	movlb	0	; () banked
  3072  0004F8  6FD1               	movwf	_nightStartHour& (0+255),b
  3073  0004FA                     l534:
  3074  0004FA  FFFF               	dw	65535	; assembler added errata NOP
  3075  0004FC  B2A6               	btfsc	4006,1,c	;volatile
  3076  0004FE  D7FD               	goto	l534
  3077  000500  0E0C               	movlw	12
  3078  000502  6EA9               	movwf	4009,c	;volatile
  3079  000504  C0D1  FFA8         	movff	_nightStartHour,4008	;volatile
  3080  000508  90D8               	bcf	status,0,c	;volatile
  3081  00050A  BEF2               	btfsc	intcon,7,c	;volatile
  3082  00050C  80D8               	bsf	status,0,c	;volatile
  3083  00050E  9EF2               	bcf	intcon,7,c	;volatile
  3084  000510  84A6               	bsf	4006,2,c	;volatile
  3085  000512  0E55               	movlw	85
  3086  000514  6EA7               	movwf	4007,c	;volatile
  3087  000516  0EAA               	movlw	170
  3088  000518  6EA7               	movwf	4007,c	;volatile
  3089  00051A  82A6               	bsf	4006,1,c	;volatile
  3090  00051C  94A6               	bcf	4006,2,c	;volatile
  3091  00051E  E301               	bnc	l539
  3092  000520  8EF2               	bsf	intcon,7,c	;volatile
  3093  000522                     l539:
  3094  000522  C19A  F0D0         	movff	__MODBUSHoldingRegs+14,_nightEndHour
  3095  000526                     l541:
  3096  000526  FFFF               	dw	65535	; assembler added errata NOP
  3097  000528  B2A6               	btfsc	4006,1,c	;volatile
  3098  00052A  D7FD               	goto	l541
  3099  00052C  0E0D               	movlw	13
  3100  00052E  6EA9               	movwf	4009,c	;volatile
  3101  000530  C0D0  FFA8         	movff	_nightEndHour,4008	;volatile
  3102  000534  90D8               	bcf	status,0,c	;volatile
  3103  000536  BEF2               	btfsc	intcon,7,c	;volatile
  3104  000538  80D8               	bsf	status,0,c	;volatile
  3105  00053A  9EF2               	bcf	intcon,7,c	;volatile
  3106  00053C  84A6               	bsf	4006,2,c	;volatile
  3107  00053E  0E55               	movlw	85
  3108  000540  6EA7               	movwf	4007,c	;volatile
  3109  000542  0EAA               	movlw	170
  3110  000544  6EA7               	movwf	4007,c	;volatile
  3111  000546  82A6               	bsf	4006,1,c	;volatile
  3112  000548  94A6               	bcf	4006,2,c	;volatile
  3113  00054A  E301               	bnc	l5210
  3114  00054C  8EF2               	bsf	intcon,7,c	;volatile
  3115  00054E                     l5210:
  3116  00054E  0E80               	movlw	128
  3117  000550  0101               	movlb	1	; () banked
  3118  000552  6FAB               	movwf	(__MODBUSInputRegs+1)& (0+255),b
  3119  000554  6FAA               	movwf	__MODBUSInputRegs& (0+255),b
  3120  000556                     l5212:
  3121                           
  3122                           ;main.c: 859: if((8 >= lastAddress && 8 <= lastEndAddress)) { blinkDuration = ((unsigned
      +                           char)(((_MODBUSHoldingRegs[8])>>8)&0xFF)); do{ while (WR) { continue; } EEADR = (15); E
      +                          EDATA = (blinkDuration); (void)0; CARRY = 0; if (GIE) { CARRY = 1; } GIE = 0; WREN = 1; 
  3123  000556  506E               	movf	io_poll@lastAddress+1,w,c
  3124  000558  E14C               	bnz	l5266
  3125  00055A  0E09               	movlw	9
  3126  00055C  5C6D               	subwf	io_poll@lastAddress,w,c
  3127  00055E  E249               	bc	l5266
  3128  000560  506C               	movf	io_poll@lastEndAddress+1,w,c
  3129  000562  E103               	bnz	u4910
  3130  000564  0E08               	movlw	8
  3131  000566  5C6B               	subwf	io_poll@lastEndAddress,w,c
  3132  000568  E344               	bnc	l5266
  3133  00056A                     u4910:
  3134  00056A  0101               	movlb	1	; () banked
  3135  00056C  519D               	movf	(__MODBUSHoldingRegs+17)& (0+255),w,b
  3136  00056E  0100               	movlb	0	; () banked
  3137  000570  6FBA               	movwf	_blinkDuration& (0+255),b
  3138  000572  6BBB               	clrf	(_blinkDuration+1)& (0+255),b
  3139  000574                     l549:
  3140  000574  FFFF               	dw	65535	; assembler added errata NOP
  3141  000576  B2A6               	btfsc	4006,1,c	;volatile
  3142  000578  D7FD               	goto	l549
  3143  00057A  0E0F               	movlw	15
  3144  00057C  6EA9               	movwf	4009,c	;volatile
  3145  00057E  C0BA  FFA8         	movff	_blinkDuration,4008	;volatile
  3146  000582  90D8               	bcf	status,0,c	;volatile
  3147  000584  BEF2               	btfsc	intcon,7,c	;volatile
  3148  000586  80D8               	bsf	status,0,c	;volatile
  3149  000588  9EF2               	bcf	intcon,7,c	;volatile
  3150  00058A  84A6               	bsf	4006,2,c	;volatile
  3151  00058C  0E55               	movlw	85
  3152  00058E  6EA7               	movwf	4007,c	;volatile
  3153  000590  0EAA               	movlw	170
  3154  000592  6EA7               	movwf	4007,c	;volatile
  3155  000594  82A6               	bsf	4006,1,c	;volatile
  3156  000596  94A6               	bcf	4006,2,c	;volatile
  3157  000598  E301               	bnc	l5238
  3158  00059A  8EF2               	bsf	intcon,7,c	;volatile
  3159  00059C                     l5238:
  3160  00059C  0100               	movlb	0	; () banked
  3161  00059E  0E06               	movlw	6
  3162  0005A0                     u4955:
  3163  0005A0  FFFF               	dw	65535	; assembler added errata NOP
  3164  0005A2  90D8               	bcf	status,0,c
  3165  0005A4  37BA               	rlcf	_blinkDuration& (0+255),f,b
  3166  0005A6  37BB               	rlcf	(_blinkDuration+1)& (0+255),f,b
  3167  0005A8  2EE8               	decfsz	wreg,f,c
  3168  0005AA  D7FA               	goto	u4955
  3169                           
  3170                           ; BSR set to: 0
  3171  0005AC  C19C  F0BC         	movff	__MODBUSHoldingRegs+16,_blinkPeriod
  3172  0005B0  6BBD               	clrf	(_blinkPeriod+1)& (0+255),b
  3173  0005B2                     l556:
  3174  0005B2  FFFF               	dw	65535	; assembler added errata NOP
  3175  0005B4  B2A6               	btfsc	4006,1,c	;volatile
  3176  0005B6  D7FD               	goto	l556
  3177  0005B8  0E10               	movlw	16
  3178  0005BA  6EA9               	movwf	4009,c	;volatile
  3179  0005BC  C0BC  FFA8         	movff	_blinkPeriod,4008	;volatile
  3180  0005C0  90D8               	bcf	status,0,c	;volatile
  3181  0005C2  BEF2               	btfsc	intcon,7,c	;volatile
  3182  0005C4  80D8               	bsf	status,0,c	;volatile
  3183  0005C6  9EF2               	bcf	intcon,7,c	;volatile
  3184  0005C8  84A6               	bsf	4006,2,c	;volatile
  3185  0005CA  0E55               	movlw	85
  3186  0005CC  6EA7               	movwf	4007,c	;volatile
  3187  0005CE  0EAA               	movlw	170
  3188  0005D0  6EA7               	movwf	4007,c	;volatile
  3189  0005D2  82A6               	bsf	4006,1,c	;volatile
  3190  0005D4  94A6               	bcf	4006,2,c	;volatile
  3191  0005D6  E301               	bnc	l5262
  3192  0005D8  8EF2               	bsf	intcon,7,c	;volatile
  3193  0005DA                     l5262:
  3194  0005DA  0100               	movlb	0	; () banked
  3195  0005DC  0E06               	movlw	6
  3196  0005DE                     u4995:
  3197  0005DE  FFFF               	dw	65535	; assembler added errata NOP
  3198  0005E0  90D8               	bcf	status,0,c
  3199  0005E2  37BC               	rlcf	_blinkPeriod& (0+255),f,b
  3200  0005E4  37BD               	rlcf	(_blinkPeriod+1)& (0+255),f,b
  3201  0005E6  2EE8               	decfsz	wreg,f,c
  3202  0005E8  D7FA               	goto	u4995
  3203                           
  3204                           ; BSR set to: 0
  3205  0005EA  0E80               	movlw	128
  3206  0005EC  0101               	movlb	1	; () banked
  3207  0005EE  6FAB               	movwf	(__MODBUSInputRegs+1)& (0+255),b
  3208  0005F0  6FAA               	movwf	__MODBUSInputRegs& (0+255),b
  3209  0005F2                     l5266:
  3210                           
  3211                           ;main.c: 863: if((9 >= lastAddress && 9 <= lastEndAddress) && (11 >= lastAddress && 11 <
      +                          = lastEndAddress))
  3212  0005F2  506E               	movf	io_poll@lastAddress+1,w,c
  3213  0005F4  E131               	bnz	l415
  3214  0005F6  0E0A               	movlw	10
  3215  0005F8  5C6D               	subwf	io_poll@lastAddress,w,c
  3216  0005FA  E22E               	bc	l415
  3217  0005FC  506C               	movf	io_poll@lastEndAddress+1,w,c
  3218  0005FE  E103               	bnz	u5010
  3219  000600  0E09               	movlw	9
  3220  000602  5C6B               	subwf	io_poll@lastEndAddress,w,c
  3221  000604  E329               	bnc	l415
  3222  000606                     u5010:
  3223  000606  506E               	movf	io_poll@lastAddress+1,w,c
  3224  000608  E127               	bnz	l415
  3225  00060A  0E0C               	movlw	12
  3226  00060C  5C6D               	subwf	io_poll@lastAddress,w,c
  3227  00060E  E224               	bc	l415
  3228  000610  506C               	movf	io_poll@lastEndAddress+1,w,c
  3229  000612  E103               	bnz	u5030
  3230  000614  0E0B               	movlw	11
  3231  000616  5C6B               	subwf	io_poll@lastEndAddress,w,c
  3232  000618  E31F               	bnc	l415
  3233  00061A                     u5030:
  3234                           
  3235                           ;main.c: 864: {
  3236                           ;main.c: 865: uint16_t hourMin = _MODBUSHoldingRegs[9];
  3237  00061A  C19E  F062         	movff	__MODBUSHoldingRegs+18,io_poll@hourMin
  3238  00061E  C19F  F063         	movff	__MODBUSHoldingRegs+19,io_poll@hourMin+1
  3239                           
  3240                           ;main.c: 866: uint16_t daySec = _MODBUSHoldingRegs[10];
  3241  000622  C1A0  F064         	movff	__MODBUSHoldingRegs+20,io_poll@daySec
  3242  000626  C1A1  F065         	movff	__MODBUSHoldingRegs+21,io_poll@daySec+1
  3243                           
  3244                           ;main.c: 867: uint16_t yearMonth = _MODBUSHoldingRegs[11];
  3245  00062A  C1A2  F066         	movff	__MODBUSHoldingRegs+22,io_poll@yearMonth
  3246  00062E  C1A3  F067         	movff	__MODBUSHoldingRegs+23,io_poll@yearMonth+1
  3247                           
  3248                           ;main.c: 868: SetTimeFromRegs(&hourMin, &daySec, &yearMonth);
  3249  000632  0E64               	movlw	low io_poll@daySec
  3250  000634  6E43               	movwf	SetTimeFromRegs@daySec,c
  3251  000636  0E66               	movlw	low io_poll@yearMonth
  3252  000638  6E44               	movwf	SetTimeFromRegs@yearMonth,c
  3253  00063A  0E62               	movlw	io_poll@hourMin& (0+255)
  3254  00063C  EC3D  F00D         	call	_SetTimeFromRegs
  3255                           
  3256                           ;main.c: 869: ((_MODBUSDiscreteInputs) |= ((unsigned short)1 << (0x00)));
  3257  000640  0100               	movlb	0	; () banked
  3258  000642  81B4               	bsf	__MODBUSDiscreteInputs& (0+255),0,b
  3259  000644  D552               	goto	l4796
  3260  000646                     l5284:
  3261                           
  3262                           ;main.c: 877: }
  3263                           ;main.c: 878: if(*lastCommand == MODBUS_COM_WRITE_FILE_RECORD)
  3264  000646  506A               	movf	io_poll@lastCommand,w,c
  3265  000648  6ED9               	movwf	fsr2l,c
  3266  00064A  6ADA               	clrf	fsr2h,c
  3267  00064C  0E15               	movlw	21
  3268  00064E  18DE               	xorwf	postinc2,w,c
  3269  000650  E103               	bnz	l415
  3270                           
  3271                           ;main.c: 879: {
  3272                           ;main.c: 880: InitFromEeprom();
  3273  000652  ECDA  F00B         	call	_InitFromEeprom	;wreg free
  3274  000656  D549               	goto	l4796
  3275  000658                     l415:
  3276  000658  FFFF               	dw	65535	; assembler added errata NOP
  3277  00065A  0012               	return		;funcret
  3278  00065C  FFFF               	dw	65535	; errata NOP
  3279  00065E                     __end_of_io_poll:
  3280                           	opt stack 0
  3281                           tblptru	equ	0xFF8
  3282                           tblptrh	equ	0xFF7
  3283                           tblptrl	equ	0xFF6
  3284                           tablat	equ	0xFF5
  3285                           prodl	equ	0xFF3
  3286                           intcon	equ	0xFF2
  3287                           postinc0	equ	0xFEE
  3288                           wreg	equ	0xFE8
  3289                           postdec1	equ	0xFE5
  3290                           fsr1h	equ	0xFE2
  3291                           fsr1l	equ	0xFE1
  3292                           indf2	equ	0xFDF
  3293                           postinc2	equ	0xFDE
  3294                           postdec2	equ	0xFDD
  3295                           fsr2h	equ	0xFDA
  3296                           fsr2l	equ	0xFD9
  3297                           status	equ	0xFD8
  3298                           
  3299 ;; *************** function _SetTimeFromRegs *****************
  3300 ;; Defined at:
  3301 ;;		line 766 in file "main.c"
  3302 ;; Parameters:    Size  Location     Type
  3303 ;;  hourMin         1    wreg     PTR unsigned int 
  3304 ;;		 -> io_poll@hourMin(2), 
  3305 ;;  daySec          1   66[COMRAM] PTR unsigned int 
  3306 ;;		 -> io_poll@daySec(2), 
  3307 ;;  yearMonth       1   67[COMRAM] PTR unsigned int 
  3308 ;;		 -> io_poll@yearMonth(2), 
  3309 ;; Auto vars:     Size  Location     Type
  3310 ;;  hourMin         1   74[COMRAM] PTR unsigned int 
  3311 ;;		 -> io_poll@hourMin(2), 
  3312 ;;  newTime        18   75[COMRAM] struct tm
  3313 ;;  newRawTime      4   70[COMRAM] long 
  3314 ;; Return value:  Size  Location     Type
  3315 ;;                  1    wreg      void 
  3316 ;; Registers used:
  3317 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3318 ;; Tracked objects:
  3319 ;;		On entry : 0/0
  3320 ;;		On exit  : 0/0
  3321 ;;		Unchanged: 0/0
  3322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3323 ;;      Params:         2       0       0       0       0       0       0
  3324 ;;      Locals:        23       0       0       0       0       0       0
  3325 ;;      Temps:          2       0       0       0       0       0       0
  3326 ;;      Totals:        27       0       0       0       0       0       0
  3327 ;;Total ram usage:       27 bytes
  3328 ;; Hardware stack levels used:    1
  3329 ;; Hardware stack levels required when called:    6
  3330 ;; This function calls:
  3331 ;;		_LightStatusLed
  3332 ;;		_LoadNextEvent
  3333 ;;		_SetHourMin
  3334 ;;		_SetTime
  3335 ;;		_mktime
  3336 ;; This function is called by:
  3337 ;;		_io_poll
  3338 ;; This function uses a non-reentrant model
  3339 ;;
  3340                           
  3341                           	psect	text3
  3342  001A7A                     __ptext3:
  3343                           	opt stack 0
  3344  001A7A                     _SetTimeFromRegs:
  3345                           	opt stack 23
  3346                           
  3347                           ;incstack = 0
  3348  001A7A  FFFF               	dw	65535
  3349                           
  3350                           ;SetTimeFromRegs@hourMin stored from wreg
  3351  001A7C  6E4B               	movwf	SetTimeFromRegs@hourMin,c
  3352                           
  3353                           ;main.c: 768: struct tm newTime;
  3354                           ;main.c: 769: newTime.tm_year = (*yearMonth >> 8) + 100;
  3355  001A7E  5044               	movf	SetTimeFromRegs@yearMonth,w,c
  3356  001A80  6ED9               	movwf	fsr2l,c
  3357  001A82  6ADA               	clrf	fsr2h,c
  3358  001A84  CFDE F045          	movff	postinc2,??_SetTimeFromRegs
  3359  001A88  CFDD F046          	movff	postdec2,??_SetTimeFromRegs+1
  3360  001A8C  C046  F045         	movff	??_SetTimeFromRegs+1,??_SetTimeFromRegs
  3361  001A90  6A46               	clrf	??_SetTimeFromRegs+1,c
  3362  001A92  0E64               	movlw	100
  3363  001A94  2445               	addwf	??_SetTimeFromRegs,w,c
  3364  001A96  6E56               	movwf	SetTimeFromRegs@newTime+10,c
  3365  001A98  0E00               	movlw	0
  3366  001A9A  2046               	addwfc	??_SetTimeFromRegs+1,w,c
  3367  001A9C  6E57               	movwf	SetTimeFromRegs@newTime+11,c
  3368                           
  3369                           ;main.c: 770: newTime.tm_mon = *yearMonth & 0xFF;
  3370  001A9E  5044               	movf	SetTimeFromRegs@yearMonth,w,c
  3371  001AA0  6ED9               	movwf	fsr2l,c
  3372  001AA2  6ADA               	clrf	fsr2h,c
  3373  001AA4  CFDE F045          	movff	postinc2,??_SetTimeFromRegs
  3374  001AA8  CFDD F046          	movff	postdec2,??_SetTimeFromRegs+1
  3375  001AAC  5045               	movf	??_SetTimeFromRegs,w,c
  3376  001AAE  6E54               	movwf	SetTimeFromRegs@newTime+8,c
  3377  001AB0  6A55               	clrf	SetTimeFromRegs@newTime+9,c
  3378                           
  3379                           ;main.c: 771: newTime.tm_mday = *daySec >> 8;
  3380  001AB2  5043               	movf	SetTimeFromRegs@daySec,w,c
  3381  001AB4  6ED9               	movwf	fsr2l,c
  3382  001AB6  6ADA               	clrf	fsr2h,c
  3383  001AB8  CFDE F045          	movff	postinc2,??_SetTimeFromRegs
  3384  001ABC  CFDD F046          	movff	postdec2,??_SetTimeFromRegs+1
  3385  001AC0  5046               	movf	??_SetTimeFromRegs+1,w,c
  3386  001AC2  6E52               	movwf	SetTimeFromRegs@newTime+6,c
  3387  001AC4  6A53               	clrf	SetTimeFromRegs@newTime+7,c
  3388                           
  3389                           ;main.c: 772: newTime.tm_hour = *hourMin >> 8;
  3390  001AC6  504B               	movf	SetTimeFromRegs@hourMin,w,c
  3391  001AC8  6ED9               	movwf	fsr2l,c
  3392  001ACA  6ADA               	clrf	fsr2h,c
  3393  001ACC  CFDE F045          	movff	postinc2,??_SetTimeFromRegs
  3394  001AD0  CFDD F046          	movff	postdec2,??_SetTimeFromRegs+1
  3395  001AD4  5046               	movf	??_SetTimeFromRegs+1,w,c
  3396  001AD6  6E50               	movwf	SetTimeFromRegs@newTime+4,c
  3397  001AD8  6A51               	clrf	SetTimeFromRegs@newTime+5,c
  3398                           
  3399                           ;main.c: 773: newTime.tm_min = *hourMin & 0xFF;
  3400  001ADA  504B               	movf	SetTimeFromRegs@hourMin,w,c
  3401  001ADC  6ED9               	movwf	fsr2l,c
  3402  001ADE  6ADA               	clrf	fsr2h,c
  3403  001AE0  CFDE F045          	movff	postinc2,??_SetTimeFromRegs
  3404  001AE4  CFDD F046          	movff	postdec2,??_SetTimeFromRegs+1
  3405  001AE8  5045               	movf	??_SetTimeFromRegs,w,c
  3406  001AEA  6E4E               	movwf	SetTimeFromRegs@newTime+2,c
  3407  001AEC  6A4F               	clrf	SetTimeFromRegs@newTime+3,c
  3408                           
  3409                           ;main.c: 774: newTime.tm_sec = *daySec & 0xFF;
  3410  001AEE  5043               	movf	SetTimeFromRegs@daySec,w,c
  3411  001AF0  6ED9               	movwf	fsr2l,c
  3412  001AF2  6ADA               	clrf	fsr2h,c
  3413  001AF4  CFDE F045          	movff	postinc2,??_SetTimeFromRegs
  3414  001AF8  CFDD F046          	movff	postdec2,??_SetTimeFromRegs+1
  3415  001AFC  5045               	movf	??_SetTimeFromRegs,w,c
  3416  001AFE  6E4C               	movwf	SetTimeFromRegs@newTime,c
  3417  001B00  6A4D               	clrf	SetTimeFromRegs@newTime+1,c
  3418                           
  3419                           ;main.c: 775: SetHourMin(&newTime.tm_hour, &newTime.tm_min);
  3420  001B02  0E4E               	movlw	low (SetTimeFromRegs@newTime+2)
  3421  001B04  6E05               	movwf	SetHourMin@newMin,c
  3422  001B06  0E4C               	movlw	SetTimeFromRegs@newTime& (0+255)
  3423  001B08  0F04               	addlw	4
  3424  001B0A  ECF8  F012         	call	_SetHourMin
  3425                           
  3426                           ;main.c: 776: time_t newRawTime = mktime(&newTime);
  3427  001B0E  0E4C               	movlw	SetTimeFromRegs@newTime& (0+255)
  3428  001B10  ECC4  F005         	call	_mktime
  3429  001B14  C02C  F047         	movff	?_mktime,SetTimeFromRegs@newRawTime
  3430  001B18  C02D  F048         	movff	?_mktime+1,SetTimeFromRegs@newRawTime+1
  3431  001B1C  C02E  F049         	movff	?_mktime+2,SetTimeFromRegs@newRawTime+2
  3432  001B20  C02F  F04A         	movff	?_mktime+3,SetTimeFromRegs@newRawTime+3
  3433                           
  3434                           ;main.c: 777: SetTime(&newRawTime);
  3435  001B24  0E47               	movlw	SetTimeFromRegs@newRawTime& (0+255)
  3436  001B26  ECE9  F012         	call	_SetTime
  3437                           
  3438                           ;main.c: 778: LightStatusLed(0x05, 0, 0);
  3439  001B2A  0E00               	movlw	0
  3440  001B2C  6E05               	movwf	LightStatusLed@on,c
  3441  001B2E  6E06               	movwf	LightStatusLed@blink,c
  3442  001B30  0E05               	movlw	5
  3443  001B32  EC5A  F00C         	call	_LightStatusLed
  3444                           
  3445                           ;main.c: 779: LoadNextEvent();
  3446  001B36  EFA4  F00F         	goto	_LoadNextEvent	;wreg free
  3447  001B3A  FFFF               	dw	65535	; errata NOP
  3448  001B3C                     __end_of_SetTimeFromRegs:
  3449                           	opt stack 0
  3450                           tblptru	equ	0xFF8
  3451                           tblptrh	equ	0xFF7
  3452                           tblptrl	equ	0xFF6
  3453                           tablat	equ	0xFF5
  3454                           prodl	equ	0xFF3
  3455                           intcon	equ	0xFF2
  3456                           postinc0	equ	0xFEE
  3457                           wreg	equ	0xFE8
  3458                           postdec1	equ	0xFE5
  3459                           fsr1h	equ	0xFE2
  3460                           fsr1l	equ	0xFE1
  3461                           indf2	equ	0xFDF
  3462                           postinc2	equ	0xFDE
  3463                           postdec2	equ	0xFDD
  3464                           fsr2h	equ	0xFDA
  3465                           fsr2l	equ	0xFD9
  3466                           status	equ	0xFD8
  3467                           
  3468 ;; *************** function _mktime *****************
  3469 ;; Defined at:
  3470 ;;		line 52 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
  3471 ;; Parameters:    Size  Location     Type
  3472 ;;  timeptr         1    wreg     PTR struct tm
  3473 ;;		 -> SetTimeFromRegs@newTime(18), 
  3474 ;; Auto vars:     Size  Location     Type
  3475 ;;  timeptr         1   65[COMRAM] PTR struct tm
  3476 ;;		 -> SetTimeFromRegs@newTime(18), 
  3477 ;;  tt              4   61[COMRAM] long 
  3478 ;; Return value:  Size  Location     Type
  3479 ;;                  4   43[COMRAM] long 
  3480 ;; Registers used:
  3481 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3482 ;; Tracked objects:
  3483 ;;		On entry : 0/0
  3484 ;;		On exit  : 0/0
  3485 ;;		Unchanged: 0/0
  3486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3487 ;;      Params:         4       0       0       0       0       0       0
  3488 ;;      Locals:         5       0       0       0       0       0       0
  3489 ;;      Temps:         14       0       0       0       0       0       0
  3490 ;;      Totals:        23       0       0       0       0       0       0
  3491 ;;Total ram usage:       23 bytes
  3492 ;; Hardware stack levels used:    1
  3493 ;; Hardware stack levels required when called:    5
  3494 ;; This function calls:
  3495 ;;		_ymd_to_scalar
  3496 ;; This function is called by:
  3497 ;;		_SetTimeFromRegs
  3498 ;; This function uses a non-reentrant model
  3499 ;;
  3500                           
  3501                           	psect	text4
  3502  000B88                     __ptext4:
  3503                           	opt stack 0
  3504  000B88                     _mktime:
  3505                           	opt stack 23
  3506                           
  3507                           ;incstack = 0
  3508  000B88  FFFF               	dw	65535
  3509                           
  3510                           ;mktime@timeptr stored from wreg
  3511  000B8A  6E42               	movwf	mktime@timeptr,c
  3512  000B8C  5042               	movf	mktime@timeptr,w,c
  3513  000B8E  6ED9               	movwf	fsr2l,c
  3514  000B90  6ADA               	clrf	fsr2h,c
  3515  000B92  0E0A               	movlw	10
  3516  000B94  26D9               	addwf	fsr2l,f,c
  3517  000B96  0E01               	movlw	1
  3518  000B98  BEDB               	btfsc	plusw2,7,c
  3519  000B9A  D012               	goto	l1371
  3520  000B9C  50DB               	movf	plusw2,w,c
  3521  000B9E  E103               	bnz	u3050
  3522  000BA0  0E46               	movlw	70
  3523  000BA2  5CDE               	subwf	postinc2,w,c
  3524  000BA4  E30D               	bnc	l1371
  3525  000BA6                     u3050:
  3526  000BA6  5042               	movf	mktime@timeptr,w,c
  3527  000BA8  6ED9               	movwf	fsr2l,c
  3528  000BAA  6ADA               	clrf	fsr2h,c
  3529  000BAC  0E0A               	movlw	10
  3530  000BAE  26D9               	addwf	fsr2l,f,c
  3531  000BB0  0E01               	movlw	1
  3532  000BB2  BEDB               	btfsc	plusw2,7,c
  3533  000BB4  D00B               	goto	l3770
  3534  000BB6  50DB               	movf	plusw2,w,c
  3535  000BB8  E103               	bnz	u3060
  3536  000BBA  0E8B               	movlw	139
  3537  000BBC  5CDE               	subwf	postinc2,w,c
  3538  000BBE  E306               	bnc	l3770
  3539  000BC0                     u3060:
  3540  000BC0                     l1371:
  3541  000BC0  FFFF               	dw	65535	; assembler added errata NOP
  3542  000BC2  683E               	setf	mktime@tt,c
  3543  000BC4  683F               	setf	mktime@tt+1,c
  3544  000BC6  6840               	setf	mktime@tt+2,c
  3545  000BC8  6841               	setf	mktime@tt+3,c
  3546  000BCA  D15C               	goto	l3780
  3547  000BCC                     l3770:
  3548  000BCC  FFFF               	dw	65535	; assembler added errata NOP
  3549  000BCE  5042               	movf	mktime@timeptr,w,c
  3550  000BD0  6ED9               	movwf	fsr2l,c
  3551  000BD2  6ADA               	clrf	fsr2h,c
  3552  000BD4  0E0A               	movlw	10
  3553  000BD6  26D9               	addwf	fsr2l,f,c
  3554  000BD8  CFDE F030          	movff	postinc2,??_mktime
  3555  000BDC  CFDD F031          	movff	postdec2,??_mktime+1
  3556  000BE0  0E6C               	movlw	108
  3557  000BE2  2430               	addwf	??_mktime,w,c
  3558  000BE4  6E1C               	movwf	ymd_to_scalar@yr,c
  3559  000BE6  0E07               	movlw	7
  3560  000BE8  2031               	addwfc	??_mktime+1,w,c
  3561  000BEA  6E1D               	movwf	ymd_to_scalar@yr+1,c
  3562  000BEC  5042               	movf	mktime@timeptr,w,c
  3563  000BEE  6ED9               	movwf	fsr2l,c
  3564  000BF0  6ADA               	clrf	fsr2h,c
  3565  000BF2  0E08               	movlw	8
  3566  000BF4  26D9               	addwf	fsr2l,f,c
  3567  000BF6  CFDE F032          	movff	postinc2,??_mktime+2
  3568  000BFA  CFDD F033          	movff	postdec2,??_mktime+3
  3569  000BFE  2832               	incf	??_mktime+2,w,c
  3570  000C00  6E1E               	movwf	ymd_to_scalar@mo,c
  3571  000C02  0E00               	movlw	0
  3572  000C04  2033               	addwfc	??_mktime+3,w,c
  3573  000C06  6E1F               	movwf	ymd_to_scalar@mo+1,c
  3574  000C08  5042               	movf	mktime@timeptr,w,c
  3575  000C0A  6ED9               	movwf	fsr2l,c
  3576  000C0C  6ADA               	clrf	fsr2h,c
  3577  000C0E  0E06               	movlw	6
  3578  000C10  26D9               	addwf	fsr2l,f,c
  3579  000C12  CFDE F020          	movff	postinc2,ymd_to_scalar@day
  3580  000C16  CFDD F021          	movff	postdec2,ymd_to_scalar@day+1
  3581  000C1A  EC07  F00F         	call	_ymd_to_scalar	;wreg free
  3582  000C1E  C01C  F03E         	movff	?_ymd_to_scalar,mktime@tt
  3583  000C22  C01D  F03F         	movff	?_ymd_to_scalar+1,mktime@tt+1
  3584  000C26  C01E  F040         	movff	?_ymd_to_scalar+2,mktime@tt+2
  3585  000C2A  C01F  F041         	movff	?_ymd_to_scalar+3,mktime@tt+3
  3586  000C2E  0E07               	movlw	7
  3587  000C30  6E1D               	movwf	ymd_to_scalar@yr+1,c
  3588  000C32  0EB2               	movlw	178
  3589  000C34  6E1C               	movwf	ymd_to_scalar@yr,c
  3590  000C36  6A1F               	clrf	ymd_to_scalar@mo+1,c
  3591  000C38  0E01               	movlw	1
  3592  000C3A  6E1E               	movwf	ymd_to_scalar@mo,c
  3593  000C3C  6A21               	clrf	ymd_to_scalar@day+1,c
  3594  000C3E  6E20               	movwf	ymd_to_scalar@day,c
  3595  000C40  EC07  F00F         	call	_ymd_to_scalar	;wreg free
  3596  000C44  501C               	movf	?_ymd_to_scalar,w,c
  3597  000C46  5E3E               	subwf	mktime@tt,f,c
  3598  000C48  501D               	movf	?_ymd_to_scalar+1,w,c
  3599  000C4A  5A3F               	subwfb	mktime@tt+1,f,c
  3600  000C4C  501E               	movf	?_ymd_to_scalar+2,w,c
  3601  000C4E  5A40               	subwfb	mktime@tt+2,f,c
  3602  000C50  501F               	movf	?_ymd_to_scalar+3,w,c
  3603  000C52  5A41               	subwfb	mktime@tt+3,f,c
  3604  000C54  5042               	movf	mktime@timeptr,w,c
  3605  000C56  6ED9               	movwf	fsr2l,c
  3606  000C58  6ADA               	clrf	fsr2h,c
  3607  000C5A  0E04               	movlw	4
  3608  000C5C  26D9               	addwf	fsr2l,f,c
  3609  000C5E  CFDE F030          	movff	postinc2,??_mktime
  3610  000C62  CFDD F031          	movff	postdec2,??_mktime+1
  3611  000C66  C030  F032         	movff	??_mktime,??_mktime+2
  3612  000C6A  C031  F033         	movff	??_mktime+1,??_mktime+3
  3613  000C6E  0E00               	movlw	0
  3614  000C70  BE33               	btfsc	(??_mktime+3)& (0+255),7,c
  3615  000C72  0EFF               	movlw	255
  3616  000C74  6E34               	movwf	(??_mktime+4)& (0+255),c
  3617  000C76  6E35               	movwf	(??_mktime+5)& (0+255),c
  3618  000C78  C03E  F036         	movff	mktime@tt,??_mktime+6
  3619  000C7C  C03F  F037         	movff	mktime@tt+1,??_mktime+7
  3620  000C80  C040  F038         	movff	mktime@tt+2,??_mktime+8
  3621  000C84  C041  F039         	movff	mktime@tt+3,??_mktime+9
  3622  000C88  0E18               	movlw	24
  3623  000C8A  0236               	mulwf	(??_mktime+6)& (0+255),c
  3624  000C8C  CFF3 F03A          	movff	prodl,??_mktime+10
  3625  000C90  CFF4 F03B          	movff	prodh,??_mktime+11
  3626  000C94  6A3C               	clrf	(??_mktime+12)& (0+255),c
  3627  000C96  6A3D               	clrf	(??_mktime+13)& (0+255),c
  3628  000C98  0237               	mulwf	(??_mktime+7)& (0+255),c
  3629  000C9A  50F3               	movf	prodl,w,c
  3630  000C9C  263B               	addwf	(??_mktime+11)& (0+255),f,c
  3631  000C9E  50F4               	movf	prodh,w,c
  3632  000CA0  223C               	addwfc	(??_mktime+12)& (0+255),f,c
  3633  000CA2  0E00               	movlw	0
  3634  000CA4  223D               	addwfc	(??_mktime+13)& (0+255),f,c
  3635  000CA6  0236               	mulwf	(??_mktime+6)& (0+255),c
  3636  000CA8  50F3               	movf	prodl,w,c
  3637  000CAA  263B               	addwf	(??_mktime+11)& (0+255),f,c
  3638  000CAC  50F4               	movf	prodh,w,c
  3639  000CAE  223C               	addwfc	(??_mktime+12)& (0+255),f,c
  3640  000CB0  0E00               	movlw	0
  3641  000CB2  223D               	addwfc	(??_mktime+13)& (0+255),f,c
  3642  000CB4  0E18               	movlw	24
  3643  000CB6  0238               	mulwf	(??_mktime+8)& (0+255),c
  3644  000CB8  50F3               	movf	prodl,w,c
  3645  000CBA  263C               	addwf	(??_mktime+12)& (0+255),f,c
  3646  000CBC  50F4               	movf	prodh,w,c
  3647  000CBE  223D               	addwfc	(??_mktime+13)& (0+255),f,c
  3648  000CC0  0E00               	movlw	0
  3649  000CC2  0237               	mulwf	(??_mktime+7)& (0+255),c
  3650  000CC4  50F3               	movf	prodl,w,c
  3651  000CC6  263C               	addwf	(??_mktime+12)& (0+255),f,c
  3652  000CC8  50F4               	movf	prodh,w,c
  3653  000CCA  223D               	addwfc	(??_mktime+13)& (0+255),f,c
  3654  000CCC  0E00               	movlw	0
  3655  000CCE  0236               	mulwf	(??_mktime+6)& (0+255),c
  3656  000CD0  50F3               	movf	prodl,w,c
  3657  000CD2  263C               	addwf	(??_mktime+12)& (0+255),f,c
  3658  000CD4  50F4               	movf	prodh,w,c
  3659  000CD6  223D               	addwfc	(??_mktime+13)& (0+255),f,c
  3660  000CD8  0E18               	movlw	24
  3661  000CDA  0239               	mulwf	(??_mktime+9)& (0+255),c
  3662  000CDC  50F3               	movf	prodl,w,c
  3663  000CDE  263D               	addwf	(??_mktime+13)& (0+255),f,c
  3664  000CE0  0E00               	movlw	0
  3665  000CE2  0238               	mulwf	(??_mktime+8)& (0+255),c
  3666  000CE4  50F3               	movf	prodl,w,c
  3667  000CE6  263D               	addwf	(??_mktime+13)& (0+255),f,c
  3668  000CE8  0E00               	movlw	0
  3669  000CEA  0237               	mulwf	(??_mktime+7)& (0+255),c
  3670  000CEC  50F3               	movf	prodl,w,c
  3671  000CEE  263D               	addwf	(??_mktime+13)& (0+255),f,c
  3672  000CF0  0E00               	movlw	0
  3673  000CF2  0236               	mulwf	(??_mktime+6)& (0+255),c
  3674  000CF4  50F3               	movf	prodl,w,c
  3675  000CF6  263D               	addwf	(??_mktime+13)& (0+255),f,c
  3676  000CF8  5032               	movf	??_mktime+2,w,c
  3677  000CFA  243A               	addwf	??_mktime+10,w,c
  3678  000CFC  6E3E               	movwf	mktime@tt,c
  3679  000CFE  5033               	movf	??_mktime+3,w,c
  3680  000D00  203B               	addwfc	??_mktime+11,w,c
  3681  000D02  6E3F               	movwf	mktime@tt+1,c
  3682  000D04  5034               	movf	??_mktime+4,w,c
  3683  000D06  203C               	addwfc	??_mktime+12,w,c
  3684  000D08  6E40               	movwf	mktime@tt+2,c
  3685  000D0A  5035               	movf	??_mktime+5,w,c
  3686  000D0C  203D               	addwfc	??_mktime+13,w,c
  3687  000D0E  6E41               	movwf	mktime@tt+3,c
  3688  000D10  5042               	movf	mktime@timeptr,w,c
  3689  000D12  6ED9               	movwf	fsr2l,c
  3690  000D14  6ADA               	clrf	fsr2h,c
  3691  000D16  0E02               	movlw	2
  3692  000D18  26D9               	addwf	fsr2l,f,c
  3693  000D1A  CFDE F030          	movff	postinc2,??_mktime
  3694  000D1E  CFDD F031          	movff	postdec2,??_mktime+1
  3695  000D22  C030  F032         	movff	??_mktime,??_mktime+2
  3696  000D26  C031  F033         	movff	??_mktime+1,??_mktime+3
  3697  000D2A  0E00               	movlw	0
  3698  000D2C  BE33               	btfsc	(??_mktime+3)& (0+255),7,c
  3699  000D2E  0EFF               	movlw	255
  3700  000D30  6E34               	movwf	(??_mktime+4)& (0+255),c
  3701  000D32  6E35               	movwf	(??_mktime+5)& (0+255),c
  3702  000D34  C03E  F036         	movff	mktime@tt,??_mktime+6
  3703  000D38  C03F  F037         	movff	mktime@tt+1,??_mktime+7
  3704  000D3C  C040  F038         	movff	mktime@tt+2,??_mktime+8
  3705  000D40  C041  F039         	movff	mktime@tt+3,??_mktime+9
  3706  000D44  0E3C               	movlw	60
  3707  000D46  0236               	mulwf	(??_mktime+6)& (0+255),c
  3708  000D48  CFF3 F03A          	movff	prodl,??_mktime+10
  3709  000D4C  CFF4 F03B          	movff	prodh,??_mktime+11
  3710  000D50  6A3C               	clrf	(??_mktime+12)& (0+255),c
  3711  000D52  6A3D               	clrf	(??_mktime+13)& (0+255),c
  3712  000D54  0237               	mulwf	(??_mktime+7)& (0+255),c
  3713  000D56  50F3               	movf	prodl,w,c
  3714  000D58  263B               	addwf	(??_mktime+11)& (0+255),f,c
  3715  000D5A  50F4               	movf	prodh,w,c
  3716  000D5C  223C               	addwfc	(??_mktime+12)& (0+255),f,c
  3717  000D5E  0E00               	movlw	0
  3718  000D60  223D               	addwfc	(??_mktime+13)& (0+255),f,c
  3719  000D62  0236               	mulwf	(??_mktime+6)& (0+255),c
  3720  000D64  50F3               	movf	prodl,w,c
  3721  000D66  263B               	addwf	(??_mktime+11)& (0+255),f,c
  3722  000D68  50F4               	movf	prodh,w,c
  3723  000D6A  223C               	addwfc	(??_mktime+12)& (0+255),f,c
  3724  000D6C  0E00               	movlw	0
  3725  000D6E  223D               	addwfc	(??_mktime+13)& (0+255),f,c
  3726  000D70  0E3C               	movlw	60
  3727  000D72  0238               	mulwf	(??_mktime+8)& (0+255),c
  3728  000D74  50F3               	movf	prodl,w,c
  3729  000D76  263C               	addwf	(??_mktime+12)& (0+255),f,c
  3730  000D78  50F4               	movf	prodh,w,c
  3731  000D7A  223D               	addwfc	(??_mktime+13)& (0+255),f,c
  3732  000D7C  0E00               	movlw	0
  3733  000D7E  0237               	mulwf	(??_mktime+7)& (0+255),c
  3734  000D80  50F3               	movf	prodl,w,c
  3735  000D82  263C               	addwf	(??_mktime+12)& (0+255),f,c
  3736  000D84  50F4               	movf	prodh,w,c
  3737  000D86  223D               	addwfc	(??_mktime+13)& (0+255),f,c
  3738  000D88  0E00               	movlw	0
  3739  000D8A  0236               	mulwf	(??_mktime+6)& (0+255),c
  3740  000D8C  50F3               	movf	prodl,w,c
  3741  000D8E  263C               	addwf	(??_mktime+12)& (0+255),f,c
  3742  000D90  50F4               	movf	prodh,w,c
  3743  000D92  223D               	addwfc	(??_mktime+13)& (0+255),f,c
  3744  000D94  0E3C               	movlw	60
  3745  000D96  0239               	mulwf	(??_mktime+9)& (0+255),c
  3746  000D98  50F3               	movf	prodl,w,c
  3747  000D9A  263D               	addwf	(??_mktime+13)& (0+255),f,c
  3748  000D9C  0E00               	movlw	0
  3749  000D9E  0238               	mulwf	(??_mktime+8)& (0+255),c
  3750  000DA0  50F3               	movf	prodl,w,c
  3751  000DA2  263D               	addwf	(??_mktime+13)& (0+255),f,c
  3752  000DA4  0E00               	movlw	0
  3753  000DA6  0237               	mulwf	(??_mktime+7)& (0+255),c
  3754  000DA8  50F3               	movf	prodl,w,c
  3755  000DAA  263D               	addwf	(??_mktime+13)& (0+255),f,c
  3756  000DAC  0E00               	movlw	0
  3757  000DAE  0236               	mulwf	(??_mktime+6)& (0+255),c
  3758  000DB0  50F3               	movf	prodl,w,c
  3759  000DB2  263D               	addwf	(??_mktime+13)& (0+255),f,c
  3760  000DB4  5032               	movf	??_mktime+2,w,c
  3761  000DB6  243A               	addwf	??_mktime+10,w,c
  3762  000DB8  6E3E               	movwf	mktime@tt,c
  3763  000DBA  5033               	movf	??_mktime+3,w,c
  3764  000DBC  203B               	addwfc	??_mktime+11,w,c
  3765  000DBE  6E3F               	movwf	mktime@tt+1,c
  3766  000DC0  5034               	movf	??_mktime+4,w,c
  3767  000DC2  203C               	addwfc	??_mktime+12,w,c
  3768  000DC4  6E40               	movwf	mktime@tt+2,c
  3769  000DC6  5035               	movf	??_mktime+5,w,c
  3770  000DC8  203D               	addwfc	??_mktime+13,w,c
  3771  000DCA  6E41               	movwf	mktime@tt+3,c
  3772  000DCC  5042               	movf	mktime@timeptr,w,c
  3773  000DCE  6ED9               	movwf	fsr2l,c
  3774  000DD0  6ADA               	clrf	fsr2h,c
  3775  000DD2  CFDE F030          	movff	postinc2,??_mktime
  3776  000DD6  CFDD F031          	movff	postdec2,??_mktime+1
  3777  000DDA  C030  F032         	movff	??_mktime,??_mktime+2
  3778  000DDE  C031  F033         	movff	??_mktime+1,??_mktime+3
  3779  000DE2  0E00               	movlw	0
  3780  000DE4  BE33               	btfsc	(??_mktime+3)& (0+255),7,c
  3781  000DE6  0EFF               	movlw	255
  3782  000DE8  6E34               	movwf	(??_mktime+4)& (0+255),c
  3783  000DEA  6E35               	movwf	(??_mktime+5)& (0+255),c
  3784  000DEC  C03E  F036         	movff	mktime@tt,??_mktime+6
  3785  000DF0  C03F  F037         	movff	mktime@tt+1,??_mktime+7
  3786  000DF4  C040  F038         	movff	mktime@tt+2,??_mktime+8
  3787  000DF8  C041  F039         	movff	mktime@tt+3,??_mktime+9
  3788  000DFC  0E3C               	movlw	60
  3789  000DFE  0236               	mulwf	(??_mktime+6)& (0+255),c
  3790  000E00  CFF3 F03A          	movff	prodl,??_mktime+10
  3791  000E04  CFF4 F03B          	movff	prodh,??_mktime+11
  3792  000E08  6A3C               	clrf	(??_mktime+12)& (0+255),c
  3793  000E0A  6A3D               	clrf	(??_mktime+13)& (0+255),c
  3794  000E0C  0237               	mulwf	(??_mktime+7)& (0+255),c
  3795  000E0E  50F3               	movf	prodl,w,c
  3796  000E10  263B               	addwf	(??_mktime+11)& (0+255),f,c
  3797  000E12  50F4               	movf	prodh,w,c
  3798  000E14  223C               	addwfc	(??_mktime+12)& (0+255),f,c
  3799  000E16  0E00               	movlw	0
  3800  000E18  223D               	addwfc	(??_mktime+13)& (0+255),f,c
  3801  000E1A  0236               	mulwf	(??_mktime+6)& (0+255),c
  3802  000E1C  50F3               	movf	prodl,w,c
  3803  000E1E  263B               	addwf	(??_mktime+11)& (0+255),f,c
  3804  000E20  50F4               	movf	prodh,w,c
  3805  000E22  223C               	addwfc	(??_mktime+12)& (0+255),f,c
  3806  000E24  0E00               	movlw	0
  3807  000E26  223D               	addwfc	(??_mktime+13)& (0+255),f,c
  3808  000E28  0E3C               	movlw	60
  3809  000E2A  0238               	mulwf	(??_mktime+8)& (0+255),c
  3810  000E2C  50F3               	movf	prodl,w,c
  3811  000E2E  263C               	addwf	(??_mktime+12)& (0+255),f,c
  3812  000E30  50F4               	movf	prodh,w,c
  3813  000E32  223D               	addwfc	(??_mktime+13)& (0+255),f,c
  3814  000E34  0E00               	movlw	0
  3815  000E36  0237               	mulwf	(??_mktime+7)& (0+255),c
  3816  000E38  50F3               	movf	prodl,w,c
  3817  000E3A  263C               	addwf	(??_mktime+12)& (0+255),f,c
  3818  000E3C  50F4               	movf	prodh,w,c
  3819  000E3E  223D               	addwfc	(??_mktime+13)& (0+255),f,c
  3820  000E40  0E00               	movlw	0
  3821  000E42  0236               	mulwf	(??_mktime+6)& (0+255),c
  3822  000E44  50F3               	movf	prodl,w,c
  3823  000E46  263C               	addwf	(??_mktime+12)& (0+255),f,c
  3824  000E48  50F4               	movf	prodh,w,c
  3825  000E4A  223D               	addwfc	(??_mktime+13)& (0+255),f,c
  3826  000E4C  0E3C               	movlw	60
  3827  000E4E  0239               	mulwf	(??_mktime+9)& (0+255),c
  3828  000E50  50F3               	movf	prodl,w,c
  3829  000E52  263D               	addwf	(??_mktime+13)& (0+255),f,c
  3830  000E54  0E00               	movlw	0
  3831  000E56  0238               	mulwf	(??_mktime+8)& (0+255),c
  3832  000E58  50F3               	movf	prodl,w,c
  3833  000E5A  263D               	addwf	(??_mktime+13)& (0+255),f,c
  3834  000E5C  0E00               	movlw	0
  3835  000E5E  0237               	mulwf	(??_mktime+7)& (0+255),c
  3836  000E60  50F3               	movf	prodl,w,c
  3837  000E62  263D               	addwf	(??_mktime+13)& (0+255),f,c
  3838  000E64  0E00               	movlw	0
  3839  000E66  0236               	mulwf	(??_mktime+6)& (0+255),c
  3840  000E68  50F3               	movf	prodl,w,c
  3841  000E6A  263D               	addwf	(??_mktime+13)& (0+255),f,c
  3842  000E6C  5032               	movf	??_mktime+2,w,c
  3843  000E6E  243A               	addwf	??_mktime+10,w,c
  3844  000E70  6E3E               	movwf	mktime@tt,c
  3845  000E72  5033               	movf	??_mktime+3,w,c
  3846  000E74  203B               	addwfc	??_mktime+11,w,c
  3847  000E76  6E3F               	movwf	mktime@tt+1,c
  3848  000E78  5034               	movf	??_mktime+4,w,c
  3849  000E7A  203C               	addwfc	??_mktime+12,w,c
  3850  000E7C  6E40               	movwf	mktime@tt+2,c
  3851  000E7E  5035               	movf	??_mktime+5,w,c
  3852  000E80  203D               	addwfc	??_mktime+13,w,c
  3853  000E82  6E41               	movwf	mktime@tt+3,c
  3854  000E84                     l3780:
  3855  000E84  FFFF               	dw	65535	; assembler added errata NOP
  3856  000E86  C03E  F02C         	movff	mktime@tt,?_mktime
  3857  000E8A  C03F  F02D         	movff	mktime@tt+1,?_mktime+1
  3858  000E8E  C040  F02E         	movff	mktime@tt+2,?_mktime+2
  3859  000E92  C041  F02F         	movff	mktime@tt+3,?_mktime+3
  3860  000E96  0012               	return		;funcret
  3861  000E98  FFFF               	dw	65535	; errata NOP
  3862  000E9A                     __end_of_mktime:
  3863                           	opt stack 0
  3864                           tblptru	equ	0xFF8
  3865                           tblptrh	equ	0xFF7
  3866                           tblptrl	equ	0xFF6
  3867                           tablat	equ	0xFF5
  3868                           prodh	equ	0xFF4
  3869                           prodl	equ	0xFF3
  3870                           intcon	equ	0xFF2
  3871                           postinc0	equ	0xFEE
  3872                           wreg	equ	0xFE8
  3873                           postdec1	equ	0xFE5
  3874                           fsr1h	equ	0xFE2
  3875                           fsr1l	equ	0xFE1
  3876                           indf2	equ	0xFDF
  3877                           postinc2	equ	0xFDE
  3878                           postdec2	equ	0xFDD
  3879                           plusw2	equ	0xFDB
  3880                           fsr2h	equ	0xFDA
  3881                           fsr2l	equ	0xFD9
  3882                           status	equ	0xFD8
  3883                           
  3884 ;; *************** function _ymd_to_scalar *****************
  3885 ;; Defined at:
  3886 ;;		line 40 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
  3887 ;; Parameters:    Size  Location     Type
  3888 ;;  yr              2   27[COMRAM] unsigned int 
  3889 ;;  mo              2   29[COMRAM] unsigned int 
  3890 ;;  day             2   31[COMRAM] unsigned int 
  3891 ;; Auto vars:     Size  Location     Type
  3892 ;;  scalar          4   39[COMRAM] long 
  3893 ;; Return value:  Size  Location     Type
  3894 ;;                  4   27[COMRAM] long 
  3895 ;; Registers used:
  3896 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3897 ;; Tracked objects:
  3898 ;;		On entry : 0/0
  3899 ;;		On exit  : 0/0
  3900 ;;		Unchanged: 0/0
  3901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3902 ;;      Params:         6       0       0       0       0       0       0
  3903 ;;      Locals:         6       0       0       0       0       0       0
  3904 ;;      Temps:          4       0       0       0       0       0       0
  3905 ;;      Totals:        16       0       0       0       0       0       0
  3906 ;;Total ram usage:       16 bytes
  3907 ;; Hardware stack levels used:    1
  3908 ;; Hardware stack levels required when called:    4
  3909 ;; This function calls:
  3910 ;;		_isleap
  3911 ;;		_months_to_days
  3912 ;;		_years_to_days
  3913 ;; This function is called by:
  3914 ;;		_mktime
  3915 ;; This function uses a non-reentrant model
  3916 ;;
  3917                           
  3918                           	psect	text5
  3919  001E0E                     __ptext5:
  3920                           	opt stack 0
  3921  001E0E                     _ymd_to_scalar:
  3922                           	opt stack 23
  3923                           
  3924                           ;incstack = 0
  3925  001E0E  FFFF               	dw	65535
  3926  001E10  C01E  F00C         	movff	ymd_to_scalar@mo,months_to_days@month
  3927  001E14  C01F  F00D         	movff	ymd_to_scalar@mo+1,months_to_days@month+1
  3928  001E18  ECC2  F011         	call	_months_to_days	;wreg free
  3929  001E1C  5020               	movf	ymd_to_scalar@day,w,c
  3930  001E1E  260C               	addwf	?_months_to_days,f,c
  3931  001E20  5021               	movf	ymd_to_scalar@day+1,w,c
  3932  001E22  220D               	addwfc	?_months_to_days+1,f,c
  3933  001E24  C00C  F028         	movff	?_months_to_days,ymd_to_scalar@scalar
  3934  001E28  C00D  F029         	movff	?_months_to_days+1,ymd_to_scalar@scalar+1
  3935  001E2C  6A2A               	clrf	ymd_to_scalar@scalar+2,c
  3936  001E2E  6A2B               	clrf	ymd_to_scalar@scalar+3,c
  3937  001E30  501F               	movf	ymd_to_scalar@mo+1,w,c
  3938  001E32  E103               	bnz	u2800
  3939  001E34  0E03               	movlw	3
  3940  001E36  5C1E               	subwf	ymd_to_scalar@mo,w,c
  3941  001E38  E321               	bnc	l3648
  3942  001E3A                     u2800:
  3943  001E3A  C01C  F00A         	movff	ymd_to_scalar@yr,isleap@yr
  3944  001E3E  C01D  F00B         	movff	ymd_to_scalar@yr+1,isleap@yr+1
  3945  001E42  EC2D  F011         	call	_isleap	;wreg free
  3946  001E46  500A               	movf	?_isleap,w,c
  3947  001E48  100B               	iorwf	?_isleap+1,w,c
  3948  001E4A  E103               	bnz	l3644
  3949  001E4C  6A27               	clrf	_ymd_to_scalar$2123+1,c
  3950  001E4E  0E02               	movlw	2
  3951  001E50  D002               	goto	L1
  3952  001E52                     l3644:
  3953  001E52  6A27               	clrf	_ymd_to_scalar$2123+1,c
  3954  001E54  0E01               	movlw	1
  3955  001E56                     L1:
  3956  001E56  FFFF               	dw	65535	; assembler added errata NOP
  3957  001E58  6E26               	movwf	_ymd_to_scalar$2123,c
  3958  001E5A  C026  F022         	movff	_ymd_to_scalar$2123,??_ymd_to_scalar
  3959  001E5E  C027  F023         	movff	_ymd_to_scalar$2123+1,??_ymd_to_scalar+1
  3960  001E62  0E00               	movlw	0
  3961  001E64  BE23               	btfsc	(??_ymd_to_scalar+1)& (0+255),7,c
  3962  001E66  0EFF               	movlw	255
  3963  001E68  6E24               	movwf	(??_ymd_to_scalar+2)& (0+255),c
  3964  001E6A  6E25               	movwf	(??_ymd_to_scalar+3)& (0+255),c
  3965  001E6C  5022               	movf	??_ymd_to_scalar,w,c
  3966  001E6E  5E28               	subwf	ymd_to_scalar@scalar,f,c
  3967  001E70  5023               	movf	??_ymd_to_scalar+1,w,c
  3968  001E72  5A29               	subwfb	ymd_to_scalar@scalar+1,f,c
  3969  001E74  5024               	movf	??_ymd_to_scalar+2,w,c
  3970  001E76  5A2A               	subwfb	ymd_to_scalar@scalar+2,f,c
  3971  001E78  5025               	movf	??_ymd_to_scalar+3,w,c
  3972  001E7A  5A2B               	subwfb	ymd_to_scalar@scalar+3,f,c
  3973  001E7C                     l3648:
  3974  001E7C  061C               	decf	ymd_to_scalar@yr,f,c
  3975  001E7E  A0D8               	btfss	status,0,c
  3976  001E80  061D               	decf	ymd_to_scalar@yr+1,f,c
  3977  001E82  C01C  F00C         	movff	ymd_to_scalar@yr,years_to_days@yr
  3978  001E86  C01D  F00D         	movff	ymd_to_scalar@yr+1,years_to_days@yr+1
  3979  001E8A  EC59  F00B         	call	_years_to_days	;wreg free
  3980  001E8E  500C               	movf	?_years_to_days,w,c
  3981  001E90  2628               	addwf	ymd_to_scalar@scalar,f,c
  3982  001E92  500D               	movf	?_years_to_days+1,w,c
  3983  001E94  2229               	addwfc	ymd_to_scalar@scalar+1,f,c
  3984  001E96  500E               	movf	?_years_to_days+2,w,c
  3985  001E98  222A               	addwfc	ymd_to_scalar@scalar+2,f,c
  3986  001E9A  500F               	movf	?_years_to_days+3,w,c
  3987  001E9C  222B               	addwfc	ymd_to_scalar@scalar+3,f,c
  3988  001E9E  C028  F01C         	movff	ymd_to_scalar@scalar,?_ymd_to_scalar
  3989  001EA2  C029  F01D         	movff	ymd_to_scalar@scalar+1,?_ymd_to_scalar+1
  3990  001EA6  C02A  F01E         	movff	ymd_to_scalar@scalar+2,?_ymd_to_scalar+2
  3991  001EAA  C02B  F01F         	movff	ymd_to_scalar@scalar+3,?_ymd_to_scalar+3
  3992  001EAE  0012               	return		;funcret
  3993  001EB0  FFFF               	dw	65535	; errata NOP
  3994  001EB2                     __end_of_ymd_to_scalar:
  3995                           	opt stack 0
  3996                           tblptru	equ	0xFF8
  3997                           tblptrh	equ	0xFF7
  3998                           tblptrl	equ	0xFF6
  3999                           tablat	equ	0xFF5
  4000                           prodh	equ	0xFF4
  4001                           prodl	equ	0xFF3
  4002                           intcon	equ	0xFF2
  4003                           postinc0	equ	0xFEE
  4004                           wreg	equ	0xFE8
  4005                           postdec1	equ	0xFE5
  4006                           fsr1h	equ	0xFE2
  4007                           fsr1l	equ	0xFE1
  4008                           indf2	equ	0xFDF
  4009                           postinc2	equ	0xFDE
  4010                           postdec2	equ	0xFDD
  4011                           plusw2	equ	0xFDB
  4012                           fsr2h	equ	0xFDA
  4013                           fsr2l	equ	0xFD9
  4014                           status	equ	0xFD8
  4015                           
  4016 ;; *************** function _years_to_days *****************
  4017 ;; Defined at:
  4018 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
  4019 ;; Parameters:    Size  Location     Type
  4020 ;;  yr              2   11[COMRAM] unsigned int 
  4021 ;; Auto vars:     Size  Location     Type
  4022 ;;  ret             4   23[COMRAM] long 
  4023 ;; Return value:  Size  Location     Type
  4024 ;;                  4   11[COMRAM] long 
  4025 ;; Registers used:
  4026 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4027 ;; Tracked objects:
  4028 ;;		On entry : 0/0
  4029 ;;		On exit  : 0/0
  4030 ;;		Unchanged: 0/0
  4031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4032 ;;      Params:         4       0       0       0       0       0       0
  4033 ;;      Locals:         4       0       0       0       0       0       0
  4034 ;;      Temps:          8       0       0       0       0       0       0
  4035 ;;      Totals:        16       0       0       0       0       0       0
  4036 ;;Total ram usage:       16 bytes
  4037 ;; Hardware stack levels used:    1
  4038 ;; Hardware stack levels required when called:    3
  4039 ;; This function calls:
  4040 ;;		___lwdiv
  4041 ;; This function is called by:
  4042 ;;		_ymd_to_scalar
  4043 ;; This function uses a non-reentrant model
  4044 ;;
  4045                           
  4046                           	psect	text6
  4047  0016B2                     __ptext6:
  4048                           	opt stack 0
  4049  0016B2                     _years_to_days:
  4050                           	opt stack 23
  4051                           
  4052                           ;incstack = 0
  4053  0016B2  FFFF               	dw	65535
  4054  0016B4  500C               	movf	years_to_days@yr,w,c
  4055  0016B6  6E10               	movwf	??_years_to_days& (0+255),c
  4056  0016B8  500D               	movf	years_to_days@yr+1,w,c
  4057  0016BA  6E11               	movwf	(??_years_to_days+1)& (0+255),c
  4058  0016BC  6A12               	clrf	(??_years_to_days+2)& (0+255),c
  4059  0016BE  6A13               	clrf	(??_years_to_days+3)& (0+255),c
  4060  0016C0  0E6D               	movlw	109
  4061  0016C2  0210               	mulwf	??_years_to_days& (0+255),c
  4062  0016C4  CFF3 F014          	movff	prodl,??_years_to_days+4
  4063  0016C8  CFF4 F015          	movff	prodh,??_years_to_days+5
  4064  0016CC  6A16               	clrf	(??_years_to_days+6)& (0+255),c
  4065  0016CE  6A17               	clrf	(??_years_to_days+7)& (0+255),c
  4066  0016D0  0211               	mulwf	(??_years_to_days+1)& (0+255),c
  4067  0016D2  50F3               	movf	prodl,w,c
  4068  0016D4  2615               	addwf	(??_years_to_days+5)& (0+255),f,c
  4069  0016D6  50F4               	movf	prodh,w,c
  4070  0016D8  2216               	addwfc	(??_years_to_days+6)& (0+255),f,c
  4071  0016DA  0E00               	movlw	0
  4072  0016DC  2217               	addwfc	(??_years_to_days+7)& (0+255),f,c
  4073  0016DE  0E01               	movlw	1
  4074  0016E0  0210               	mulwf	??_years_to_days& (0+255),c
  4075  0016E2  50F3               	movf	prodl,w,c
  4076  0016E4  2615               	addwf	(??_years_to_days+5)& (0+255),f,c
  4077  0016E6  50F4               	movf	prodh,w,c
  4078  0016E8  2216               	addwfc	(??_years_to_days+6)& (0+255),f,c
  4079  0016EA  0E00               	movlw	0
  4080  0016EC  2217               	addwfc	(??_years_to_days+7)& (0+255),f,c
  4081  0016EE  0E6D               	movlw	109
  4082  0016F0  0212               	mulwf	(??_years_to_days+2)& (0+255),c
  4083  0016F2  50F3               	movf	prodl,w,c
  4084  0016F4  2616               	addwf	(??_years_to_days+6)& (0+255),f,c
  4085  0016F6  50F4               	movf	prodh,w,c
  4086  0016F8  2217               	addwfc	(??_years_to_days+7)& (0+255),f,c
  4087  0016FA  0E01               	movlw	1
  4088  0016FC  0211               	mulwf	(??_years_to_days+1)& (0+255),c
  4089  0016FE  50F3               	movf	prodl,w,c
  4090  001700  2616               	addwf	(??_years_to_days+6)& (0+255),f,c
  4091  001702  50F4               	movf	prodh,w,c
  4092  001704  2217               	addwfc	(??_years_to_days+7)& (0+255),f,c
  4093  001706  0E00               	movlw	0
  4094  001708  0210               	mulwf	??_years_to_days& (0+255),c
  4095  00170A  50F3               	movf	prodl,w,c
  4096  00170C  2616               	addwf	(??_years_to_days+6)& (0+255),f,c
  4097  00170E  50F4               	movf	prodh,w,c
  4098  001710  2217               	addwfc	(??_years_to_days+7)& (0+255),f,c
  4099  001712  0E6D               	movlw	109
  4100  001714  0213               	mulwf	(??_years_to_days+3)& (0+255),c
  4101  001716  50F3               	movf	prodl,w,c
  4102  001718  2617               	addwf	(??_years_to_days+7)& (0+255),f,c
  4103  00171A  0E01               	movlw	1
  4104  00171C  0212               	mulwf	(??_years_to_days+2)& (0+255),c
  4105  00171E  50F3               	movf	prodl,w,c
  4106  001720  2617               	addwf	(??_years_to_days+7)& (0+255),f,c
  4107  001722  0E00               	movlw	0
  4108  001724  0211               	mulwf	(??_years_to_days+1)& (0+255),c
  4109  001726  50F3               	movf	prodl,w,c
  4110  001728  2617               	addwf	(??_years_to_days+7)& (0+255),f,c
  4111  00172A  0E00               	movlw	0
  4112  00172C  0210               	mulwf	??_years_to_days& (0+255),c
  4113  00172E  50F3               	movf	prodl,w,c
  4114  001730  2617               	addwf	(??_years_to_days+7)& (0+255),f,c
  4115  001732  C014  F018         	movff	??_years_to_days+4,years_to_days@ret
  4116  001736  C015  F019         	movff	??_years_to_days+5,years_to_days@ret+1
  4117  00173A  C016  F01A         	movff	??_years_to_days+6,years_to_days@ret+2
  4118  00173E  C017  F01B         	movff	??_years_to_days+7,years_to_days@ret+3
  4119  001742  C00C  F005         	movff	years_to_days@yr,___lwdiv@dividend
  4120  001746  C00D  F006         	movff	years_to_days@yr+1,___lwdiv@dividend+1
  4121  00174A  6A08               	clrf	___lwdiv@divisor+1,c
  4122  00174C  0E64               	movlw	100
  4123  00174E  6E07               	movwf	___lwdiv@divisor,c
  4124  001750  EC03  F011         	call	___lwdiv	;wreg free
  4125  001754  C00C  F010         	movff	years_to_days@yr,??_years_to_days
  4126  001758  C00D  F011         	movff	years_to_days@yr+1,??_years_to_days+1
  4127  00175C  90D8               	bcf	status,0,c
  4128  00175E  3211               	rrcf	??_years_to_days+1,f,c
  4129  001760  3210               	rrcf	??_years_to_days,f,c
  4130  001762  90D8               	bcf	status,0,c
  4131  001764  3211               	rrcf	??_years_to_days+1,f,c
  4132  001766  3210               	rrcf	??_years_to_days,f,c
  4133  001768  5005               	movf	?___lwdiv,w,c
  4134  00176A  5E10               	subwf	??_years_to_days,f,c
  4135  00176C  5006               	movf	?___lwdiv+1,w,c
  4136  00176E  5A11               	subwfb	??_years_to_days+1,f,c
  4137  001770  5010               	movf	??_years_to_days,w,c
  4138  001772  2618               	addwf	years_to_days@ret,f,c
  4139  001774  5011               	movf	??_years_to_days+1,w,c
  4140  001776  2219               	addwfc	years_to_days@ret+1,f,c
  4141  001778  0E00               	movlw	0
  4142  00177A  221A               	addwfc	years_to_days@ret+2,f,c
  4143  00177C  221B               	addwfc	years_to_days@ret+3,f,c
  4144  00177E  C00C  F005         	movff	years_to_days@yr,___lwdiv@dividend
  4145  001782  C00D  F006         	movff	years_to_days@yr+1,___lwdiv@dividend+1
  4146  001786  0E01               	movlw	1
  4147  001788  6E08               	movwf	___lwdiv@divisor+1,c
  4148  00178A  0E90               	movlw	144
  4149  00178C  6E07               	movwf	___lwdiv@divisor,c
  4150  00178E  EC03  F011         	call	___lwdiv	;wreg free
  4151  001792  5005               	movf	?___lwdiv,w,c
  4152  001794  2618               	addwf	years_to_days@ret,f,c
  4153  001796  5006               	movf	?___lwdiv+1,w,c
  4154  001798  2219               	addwfc	years_to_days@ret+1,f,c
  4155  00179A  0E00               	movlw	0
  4156  00179C  221A               	addwfc	years_to_days@ret+2,f,c
  4157  00179E  221B               	addwfc	years_to_days@ret+3,f,c
  4158  0017A0  C018  F00C         	movff	years_to_days@ret,?_years_to_days
  4159  0017A4  C019  F00D         	movff	years_to_days@ret+1,?_years_to_days+1
  4160  0017A8  C01A  F00E         	movff	years_to_days@ret+2,?_years_to_days+2
  4161  0017AC  C01B  F00F         	movff	years_to_days@ret+3,?_years_to_days+3
  4162  0017B0  0C00               	retlw	0	;funcret
  4163  0017B2  FFFF               	dw	65535	; errata NOP
  4164  0017B4                     __end_of_years_to_days:
  4165                           	opt stack 0
  4166                           tblptru	equ	0xFF8
  4167                           tblptrh	equ	0xFF7
  4168                           tblptrl	equ	0xFF6
  4169                           tablat	equ	0xFF5
  4170                           prodh	equ	0xFF4
  4171                           prodl	equ	0xFF3
  4172                           intcon	equ	0xFF2
  4173                           postinc0	equ	0xFEE
  4174                           wreg	equ	0xFE8
  4175                           postdec1	equ	0xFE5
  4176                           fsr1h	equ	0xFE2
  4177                           fsr1l	equ	0xFE1
  4178                           indf2	equ	0xFDF
  4179                           postinc2	equ	0xFDE
  4180                           postdec2	equ	0xFDD
  4181                           plusw2	equ	0xFDB
  4182                           fsr2h	equ	0xFDA
  4183                           fsr2l	equ	0xFD9
  4184                           status	equ	0xFD8
  4185                           
  4186 ;; *************** function _months_to_days *****************
  4187 ;; Defined at:
  4188 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
  4189 ;; Parameters:    Size  Location     Type
  4190 ;;  month           2   11[COMRAM] unsigned int 
  4191 ;; Auto vars:     Size  Location     Type
  4192 ;;		None
  4193 ;; Return value:  Size  Location     Type
  4194 ;;                  2   11[COMRAM] unsigned int 
  4195 ;; Registers used:
  4196 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4197 ;; Tracked objects:
  4198 ;;		On entry : 0/0
  4199 ;;		On exit  : 0/0
  4200 ;;		Unchanged: 0/0
  4201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4202 ;;      Params:         2       0       0       0       0       0       0
  4203 ;;      Locals:         0       0       0       0       0       0       0
  4204 ;;      Temps:          4       0       0       0       0       0       0
  4205 ;;      Totals:         6       0       0       0       0       0       0
  4206 ;;Total ram usage:        6 bytes
  4207 ;; Hardware stack levels used:    1
  4208 ;; Hardware stack levels required when called:    3
  4209 ;; This function calls:
  4210 ;;		___lwdiv
  4211 ;; This function is called by:
  4212 ;;		_ymd_to_scalar
  4213 ;; This function uses a non-reentrant model
  4214 ;;
  4215                           
  4216                           	psect	text7
  4217  002384                     __ptext7:
  4218                           	opt stack 0
  4219  002384                     _months_to_days:
  4220                           	opt stack 23
  4221                           
  4222                           ;incstack = 0
  4223  002384  FFFF               	dw	65535
  4224  002386  0EF1               	movlw	241
  4225  002388  6E0E               	movwf	??_months_to_days& (0+255),c
  4226  00238A  0E0B               	movlw	11
  4227  00238C  6E0F               	movwf	(??_months_to_days+1)& (0+255),c
  4228  00238E  500E               	movf	??_months_to_days& (0+255),w,c
  4229  002390  020C               	mulwf	months_to_days@month,c
  4230  002392  CFF3 F010          	movff	prodl,??_months_to_days+2
  4231  002396  CFF4 F011          	movff	prodh,??_months_to_days+3
  4232  00239A  020D               	mulwf	months_to_days@month+1,c
  4233  00239C  50F3               	movf	prodl,w,c
  4234  00239E  2611               	addwf	(??_months_to_days+3)& (0+255),f,c
  4235  0023A0  500F               	movf	(??_months_to_days+1)& (0+255),w,c
  4236  0023A2  020C               	mulwf	months_to_days@month,c
  4237  0023A4  50F3               	movf	prodl,w,c
  4238  0023A6  2611               	addwf	(??_months_to_days+3)& (0+255),f,c
  4239  0023A8  0E41               	movlw	65
  4240  0023AA  2410               	addwf	??_months_to_days+2,w,c
  4241  0023AC  6E05               	movwf	___lwdiv@dividend,c
  4242  0023AE  0EF4               	movlw	244
  4243  0023B0  2011               	addwfc	??_months_to_days+3,w,c
  4244  0023B2  6E06               	movwf	___lwdiv@dividend+1,c
  4245  0023B4  6A08               	clrf	___lwdiv@divisor+1,c
  4246  0023B6  0E64               	movlw	100
  4247  0023B8  6E07               	movwf	___lwdiv@divisor,c
  4248  0023BA  EC03  F011         	call	___lwdiv	;wreg free
  4249  0023BE  C005  F00C         	movff	?___lwdiv,?_months_to_days
  4250  0023C2  C006  F00D         	movff	?___lwdiv+1,?_months_to_days+1
  4251  0023C6  0012               	return		;funcret
  4252  0023C8  FFFF               	dw	65535	; errata NOP
  4253  0023CA                     __end_of_months_to_days:
  4254                           	opt stack 0
  4255                           tblptru	equ	0xFF8
  4256                           tblptrh	equ	0xFF7
  4257                           tblptrl	equ	0xFF6
  4258                           tablat	equ	0xFF5
  4259                           prodh	equ	0xFF4
  4260                           prodl	equ	0xFF3
  4261                           intcon	equ	0xFF2
  4262                           postinc0	equ	0xFEE
  4263                           wreg	equ	0xFE8
  4264                           postdec1	equ	0xFE5
  4265                           fsr1h	equ	0xFE2
  4266                           fsr1l	equ	0xFE1
  4267                           indf2	equ	0xFDF
  4268                           postinc2	equ	0xFDE
  4269                           postdec2	equ	0xFDD
  4270                           plusw2	equ	0xFDB
  4271                           fsr2h	equ	0xFDA
  4272                           fsr2l	equ	0xFD9
  4273                           status	equ	0xFD8
  4274                           
  4275 ;; *************** function ___lwdiv *****************
  4276 ;; Defined at:
  4277 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwdiv.c"
  4278 ;; Parameters:    Size  Location     Type
  4279 ;;  dividend        2    4[COMRAM] unsigned int 
  4280 ;;  divisor         2    6[COMRAM] unsigned int 
  4281 ;; Auto vars:     Size  Location     Type
  4282 ;;  quotient        2    8[COMRAM] unsigned int 
  4283 ;;  counter         1   10[COMRAM] unsigned char 
  4284 ;; Return value:  Size  Location     Type
  4285 ;;                  2    4[COMRAM] unsigned int 
  4286 ;; Registers used:
  4287 ;;		wreg, status,2, status,0
  4288 ;; Tracked objects:
  4289 ;;		On entry : 0/0
  4290 ;;		On exit  : 0/0
  4291 ;;		Unchanged: 0/0
  4292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4293 ;;      Params:         4       0       0       0       0       0       0
  4294 ;;      Locals:         3       0       0       0       0       0       0
  4295 ;;      Temps:          0       0       0       0       0       0       0
  4296 ;;      Totals:         7       0       0       0       0       0       0
  4297 ;;Total ram usage:        7 bytes
  4298 ;; Hardware stack levels used:    1
  4299 ;; Hardware stack levels required when called:    2
  4300 ;; This function calls:
  4301 ;;		Nothing
  4302 ;; This function is called by:
  4303 ;;		_months_to_days
  4304 ;;		_years_to_days
  4305 ;; This function uses a non-reentrant model
  4306 ;;
  4307                           
  4308                           	psect	text8
  4309  002206                     __ptext8:
  4310                           	opt stack 0
  4311  002206                     ___lwdiv:
  4312                           	opt stack 23
  4313                           
  4314                           ;incstack = 0
  4315  002206  FFFF               	dw	65535
  4316  002208  6A09               	clrf	___lwdiv@quotient,c
  4317  00220A  6A0A               	clrf	___lwdiv@quotient+1,c
  4318  00220C  5007               	movf	___lwdiv@divisor,w,c
  4319  00220E  1008               	iorwf	___lwdiv@divisor+1,w,c
  4320  002210  E01E               	bz	l1325
  4321  002212  0E01               	movlw	1
  4322  002214  6E0B               	movwf	___lwdiv@counter,c
  4323  002216  D005               	goto	l3518
  4324  002218                     l3516:
  4325  002218  FFFF               	dw	65535	; assembler added errata NOP
  4326  00221A  90D8               	bcf	status,0,c
  4327  00221C  3607               	rlcf	___lwdiv@divisor,f,c
  4328  00221E  3608               	rlcf	___lwdiv@divisor+1,f,c
  4329  002220  2A0B               	incf	___lwdiv@counter,f,c
  4330  002222                     l3518:
  4331  002222  FFFF               	dw	65535	; assembler added errata NOP
  4332  002224  AE08               	btfss	___lwdiv@divisor+1,7,c
  4333  002226  D7F8               	goto	l3516
  4334  002228                     l3520:
  4335  002228  FFFF               	dw	65535	; assembler added errata NOP
  4336  00222A  90D8               	bcf	status,0,c
  4337  00222C  3609               	rlcf	___lwdiv@quotient,f,c
  4338  00222E  360A               	rlcf	___lwdiv@quotient+1,f,c
  4339  002230  5007               	movf	___lwdiv@divisor,w,c
  4340  002232  5C05               	subwf	___lwdiv@dividend,w,c
  4341  002234  5008               	movf	___lwdiv@divisor+1,w,c
  4342  002236  5806               	subwfb	___lwdiv@dividend+1,w,c
  4343  002238  E305               	bnc	l3528
  4344  00223A  5007               	movf	___lwdiv@divisor,w,c
  4345  00223C  5E05               	subwf	___lwdiv@dividend,f,c
  4346  00223E  5008               	movf	___lwdiv@divisor+1,w,c
  4347  002240  5A06               	subwfb	___lwdiv@dividend+1,f,c
  4348  002242  8009               	bsf	___lwdiv@quotient,0,c
  4349  002244                     l3528:
  4350  002244  90D8               	bcf	status,0,c
  4351  002246  3208               	rrcf	___lwdiv@divisor+1,f,c
  4352  002248  3207               	rrcf	___lwdiv@divisor,f,c
  4353  00224A  2E0B               	decfsz	___lwdiv@counter,f,c
  4354  00224C  D7ED               	goto	l3520
  4355  00224E                     l1325:
  4356  00224E  C009  F005         	movff	___lwdiv@quotient,?___lwdiv
  4357  002252  C00A  F006         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4358  002256  0012               	return		;funcret
  4359  002258  FFFF               	dw	65535	; errata NOP
  4360  00225A                     __end_of___lwdiv:
  4361                           	opt stack 0
  4362                           tblptru	equ	0xFF8
  4363                           tblptrh	equ	0xFF7
  4364                           tblptrl	equ	0xFF6
  4365                           tablat	equ	0xFF5
  4366                           prodh	equ	0xFF4
  4367                           prodl	equ	0xFF3
  4368                           intcon	equ	0xFF2
  4369                           postinc0	equ	0xFEE
  4370                           wreg	equ	0xFE8
  4371                           postdec1	equ	0xFE5
  4372                           fsr1h	equ	0xFE2
  4373                           fsr1l	equ	0xFE1
  4374                           indf2	equ	0xFDF
  4375                           postinc2	equ	0xFDE
  4376                           postdec2	equ	0xFDD
  4377                           plusw2	equ	0xFDB
  4378                           fsr2h	equ	0xFDA
  4379                           fsr2l	equ	0xFD9
  4380                           status	equ	0xFD8
  4381                           
  4382 ;; *************** function _isleap *****************
  4383 ;; Defined at:
  4384 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
  4385 ;; Parameters:    Size  Location     Type
  4386 ;;  yr              2    9[COMRAM] unsigned int 
  4387 ;; Auto vars:     Size  Location     Type
  4388 ;;		None
  4389 ;; Return value:  Size  Location     Type
  4390 ;;                  2    9[COMRAM] int 
  4391 ;; Registers used:
  4392 ;;		wreg, status,2, status,0, cstack
  4393 ;; Tracked objects:
  4394 ;;		On entry : 0/0
  4395 ;;		On exit  : 0/0
  4396 ;;		Unchanged: 0/0
  4397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4398 ;;      Params:         2       0       0       0       0       0       0
  4399 ;;      Locals:         1       0       0       0       0       0       0
  4400 ;;      Temps:          1       0       0       0       0       0       0
  4401 ;;      Totals:         4       0       0       0       0       0       0
  4402 ;;Total ram usage:        4 bytes
  4403 ;; Hardware stack levels used:    1
  4404 ;; Hardware stack levels required when called:    3
  4405 ;; This function calls:
  4406 ;;		___lwmod
  4407 ;; This function is called by:
  4408 ;;		_ymd_to_scalar
  4409 ;; This function uses a non-reentrant model
  4410 ;;
  4411                           
  4412                           	psect	text9
  4413  00225A                     __ptext9:
  4414                           	opt stack 0
  4415  00225A                     _isleap:
  4416                           	opt stack 23
  4417                           
  4418                           ;incstack = 0
  4419  00225A  FFFF               	dw	65535
  4420  00225C  0E01               	movlw	1
  4421  00225E  6E0D               	movwf	_isleap$2110,c
  4422  002260  C00A  F005         	movff	isleap@yr,___lwmod@dividend
  4423  002264  C00B  F006         	movff	isleap@yr+1,___lwmod@dividend+1
  4424  002268  6E08               	movwf	___lwmod@divisor+1,c
  4425  00226A  0E90               	movlw	144
  4426  00226C  6E07               	movwf	___lwmod@divisor,c
  4427  00226E  EC9E  F011         	call	___lwmod	;wreg free
  4428  002272  5005               	movf	?___lwmod,w,c
  4429  002274  1006               	iorwf	?___lwmod+1,w,c
  4430  002276  E012               	bz	l1351
  4431  002278  C00A  F00C         	movff	isleap@yr,??_isleap
  4432  00227C  0E03               	movlw	3
  4433  00227E  160C               	andwf	??_isleap,f,c
  4434  002280  E10C               	bnz	l3508
  4435  002282  C00A  F005         	movff	isleap@yr,___lwmod@dividend
  4436  002286  C00B  F006         	movff	isleap@yr+1,___lwmod@dividend+1
  4437  00228A  6A08               	clrf	___lwmod@divisor+1,c
  4438  00228C  0E64               	movlw	100
  4439  00228E  6E07               	movwf	___lwmod@divisor,c
  4440  002290  EC9E  F011         	call	___lwmod	;wreg free
  4441  002294  5005               	movf	?___lwmod,w,c
  4442  002296  1006               	iorwf	?___lwmod+1,w,c
  4443  002298  E101               	bnz	l1351
  4444  00229A                     l3508:
  4445  00229A  6A0D               	clrf	_isleap$2110,c
  4446  00229C                     l1351:
  4447  00229C  C00D  F00A         	movff	_isleap$2110,?_isleap
  4448  0022A0  6A0B               	clrf	?_isleap+1,c
  4449  0022A2  0012               	return		;funcret
  4450  0022A4  FFFF               	dw	65535	; errata NOP
  4451  0022A6                     __end_of_isleap:
  4452                           	opt stack 0
  4453                           tblptru	equ	0xFF8
  4454                           tblptrh	equ	0xFF7
  4455                           tblptrl	equ	0xFF6
  4456                           tablat	equ	0xFF5
  4457                           prodh	equ	0xFF4
  4458                           prodl	equ	0xFF3
  4459                           intcon	equ	0xFF2
  4460                           postinc0	equ	0xFEE
  4461                           wreg	equ	0xFE8
  4462                           postdec1	equ	0xFE5
  4463                           fsr1h	equ	0xFE2
  4464                           fsr1l	equ	0xFE1
  4465                           indf2	equ	0xFDF
  4466                           postinc2	equ	0xFDE
  4467                           postdec2	equ	0xFDD
  4468                           plusw2	equ	0xFDB
  4469                           fsr2h	equ	0xFDA
  4470                           fsr2l	equ	0xFD9
  4471                           status	equ	0xFD8
  4472                           
  4473 ;; *************** function ___lwmod *****************
  4474 ;; Defined at:
  4475 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwmod.c"
  4476 ;; Parameters:    Size  Location     Type
  4477 ;;  dividend        2    4[COMRAM] unsigned int 
  4478 ;;  divisor         2    6[COMRAM] unsigned int 
  4479 ;; Auto vars:     Size  Location     Type
  4480 ;;  counter         1    8[COMRAM] unsigned char 
  4481 ;; Return value:  Size  Location     Type
  4482 ;;                  2    4[COMRAM] unsigned int 
  4483 ;; Registers used:
  4484 ;;		wreg, status,2, status,0
  4485 ;; Tracked objects:
  4486 ;;		On entry : 0/0
  4487 ;;		On exit  : 0/0
  4488 ;;		Unchanged: 0/0
  4489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4490 ;;      Params:         4       0       0       0       0       0       0
  4491 ;;      Locals:         1       0       0       0       0       0       0
  4492 ;;      Temps:          0       0       0       0       0       0       0
  4493 ;;      Totals:         5       0       0       0       0       0       0
  4494 ;;Total ram usage:        5 bytes
  4495 ;; Hardware stack levels used:    1
  4496 ;; Hardware stack levels required when called:    2
  4497 ;; This function calls:
  4498 ;;		Nothing
  4499 ;; This function is called by:
  4500 ;;		_isleap
  4501 ;; This function uses a non-reentrant model
  4502 ;;
  4503                           
  4504                           	psect	text10
  4505  00233C                     __ptext10:
  4506                           	opt stack 0
  4507  00233C                     ___lwmod:
  4508                           	opt stack 23
  4509                           
  4510                           ;incstack = 0
  4511  00233C  FFFF               	dw	65535
  4512  00233E  5007               	movf	___lwmod@divisor,w,c
  4513  002340  1008               	iorwf	___lwmod@divisor+1,w,c
  4514  002342  E01A               	bz	l1335
  4515  002344  0E01               	movlw	1
  4516  002346  6E09               	movwf	___lwmod@counter,c
  4517  002348  D005               	goto	l3538
  4518  00234A                     l3536:
  4519  00234A  FFFF               	dw	65535	; assembler added errata NOP
  4520  00234C  90D8               	bcf	status,0,c
  4521  00234E  3607               	rlcf	___lwmod@divisor,f,c
  4522  002350  3608               	rlcf	___lwmod@divisor+1,f,c
  4523  002352  2A09               	incf	___lwmod@counter,f,c
  4524  002354                     l3538:
  4525  002354  FFFF               	dw	65535	; assembler added errata NOP
  4526  002356  AE08               	btfss	___lwmod@divisor+1,7,c
  4527  002358  D7F8               	goto	l3536
  4528  00235A                     l3540:
  4529  00235A  FFFF               	dw	65535	; assembler added errata NOP
  4530  00235C  5007               	movf	___lwmod@divisor,w,c
  4531  00235E  5C05               	subwf	___lwmod@dividend,w,c
  4532  002360  5008               	movf	___lwmod@divisor+1,w,c
  4533  002362  5806               	subwfb	___lwmod@dividend+1,w,c
  4534  002364  E304               	bnc	l3544
  4535  002366  5007               	movf	___lwmod@divisor,w,c
  4536  002368  5E05               	subwf	___lwmod@dividend,f,c
  4537  00236A  5008               	movf	___lwmod@divisor+1,w,c
  4538  00236C  5A06               	subwfb	___lwmod@dividend+1,f,c
  4539  00236E                     l3544:
  4540  00236E  90D8               	bcf	status,0,c
  4541  002370  3208               	rrcf	___lwmod@divisor+1,f,c
  4542  002372  3207               	rrcf	___lwmod@divisor,f,c
  4543  002374  2E09               	decfsz	___lwmod@counter,f,c
  4544  002376  D7F1               	goto	l3540
  4545  002378                     l1335:
  4546  002378  C005  F005         	movff	___lwmod@dividend,?___lwmod
  4547  00237C  C006  F006         	movff	___lwmod@dividend+1,?___lwmod+1
  4548  002380  0012               	return		;funcret
  4549  002382  FFFF               	dw	65535	; errata NOP
  4550  002384                     __end_of___lwmod:
  4551                           	opt stack 0
  4552                           tblptru	equ	0xFF8
  4553                           tblptrh	equ	0xFF7
  4554                           tblptrl	equ	0xFF6
  4555                           tablat	equ	0xFF5
  4556                           prodh	equ	0xFF4
  4557                           prodl	equ	0xFF3
  4558                           intcon	equ	0xFF2
  4559                           postinc0	equ	0xFEE
  4560                           wreg	equ	0xFE8
  4561                           postdec1	equ	0xFE5
  4562                           fsr1h	equ	0xFE2
  4563                           fsr1l	equ	0xFE1
  4564                           indf2	equ	0xFDF
  4565                           postinc2	equ	0xFDE
  4566                           postdec2	equ	0xFDD
  4567                           plusw2	equ	0xFDB
  4568                           fsr2h	equ	0xFDA
  4569                           fsr2l	equ	0xFD9
  4570                           status	equ	0xFD8
  4571                           
  4572 ;; *************** function _SetTime *****************
  4573 ;; Defined at:
  4574 ;;		line 168 in file "user.c"
  4575 ;; Parameters:    Size  Location     Type
  4576 ;;  newTime         1    wreg     PTR long 
  4577 ;;		 -> SetTimeFromRegs@newRawTime(4), 
  4578 ;; Auto vars:     Size  Location     Type
  4579 ;;  newTime         1    4[COMRAM] PTR long 
  4580 ;;		 -> SetTimeFromRegs@newRawTime(4), 
  4581 ;; Return value:  Size  Location     Type
  4582 ;;                  1    wreg      void 
  4583 ;; Registers used:
  4584 ;;		wreg, fsr2l, fsr2h, status,2
  4585 ;; Tracked objects:
  4586 ;;		On entry : 0/0
  4587 ;;		On exit  : 0/0
  4588 ;;		Unchanged: 0/0
  4589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4590 ;;      Params:         0       0       0       0       0       0       0
  4591 ;;      Locals:         1       0       0       0       0       0       0
  4592 ;;      Temps:          0       0       0       0       0       0       0
  4593 ;;      Totals:         1       0       0       0       0       0       0
  4594 ;;Total ram usage:        1 bytes
  4595 ;; Hardware stack levels used:    1
  4596 ;; Hardware stack levels required when called:    2
  4597 ;; This function calls:
  4598 ;;		Nothing
  4599 ;; This function is called by:
  4600 ;;		_SetTimeFromRegs
  4601 ;; This function uses a non-reentrant model
  4602 ;;
  4603                           
  4604                           	psect	text11
  4605  0025D2                     __ptext11:
  4606                           	opt stack 0
  4607  0025D2                     _SetTime:
  4608                           	opt stack 26
  4609                           
  4610                           ;incstack = 0
  4611  0025D2  FFFF               	dw	65535
  4612                           
  4613                           ;SetTime@newTime stored from wreg
  4614  0025D4  6E05               	movwf	SetTime@newTime,c
  4615                           
  4616                           ;user.c: 170: currentTime = *newTime;
  4617  0025D6  5005               	movf	SetTime@newTime,w,c
  4618  0025D8  6ED9               	movwf	fsr2l,c
  4619  0025DA  6ADA               	clrf	fsr2h,c
  4620  0025DC  CFDE F0D2          	movff	postinc2,_currentTime
  4621  0025E0  CFDE F0D3          	movff	postinc2,_currentTime+1
  4622  0025E4  CFDE F0D4          	movff	postinc2,_currentTime+2
  4623  0025E8  CFDE F0D5          	movff	postinc2,_currentTime+3
  4624  0025EC  0012               	return		;funcret
  4625  0025EE  FFFF               	dw	65535	; errata NOP
  4626  0025F0                     __end_of_SetTime:
  4627                           	opt stack 0
  4628                           tblptru	equ	0xFF8
  4629                           tblptrh	equ	0xFF7
  4630                           tblptrl	equ	0xFF6
  4631                           tablat	equ	0xFF5
  4632                           prodh	equ	0xFF4
  4633                           prodl	equ	0xFF3
  4634                           intcon	equ	0xFF2
  4635                           postinc0	equ	0xFEE
  4636                           wreg	equ	0xFE8
  4637                           postdec1	equ	0xFE5
  4638                           fsr1h	equ	0xFE2
  4639                           fsr1l	equ	0xFE1
  4640                           indf2	equ	0xFDF
  4641                           postinc2	equ	0xFDE
  4642                           postdec2	equ	0xFDD
  4643                           plusw2	equ	0xFDB
  4644                           fsr2h	equ	0xFDA
  4645                           fsr2l	equ	0xFD9
  4646                           status	equ	0xFD8
  4647                           
  4648 ;; *************** function _SetHourMin *****************
  4649 ;; Defined at:
  4650 ;;		line 254 in file "interrupts.c"
  4651 ;; Parameters:    Size  Location     Type
  4652 ;;  newHour         1    wreg     PTR int 
  4653 ;;		 -> SetTimeFromRegs@newTime(18), 
  4654 ;;  newMin          1    4[COMRAM] PTR int 
  4655 ;;		 -> SetTimeFromRegs@newTime(18), 
  4656 ;; Auto vars:     Size  Location     Type
  4657 ;;  newHour         1    5[COMRAM] PTR int 
  4658 ;;		 -> SetTimeFromRegs@newTime(18), 
  4659 ;; Return value:  Size  Location     Type
  4660 ;;                  1    wreg      void 
  4661 ;; Registers used:
  4662 ;;		wreg, fsr2l, fsr2h, status,2
  4663 ;; Tracked objects:
  4664 ;;		On entry : 0/0
  4665 ;;		On exit  : 0/0
  4666 ;;		Unchanged: 0/0
  4667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4668 ;;      Params:         1       0       0       0       0       0       0
  4669 ;;      Locals:         1       0       0       0       0       0       0
  4670 ;;      Temps:          0       0       0       0       0       0       0
  4671 ;;      Totals:         2       0       0       0       0       0       0
  4672 ;;Total ram usage:        2 bytes
  4673 ;; Hardware stack levels used:    1
  4674 ;; Hardware stack levels required when called:    2
  4675 ;; This function calls:
  4676 ;;		Nothing
  4677 ;; This function is called by:
  4678 ;;		_SetTimeFromRegs
  4679 ;; This function uses a non-reentrant model
  4680 ;;
  4681                           
  4682                           	psect	text12
  4683  0025F0                     __ptext12:
  4684                           	opt stack 0
  4685  0025F0                     _SetHourMin:
  4686                           	opt stack 26
  4687                           
  4688                           ;incstack = 0
  4689  0025F0  FFFF               	dw	65535
  4690                           
  4691                           ;SetHourMin@newHour stored from wreg
  4692  0025F2  6E06               	movwf	SetHourMin@newHour,c
  4693                           
  4694                           ;interrupts.c: 256: globalHours = *newHour;
  4695  0025F4  5006               	movf	SetHourMin@newHour,w,c
  4696  0025F6  6ED9               	movwf	fsr2l,c
  4697  0025F8  6ADA               	clrf	fsr2h,c
  4698  0025FA  50DF               	movf	indf2,w,c
  4699  0025FC  6E78               	movwf	_globalHours,c	;volatile
  4700                           
  4701                           ;interrupts.c: 257: globalMinutes = *newMin;
  4702  0025FE  5005               	movf	SetHourMin@newMin,w,c
  4703  002600  6ED9               	movwf	fsr2l,c
  4704  002602  6ADA               	clrf	fsr2h,c
  4705  002604  50DF               	movf	indf2,w,c
  4706  002606  6E76               	movwf	_globalMinutes,c	;volatile
  4707  002608  0012               	return		;funcret
  4708  00260A  FFFF               	dw	65535	; errata NOP
  4709  00260C                     __end_of_SetHourMin:
  4710                           	opt stack 0
  4711                           tblptru	equ	0xFF8
  4712                           tblptrh	equ	0xFF7
  4713                           tblptrl	equ	0xFF6
  4714                           tablat	equ	0xFF5
  4715                           prodh	equ	0xFF4
  4716                           prodl	equ	0xFF3
  4717                           intcon	equ	0xFF2
  4718                           postinc0	equ	0xFEE
  4719                           wreg	equ	0xFE8
  4720                           postdec1	equ	0xFE5
  4721                           fsr1h	equ	0xFE2
  4722                           fsr1l	equ	0xFE1
  4723                           indf2	equ	0xFDF
  4724                           postinc2	equ	0xFDE
  4725                           postdec2	equ	0xFDD
  4726                           plusw2	equ	0xFDB
  4727                           fsr2h	equ	0xFDA
  4728                           fsr2l	equ	0xFD9
  4729                           status	equ	0xFD8
  4730                           
  4731 ;; *************** function _LightStatusLed *****************
  4732 ;; Defined at:
  4733 ;;		line 390 in file "main.c"
  4734 ;; Parameters:    Size  Location     Type
  4735 ;;  row             1    wreg     unsigned char 
  4736 ;;  on              1    4[COMRAM] unsigned char 
  4737 ;;  blink           1    5[COMRAM] unsigned char 
  4738 ;; Auto vars:     Size  Location     Type
  4739 ;;  row             1   11[COMRAM] unsigned char 
  4740 ;; Return value:  Size  Location     Type
  4741 ;;                  1    wreg      void 
  4742 ;; Registers used:
  4743 ;;		wreg, status,2, status,0
  4744 ;; Tracked objects:
  4745 ;;		On entry : 0/0
  4746 ;;		On exit  : 0/0
  4747 ;;		Unchanged: 0/0
  4748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4749 ;;      Params:         2       0       0       0       0       0       0
  4750 ;;      Locals:         1       0       0       0       0       0       0
  4751 ;;      Temps:          5       0       0       0       0       0       0
  4752 ;;      Totals:         8       0       0       0       0       0       0
  4753 ;;Total ram usage:        8 bytes
  4754 ;; Hardware stack levels used:    1
  4755 ;; Hardware stack levels required when called:    2
  4756 ;; This function calls:
  4757 ;;		Nothing
  4758 ;; This function is called by:
  4759 ;;		_main
  4760 ;;		_SetTimeFromRegs
  4761 ;; This function uses a non-reentrant model
  4762 ;;
  4763                           
  4764                           	psect	text13
  4765  0018B4                     __ptext13:
  4766                           	opt stack 0
  4767  0018B4                     _LightStatusLed:
  4768                           	opt stack 26
  4769                           
  4770                           ;incstack = 0
  4771  0018B4  FFFF               	dw	65535
  4772                           
  4773                           ;LightStatusLed@row stored from wreg
  4774  0018B6  6E0C               	movwf	LightStatusLed@row,c
  4775                           
  4776                           ;main.c: 392: if(row > 7)
  4777  0018B8  0E07               	movlw	7
  4778  0018BA  640C               	cpfsgt	LightStatusLed@row,c
  4779  0018BC  D001               	goto	l3704
  4780  0018BE  D072               	goto	l290
  4781  0018C0                     l3704:
  4782  0018C0  FFFF               	dw	65535	; assembler added errata NOP
  4783                           
  4784                           ;main.c: 394: (on ? ((ledStatuses[16-1]) |= ((unsigned short)1 << (row))) : ((ledStatuse
      +                          s[16-1]) &= ~((unsigned short)1 << (row))));
  4785  0018C2  5005               	movf	LightStatusLed@on,w,c
  4786  0018C4  E010               	bz	l3708
  4787  0018C6  C00C  F007         	movff	LightStatusLed@row,??_LightStatusLed
  4788  0018CA  0E01               	movlw	1
  4789  0018CC  6E08               	movwf	(??_LightStatusLed+1)& (0+255),c
  4790  0018CE  2A07               	incf	??_LightStatusLed,f,c
  4791  0018D0  D003               	goto	u2874
  4792  0018D2                     u2875:
  4793  0018D2  FFFF               	dw	65535	; assembler added errata NOP
  4794  0018D4  90D8               	bcf	status,0,c
  4795  0018D6  3608               	rlcf	??_LightStatusLed+1,f,c
  4796  0018D8                     u2874:
  4797  0018D8  FFFF               	dw	65535	; assembler added errata NOP
  4798  0018DA  2E07               	decfsz	??_LightStatusLed,f,c
  4799  0018DC  D7FA               	goto	u2875
  4800  0018DE  5008               	movf	??_LightStatusLed+1,w,c
  4801  0018E0  0100               	movlb	0	; () banked
  4802  0018E2  139F               	iorwf	(_ledStatuses+15)& (0+255),f,b
  4803  0018E4  D00F               	goto	l3710
  4804  0018E6                     l3708:
  4805  0018E6  C00C  F007         	movff	LightStatusLed@row,??_LightStatusLed
  4806  0018EA  0E01               	movlw	1
  4807  0018EC  6E08               	movwf	(??_LightStatusLed+1)& (0+255),c
  4808  0018EE  2A07               	incf	??_LightStatusLed,f,c
  4809  0018F0  D003               	goto	u2884
  4810  0018F2                     u2885:
  4811  0018F2  FFFF               	dw	65535	; assembler added errata NOP
  4812  0018F4  90D8               	bcf	status,0,c
  4813  0018F6  3608               	rlcf	??_LightStatusLed+1,f,c
  4814  0018F8                     u2884:
  4815  0018F8  FFFF               	dw	65535	; assembler added errata NOP
  4816  0018FA  2E07               	decfsz	??_LightStatusLed,f,c
  4817  0018FC  D7FA               	goto	u2885
  4818  0018FE  1C08               	comf	??_LightStatusLed+1,w,c
  4819  001900  0100               	movlb	0	; () banked
  4820  001902  179F               	andwf	(_ledStatuses+15)& (0+255),f,b
  4821  001904                     l3710:
  4822  001904  FFFF               	dw	65535	; assembler added errata NOP
  4823                           
  4824                           ; BSR set to: 0
  4825                           ;main.c: 395: (blink ? ((ledBlink[16-1]) |= ((unsigned short)1 << (row))) : ((ledBlink[1
      +                          6-1]) &= ~((unsigned short)1 << (row))));
  4826  001906  5006               	movf	LightStatusLed@blink,w,c
  4827  001908  E010               	bz	l3714
  4828                           
  4829                           ; BSR set to: 0
  4830  00190A  C00C  F007         	movff	LightStatusLed@row,??_LightStatusLed
  4831  00190E  0E01               	movlw	1
  4832  001910  6E08               	movwf	(??_LightStatusLed+1)& (0+255),c
  4833  001912  2A07               	incf	??_LightStatusLed,f,c
  4834  001914  D003               	goto	u2904
  4835  001916                     u2905:
  4836  001916  FFFF               	dw	65535	; assembler added errata NOP
  4837  001918  90D8               	bcf	status,0,c
  4838  00191A  3608               	rlcf	??_LightStatusLed+1,f,c
  4839  00191C                     u2904:
  4840  00191C  FFFF               	dw	65535	; assembler added errata NOP
  4841  00191E  2E07               	decfsz	??_LightStatusLed,f,c
  4842  001920  D7FA               	goto	u2905
  4843  001922  5008               	movf	??_LightStatusLed+1,w,c
  4844  001924  0100               	movlb	0	; () banked
  4845  001926  138F               	iorwf	(_ledBlink+15)& (0+255),f,b
  4846  001928  D00F               	goto	l3716
  4847  00192A                     l3714:
  4848                           
  4849                           ; BSR set to: 0
  4850  00192A  C00C  F007         	movff	LightStatusLed@row,??_LightStatusLed
  4851  00192E  0E01               	movlw	1
  4852  001930  6E08               	movwf	(??_LightStatusLed+1)& (0+255),c
  4853  001932  2A07               	incf	??_LightStatusLed,f,c
  4854  001934  D003               	goto	u2914
  4855  001936                     u2915:
  4856  001936  FFFF               	dw	65535	; assembler added errata NOP
  4857  001938  90D8               	bcf	status,0,c
  4858  00193A  3608               	rlcf	??_LightStatusLed+1,f,c
  4859  00193C                     u2914:
  4860  00193C  FFFF               	dw	65535	; assembler added errata NOP
  4861  00193E  2E07               	decfsz	??_LightStatusLed,f,c
  4862  001940  D7FA               	goto	u2915
  4863  001942  1C08               	comf	??_LightStatusLed+1,w,c
  4864  001944  0100               	movlb	0	; () banked
  4865  001946  178F               	andwf	(_ledBlink+15)& (0+255),f,b
  4866  001948                     l3716:
  4867  001948  FFFF               	dw	65535	; assembler added errata NOP
  4868                           
  4869                           ; BSR set to: 0
  4870                           ;main.c: 396: (on ? ((_MODBUSCoils) |= ((unsigned short)1 << (row))) : ((_MODBUSCoils) &
      +                          = ~((unsigned short)1 << (row))));
  4871  00194A  5005               	movf	LightStatusLed@on,w,c
  4872  00194C  E014               	bz	l3720
  4873                           
  4874                           ; BSR set to: 0
  4875  00194E  C00C  F007         	movff	LightStatusLed@row,??_LightStatusLed
  4876  001952  0E01               	movlw	1
  4877  001954  6E08               	movwf	(??_LightStatusLed+1)& (0+255),c
  4878  001956  6A09               	clrf	(??_LightStatusLed+2)& (0+255),c
  4879  001958  2A07               	incf	??_LightStatusLed,f,c
  4880  00195A  D004               	goto	u2934
  4881  00195C                     u2935:
  4882  00195C  FFFF               	dw	65535	; assembler added errata NOP
  4883  00195E  90D8               	bcf	status,0,c
  4884  001960  3608               	rlcf	??_LightStatusLed+1,f,c
  4885  001962  3609               	rlcf	??_LightStatusLed+2,f,c
  4886  001964                     u2934:
  4887  001964  FFFF               	dw	65535	; assembler added errata NOP
  4888  001966  2E07               	decfsz	??_LightStatusLed,f,c
  4889  001968  D7F9               	goto	u2935
  4890  00196A  5008               	movf	??_LightStatusLed+1,w,c
  4891  00196C  0100               	movlb	0	; () banked
  4892  00196E  13D6               	iorwf	__MODBUSCoils& (0+255),f,b
  4893  001970  5009               	movf	??_LightStatusLed+2,w,c
  4894  001972  13D7               	iorwf	(__MODBUSCoils+1)& (0+255),f,b
  4895  001974  D017               	goto	l290
  4896  001976                     l3720:
  4897                           
  4898                           ; BSR set to: 0
  4899  001976  C00C  F007         	movff	LightStatusLed@row,??_LightStatusLed
  4900  00197A  0E01               	movlw	1
  4901  00197C  6E08               	movwf	(??_LightStatusLed+1)& (0+255),c
  4902  00197E  6A09               	clrf	(??_LightStatusLed+2)& (0+255),c
  4903  001980  2A07               	incf	??_LightStatusLed,f,c
  4904  001982  D004               	goto	u2944
  4905  001984                     u2945:
  4906  001984  FFFF               	dw	65535	; assembler added errata NOP
  4907  001986  90D8               	bcf	status,0,c
  4908  001988  3608               	rlcf	??_LightStatusLed+1,f,c
  4909  00198A  3609               	rlcf	??_LightStatusLed+2,f,c
  4910  00198C                     u2944:
  4911  00198C  FFFF               	dw	65535	; assembler added errata NOP
  4912  00198E  2E07               	decfsz	??_LightStatusLed,f,c
  4913  001990  D7F9               	goto	u2945
  4914  001992  1C08               	comf	??_LightStatusLed+1,w,c
  4915  001994  6E0A               	movwf	(??_LightStatusLed+3)& (0+255),c
  4916  001996  1C09               	comf	??_LightStatusLed+2,w,c
  4917  001998  6E0B               	movwf	(??_LightStatusLed+4)& (0+255),c
  4918  00199A  500A               	movf	??_LightStatusLed+3,w,c
  4919  00199C  0100               	movlb	0	; () banked
  4920  00199E  17D6               	andwf	__MODBUSCoils& (0+255),f,b
  4921  0019A0  500B               	movf	??_LightStatusLed+4,w,c
  4922  0019A2  17D7               	andwf	(__MODBUSCoils+1)& (0+255),f,b
  4923  0019A4                     l290:
  4924  0019A4  FFFF               	dw	65535	; assembler added errata NOP
  4925  0019A6  0012               	return		;funcret
  4926  0019A8  FFFF               	dw	65535	; errata NOP
  4927  0019AA                     __end_of_LightStatusLed:
  4928                           	opt stack 0
  4929                           tblptru	equ	0xFF8
  4930                           tblptrh	equ	0xFF7
  4931                           tblptrl	equ	0xFF6
  4932                           tablat	equ	0xFF5
  4933                           prodh	equ	0xFF4
  4934                           prodl	equ	0xFF3
  4935                           intcon	equ	0xFF2
  4936                           postinc0	equ	0xFEE
  4937                           wreg	equ	0xFE8
  4938                           postdec1	equ	0xFE5
  4939                           fsr1h	equ	0xFE2
  4940                           fsr1l	equ	0xFE1
  4941                           indf2	equ	0xFDF
  4942                           postinc2	equ	0xFDE
  4943                           postdec2	equ	0xFDD
  4944                           plusw2	equ	0xFDB
  4945                           fsr2h	equ	0xFDA
  4946                           fsr2l	equ	0xFD9
  4947                           status	equ	0xFD8
  4948                           
  4949 ;; *************** function _ModbusGetLastCommand *****************
  4950 ;; Defined at:
  4951 ;;		line 850 in file "ModbusRtu.c"
  4952 ;; Parameters:    Size  Location     Type
  4953 ;;  address         1    wreg     PTR unsigned short 
  4954 ;;		 -> io_poll@lastAddress(2), 
  4955 ;;  count           1    4[COMRAM] PTR unsigned short 
  4956 ;;		 -> io_poll@lastEndAddress(2), 
  4957 ;; Auto vars:     Size  Location     Type
  4958 ;;  address         1    6[COMRAM] PTR unsigned short 
  4959 ;;		 -> io_poll@lastAddress(2), 
  4960 ;; Return value:  Size  Location     Type
  4961 ;;                  1    wreg      PTR enum E2336
  4962 ;; Registers used:
  4963 ;;		wreg, fsr2l, fsr2h, status,2
  4964 ;; Tracked objects:
  4965 ;;		On entry : 0/0
  4966 ;;		On exit  : 0/0
  4967 ;;		Unchanged: 0/0
  4968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4969 ;;      Params:         2       0       0       0       0       0       0
  4970 ;;      Locals:         1       0       0       0       0       0       0
  4971 ;;      Temps:          0       0       0       0       0       0       0
  4972 ;;      Totals:         3       0       0       0       0       0       0
  4973 ;;Total ram usage:        3 bytes
  4974 ;; Hardware stack levels used:    1
  4975 ;; Hardware stack levels required when called:    2
  4976 ;; This function calls:
  4977 ;;		Nothing
  4978 ;; This function is called by:
  4979 ;;		_io_poll
  4980 ;; This function uses a non-reentrant model
  4981 ;;
  4982                           
  4983                           	psect	text14
  4984  002508                     __ptext14:
  4985                           	opt stack 0
  4986  002508                     _ModbusGetLastCommand:
  4987                           	opt stack 27
  4988                           
  4989                           ;incstack = 0
  4990  002508  FFFF               	dw	65535
  4991                           
  4992                           ;ModbusGetLastCommand@address stored from wreg
  4993  00250A  6E07               	movwf	ModbusGetLastCommand@address,c
  4994                           
  4995                           ;ModbusRtu.c: 852: if(address != (0))
  4996  00250C  5007               	movf	ModbusGetLastCommand@address,w,c
  4997  00250E  E007               	bz	l3948
  4998                           
  4999                           ;ModbusRtu.c: 853: *address = _lastAddress;
  5000  002510  5007               	movf	ModbusGetLastCommand@address,w,c
  5001  002512  6ED9               	movwf	fsr2l,c
  5002  002514  6ADA               	clrf	fsr2h,c
  5003  002516  C0B6  FFDE         	movff	__lastAddress,postinc2
  5004  00251A  C0B7  FFDD         	movff	__lastAddress+1,postdec2
  5005  00251E                     l3948:
  5006                           
  5007                           ;ModbusRtu.c: 854: if(count != (0))
  5008  00251E  5005               	movf	ModbusGetLastCommand@count,w,c
  5009  002520  E007               	bz	l3952
  5010                           
  5011                           ;ModbusRtu.c: 855: *count = _lastCount;
  5012  002522  5005               	movf	ModbusGetLastCommand@count,w,c
  5013  002524  6ED9               	movwf	fsr2l,c
  5014  002526  6ADA               	clrf	fsr2h,c
  5015  002528  C0B8  FFDE         	movff	__lastCount,postinc2
  5016  00252C  C0B9  FFDD         	movff	__lastCount+1,postdec2
  5017  002530                     l3952:
  5018                           
  5019                           ;ModbusRtu.c: 856: return &_lastCommand;
  5020  002530  0ED8               	movlw	__lastCommand& (0+255)
  5021  002532  0012               	return		;funcret
  5022  002534  FFFF               	dw	65535	; errata NOP
  5023  002536                     __end_of_ModbusGetLastCommand:
  5024                           	opt stack 0
  5025                           tblptru	equ	0xFF8
  5026                           tblptrh	equ	0xFF7
  5027                           tblptrl	equ	0xFF6
  5028                           tablat	equ	0xFF5
  5029                           prodh	equ	0xFF4
  5030                           prodl	equ	0xFF3
  5031                           intcon	equ	0xFF2
  5032                           postinc0	equ	0xFEE
  5033                           wreg	equ	0xFE8
  5034                           postdec1	equ	0xFE5
  5035                           fsr1h	equ	0xFE2
  5036                           fsr1l	equ	0xFE1
  5037                           indf2	equ	0xFDF
  5038                           postinc2	equ	0xFDE
  5039                           postdec2	equ	0xFDD
  5040                           plusw2	equ	0xFDB
  5041                           fsr2h	equ	0xFDA
  5042                           fsr2l	equ	0xFD9
  5043                           status	equ	0xFD8
  5044                           
  5045 ;; *************** function _InitFromEeprom *****************
  5046 ;; Defined at:
  5047 ;;		line 459 in file "main.c"
  5048 ;; Parameters:    Size  Location     Type
  5049 ;;		None
  5050 ;; Auto vars:     Size  Location     Type
  5051 ;;		None
  5052 ;; Return value:  Size  Location     Type
  5053 ;;                  1    wreg      void 
  5054 ;; Registers used:
  5055 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5056 ;; Tracked objects:
  5057 ;;		On entry : 0/0
  5058 ;;		On exit  : 0/0
  5059 ;;		Unchanged: 0/0
  5060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5061 ;;      Params:         0       0       0       0       0       0       0
  5062 ;;      Locals:         0       0       0       0       0       0       0
  5063 ;;      Temps:          2       0       0       0       0       0       0
  5064 ;;      Totals:         2       0       0       0       0       0       0
  5065 ;;Total ram usage:        2 bytes
  5066 ;; Hardware stack levels used:    1
  5067 ;; Hardware stack levels required when called:    4
  5068 ;; This function calls:
  5069 ;;		_LoadNextEvent
  5070 ;;		_Modbus
  5071 ;;		_SetBuzzerDuty
  5072 ;;		_SwitchOffAllLeds
  5073 ;; This function is called by:
  5074 ;;		_main
  5075 ;;		_io_poll
  5076 ;; This function uses a non-reentrant model
  5077 ;;
  5078                           
  5079                           	psect	text15
  5080  0017B4                     __ptext15:
  5081                           	opt stack 0
  5082  0017B4                     _InitFromEeprom:
  5083                           	opt stack 25
  5084                           
  5085                           ;incstack = 0
  5086  0017B4  FFFF               	dw	65535
  5087                           
  5088                           ;main.c: 461: buzzeLoudDuration = ( EEADR = 2, (void)0, RD = 1, EEDATA);
  5089  0017B6  0E02               	movlw	2
  5090  0017B8  6EA9               	movwf	4009,c	;volatile
  5091  0017BA  80A6               	bsf	4006,0,c	;volatile
  5092  0017BC  CFA8 F073          	movff	4008,_buzzeLoudDuration	;volatile
  5093                           
  5094                           ;main.c: 462: buzzeQuietDuration = ( EEADR = 3, (void)0, RD = 1, EEDATA);
  5095  0017C0  0E03               	movlw	3
  5096  0017C2  6EA9               	movwf	4009,c	;volatile
  5097  0017C4  80A6               	bsf	4006,0,c	;volatile
  5098  0017C6  CFA8 F0C6          	movff	4008,_buzzeQuietDuration	;volatile
  5099                           
  5100                           ;main.c: 463: buzzerInfoPeriod = ( EEADR = 4, (void)0, RD = 1, EEDATA);
  5101  0017CA  0E04               	movlw	4
  5102  0017CC  6EA9               	movwf	4009,c	;volatile
  5103  0017CE  80A6               	bsf	4006,0,c	;volatile
  5104  0017D0  CFA8 F0C7          	movff	4008,_buzzerInfoPeriod	;volatile
  5105                           
  5106                           ;main.c: 464: buzzerAlarmPeriod = ( EEADR = 5, (void)0, RD = 1, EEDATA);
  5107  0017D4  0E05               	movlw	5
  5108  0017D6  6EA9               	movwf	4009,c	;volatile
  5109  0017D8  80A6               	bsf	4006,0,c	;volatile
  5110  0017DA  CFA8 F074          	movff	4008,_buzzerAlarmPeriod	;volatile
  5111                           
  5112                           ;main.c: 465: buzzerOnOffDuration = (((uint16_t)( EEADR = 6, (void)0, RD = 1, EEDATA)<<8
      +                          )|0);
  5113  0017DE  0E06               	movlw	6
  5114  0017E0  6EA9               	movwf	4009,c	;volatile
  5115  0017E2  80A6               	bsf	4006,0,c	;volatile
  5116  0017E4  50A8               	movf	4008,w,c	;volatile
  5117  0017E6  0100               	movlb	0	; () banked
  5118  0017E8  6FEE               	movwf	(_buzzerOnOffDuration+1)& (0+255),b
  5119  0017EA  6BED               	clrf	_buzzerOnOffDuration& (0+255),b
  5120                           
  5121                           ;main.c: 466: buzzerOnOffPeriod = (((uint16_t)( EEADR = 7, (void)0, RD = 1, EEDATA)<<8)|
      +                          0);
  5122  0017EC  0E07               	movlw	7
  5123  0017EE  6EA9               	movwf	4009,c	;volatile
  5124                           
  5125                           ; BSR set to: 0
  5126  0017F0  80A6               	bsf	4006,0,c	;volatile
  5127  0017F2  50A8               	movf	4008,w,c	;volatile
  5128  0017F4  6FF0               	movwf	(_buzzerOnOffPeriod+1)& (0+255),b
  5129  0017F6  6BEF               	clrf	_buzzerOnOffPeriod& (0+255),b
  5130                           
  5131                           ;main.c: 467: buzzeEscaladeTime = ( EEADR = 8, (void)0, RD = 1, EEDATA);
  5132  0017F8  0E08               	movlw	8
  5133  0017FA  6EA9               	movwf	4009,c	;volatile
  5134                           
  5135                           ; BSR set to: 0
  5136  0017FC  80A6               	bsf	4006,0,c	;volatile
  5137                           
  5138                           ; BSR set to: 0
  5139  0017FE  CFA8 F0C5          	movff	4008,_buzzeEscaladeTime	;volatile
  5140                           
  5141                           ;main.c: 468: buzzerStartDurationDiv = ( EEADR = 9, (void)0, RD = 1, EEDATA);
  5142  001802  0E09               	movlw	9
  5143  001804  6EA9               	movwf	4009,c	;volatile
  5144                           
  5145                           ; BSR set to: 0
  5146  001806  80A6               	bsf	4006,0,c	;volatile
  5147                           
  5148                           ; BSR set to: 0
  5149  001808  CFA8 F0C8          	movff	4008,_buzzerStartDurationDiv	;volatile
  5150                           
  5151                           ;main.c: 469: eventAcceptTime = ( EEADR = 10, (void)0, RD = 1, EEDATA);
  5152  00180C  0E0A               	movlw	10
  5153  00180E  6EA9               	movwf	4009,c	;volatile
  5154                           
  5155                           ; BSR set to: 0
  5156  001810  80A6               	bsf	4006,0,c	;volatile
  5157                           
  5158                           ; BSR set to: 0
  5159  001812  CFA8 F0CE          	movff	4008,_eventAcceptTime	;volatile
  5160                           
  5161                           ;main.c: 470: eveningTimeHour = ( EEADR = 11, (void)0, RD = 1, EEDATA);
  5162  001816  0E0B               	movlw	11
  5163  001818  6EA9               	movwf	4009,c	;volatile
  5164                           
  5165                           ; BSR set to: 0
  5166  00181A  80A6               	bsf	4006,0,c	;volatile
  5167                           
  5168                           ; BSR set to: 0
  5169  00181C  CFA8 F0CD          	movff	4008,_eveningTimeHour	;volatile
  5170                           
  5171                           ;main.c: 471: nightStartHour = ( EEADR = 12, (void)0, RD = 1, EEDATA);
  5172  001820  0E0C               	movlw	12
  5173  001822  6EA9               	movwf	4009,c	;volatile
  5174                           
  5175                           ; BSR set to: 0
  5176  001824  80A6               	bsf	4006,0,c	;volatile
  5177                           
  5178                           ; BSR set to: 0
  5179  001826  CFA8 F0D1          	movff	4008,_nightStartHour	;volatile
  5180                           
  5181                           ;main.c: 472: nightEndHour = ( EEADR = 13, (void)0, RD = 1, EEDATA);
  5182  00182A  0E0D               	movlw	13
  5183  00182C  6EA9               	movwf	4009,c	;volatile
  5184                           
  5185                           ; BSR set to: 0
  5186  00182E  80A6               	bsf	4006,0,c	;volatile
  5187                           
  5188                           ; BSR set to: 0
  5189  001830  CFA8 F0D0          	movff	4008,_nightEndHour	;volatile
  5190                           
  5191                           ;main.c: 473: morningTimeHour = ( EEADR = 14, (void)0, RD = 1, EEDATA);
  5192  001834  0E0E               	movlw	14
  5193  001836  6EA9               	movwf	4009,c	;volatile
  5194                           
  5195                           ; BSR set to: 0
  5196  001838  80A6               	bsf	4006,0,c	;volatile
  5197                           
  5198                           ; BSR set to: 0
  5199  00183A  CFA8 F0CF          	movff	4008,_morningTimeHour	;volatile
  5200                           
  5201                           ;main.c: 474: blinkDuration = ((uint16_t)( EEADR = 15, (void)0, RD = 1, EEDATA)) << 6;
  5202  00183E  0E0F               	movlw	15
  5203  001840  6EA9               	movwf	4009,c	;volatile
  5204                           
  5205                           ; BSR set to: 0
  5206  001842  80A6               	bsf	4006,0,c	;volatile
  5207                           
  5208                           ; BSR set to: 0
  5209  001844  50A8               	movf	4008,w,c	;volatile
  5210  001846  6E0D               	movwf	??_InitFromEeprom& (0+255),c
  5211  001848  6A0E               	clrf	(??_InitFromEeprom+1)& (0+255),c
  5212  00184A  0E06               	movlw	6
  5213  00184C                     u3245:
  5214  00184C  FFFF               	dw	65535	; assembler added errata NOP
  5215  00184E  90D8               	bcf	status,0,c
  5216  001850  360D               	rlcf	??_InitFromEeprom,f,c
  5217  001852  360E               	rlcf	??_InitFromEeprom+1,f,c
  5218  001854  2EE8               	decfsz	wreg,f,c
  5219  001856  D7FA               	goto	u3245
  5220  001858  C00D  F0BA         	movff	??_InitFromEeprom,_blinkDuration
  5221  00185C  C00E  F0BB         	movff	??_InitFromEeprom+1,_blinkDuration+1
  5222                           
  5223                           ; BSR set to: 0
  5224                           ;main.c: 475: blinkPeriod = ((uint16_t)( EEADR = 16, (void)0, RD = 1, EEDATA)) << 6;
  5225  001860  0E10               	movlw	16
  5226  001862  6EA9               	movwf	4009,c	;volatile
  5227                           
  5228                           ; BSR set to: 0
  5229  001864  80A6               	bsf	4006,0,c	;volatile
  5230  001866  50A8               	movf	4008,w,c	;volatile
  5231  001868  6E0D               	movwf	??_InitFromEeprom& (0+255),c
  5232  00186A  6A0E               	clrf	(??_InitFromEeprom+1)& (0+255),c
  5233  00186C  0E06               	movlw	6
  5234  00186E                     u3255:
  5235  00186E  FFFF               	dw	65535	; assembler added errata NOP
  5236  001870  90D8               	bcf	status,0,c
  5237  001872  360D               	rlcf	??_InitFromEeprom,f,c
  5238  001874  360E               	rlcf	??_InitFromEeprom+1,f,c
  5239  001876  2EE8               	decfsz	wreg,f,c
  5240  001878  D7FA               	goto	u3255
  5241  00187A  C00D  F0BC         	movff	??_InitFromEeprom,_blinkPeriod
  5242  00187E  C00E  F0BD         	movff	??_InitFromEeprom+1,_blinkPeriod+1
  5243                           
  5244                           ; BSR set to: 0
  5245                           ;main.c: 477: eventCount = ( EEADR = 18, (void)0, RD = 1, EEDATA);
  5246  001882  0E12               	movlw	18
  5247  001884  6EA9               	movwf	4009,c	;volatile
  5248                           
  5249                           ; BSR set to: 0
  5250  001886  80A6               	bsf	4006,0,c	;volatile
  5251                           
  5252                           ; BSR set to: 0
  5253  001888  CFA8 F075          	movff	4008,_eventCount	;volatile
  5254                           
  5255                           ; BSR set to: 0
  5256                           ;main.c: 479: SetBuzzerDuty(buzzeLoudDuration);
  5257  00188C  C073  F005         	movff	_buzzeLoudDuration,SetBuzzerDuty@dc
  5258  001890  6A06               	clrf	SetBuzzerDuty@dc+1,c
  5259  001892  ECD7  F010         	call	_SetBuzzerDuty	;wreg free
  5260                           
  5261                           ;main.c: 480: PR2 = buzzerAlarmPeriod;
  5262  001896  C074  FFCB         	movff	_buzzerAlarmPeriod,4043	;volatile
  5263                           
  5264                           ;main.c: 483: Modbus(( EEADR = 1, (void)0, RD = 1, EEDATA), 0, 0);
  5265  00189A  0E01               	movlw	1
  5266  00189C  6EA9               	movwf	4009,c	;volatile
  5267  00189E  80A6               	bsf	4006,0,c	;volatile
  5268  0018A0  6A0A               	clrf	Modbus@u8serno,c
  5269  0018A2  6A0B               	clrf	Modbus@u8txenpin,c
  5270  0018A4  50A8               	movf	4008,w,c	;volatile
  5271  0018A6  EC13  F013         	call	_Modbus
  5272                           
  5273                           ;main.c: 484: SwitchOffAllLeds();
  5274  0018AA  ECC6  F012         	call	_SwitchOffAllLeds	;wreg free
  5275                           
  5276                           ;main.c: 486: LoadNextEvent();
  5277  0018AE  EFA4  F00F         	goto	_LoadNextEvent	;wreg free
  5278  0018B2  FFFF               	dw	65535	; errata NOP
  5279  0018B4                     __end_of_InitFromEeprom:
  5280                           	opt stack 0
  5281                           tblptru	equ	0xFF8
  5282                           tblptrh	equ	0xFF7
  5283                           tblptrl	equ	0xFF6
  5284                           tablat	equ	0xFF5
  5285                           prodh	equ	0xFF4
  5286                           prodl	equ	0xFF3
  5287                           intcon	equ	0xFF2
  5288                           postinc0	equ	0xFEE
  5289                           wreg	equ	0xFE8
  5290                           postdec1	equ	0xFE5
  5291                           fsr1h	equ	0xFE2
  5292                           fsr1l	equ	0xFE1
  5293                           indf2	equ	0xFDF
  5294                           postinc2	equ	0xFDE
  5295                           postdec2	equ	0xFDD
  5296                           plusw2	equ	0xFDB
  5297                           fsr2h	equ	0xFDA
  5298                           fsr2l	equ	0xFD9
  5299                           status	equ	0xFD8
  5300                           
  5301 ;; *************** function _SetBuzzerDuty *****************
  5302 ;; Defined at:
  5303 ;;		line 436 in file "main.c"
  5304 ;; Parameters:    Size  Location     Type
  5305 ;;  dc              2    4[COMRAM] unsigned int 
  5306 ;; Auto vars:     Size  Location     Type
  5307 ;;		None
  5308 ;; Return value:  Size  Location     Type
  5309 ;;                  1    wreg      void 
  5310 ;; Registers used:
  5311 ;;		wreg, status,2, status,0
  5312 ;; Tracked objects:
  5313 ;;		On entry : 0/0
  5314 ;;		On exit  : 0/0
  5315 ;;		Unchanged: 0/0
  5316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5317 ;;      Params:         2       0       0       0       0       0       0
  5318 ;;      Locals:         0       0       0       0       0       0       0
  5319 ;;      Temps:          2       0       0       0       0       0       0
  5320 ;;      Totals:         4       0       0       0       0       0       0
  5321 ;;Total ram usage:        4 bytes
  5322 ;; Hardware stack levels used:    1
  5323 ;; Hardware stack levels required when called:    2
  5324 ;; This function calls:
  5325 ;;		Nothing
  5326 ;; This function is called by:
  5327 ;;		_InitFromEeprom
  5328 ;;		_main
  5329 ;;		_io_poll
  5330 ;; This function uses a non-reentrant model
  5331 ;;
  5332                           
  5333                           	psect	text16
  5334  0021AE                     __ptext16:
  5335                           	opt stack 0
  5336  0021AE                     _SetBuzzerDuty:
  5337                           	opt stack 27
  5338                           
  5339                           ;incstack = 0
  5340  0021AE  FFFF               	dw	65535
  5341                           
  5342                           ;main.c: 441: CCP1CONbits.DC1B0 = (dc & 0x01) != 0 ? 1 : 0;
  5343  0021B0  A005               	btfss	SetBuzzerDuty@dc,0,c
  5344  0021B2  D003               	goto	u2950
  5345  0021B4  6A07               	clrf	??_SetBuzzerDuty& (0+255),c
  5346  0021B6  2A07               	incf	??_SetBuzzerDuty& (0+255),f,c
  5347  0021B8  D002               	goto	u2968
  5348  0021BA                     u2950:
  5349  0021BA  FFFF               	dw	65535	; assembler added errata NOP
  5350  0021BC  6A07               	clrf	??_SetBuzzerDuty& (0+255),c
  5351  0021BE                     u2968:
  5352  0021BE  FFFF               	dw	65535	; assembler added errata NOP
  5353  0021C0  3A07               	swapf	??_SetBuzzerDuty,f,c
  5354  0021C2  50BD               	movf	4029,w,c	;volatile
  5355  0021C4  1807               	xorwf	??_SetBuzzerDuty,w,c
  5356  0021C6  0BEF               	andlw	-17
  5357  0021C8  1807               	xorwf	??_SetBuzzerDuty,w,c
  5358  0021CA  6EBD               	movwf	4029,c	;volatile
  5359                           
  5360                           ;main.c: 442: CCP1CONbits.DC1B1 = (dc & 0x02) != 0 ? 1 : 0;
  5361  0021CC  A205               	btfss	SetBuzzerDuty@dc,1,c
  5362  0021CE  D003               	goto	u2970
  5363  0021D0  6A07               	clrf	??_SetBuzzerDuty& (0+255),c
  5364  0021D2  2A07               	incf	??_SetBuzzerDuty& (0+255),f,c
  5365  0021D4  D002               	goto	u2988
  5366  0021D6                     u2970:
  5367  0021D6  FFFF               	dw	65535	; assembler added errata NOP
  5368  0021D8  6A07               	clrf	??_SetBuzzerDuty& (0+255),c
  5369  0021DA                     u2988:
  5370  0021DA  FFFF               	dw	65535	; assembler added errata NOP
  5371  0021DC  3A07               	swapf	??_SetBuzzerDuty,f,c
  5372  0021DE  4607               	rlncf	??_SetBuzzerDuty,f,c
  5373  0021E0  50BD               	movf	4029,w,c	;volatile
  5374  0021E2  1807               	xorwf	??_SetBuzzerDuty,w,c
  5375  0021E4  0BDF               	andlw	-33
  5376  0021E6  1807               	xorwf	??_SetBuzzerDuty,w,c
  5377  0021E8  6EBD               	movwf	4029,c	;volatile
  5378                           
  5379                           ;main.c: 444: CCPR1L = (uint8_t)(dc >> 2);
  5380  0021EA  C005  F007         	movff	SetBuzzerDuty@dc,??_SetBuzzerDuty
  5381  0021EE  C006  F008         	movff	SetBuzzerDuty@dc+1,??_SetBuzzerDuty+1
  5382  0021F2  90D8               	bcf	status,0,c
  5383  0021F4  3208               	rrcf	??_SetBuzzerDuty+1,f,c
  5384  0021F6  3207               	rrcf	??_SetBuzzerDuty,f,c
  5385  0021F8  90D8               	bcf	status,0,c
  5386  0021FA  3208               	rrcf	??_SetBuzzerDuty+1,f,c
  5387  0021FC  3207               	rrcf	??_SetBuzzerDuty,f,c
  5388  0021FE  5007               	movf	??_SetBuzzerDuty,w,c
  5389  002200  6EBE               	movwf	4030,c	;volatile
  5390  002202  0012               	return		;funcret
  5391  002204  FFFF               	dw	65535	; errata NOP
  5392  002206                     __end_of_SetBuzzerDuty:
  5393                           	opt stack 0
  5394                           tblptru	equ	0xFF8
  5395                           tblptrh	equ	0xFF7
  5396                           tblptrl	equ	0xFF6
  5397                           tablat	equ	0xFF5
  5398                           prodh	equ	0xFF4
  5399                           prodl	equ	0xFF3
  5400                           intcon	equ	0xFF2
  5401                           postinc0	equ	0xFEE
  5402                           wreg	equ	0xFE8
  5403                           postdec1	equ	0xFE5
  5404                           fsr1h	equ	0xFE2
  5405                           fsr1l	equ	0xFE1
  5406                           indf2	equ	0xFDF
  5407                           postinc2	equ	0xFDE
  5408                           postdec2	equ	0xFDD
  5409                           plusw2	equ	0xFDB
  5410                           fsr2h	equ	0xFDA
  5411                           fsr2l	equ	0xFD9
  5412                           status	equ	0xFD8
  5413                           
  5414 ;; *************** function _Modbus *****************
  5415 ;; Defined at:
  5416 ;;		line 172 in file "ModbusRtu.c"
  5417 ;; Parameters:    Size  Location     Type
  5418 ;;  u8id            1    wreg     unsigned char 
  5419 ;;  u8serno         1    9[COMRAM] unsigned char 
  5420 ;;  u8txenpin       1   10[COMRAM] unsigned char 
  5421 ;; Auto vars:     Size  Location     Type
  5422 ;;  u8id            1   11[COMRAM] unsigned char 
  5423 ;; Return value:  Size  Location     Type
  5424 ;;                  2    9[COMRAM] int 
  5425 ;; Registers used:
  5426 ;;		wreg, status,2, status,0, cstack
  5427 ;; Tracked objects:
  5428 ;;		On entry : 0/0
  5429 ;;		On exit  : 0/0
  5430 ;;		Unchanged: 0/0
  5431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5432 ;;      Params:         2       0       0       0       0       0       0
  5433 ;;      Locals:         1       0       0       0       0       0       0
  5434 ;;      Temps:          0       0       0       0       0       0       0
  5435 ;;      Totals:         3       0       0       0       0       0       0
  5436 ;;Total ram usage:        3 bytes
  5437 ;; Hardware stack levels used:    1
  5438 ;; Hardware stack levels required when called:    3
  5439 ;; This function calls:
  5440 ;;		_ModbusInit
  5441 ;; This function is called by:
  5442 ;;		_InitFromEeprom
  5443 ;; This function uses a non-reentrant model
  5444 ;;
  5445                           
  5446                           	psect	text17
  5447  002626                     __ptext17:
  5448                           	opt stack 0
  5449  002626                     _Modbus:
  5450                           	opt stack 25
  5451                           
  5452                           ;incstack = 0
  5453  002626  FFFF               	dw	65535
  5454                           
  5455                           ;Modbus@u8id stored from wreg
  5456  002628  6E0C               	movwf	Modbus@u8id,c
  5457                           
  5458                           ;ModbusRtu.c: 174: ModbusInit(u8id, u8serno, u8txenpin);
  5459  00262A  C00A  F005         	movff	Modbus@u8serno,ModbusInit@u8serno
  5460  00262E  C00B  F006         	movff	Modbus@u8txenpin,ModbusInit@u8txenpin
  5461  002632  500C               	movf	Modbus@u8id,w,c
  5462  002634  EF1D  F013         	goto	_ModbusInit
  5463  002638  FFFF               	dw	65535	; errata NOP
  5464  00263A                     __end_of_Modbus:
  5465                           	opt stack 0
  5466                           tblptru	equ	0xFF8
  5467                           tblptrh	equ	0xFF7
  5468                           tblptrl	equ	0xFF6
  5469                           tablat	equ	0xFF5
  5470                           prodh	equ	0xFF4
  5471                           prodl	equ	0xFF3
  5472                           intcon	equ	0xFF2
  5473                           postinc0	equ	0xFEE
  5474                           wreg	equ	0xFE8
  5475                           postdec1	equ	0xFE5
  5476                           fsr1h	equ	0xFE2
  5477                           fsr1l	equ	0xFE1
  5478                           indf2	equ	0xFDF
  5479                           postinc2	equ	0xFDE
  5480                           postdec2	equ	0xFDD
  5481                           plusw2	equ	0xFDB
  5482                           fsr2h	equ	0xFDA
  5483                           fsr2l	equ	0xFD9
  5484                           status	equ	0xFD8
  5485                           
  5486 ;; *************** function _ModbusInit *****************
  5487 ;; Defined at:
  5488 ;;		line 479 in file "ModbusRtu.c"
  5489 ;; Parameters:    Size  Location     Type
  5490 ;;  u8id            1    wreg     unsigned char 
  5491 ;;  u8serno         1    4[COMRAM] unsigned char 
  5492 ;;  u8txenpin       1    5[COMRAM] unsigned char 
  5493 ;; Auto vars:     Size  Location     Type
  5494 ;;  u8id            1    8[COMRAM] unsigned char 
  5495 ;; Return value:  Size  Location     Type
  5496 ;;                  1    wreg      void 
  5497 ;; Registers used:
  5498 ;;		wreg, status,2, status,0
  5499 ;; Tracked objects:
  5500 ;;		On entry : 0/0
  5501 ;;		On exit  : 0/0
  5502 ;;		Unchanged: 0/0
  5503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5504 ;;      Params:         2       0       0       0       0       0       0
  5505 ;;      Locals:         3       0       0       0       0       0       0
  5506 ;;      Temps:          0       0       0       0       0       0       0
  5507 ;;      Totals:         5       0       0       0       0       0       0
  5508 ;;Total ram usage:        5 bytes
  5509 ;; Hardware stack levels used:    1
  5510 ;; Hardware stack levels required when called:    2
  5511 ;; This function calls:
  5512 ;;		Nothing
  5513 ;; This function is called by:
  5514 ;;		_Modbus
  5515 ;; This function uses a non-reentrant model
  5516 ;;
  5517                           
  5518                           	psect	text18
  5519  00263A                     __ptext18:
  5520                           	opt stack 0
  5521  00263A                     _ModbusInit:
  5522                           	opt stack 25
  5523                           
  5524                           ;incstack = 0
  5525  00263A  FFFF               	dw	65535
  5526                           
  5527                           ;ModbusInit@u8id stored from wreg
  5528  00263C  6E09               	movwf	ModbusInit@u8id,c
  5529                           
  5530                           ;ModbusRtu.c: 480: _u8id = u8id;
  5531  00263E  C009  F0C3         	movff	ModbusInit@u8id,__u8id
  5532                           
  5533                           ;ModbusRtu.c: 481: _u8serno = (u8serno > 3) ? 0 : u8serno;
  5534  002642  0E04               	movlw	4
  5535  002644  6005               	cpfslt	ModbusInit@u8serno,c
  5536  002646  D000               	goto	l796
  5537  002648                     l796:
  5538  002648  FFFF               	dw	65535	; assembler added errata NOP
  5539  00264A  0012               	return		;funcret
  5540  00264C  FFFF               	dw	65535	; errata NOP
  5541  00264E                     __end_of_ModbusInit:
  5542                           	opt stack 0
  5543                           tblptru	equ	0xFF8
  5544                           tblptrh	equ	0xFF7
  5545                           tblptrl	equ	0xFF6
  5546                           tablat	equ	0xFF5
  5547                           prodh	equ	0xFF4
  5548                           prodl	equ	0xFF3
  5549                           intcon	equ	0xFF2
  5550                           postinc0	equ	0xFEE
  5551                           wreg	equ	0xFE8
  5552                           postdec1	equ	0xFE5
  5553                           fsr1h	equ	0xFE2
  5554                           fsr1l	equ	0xFE1
  5555                           indf2	equ	0xFDF
  5556                           postinc2	equ	0xFDE
  5557                           postdec2	equ	0xFDD
  5558                           plusw2	equ	0xFDB
  5559                           fsr2h	equ	0xFDA
  5560                           fsr2l	equ	0xFD9
  5561                           status	equ	0xFD8
  5562                           
  5563 ;; *************** function _ResetEvent *****************
  5564 ;; Defined at:
  5565 ;;		line 564 in file "main.c"
  5566 ;; Parameters:    Size  Location     Type
  5567 ;;  state           1    wreg     unsigned char 
  5568 ;; Auto vars:     Size  Location     Type
  5569 ;;  state           1   14[COMRAM] unsigned char 
  5570 ;; Return value:  Size  Location     Type
  5571 ;;                  1    wreg      void 
  5572 ;; Registers used:
  5573 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5574 ;; Tracked objects:
  5575 ;;		On entry : F/0
  5576 ;;		On exit  : F/1
  5577 ;;		Unchanged: 0/0
  5578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5579 ;;      Params:         0       0       0       0       0       0       0
  5580 ;;      Locals:         3       0       0       0       0       0       0
  5581 ;;      Temps:          2       0       0       0       0       0       0
  5582 ;;      Totals:         5       0       0       0       0       0       0
  5583 ;;Total ram usage:        5 bytes
  5584 ;; Hardware stack levels used:    1
  5585 ;; Hardware stack levels required when called:    3
  5586 ;; This function calls:
  5587 ;;		_LightLed
  5588 ;; This function is called by:
  5589 ;;		_main
  5590 ;; This function uses a non-reentrant model
  5591 ;;
  5592                           
  5593                           	psect	text19
  5594  002454                     __ptext19:
  5595                           	opt stack 0
  5596  002454                     _ResetEvent:
  5597                           	opt stack 27
  5598                           
  5599                           ;incstack = 0
  5600  002454  FFFF               	dw	65535
  5601                           
  5602                           ;ResetEvent@state stored from wreg
  5603  002456  6E0F               	movwf	ResetEvent@state,c
  5604                           
  5605                           ;main.c: 566: LightLed(oldEventNum + 1, state ? LED_GREEN : LED_RED, 0);
  5606  002458  500F               	movf	ResetEvent@state,w,c
  5607  00245A  E103               	bnz	l4570
  5608  00245C  6A11               	clrf	_ResetEvent$826+1,c
  5609  00245E  0E02               	movlw	2
  5610  002460  D002               	goto	L2
  5611  002462                     l4570:
  5612  002462  6A11               	clrf	_ResetEvent$826+1,c
  5613  002464  0E01               	movlw	1
  5614  002466                     L2:
  5615  002466  FFFF               	dw	65535	; assembler added errata NOP
  5616  002468  6E10               	movwf	_ResetEvent$826,c
  5617  00246A  C010  F005         	movff	_ResetEvent$826,LightLed@ledState
  5618  00246E  6A06               	clrf	LightLed@blink,c
  5619  002470  2879               	incf	_oldEventNum,w,c
  5620  002472  EC4D  F007         	call	_LightLed
  5621                           
  5622                           ;main.c: 567: oldEventNum = 0xff;
  5623  002476  6879               	setf	_oldEventNum,c
  5624                           
  5625                           ;main.c: 568: eventResetSecond = 0;
  5626  002478  0100               	movlb	0	; () banked
  5627  00247A  6BA8               	clrf	_eventResetSecond& (0+255),b
  5628  00247C  6BA9               	clrf	(_eventResetSecond+1)& (0+255),b
  5629  00247E  6BAA               	clrf	(_eventResetSecond+2)& (0+255),b
  5630  002480  6BAB               	clrf	(_eventResetSecond+3)& (0+255),b
  5631                           
  5632                           ; BSR set to: 0
  5633                           ;main.c: 569: _MODBUSInputRegs[2] = (((uint16_t)oldEventNum<<8)|curEventNum);
  5634  002482  5079               	movf	_oldEventNum,w,c
  5635  002484  6E0D               	movwf	??_ResetEvent& (0+255),c
  5636  002486  5077               	movf	_curEventNum,w,c
  5637  002488  0101               	movlb	1	; () banked
  5638  00248A  6FAE               	movwf	(__MODBUSInputRegs+4)& (0+255),b
  5639  00248C  C00D  F1AF         	movff	??_ResetEvent,__MODBUSInputRegs+5
  5640                           
  5641                           ; BSR set to: 1
  5642  002490  0012               	return		;funcret
  5643  002492  FFFF               	dw	65535	; errata NOP
  5644  002494                     __end_of_ResetEvent:
  5645                           	opt stack 0
  5646                           tblptru	equ	0xFF8
  5647                           tblptrh	equ	0xFF7
  5648                           tblptrl	equ	0xFF6
  5649                           tablat	equ	0xFF5
  5650                           prodh	equ	0xFF4
  5651                           prodl	equ	0xFF3
  5652                           intcon	equ	0xFF2
  5653                           postinc0	equ	0xFEE
  5654                           wreg	equ	0xFE8
  5655                           postdec1	equ	0xFE5
  5656                           fsr1h	equ	0xFE2
  5657                           fsr1l	equ	0xFE1
  5658                           indf2	equ	0xFDF
  5659                           postinc2	equ	0xFDE
  5660                           postdec2	equ	0xFDD
  5661                           plusw2	equ	0xFDB
  5662                           fsr2h	equ	0xFDA
  5663                           fsr2l	equ	0xFD9
  5664                           status	equ	0xFD8
  5665                           
  5666 ;; *************** function _ProcessLightBlock *****************
  5667 ;; Defined at:
  5668 ;;		line 502 in file "main.c"
  5669 ;; Parameters:    Size  Location     Type
  5670 ;;  curMs           1    wreg     PTR unsigned long 
  5671 ;;		 -> main@curMs(4), 
  5672 ;; Auto vars:     Size  Location     Type
  5673 ;;  curMs           1    9[COMRAM] PTR unsigned long 
  5674 ;;		 -> main@curMs(4), 
  5675 ;; Return value:  Size  Location     Type
  5676 ;;                  1    wreg      void 
  5677 ;; Registers used:
  5678 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5679 ;; Tracked objects:
  5680 ;;		On entry : 0/0
  5681 ;;		On exit  : F/0
  5682 ;;		Unchanged: 0/0
  5683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5684 ;;      Params:         0       0       0       0       0       0       0
  5685 ;;      Locals:         1       0       0       0       0       0       0
  5686 ;;      Temps:          4       0       0       0       0       0       0
  5687 ;;      Totals:         5       0       0       0       0       0       0
  5688 ;;Total ram usage:        5 bytes
  5689 ;; Hardware stack levels used:    1
  5690 ;; Hardware stack levels required when called:    3
  5691 ;; This function calls:
  5692 ;;		_UpdateLedRegister
  5693 ;; This function is called by:
  5694 ;;		_main
  5695 ;; This function uses a non-reentrant model
  5696 ;;
  5697                           
  5698                           	psect	text20
  5699  000000                     __ptext20:
  5700                           	opt stack 0
  5701  000000                     _ProcessLightBlock:
  5702                           	opt stack 0
  5703  000000                     __end_of_ProcessLightBlock:
  5704                           	opt stack 0
  5705                           tblptru	equ	0xFF8
  5706                           tblptrh	equ	0xFF7
  5707                           tblptrl	equ	0xFF6
  5708                           tablat	equ	0xFF5
  5709                           prodh	equ	0xFF4
  5710                           prodl	equ	0xFF3
  5711                           intcon	equ	0xFF2
  5712                           postinc0	equ	0xFEE
  5713                           wreg	equ	0xFE8
  5714                           postdec1	equ	0xFE5
  5715                           fsr1h	equ	0xFE2
  5716                           fsr1l	equ	0xFE1
  5717                           indf2	equ	0xFDF
  5718                           postinc2	equ	0xFDE
  5719                           postdec2	equ	0xFDD
  5720                           plusw2	equ	0xFDB
  5721                           fsr2h	equ	0xFDA
  5722                           fsr2l	equ	0xFD9
  5723                           status	equ	0xFD8
  5724                           
  5725 ;; *************** function _UpdateLedRegister *****************
  5726 ;; Defined at:
  5727 ;;		line 260 in file "main.c"
  5728 ;; Parameters:    Size  Location     Type
  5729 ;;  regIndex        1    wreg     unsigned char 
  5730 ;; Auto vars:     Size  Location     Type
  5731 ;;  regIndex        1    4[COMRAM] unsigned char 
  5732 ;; Return value:  Size  Location     Type
  5733 ;;                  1    wreg      void 
  5734 ;; Registers used:
  5735 ;;		wreg, status,2, status,0
  5736 ;; Tracked objects:
  5737 ;;		On entry : 0/0
  5738 ;;		On exit  : 0/0
  5739 ;;		Unchanged: 0/0
  5740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5741 ;;      Params:         0       0       0       0       0       0       0
  5742 ;;      Locals:         1       0       0       0       0       0       0
  5743 ;;      Temps:          0       0       0       0       0       0       0
  5744 ;;      Totals:         1       0       0       0       0       0       0
  5745 ;;Total ram usage:        1 bytes
  5746 ;; Hardware stack levels used:    1
  5747 ;; Hardware stack levels required when called:    2
  5748 ;; This function calls:
  5749 ;;		Nothing
  5750 ;; This function is called by:
  5751 ;;		_ProcessLightBlock
  5752 ;; This function uses a non-reentrant model
  5753 ;;
  5754                           
  5755                           	psect	text21
  5756  0023CA                     __ptext21:
  5757                           	opt stack 0
  5758  0023CA                     _UpdateLedRegister:
  5759                           	opt stack 27
  5760                           
  5761                           ; BSR set to: 0
  5762                           ;incstack = 0
  5763  0023CA  FFFF               	dw	65535
  5764                           
  5765                           ;UpdateLedRegister@regIndex stored from wreg
  5766  0023CC  6E05               	movwf	UpdateLedRegister@regIndex,c
  5767                           
  5768                           ;main.c: 262: switch(regIndex)
  5769  0023CE  D014               	goto	l3806
  5770  0023D0                     l254:
  5771                           
  5772                           ;main.c: 265: LATAbits.LATA4 = 0;
  5773  0023D0  9889               	bcf	3977,4,c	;volatile
  5774                           
  5775                           ;main.c: 266: TRISAbits.RA4 = 0;
  5776  0023D2  9892               	bcf	3986,4,c	;volatile
  5777                           
  5778                           ;main.c: 267: LATAbits.LATA4 = 1;
  5779  0023D4  8889               	bsf	3977,4,c	;volatile
  5780                           
  5781                           ;main.c: 268: TRISAbits.RA4 = 1;
  5782  0023D6  8892               	bsf	3986,4,c	;volatile
  5783                           
  5784                           ;main.c: 269: break;
  5785  0023D8  D018               	goto	l259
  5786  0023DA                     l256:
  5787                           
  5788                           ;main.c: 271: LATCbits.LATC3 = 0;
  5789  0023DA  968B               	bcf	3979,3,c	;volatile
  5790                           
  5791                           ;main.c: 272: TRISCbits.RC3 = 0;
  5792  0023DC  9694               	bcf	3988,3,c	;volatile
  5793                           
  5794                           ;main.c: 273: LATCbits.LATC3 = 1;
  5795  0023DE  868B               	bsf	3979,3,c	;volatile
  5796                           
  5797                           ;main.c: 274: TRISCbits.RC3 = 1;
  5798  0023E0  8694               	bsf	3988,3,c	;volatile
  5799                           
  5800                           ;main.c: 275: break;
  5801  0023E2  D013               	goto	l259
  5802  0023E4                     l257:
  5803                           
  5804                           ;main.c: 277: LATCbits.LATC0 = 0;
  5805  0023E4  908B               	bcf	3979,0,c	;volatile
  5806                           
  5807                           ;main.c: 278: TRISCbits.RC0 = 0;
  5808  0023E6  9094               	bcf	3988,0,c	;volatile
  5809                           
  5810                           ;main.c: 279: LATCbits.LATC0 = 1;
  5811  0023E8  808B               	bsf	3979,0,c	;volatile
  5812                           
  5813                           ;main.c: 280: TRISCbits.RC0 = 1;
  5814  0023EA  8094               	bsf	3988,0,c	;volatile
  5815                           
  5816                           ;main.c: 281: break;
  5817  0023EC  D00E               	goto	l259
  5818  0023EE                     l258:
  5819                           
  5820                           ;main.c: 283: LATCbits.LATC1 = 0;
  5821  0023EE  928B               	bcf	3979,1,c	;volatile
  5822                           
  5823                           ;main.c: 284: TRISCbits.RC1 = 0;
  5824  0023F0  9294               	bcf	3988,1,c	;volatile
  5825                           
  5826                           ;main.c: 285: LATCbits.LATC1 = 1;
  5827  0023F2  828B               	bsf	3979,1,c	;volatile
  5828                           
  5829                           ;main.c: 286: TRISCbits.RC1 = 1;
  5830  0023F4  8294               	bsf	3988,1,c	;volatile
  5831                           
  5832                           ;main.c: 287: break;
  5833  0023F6  D009               	goto	l259
  5834  0023F8                     l3806:
  5835  0023F8  FFFF               	dw	65535	; assembler added errata NOP
  5836  0023FA  5005               	movf	UpdateLedRegister@regIndex,w,c
  5837                           
  5838                           ; Switch size 1, requested type "speed"
  5839                           ; Number of cases is 4, Range of values is 0 to 3
  5840                           ; switch strategies available:
  5841                           ; Name         Instructions Cycles
  5842                           ; simple_byte           13     7 (average)
  5843                           ;	Chosen strategy is simple_byte
  5844  0023FC  E0E9               	bz	l254
  5845  0023FE  0A01               	xorlw	1	; case 1
  5846  002400  E0EC               	bz	l256
  5847  002402  0A03               	xorlw	3	; case 2
  5848  002404  E0EF               	bz	l257
  5849  002406  0A01               	xorlw	1	; case 3
  5850  002408  E0F2               	bz	l258
  5851  00240A                     l259:
  5852  00240A  FFFF               	dw	65535	; assembler added errata NOP
  5853  00240C  0012               	return		;funcret
  5854  00240E  FFFF               	dw	65535	; errata NOP
  5855  002410                     __end_of_UpdateLedRegister:
  5856                           	opt stack 0
  5857                           tblptru	equ	0xFF8
  5858                           tblptrh	equ	0xFF7
  5859                           tblptrl	equ	0xFF6
  5860                           tablat	equ	0xFF5
  5861                           prodh	equ	0xFF4
  5862                           prodl	equ	0xFF3
  5863                           intcon	equ	0xFF2
  5864                           postinc0	equ	0xFEE
  5865                           wreg	equ	0xFE8
  5866                           postdec1	equ	0xFE5
  5867                           fsr1h	equ	0xFE2
  5868                           fsr1l	equ	0xFE1
  5869                           indf2	equ	0xFDF
  5870                           postinc2	equ	0xFDE
  5871                           postdec2	equ	0xFDD
  5872                           plusw2	equ	0xFDB
  5873                           fsr2h	equ	0xFDA
  5874                           fsr2l	equ	0xFD9
  5875                           status	equ	0xFD8
  5876                           
  5877 ;; *************** function _ProcessDiary *****************
  5878 ;; Defined at:
  5879 ;;		line 607 in file "main.c"
  5880 ;; Parameters:    Size  Location     Type
  5881 ;;		None
  5882 ;; Auto vars:     Size  Location     Type
  5883 ;;  minute          1   17[COMRAM] unsigned char 
  5884 ;;  hour            1   16[COMRAM] unsigned char 
  5885 ;; Return value:  Size  Location     Type
  5886 ;;                  1    wreg      void 
  5887 ;; Registers used:
  5888 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5889 ;; Tracked objects:
  5890 ;;		On entry : F/1
  5891 ;;		On exit  : 0/0
  5892 ;;		Unchanged: 0/0
  5893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5894 ;;      Params:         0       0       0       0       0       0       0
  5895 ;;      Locals:         2       0       0       0       0       0       0
  5896 ;;      Temps:          4       0       0       0       0       0       0
  5897 ;;      Totals:         6       0       0       0       0       0       0
  5898 ;;Total ram usage:        6 bytes
  5899 ;; Hardware stack levels used:    1
  5900 ;; Hardware stack levels required when called:    4
  5901 ;; This function calls:
  5902 ;;		_GetTime
  5903 ;;		_LightLed
  5904 ;;		_LoadNextEvent
  5905 ;;		_SwitchOffAllLeds
  5906 ;;		_getHourMin
  5907 ;; This function is called by:
  5908 ;;		_main
  5909 ;; This function uses a non-reentrant model
  5910 ;;
  5911                           
  5912                           	psect	text22
  5913  001B3C                     __ptext22:
  5914                           	opt stack 0
  5915  001B3C                     _ProcessDiary:
  5916                           	opt stack 26
  5917                           
  5918                           ;incstack = 0
  5919  001B3C  FFFF               	dw	65535
  5920                           
  5921                           ; BSR set to: 1
  5922                           ;main.c: 610: if(curEventNum == 0xff)
  5923  001B3E  2877               	incf	_curEventNum,w,c
  5924  001B40  E05A               	bz	l387
  5925                           
  5926                           ; BSR set to: 1
  5927                           ;main.c: 612: uint8_t hour, minute;
  5928                           ;main.c: 613: if(!getHourMin(&hour, &minute))
  5929  001B42  0E12               	movlw	low ProcessDiary@minute
  5930  001B44  6E05               	movwf	getHourMin@min,c
  5931  001B46  0E11               	movlw	ProcessDiary@hour& (0+255)
  5932  001B48  EC9B  F012         	call	_getHourMin
  5933  001B4C  0900               	iorlw	0
  5934  001B4E  E053               	bz	l387
  5935                           
  5936                           ;main.c: 616: if(hour == 0 && minute == 0)
  5937  001B50  5011               	movf	ProcessDiary@hour,w,c
  5938  001B52  E10C               	bnz	l4598
  5939  001B54  5012               	movf	ProcessDiary@minute,w,c
  5940  001B56  E10A               	bnz	l4598
  5941                           
  5942                           ;main.c: 617: {
  5943                           ;main.c: 618: SwitchOffAllLeds();
  5944  001B58  ECC6  F012         	call	_SwitchOffAllLeds	;wreg free
  5945                           
  5946                           ;main.c: 619: curEventNum = 0xff;
  5947  001B5C  6877               	setf	_curEventNum,c
  5948                           
  5949                           ;main.c: 620: _MODBUSInputRegs[2] = (((uint16_t)oldEventNum<<8)|curEventNum);
  5950  001B5E  5079               	movf	_oldEventNum,w,c
  5951  001B60  6E0D               	movwf	??_ProcessDiary& (0+255),c
  5952  001B62  5077               	movf	_curEventNum,w,c
  5953  001B64  0101               	movlb	1	; () banked
  5954  001B66  6FAE               	movwf	(__MODBUSInputRegs+4)& (0+255),b
  5955  001B68  C00D  F1AF         	movff	??_ProcessDiary,__MODBUSInputRegs+5
  5956  001B6C                     l4598:
  5957                           
  5958                           ;main.c: 622: }
  5959                           ;main.c: 625: if(curEventHour == hour && curEventMinute == minute)
  5960  001B6C  5011               	movf	ProcessDiary@hour,w,c
  5961  001B6E  0100               	movlb	0	; () banked
  5962  001B70  19C9               	xorwf	_curEventHour& (0+255),w,b
  5963  001B72  E141               	bnz	l387
  5964                           
  5965                           ; BSR set to: 0
  5966  001B74  5012               	movf	ProcessDiary@minute,w,c
  5967  001B76  19CA               	xorwf	_curEventMinute& (0+255),w,b
  5968  001B78  E13E               	bnz	l387
  5969                           
  5970                           ; BSR set to: 0
  5971                           ;main.c: 626: {
  5972                           ;main.c: 628: if(oldEventNum != 0xff)
  5973  001B7A  2879               	incf	_oldEventNum,w,c
  5974  001B7C  E006               	bz	l4606
  5975                           
  5976                           ; BSR set to: 0
  5977                           ;main.c: 629: {
  5978                           ;main.c: 630: LightLed(oldEventNum + 1, LED_RED, 0);
  5979  001B7E  0E02               	movlw	2
  5980  001B80  6E05               	movwf	LightLed@ledState,c
  5981  001B82  6A06               	clrf	LightLed@blink,c
  5982  001B84  2879               	incf	_oldEventNum,w,c
  5983  001B86  EC4D  F007         	call	_LightLed
  5984  001B8A                     l4606:
  5985                           
  5986                           ;main.c: 631: }
  5987                           ;main.c: 633: {
  5988                           ;main.c: 634: oldEventNum = curEventNum;
  5989  001B8A  C077  F079         	movff	_curEventNum,_oldEventNum
  5990                           
  5991                           ;main.c: 636: if(curEventType == 0)
  5992  001B8E  0100               	movlb	0	; () banked
  5993  001B90  51CB               	movf	_curEventType& (0+255),w,b
  5994  001B92  E107               	bnz	l4612
  5995                           
  5996                           ; BSR set to: 0
  5997                           ;main.c: 637: {
  5998                           ;main.c: 638: LightLed(oldEventNum + 1, LED_GREEN, 1);
  5999  001B94  0E01               	movlw	1
  6000  001B96  6E05               	movwf	LightLed@ledState,c
  6001  001B98  6E06               	movwf	LightLed@blink,c
  6002  001B9A  2879               	incf	_oldEventNum,w,c
  6003  001B9C  EC4D  F007         	call	_LightLed
  6004                           
  6005                           ;main.c: 639: }
  6006  001BA0  D007               	goto	l393
  6007  001BA2                     l4612:
  6008                           
  6009                           ; BSR set to: 0
  6010                           ;main.c: 640: else
  6011                           ;main.c: 641: {
  6012                           ;main.c: 642: LightLed(oldEventNum + 1, LED_RED, 1);
  6013  001BA2  0E02               	movlw	2
  6014  001BA4  6E05               	movwf	LightLed@ledState,c
  6015  001BA6  0E01               	movlw	1
  6016  001BA8  6E06               	movwf	LightLed@blink,c
  6017  001BAA  2879               	incf	_oldEventNum,w,c
  6018  001BAC  EC4D  F007         	call	_LightLed
  6019  001BB0                     l393:
  6020  001BB0  FFFF               	dw	65535	; assembler added errata NOP
  6021                           
  6022                           ;main.c: 643: }
  6023                           ;main.c: 644: eventResetSecond = *GetTime() + eventAcceptTime;
  6024  001BB2  EC36  F013         	call	_GetTime	;wreg free
  6025  001BB6  6ED9               	movwf	fsr2l,c
  6026  001BB8  6ADA               	clrf	fsr2h,c
  6027  001BBA  CFDE F00D          	movff	postinc2,??_ProcessDiary
  6028  001BBE  CFDE F00E          	movff	postinc2,??_ProcessDiary+1
  6029  001BC2  CFDE F00F          	movff	postinc2,??_ProcessDiary+2
  6030  001BC6  CFDE F010          	movff	postinc2,??_ProcessDiary+3
  6031  001BCA  0100               	movlb	0	; () banked
  6032  001BCC  51CE               	movf	_eventAcceptTime& (0+255),w,b
  6033  001BCE  240D               	addwf	??_ProcessDiary,w,c
  6034  001BD0  6FA8               	movwf	_eventResetSecond& (0+255),b
  6035  001BD2  0E00               	movlw	0
  6036  001BD4  200E               	addwfc	??_ProcessDiary+1,w,c
  6037  001BD6  6FA9               	movwf	(_eventResetSecond+1)& (0+255),b
  6038  001BD8  0E00               	movlw	0
  6039  001BDA  200F               	addwfc	??_ProcessDiary+2,w,c
  6040  001BDC  6FAA               	movwf	(_eventResetSecond+2)& (0+255),b
  6041  001BDE  0E00               	movlw	0
  6042  001BE0  2010               	addwfc	??_ProcessDiary+3,w,c
  6043  001BE2  6FAB               	movwf	(_eventResetSecond+3)& (0+255),b
  6044                           
  6045                           ; BSR set to: 0
  6046                           ;main.c: 645: LoadNextEvent();
  6047  001BE4  ECA4  F00F         	call	_LoadNextEvent	;wreg free
  6048                           
  6049                           ;main.c: 646: }
  6050                           ;main.c: 647: _MODBUSInputRegs[2] = (((uint16_t)oldEventNum<<8)|curEventNum);
  6051  001BE8  5079               	movf	_oldEventNum,w,c
  6052  001BEA  6E0D               	movwf	??_ProcessDiary& (0+255),c
  6053  001BEC  5077               	movf	_curEventNum,w,c
  6054  001BEE  0101               	movlb	1	; () banked
  6055  001BF0  6FAE               	movwf	(__MODBUSInputRegs+4)& (0+255),b
  6056  001BF2  C00D  F1AF         	movff	??_ProcessDiary,__MODBUSInputRegs+5
  6057  001BF6                     l387:
  6058  001BF6  0012               	return		;funcret
  6059  001BF8  FFFF               	dw	65535	; errata NOP
  6060  001BFA                     __end_of_ProcessDiary:
  6061                           	opt stack 0
  6062                           tblptru	equ	0xFF8
  6063                           tblptrh	equ	0xFF7
  6064                           tblptrl	equ	0xFF6
  6065                           tablat	equ	0xFF5
  6066                           prodh	equ	0xFF4
  6067                           prodl	equ	0xFF3
  6068                           intcon	equ	0xFF2
  6069                           postinc0	equ	0xFEE
  6070                           wreg	equ	0xFE8
  6071                           postdec1	equ	0xFE5
  6072                           fsr1h	equ	0xFE2
  6073                           fsr1l	equ	0xFE1
  6074                           indf2	equ	0xFDF
  6075                           postinc2	equ	0xFDE
  6076                           postdec2	equ	0xFDD
  6077                           plusw2	equ	0xFDB
  6078                           fsr2h	equ	0xFDA
  6079                           fsr2l	equ	0xFD9
  6080                           status	equ	0xFD8
  6081                           
  6082 ;; *************** function _SwitchOffAllLeds *****************
  6083 ;; Defined at:
  6084 ;;		line 333 in file "main.c"
  6085 ;; Parameters:    Size  Location     Type
  6086 ;;		None
  6087 ;; Auto vars:     Size  Location     Type
  6088 ;;  i               1    4[COMRAM] unsigned char 
  6089 ;; Return value:  Size  Location     Type
  6090 ;;                  1    wreg      void 
  6091 ;; Registers used:
  6092 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6093 ;; Tracked objects:
  6094 ;;		On entry : 0/0
  6095 ;;		On exit  : 0/0
  6096 ;;		Unchanged: 0/0
  6097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6098 ;;      Params:         0       0       0       0       0       0       0
  6099 ;;      Locals:         1       0       0       0       0       0       0
  6100 ;;      Temps:          0       0       0       0       0       0       0
  6101 ;;      Totals:         1       0       0       0       0       0       0
  6102 ;;Total ram usage:        1 bytes
  6103 ;; Hardware stack levels used:    1
  6104 ;; Hardware stack levels required when called:    2
  6105 ;; This function calls:
  6106 ;;		Nothing
  6107 ;; This function is called by:
  6108 ;;		_InitFromEeprom
  6109 ;;		_ProcessDiary
  6110 ;; This function uses a non-reentrant model
  6111 ;;
  6112                           
  6113                           	psect	text23
  6114  00258C                     __ptext23:
  6115                           	opt stack 0
  6116  00258C                     _SwitchOffAllLeds:
  6117                           	opt stack 26
  6118                           
  6119                           ;incstack = 0
  6120  00258C  FFFF               	dw	65535
  6121                           
  6122                           ;main.c: 335: for(uint8_t i = 0; i < 16 - 1; i++)
  6123  00258E  6A05               	clrf	SwitchOffAllLeds@i,c
  6124  002590                     l3694:
  6125  002590  FFFF               	dw	65535	; assembler added errata NOP
  6126                           
  6127                           ;main.c: 336: {
  6128                           ;main.c: 337: ledStatuses[i] = 0;
  6129  002592  5005               	movf	SwitchOffAllLeds@i,w,c
  6130  002594  0F90               	addlw	low _ledStatuses
  6131  002596  6ED9               	movwf	fsr2l,c
  6132  002598  6ADA               	clrf	fsr2h,c
  6133  00259A  6ADF               	clrf	indf2,c
  6134                           
  6135                           ;main.c: 338: ledBlink[i] = 0;
  6136  00259C  5005               	movf	SwitchOffAllLeds@i,w,c
  6137  00259E  0F80               	addlw	low _ledBlink
  6138  0025A0  6ED9               	movwf	fsr2l,c
  6139  0025A2  6ADA               	clrf	fsr2h,c
  6140  0025A4  6ADF               	clrf	indf2,c
  6141  0025A6  2A05               	incf	SwitchOffAllLeds@i,f,c
  6142  0025A8  0E0E               	movlw	14
  6143  0025AA  6405               	cpfsgt	SwitchOffAllLeds@i,c
  6144  0025AC  D7F1               	goto	l3694
  6145  0025AE  0C0E               	retlw	14	;funcret
  6146  0025B0  FFFF               	dw	65535	; errata NOP
  6147  0025B2                     __end_of_SwitchOffAllLeds:
  6148                           	opt stack 0
  6149                           tblptru	equ	0xFF8
  6150                           tblptrh	equ	0xFF7
  6151                           tblptrl	equ	0xFF6
  6152                           tablat	equ	0xFF5
  6153                           prodh	equ	0xFF4
  6154                           prodl	equ	0xFF3
  6155                           intcon	equ	0xFF2
  6156                           postinc0	equ	0xFEE
  6157                           wreg	equ	0xFE8
  6158                           postdec1	equ	0xFE5
  6159                           fsr1h	equ	0xFE2
  6160                           fsr1l	equ	0xFE1
  6161                           indf2	equ	0xFDF
  6162                           postinc2	equ	0xFDE
  6163                           postdec2	equ	0xFDD
  6164                           plusw2	equ	0xFDB
  6165                           fsr2h	equ	0xFDA
  6166                           fsr2l	equ	0xFD9
  6167                           status	equ	0xFD8
  6168                           
  6169 ;; *************** function _LoadNextEvent *****************
  6170 ;; Defined at:
  6171 ;;		line 574 in file "main.c"
  6172 ;; Parameters:    Size  Location     Type
  6173 ;;		None
  6174 ;; Auto vars:     Size  Location     Type
  6175 ;;  v1              1    8[COMRAM] unsigned char 
  6176 ;;  minute          1   10[COMRAM] unsigned char 
  6177 ;;  hour            1    9[COMRAM] unsigned char 
  6178 ;; Return value:  Size  Location     Type
  6179 ;;                  1    wreg      void 
  6180 ;; Registers used:
  6181 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6182 ;; Tracked objects:
  6183 ;;		On entry : 0/0
  6184 ;;		On exit  : 0/0
  6185 ;;		Unchanged: 0/0
  6186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6187 ;;      Params:         0       0       0       0       0       0       0
  6188 ;;      Locals:         3       0       0       0       0       0       0
  6189 ;;      Temps:          2       0       0       0       0       0       0
  6190 ;;      Totals:         5       0       0       0       0       0       0
  6191 ;;Total ram usage:        5 bytes
  6192 ;; Hardware stack levels used:    1
  6193 ;; Hardware stack levels required when called:    3
  6194 ;; This function calls:
  6195 ;;		_getHourMin
  6196 ;; This function is called by:
  6197 ;;		_InitFromEeprom
  6198 ;;		_ProcessDiary
  6199 ;;		_SetTimeFromRegs
  6200 ;; This function uses a non-reentrant model
  6201 ;;
  6202                           
  6203                           	psect	text24
  6204  001F48                     __ptext24:
  6205                           	opt stack 0
  6206  001F48                     _LoadNextEvent:
  6207                           	opt stack 25
  6208                           
  6209                           ;incstack = 0
  6210  001F48  FFFF               	dw	65535
  6211                           
  6212                           ;main.c: 576: if(eventCount == 0)
  6213  001F4A  5075               	movf	_eventCount,w,c
  6214  001F4C  E03E               	bz	l377
  6215                           
  6216                           ;main.c: 578: uint8_t hour, minute;
  6217                           ;main.c: 579: if(!getHourMin(&hour, &minute))
  6218  001F4E  0E0B               	movlw	low LoadNextEvent@minute
  6219  001F50  6E05               	movwf	getHourMin@min,c
  6220  001F52  0E0A               	movlw	LoadNextEvent@hour& (0+255)
  6221  001F54  EC9B  F012         	call	_getHourMin
  6222  001F58  0900               	iorlw	0
  6223  001F5A  E037               	bz	l377
  6224  001F5C                     l3734:
  6225                           
  6226                           ;main.c: 589: {
  6227                           ;main.c: 590: if(curEventNum == 0xff)
  6228  001F5C  2877               	incf	_curEventNum,w,c
  6229  001F5E  E102               	bnz	l3738
  6230                           
  6231                           ;main.c: 591: curEventNum = 0;
  6232  001F60  6A77               	clrf	_curEventNum,c
  6233  001F62  D001               	goto	l3740
  6234  001F64                     l3738:
  6235                           
  6236                           ;main.c: 592: else
  6237                           ;main.c: 593: curEventNum++;
  6238  001F64  2A77               	incf	_curEventNum,f,c
  6239  001F66                     l3740:
  6240  001F66  FFFF               	dw	65535	; assembler added errata NOP
  6241                           
  6242                           ;main.c: 594: _MODBUSInputRegs[2] = (((uint16_t)oldEventNum<<8)|curEventNum);
  6243  001F68  5079               	movf	_oldEventNum,w,c
  6244  001F6A  6E07               	movwf	??_LoadNextEvent& (0+255),c
  6245  001F6C  5077               	movf	_curEventNum,w,c
  6246  001F6E  0101               	movlb	1	; () banked
  6247  001F70  6FAE               	movwf	(__MODBUSInputRegs+4)& (0+255),b
  6248  001F72  C007  F1AF         	movff	??_LoadNextEvent,__MODBUSInputRegs+5
  6249                           
  6250                           ; BSR set to: 1
  6251                           ;main.c: 595: if(curEventNum >= eventCount)
  6252  001F76  5075               	movf	_eventCount,w,c
  6253  001F78  5C77               	subwf	_curEventNum,w,c
  6254  001F7A  E227               	bc	l377
  6255                           
  6256                           ; BSR set to: 1
  6257                           ;main.c: 598: uint8_t v1 = ( EEADR = 18 + 1 + curEventNum * 2, (void)0, RD = 1, EEDATA);
  6258  001F7C  5077               	movf	_curEventNum,w,c
  6259  001F7E  0D02               	mullw	2
  6260  001F80  50F3               	movf	prodl,w,c
  6261  001F82  0F13               	addlw	19
  6262  001F84  6EA9               	movwf	4009,c	;volatile
  6263                           
  6264                           ; BSR set to: 1
  6265  001F86  80A6               	bsf	4006,0,c	;volatile
  6266                           
  6267                           ; BSR set to: 1
  6268  001F88  CFA8 F009          	movff	4008,LoadNextEvent@v1	;volatile
  6269                           
  6270                           ; BSR set to: 1
  6271                           ;main.c: 599: curEventHour = v1 & 0x1F;
  6272  001F8C  5009               	movf	LoadNextEvent@v1,w,c
  6273  001F8E  0B1F               	andlw	31
  6274  001F90  0100               	movlb	0	; () banked
  6275  001F92  6FC9               	movwf	_curEventHour& (0+255),b
  6276                           
  6277                           ; BSR set to: 0
  6278                           ;main.c: 600: curEventType = (((v1) >> (5)) & 0x01);
  6279  001F94  3809               	swapf	LoadNextEvent@v1,w,c
  6280  001F96  42E8               	rrncf	wreg,f,c
  6281  001F98  0B07               	andlw	7
  6282  001F9A  0B01               	andlw	1
  6283  001F9C  6FCB               	movwf	_curEventType& (0+255),b
  6284                           
  6285                           ;main.c: 601: curEventMinute = ( EEADR = 18 + 1 + curEventNum * 2 + 1, (void)0, RD = 1, 
      +                          EEDATA);
  6286  001F9E  5077               	movf	_curEventNum,w,c
  6287  001FA0  0D02               	mullw	2
  6288  001FA2  50F3               	movf	prodl,w,c
  6289  001FA4  0F14               	addlw	20
  6290  001FA6  6EA9               	movwf	4009,c	;volatile
  6291                           
  6292                           ; BSR set to: 0
  6293  001FA8  80A6               	bsf	4006,0,c	;volatile
  6294                           
  6295                           ; BSR set to: 0
  6296  001FAA  CFA8 F0CA          	movff	4008,_curEventMinute	;volatile
  6297                           
  6298                           ; BSR set to: 0
  6299                           ;main.c: 602: _MODBUSInputRegs[3] = (((uint16_t)curEventHour<<8)|curEventMinute);
  6300  001FAE  51C9               	movf	_curEventHour& (0+255),w,b
  6301  001FB0  6E07               	movwf	??_LoadNextEvent& (0+255),c
  6302  001FB2  51CA               	movf	_curEventMinute& (0+255),w,b
  6303  001FB4  0101               	movlb	1	; () banked
  6304  001FB6  6FB0               	movwf	(__MODBUSInputRegs+6)& (0+255),b
  6305  001FB8  C007  F1B1         	movff	??_LoadNextEvent,__MODBUSInputRegs+7
  6306                           
  6307                           ; BSR set to: 1
  6308                           ;main.c: 603: }while(curEventHour < hour || curEventMinute <= minute);
  6309  001FBC  500A               	movf	LoadNextEvent@hour,w,c
  6310  001FBE  0100               	movlb	0	; () banked
  6311  001FC0  5DC9               	subwf	_curEventHour& (0+255),w,b
  6312  001FC2  E3CC               	bnc	l3734
  6313                           
  6314                           ; BSR set to: 0
  6315  001FC4  51CA               	movf	_curEventMinute& (0+255),w,b
  6316  001FC6  5C0B               	subwf	LoadNextEvent@minute,w,c
  6317  001FC8  E2C9               	bc	l3734
  6318  001FCA                     l377:
  6319  001FCA  0012               	return		;funcret
  6320  001FCC  FFFF               	dw	65535	; errata NOP
  6321  001FCE                     __end_of_LoadNextEvent:
  6322                           	opt stack 0
  6323                           tblptru	equ	0xFF8
  6324                           tblptrh	equ	0xFF7
  6325                           tblptrl	equ	0xFF6
  6326                           tablat	equ	0xFF5
  6327                           prodh	equ	0xFF4
  6328                           prodl	equ	0xFF3
  6329                           intcon	equ	0xFF2
  6330                           postinc0	equ	0xFEE
  6331                           wreg	equ	0xFE8
  6332                           postdec1	equ	0xFE5
  6333                           fsr1h	equ	0xFE2
  6334                           fsr1l	equ	0xFE1
  6335                           indf2	equ	0xFDF
  6336                           postinc2	equ	0xFDE
  6337                           postdec2	equ	0xFDD
  6338                           plusw2	equ	0xFDB
  6339                           fsr2h	equ	0xFDA
  6340                           fsr2l	equ	0xFD9
  6341                           status	equ	0xFD8
  6342                           
  6343 ;; *************** function _getHourMin *****************
  6344 ;; Defined at:
  6345 ;;		line 243 in file "interrupts.c"
  6346 ;; Parameters:    Size  Location     Type
  6347 ;;  hour            1    wreg     PTR unsigned char 
  6348 ;;		 -> main@hour(1), ProcessDiary@hour(1), LoadNextEvent@hour(1), 
  6349 ;;  min             1    4[COMRAM] PTR unsigned char 
  6350 ;;		 -> main@minute(1), ProcessDiary@minute(1), LoadNextEvent@minute(1), 
  6351 ;; Auto vars:     Size  Location     Type
  6352 ;;  hour            1    5[COMRAM] PTR unsigned char 
  6353 ;;		 -> main@hour(1), ProcessDiary@hour(1), LoadNextEvent@hour(1), 
  6354 ;; Return value:  Size  Location     Type
  6355 ;;                  1    wreg      unsigned char 
  6356 ;; Registers used:
  6357 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6358 ;; Tracked objects:
  6359 ;;		On entry : 0/0
  6360 ;;		On exit  : 0/0
  6361 ;;		Unchanged: 0/0
  6362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6363 ;;      Params:         1       0       0       0       0       0       0
  6364 ;;      Locals:         1       0       0       0       0       0       0
  6365 ;;      Temps:          0       0       0       0       0       0       0
  6366 ;;      Totals:         2       0       0       0       0       0       0
  6367 ;;Total ram usage:        2 bytes
  6368 ;; Hardware stack levels used:    1
  6369 ;; Hardware stack levels required when called:    2
  6370 ;; This function calls:
  6371 ;;		Nothing
  6372 ;; This function is called by:
  6373 ;;		_LoadNextEvent
  6374 ;;		_ProcessDiary
  6375 ;;		_main
  6376 ;; This function uses a non-reentrant model
  6377 ;;
  6378                           
  6379                           	psect	text25
  6380  002536                     __ptext25:
  6381                           	opt stack 0
  6382  002536                     _getHourMin:
  6383                           	opt stack 25
  6384                           
  6385                           ;incstack = 0
  6386  002536  FFFF               	dw	65535
  6387                           
  6388                           ;getHourMin@hour stored from wreg
  6389  002538  6E06               	movwf	getHourMin@hour,c
  6390                           
  6391                           ;interrupts.c: 245: if(globalHours == 0xFF)
  6392  00253A  2878               	incf	_globalHours,w,c	;volatile
  6393  00253C  E102               	bnz	l110
  6394                           
  6395                           ;interrupts.c: 246: return 0;
  6396  00253E  0E00               	movlw	0
  6397  002540  D00D               	goto	l111
  6398  002542                     l110:
  6399                           
  6400                           ;interrupts.c: 247: (INTCONbits.GIE = 0);
  6401  002542  9EF2               	bcf	intcon,7,c	;volatile
  6402                           
  6403                           ;interrupts.c: 248: *hour = globalHours;
  6404  002544  5006               	movf	getHourMin@hour,w,c
  6405  002546  6ED9               	movwf	fsr2l,c
  6406  002548  6ADA               	clrf	fsr2h,c
  6407  00254A  C078  FFDF         	movff	_globalHours,indf2	;volatile
  6408                           
  6409                           ;interrupts.c: 249: *min = globalMinutes;
  6410  00254E  5005               	movf	getHourMin@min,w,c
  6411  002550  6ED9               	movwf	fsr2l,c
  6412  002552  6ADA               	clrf	fsr2h,c
  6413  002554  C076  FFDF         	movff	_globalMinutes,indf2	;volatile
  6414                           
  6415                           ;interrupts.c: 250: (INTCONbits.GIE = 1);
  6416  002558  8EF2               	bsf	intcon,7,c	;volatile
  6417                           
  6418                           ;interrupts.c: 251: return 1;
  6419  00255A  0E01               	movlw	1
  6420  00255C                     l111:
  6421  00255C  FFFF               	dw	65535	; assembler added errata NOP
  6422  00255E  0012               	return		;funcret
  6423  002560  FFFF               	dw	65535	; errata NOP
  6424  002562                     __end_of_getHourMin:
  6425                           	opt stack 0
  6426                           tblptru	equ	0xFF8
  6427                           tblptrh	equ	0xFF7
  6428                           tblptrl	equ	0xFF6
  6429                           tablat	equ	0xFF5
  6430                           prodh	equ	0xFF4
  6431                           prodl	equ	0xFF3
  6432                           intcon	equ	0xFF2
  6433                           postinc0	equ	0xFEE
  6434                           wreg	equ	0xFE8
  6435                           postdec1	equ	0xFE5
  6436                           fsr1h	equ	0xFE2
  6437                           fsr1l	equ	0xFE1
  6438                           indf2	equ	0xFDF
  6439                           postinc2	equ	0xFDE
  6440                           postdec2	equ	0xFDD
  6441                           plusw2	equ	0xFDB
  6442                           fsr2h	equ	0xFDA
  6443                           fsr2l	equ	0xFD9
  6444                           status	equ	0xFD8
  6445                           
  6446 ;; *************** function _LightLed *****************
  6447 ;; Defined at:
  6448 ;;		line 344 in file "main.c"
  6449 ;; Parameters:    Size  Location     Type
  6450 ;;  ledNum          1    wreg     unsigned char 
  6451 ;;  ledState        1    4[COMRAM] enum E2427
  6452 ;;  blink           1    5[COMRAM] unsigned char 
  6453 ;; Auto vars:     Size  Location     Type
  6454 ;;  ledNum          1    9[COMRAM] unsigned char 
  6455 ;;  statusShift     1   11[COMRAM] unsigned char 
  6456 ;;  ststusIndex     1   10[COMRAM] unsigned char 
  6457 ;; Return value:  Size  Location     Type
  6458 ;;                  1    wreg      void 
  6459 ;; Registers used:
  6460 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6461 ;; Tracked objects:
  6462 ;;		On entry : 0/1
  6463 ;;		On exit  : 0/0
  6464 ;;		Unchanged: 0/0
  6465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6466 ;;      Params:         2       0       0       0       0       0       0
  6467 ;;      Locals:         3       0       0       0       0       0       0
  6468 ;;      Temps:          3       0       0       0       0       0       0
  6469 ;;      Totals:         8       0       0       0       0       0       0
  6470 ;;Total ram usage:        8 bytes
  6471 ;; Hardware stack levels used:    1
  6472 ;; Hardware stack levels required when called:    2
  6473 ;; This function calls:
  6474 ;;		Nothing
  6475 ;; This function is called by:
  6476 ;;		_ResetEvent
  6477 ;;		_ProcessDiary
  6478 ;;		_io_poll
  6479 ;; This function uses a non-reentrant model
  6480 ;;
  6481                           
  6482                           	psect	text26
  6483  000E9A                     __ptext26:
  6484                           	opt stack 0
  6485  000E9A                     _LightLed:
  6486                           	opt stack 27
  6487                           
  6488                           ;incstack = 0
  6489  000E9A  FFFF               	dw	65535
  6490                           
  6491                           ;LightLed@ledNum stored from wreg
  6492  000E9C  6E0A               	movwf	LightLed@ledNum,c
  6493                           
  6494                           ;main.c: 346: if(ledNum < 1 || ledNum > 60)
  6495  000E9E  500A               	movf	LightLed@ledNum,w,c
  6496  000EA0  E101 D120          	bz	l270
  6497  000EA4  0E3C               	movlw	60
  6498  000EA6  640A               	cpfsgt	LightLed@ledNum,c
  6499  000EA8  D001               	goto	l3812
  6500  000EAA  D11C               	goto	l270
  6501  000EAC                     l3812:
  6502  000EAC  FFFF               	dw	65535	; assembler added errata NOP
  6503                           
  6504                           ;main.c: 348: ledNum--;
  6505  000EAE  060A               	decf	LightLed@ledNum,f,c
  6506                           
  6507                           ;main.c: 350: uint8_t ststusIndex = ledNum >> 2;
  6508  000EB0  400A               	rrncf	LightLed@ledNum,w,c
  6509  000EB2  42E8               	rrncf	wreg,f,c
  6510  000EB4  0B3F               	andlw	63
  6511  000EB6  6E0B               	movwf	LightLed@ststusIndex,c
  6512                           
  6513                           ;main.c: 351: uint8_t statusShift = (ledNum & 0x03) << 1;
  6514  000EB8  C00A  F007         	movff	LightLed@ledNum,??_LightLed
  6515  000EBC  0E03               	movlw	3
  6516  000EBE  1607               	andwf	??_LightLed,f,c
  6517  000EC0  90D8               	bcf	status,0,c
  6518  000EC2  3407               	rlcf	??_LightLed,w,c
  6519  000EC4  6E0C               	movwf	LightLed@statusShift,c
  6520                           
  6521                           ;main.c: 353: switch(ledState)
  6522  000EC6  D105               	goto	l3838
  6523  000EC8                     l3818:
  6524                           
  6525                           ;main.c: 356: ((ledStatuses[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1)));
  6526  000EC8  C00C  F007         	movff	LightLed@statusShift,??_LightLed
  6527  000ECC  2A07               	incf	??_LightLed,f,c
  6528  000ECE  0E01               	movlw	1
  6529  000ED0  6E08               	movwf	(??_LightLed+1)& (0+255),c
  6530  000ED2  2A07               	incf	??_LightLed,f,c
  6531  000ED4  D003               	goto	u3094
  6532  000ED6                     u3095:
  6533  000ED6  FFFF               	dw	65535	; assembler added errata NOP
  6534  000ED8  90D8               	bcf	status,0,c
  6535  000EDA  3608               	rlcf	??_LightLed+1,f,c
  6536  000EDC                     u3094:
  6537  000EDC  FFFF               	dw	65535	; assembler added errata NOP
  6538  000EDE  2E07               	decfsz	??_LightLed,f,c
  6539  000EE0  D7FA               	goto	u3095
  6540  000EE2  1C08               	comf	??_LightLed+1,w,c
  6541  000EE4  6E09               	movwf	(??_LightLed+2)& (0+255),c
  6542  000EE6  500B               	movf	LightLed@ststusIndex,w,c
  6543  000EE8  0F90               	addlw	low _ledStatuses
  6544  000EEA  6ED9               	movwf	fsr2l,c
  6545  000EEC  6ADA               	clrf	fsr2h,c
  6546  000EEE  5009               	movf	??_LightLed+2,w,c
  6547  000EF0  16DF               	andwf	indf2,f,c
  6548                           
  6549                           ;main.c: 357: ((ledStatuses[ststusIndex]) &= ~((unsigned short)1 << (statusShift)));
  6550  000EF2  C00C  F007         	movff	LightLed@statusShift,??_LightLed
  6551  000EF6  0E01               	movlw	1
  6552  000EF8  6E08               	movwf	(??_LightLed+1)& (0+255),c
  6553  000EFA  2A07               	incf	??_LightLed,f,c
  6554  000EFC  D003               	goto	u3104
  6555  000EFE                     u3105:
  6556  000EFE  FFFF               	dw	65535	; assembler added errata NOP
  6557  000F00  90D8               	bcf	status,0,c
  6558  000F02  3608               	rlcf	??_LightLed+1,f,c
  6559  000F04                     u3104:
  6560  000F04  FFFF               	dw	65535	; assembler added errata NOP
  6561  000F06  2E07               	decfsz	??_LightLed,f,c
  6562  000F08  D7FA               	goto	u3105
  6563  000F0A  1C08               	comf	??_LightLed+1,w,c
  6564  000F0C  6E09               	movwf	(??_LightLed+2)& (0+255),c
  6565  000F0E  500B               	movf	LightLed@ststusIndex,w,c
  6566  000F10  0F90               	addlw	low _ledStatuses
  6567  000F12  6ED9               	movwf	fsr2l,c
  6568  000F14  6ADA               	clrf	fsr2h,c
  6569  000F16  5009               	movf	??_LightLed+2,w,c
  6570  000F18  16DF               	andwf	indf2,f,c
  6571                           
  6572                           ;main.c: 358: ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1)));
  6573  000F1A  C00C  F007         	movff	LightLed@statusShift,??_LightLed
  6574  000F1E  2A07               	incf	??_LightLed,f,c
  6575  000F20  0E01               	movlw	1
  6576  000F22  6E08               	movwf	(??_LightLed+1)& (0+255),c
  6577  000F24  2A07               	incf	??_LightLed,f,c
  6578  000F26  D003               	goto	u3114
  6579  000F28                     u3115:
  6580  000F28  FFFF               	dw	65535	; assembler added errata NOP
  6581  000F2A  90D8               	bcf	status,0,c
  6582  000F2C  3608               	rlcf	??_LightLed+1,f,c
  6583  000F2E                     u3114:
  6584  000F2E  FFFF               	dw	65535	; assembler added errata NOP
  6585  000F30  2E07               	decfsz	??_LightLed,f,c
  6586  000F32  D7FA               	goto	u3115
  6587  000F34  1C08               	comf	??_LightLed+1,w,c
  6588  000F36  6E09               	movwf	(??_LightLed+2)& (0+255),c
  6589  000F38  500B               	movf	LightLed@ststusIndex,w,c
  6590  000F3A  0F80               	addlw	low _ledBlink
  6591  000F3C  6ED9               	movwf	fsr2l,c
  6592  000F3E  6ADA               	clrf	fsr2h,c
  6593  000F40  5009               	movf	??_LightLed+2,w,c
  6594  000F42  16DF               	andwf	indf2,f,c
  6595                           
  6596                           ;main.c: 359: ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift)));
  6597  000F44  C00C  F007         	movff	LightLed@statusShift,??_LightLed
  6598  000F48  0E01               	movlw	1
  6599  000F4A  6E08               	movwf	(??_LightLed+1)& (0+255),c
  6600  000F4C  2A07               	incf	??_LightLed,f,c
  6601  000F4E  D003               	goto	u3124
  6602  000F50                     u3125:
  6603  000F50  FFFF               	dw	65535	; assembler added errata NOP
  6604  000F52  90D8               	bcf	status,0,c
  6605  000F54  3608               	rlcf	??_LightLed+1,f,c
  6606  000F56                     u3124:
  6607  000F56  FFFF               	dw	65535	; assembler added errata NOP
  6608  000F58  2E07               	decfsz	??_LightLed,f,c
  6609  000F5A  D7FA               	goto	u3125
  6610  000F5C  D05F               	goto	L3
  6611  000F5E                     l3820:
  6612                           
  6613                           ;main.c: 362: ((ledStatuses[ststusIndex]) |= ((unsigned short)1 << (statusShift + 1)));
  6614  000F5E  C00C  F007         	movff	LightLed@statusShift,??_LightLed
  6615  000F62  2A07               	incf	??_LightLed,f,c
  6616  000F64  0E01               	movlw	1
  6617  000F66  6E08               	movwf	(??_LightLed+1)& (0+255),c
  6618  000F68  2A07               	incf	??_LightLed,f,c
  6619  000F6A  D003               	goto	u3134
  6620  000F6C                     u3135:
  6621  000F6C  FFFF               	dw	65535	; assembler added errata NOP
  6622  000F6E  90D8               	bcf	status,0,c
  6623  000F70  3608               	rlcf	??_LightLed+1,f,c
  6624  000F72                     u3134:
  6625  000F72  FFFF               	dw	65535	; assembler added errata NOP
  6626  000F74  2E07               	decfsz	??_LightLed,f,c
  6627  000F76  D7FA               	goto	u3135
  6628  000F78  500B               	movf	LightLed@ststusIndex,w,c
  6629  000F7A  0F90               	addlw	low _ledStatuses
  6630  000F7C  6ED9               	movwf	fsr2l,c
  6631  000F7E  6ADA               	clrf	fsr2h,c
  6632  000F80  5008               	movf	??_LightLed+1,w,c
  6633  000F82  12DF               	iorwf	indf2,f,c
  6634                           
  6635                           ;main.c: 363: ((ledStatuses[ststusIndex]) &= ~((unsigned short)1 << (statusShift)));
  6636  000F84  C00C  F007         	movff	LightLed@statusShift,??_LightLed
  6637  000F88  0E01               	movlw	1
  6638  000F8A  6E08               	movwf	(??_LightLed+1)& (0+255),c
  6639  000F8C  2A07               	incf	??_LightLed,f,c
  6640  000F8E  D003               	goto	u3144
  6641  000F90                     u3145:
  6642  000F90  FFFF               	dw	65535	; assembler added errata NOP
  6643  000F92  90D8               	bcf	status,0,c
  6644  000F94  3608               	rlcf	??_LightLed+1,f,c
  6645  000F96                     u3144:
  6646  000F96  FFFF               	dw	65535	; assembler added errata NOP
  6647  000F98  2E07               	decfsz	??_LightLed,f,c
  6648  000F9A  D7FA               	goto	u3145
  6649  000F9C  1C08               	comf	??_LightLed+1,w,c
  6650  000F9E  6E09               	movwf	(??_LightLed+2)& (0+255),c
  6651  000FA0  500B               	movf	LightLed@ststusIndex,w,c
  6652  000FA2  0F90               	addlw	low _ledStatuses
  6653  000FA4  6ED9               	movwf	fsr2l,c
  6654  000FA6  6ADA               	clrf	fsr2h,c
  6655  000FA8  5009               	movf	??_LightLed+2,w,c
  6656  000FAA  16DF               	andwf	indf2,f,c
  6657                           
  6658                           ;main.c: 364: (blink ? ((ledBlink[ststusIndex]) |= ((unsigned short)1 << (statusShift + 
      +                          1))) : ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1))));
  6659  000FAC  5006               	movf	LightLed@blink,w,c
  6660  000FAE  E014               	bz	l3826
  6661  000FB0  C00C  F007         	movff	LightLed@statusShift,??_LightLed
  6662  000FB4  2A07               	incf	??_LightLed,f,c
  6663  000FB6  0E01               	movlw	1
  6664  000FB8  6E08               	movwf	(??_LightLed+1)& (0+255),c
  6665  000FBA  2A07               	incf	??_LightLed,f,c
  6666  000FBC  D003               	goto	u3164
  6667  000FBE                     u3165:
  6668  000FBE  FFFF               	dw	65535	; assembler added errata NOP
  6669  000FC0  90D8               	bcf	status,0,c
  6670  000FC2  3608               	rlcf	??_LightLed+1,f,c
  6671  000FC4                     u3164:
  6672  000FC4  FFFF               	dw	65535	; assembler added errata NOP
  6673  000FC6  2E07               	decfsz	??_LightLed,f,c
  6674  000FC8  D7FA               	goto	u3165
  6675  000FCA  500B               	movf	LightLed@ststusIndex,w,c
  6676  000FCC  0F80               	addlw	low _ledBlink
  6677  000FCE  6ED9               	movwf	fsr2l,c
  6678  000FD0  6ADA               	clrf	fsr2h,c
  6679  000FD2  5008               	movf	??_LightLed+1,w,c
  6680  000FD4  12DF               	iorwf	indf2,f,c
  6681  000FD6  D015               	goto	l278
  6682  000FD8                     l3826:
  6683  000FD8  C00C  F007         	movff	LightLed@statusShift,??_LightLed
  6684  000FDC  2A07               	incf	??_LightLed,f,c
  6685  000FDE  0E01               	movlw	1
  6686  000FE0  6E08               	movwf	(??_LightLed+1)& (0+255),c
  6687  000FE2  2A07               	incf	??_LightLed,f,c
  6688  000FE4  D003               	goto	u3174
  6689  000FE6                     u3175:
  6690  000FE6  FFFF               	dw	65535	; assembler added errata NOP
  6691  000FE8  90D8               	bcf	status,0,c
  6692  000FEA  3608               	rlcf	??_LightLed+1,f,c
  6693  000FEC                     u3174:
  6694  000FEC  FFFF               	dw	65535	; assembler added errata NOP
  6695  000FEE  2E07               	decfsz	??_LightLed,f,c
  6696  000FF0  D7FA               	goto	u3175
  6697  000FF2  1C08               	comf	??_LightLed+1,w,c
  6698  000FF4  6E09               	movwf	(??_LightLed+2)& (0+255),c
  6699  000FF6  500B               	movf	LightLed@ststusIndex,w,c
  6700  000FF8  0F80               	addlw	low _ledBlink
  6701  000FFA  6ED9               	movwf	fsr2l,c
  6702  000FFC  6ADA               	clrf	fsr2h,c
  6703  000FFE  5009               	movf	??_LightLed+2,w,c
  6704  001000  16DF               	andwf	indf2,f,c
  6705  001002                     l278:
  6706  001002  FFFF               	dw	65535	; assembler added errata NOP
  6707                           
  6708                           ;main.c: 365: ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift)));
  6709  001004  C00C  F007         	movff	LightLed@statusShift,??_LightLed
  6710  001008  0E01               	movlw	1
  6711  00100A  6E08               	movwf	(??_LightLed+1)& (0+255),c
  6712  00100C  2A07               	incf	??_LightLed,f,c
  6713  00100E  D003               	goto	u3184
  6714  001010                     u3185:
  6715  001010  FFFF               	dw	65535	; assembler added errata NOP
  6716  001012  90D8               	bcf	status,0,c
  6717  001014  3608               	rlcf	??_LightLed+1,f,c
  6718  001016                     u3184:
  6719  001016  FFFF               	dw	65535	; assembler added errata NOP
  6720  001018  2E07               	decfsz	??_LightLed,f,c
  6721  00101A  D7FA               	goto	u3185
  6722  00101C                     L3:
  6723  00101C  FFFF               	dw	65535	; assembler added errata NOP
  6724  00101E  1C08               	comf	??_LightLed+1,w,c
  6725  001020  6E09               	movwf	(??_LightLed+2)& (0+255),c
  6726  001022  500B               	movf	LightLed@ststusIndex,w,c
  6727  001024  0F80               	addlw	low _ledBlink
  6728  001026  6ED9               	movwf	fsr2l,c
  6729  001028  6ADA               	clrf	fsr2h,c
  6730  00102A  5009               	movf	??_LightLed+2,w,c
  6731  00102C  16DF               	andwf	indf2,f,c
  6732                           
  6733                           ;main.c: 366: break;
  6734  00102E  D05A               	goto	l270
  6735  001030                     l3828:
  6736                           
  6737                           ;main.c: 368: ((ledStatuses[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1)));
  6738  001030  C00C  F007         	movff	LightLed@statusShift,??_LightLed
  6739  001034  2A07               	incf	??_LightLed,f,c
  6740  001036  0E01               	movlw	1
  6741  001038  6E08               	movwf	(??_LightLed+1)& (0+255),c
  6742  00103A  2A07               	incf	??_LightLed,f,c
  6743  00103C  D003               	goto	u3194
  6744  00103E                     u3195:
  6745  00103E  FFFF               	dw	65535	; assembler added errata NOP
  6746  001040  90D8               	bcf	status,0,c
  6747  001042  3608               	rlcf	??_LightLed+1,f,c
  6748  001044                     u3194:
  6749  001044  FFFF               	dw	65535	; assembler added errata NOP
  6750  001046  2E07               	decfsz	??_LightLed,f,c
  6751  001048  D7FA               	goto	u3195
  6752  00104A  1C08               	comf	??_LightLed+1,w,c
  6753  00104C  6E09               	movwf	(??_LightLed+2)& (0+255),c
  6754  00104E  500B               	movf	LightLed@ststusIndex,w,c
  6755  001050  0F90               	addlw	low _ledStatuses
  6756  001052  6ED9               	movwf	fsr2l,c
  6757  001054  6ADA               	clrf	fsr2h,c
  6758  001056  5009               	movf	??_LightLed+2,w,c
  6759  001058  16DF               	andwf	indf2,f,c
  6760                           
  6761                           ;main.c: 369: ((ledStatuses[ststusIndex]) |= ((unsigned short)1 << (statusShift)));
  6762  00105A  C00C  F007         	movff	LightLed@statusShift,??_LightLed
  6763  00105E  0E01               	movlw	1
  6764  001060  6E08               	movwf	(??_LightLed+1)& (0+255),c
  6765  001062  2A07               	incf	??_LightLed,f,c
  6766  001064  D003               	goto	u3204
  6767  001066                     u3205:
  6768  001066  FFFF               	dw	65535	; assembler added errata NOP
  6769  001068  90D8               	bcf	status,0,c
  6770  00106A  3608               	rlcf	??_LightLed+1,f,c
  6771  00106C                     u3204:
  6772  00106C  FFFF               	dw	65535	; assembler added errata NOP
  6773  00106E  2E07               	decfsz	??_LightLed,f,c
  6774  001070  D7FA               	goto	u3205
  6775  001072  500B               	movf	LightLed@ststusIndex,w,c
  6776  001074  0F90               	addlw	low _ledStatuses
  6777  001076  6ED9               	movwf	fsr2l,c
  6778  001078  6ADA               	clrf	fsr2h,c
  6779  00107A  5008               	movf	??_LightLed+1,w,c
  6780  00107C  12DF               	iorwf	indf2,f,c
  6781                           
  6782                           ;main.c: 370: ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1)));
  6783  00107E  C00C  F007         	movff	LightLed@statusShift,??_LightLed
  6784  001082  2A07               	incf	??_LightLed,f,c
  6785  001084  0E01               	movlw	1
  6786  001086  6E08               	movwf	(??_LightLed+1)& (0+255),c
  6787  001088  2A07               	incf	??_LightLed,f,c
  6788  00108A  D003               	goto	u3214
  6789  00108C                     u3215:
  6790  00108C  FFFF               	dw	65535	; assembler added errata NOP
  6791  00108E  90D8               	bcf	status,0,c
  6792  001090  3608               	rlcf	??_LightLed+1,f,c
  6793  001092                     u3214:
  6794  001092  FFFF               	dw	65535	; assembler added errata NOP
  6795  001094  2E07               	decfsz	??_LightLed,f,c
  6796  001096  D7FA               	goto	u3215
  6797  001098  1C08               	comf	??_LightLed+1,w,c
  6798  00109A  6E09               	movwf	(??_LightLed+2)& (0+255),c
  6799  00109C  500B               	movf	LightLed@ststusIndex,w,c
  6800  00109E  0F80               	addlw	low _ledBlink
  6801  0010A0  6ED9               	movwf	fsr2l,c
  6802  0010A2  6ADA               	clrf	fsr2h,c
  6803  0010A4  5009               	movf	??_LightLed+2,w,c
  6804  0010A6  16DF               	andwf	indf2,f,c
  6805                           
  6806                           ;main.c: 371: (blink ? ((ledBlink[ststusIndex]) |= ((unsigned short)1 << (statusShift)))
      +                           : ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift))));
  6807  0010A8  5006               	movf	LightLed@blink,w,c
  6808  0010AA  E0AB               	bz	l278
  6809  0010AC  C00C  F007         	movff	LightLed@statusShift,??_LightLed
  6810  0010B0  0E01               	movlw	1
  6811  0010B2  6E08               	movwf	(??_LightLed+1)& (0+255),c
  6812  0010B4  2A07               	incf	??_LightLed,f,c
  6813  0010B6  D003               	goto	u3234
  6814  0010B8                     u3235:
  6815  0010B8  FFFF               	dw	65535	; assembler added errata NOP
  6816  0010BA  90D8               	bcf	status,0,c
  6817  0010BC  3608               	rlcf	??_LightLed+1,f,c
  6818  0010BE                     u3234:
  6819  0010BE  FFFF               	dw	65535	; assembler added errata NOP
  6820  0010C0  2E07               	decfsz	??_LightLed,f,c
  6821  0010C2  D7FA               	goto	u3235
  6822  0010C4  500B               	movf	LightLed@ststusIndex,w,c
  6823  0010C6  0F80               	addlw	low _ledBlink
  6824  0010C8  6ED9               	movwf	fsr2l,c
  6825  0010CA  6ADA               	clrf	fsr2h,c
  6826  0010CC  5008               	movf	??_LightLed+1,w,c
  6827  0010CE  12DF               	iorwf	indf2,f,c
  6828  0010D0  D009               	goto	l270
  6829  0010D2                     l3838:
  6830  0010D2  FFFF               	dw	65535	; assembler added errata NOP
  6831  0010D4  5005               	movf	LightLed@ledState,w,c
  6832                           
  6833                           ; Switch size 1, requested type "speed"
  6834                           ; Number of cases is 3, Range of values is 0 to 2
  6835                           ; switch strategies available:
  6836                           ; Name         Instructions Cycles
  6837                           ; simple_byte           10     6 (average)
  6838                           ;	Chosen strategy is simple_byte
  6839  0010D6  E101 D6F7          	bz	l3818
  6840  0010DA  0A01               	xorlw	1	; case 1
  6841  0010DC  E101 D73F          	bz	l3820
  6842  0010E0  0A03               	xorlw	3	; case 2
  6843  0010E2  E0A6               	bz	l3828
  6844  0010E4                     l270:
  6845  0010E4  FFFF               	dw	65535	; assembler added errata NOP
  6846  0010E6  0012               	return		;funcret
  6847  0010E8  FFFF               	dw	65535	; errata NOP
  6848  0010EA                     __end_of_LightLed:
  6849                           	opt stack 0
  6850                           tblptru	equ	0xFF8
  6851                           tblptrh	equ	0xFF7
  6852                           tblptrl	equ	0xFF6
  6853                           tablat	equ	0xFF5
  6854                           prodh	equ	0xFF4
  6855                           prodl	equ	0xFF3
  6856                           intcon	equ	0xFF2
  6857                           postinc0	equ	0xFEE
  6858                           wreg	equ	0xFE8
  6859                           postdec1	equ	0xFE5
  6860                           fsr1h	equ	0xFE2
  6861                           fsr1l	equ	0xFE1
  6862                           indf2	equ	0xFDF
  6863                           postinc2	equ	0xFDE
  6864                           postdec2	equ	0xFDD
  6865                           plusw2	equ	0xFDB
  6866                           fsr2h	equ	0xFDA
  6867                           fsr2l	equ	0xFD9
  6868                           status	equ	0xFD8
  6869                           
  6870 ;; *************** function _GetTime *****************
  6871 ;; Defined at:
  6872 ;;		line 206 in file "user.c"
  6873 ;; Parameters:    Size  Location     Type
  6874 ;;		None
  6875 ;; Auto vars:     Size  Location     Type
  6876 ;;		None
  6877 ;; Return value:  Size  Location     Type
  6878 ;;                  1    wreg      PTR long 
  6879 ;; Registers used:
  6880 ;;		wreg
  6881 ;; Tracked objects:
  6882 ;;		On entry : 0/0
  6883 ;;		On exit  : 0/0
  6884 ;;		Unchanged: 0/0
  6885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6886 ;;      Params:         2       0       0       0       0       0       0
  6887 ;;      Locals:         0       0       0       0       0       0       0
  6888 ;;      Temps:          0       0       0       0       0       0       0
  6889 ;;      Totals:         2       0       0       0       0       0       0
  6890 ;;Total ram usage:        2 bytes
  6891 ;; Hardware stack levels used:    1
  6892 ;; Hardware stack levels required when called:    2
  6893 ;; This function calls:
  6894 ;;		Nothing
  6895 ;; This function is called by:
  6896 ;;		_ProcessDiary
  6897 ;;		_main
  6898 ;; This function uses a non-reentrant model
  6899 ;;
  6900                           
  6901                           	psect	text27
  6902  00266C                     __ptext27:
  6903                           	opt stack 0
  6904  00266C                     _GetTime:
  6905                           	opt stack 27
  6906                           
  6907                           ;incstack = 0
  6908  00266C  FFFF               	dw	65535
  6909                           
  6910                           ;user.c: 208: return &currentTime;
  6911  00266E  0ED2               	movlw	_currentTime& (0+255)
  6912  002670  0012               	return		;funcret
  6913  002672  FFFF               	dw	65535	; errata NOP
  6914  002674                     __end_of_GetTime:
  6915                           	opt stack 0
  6916                           tblptru	equ	0xFF8
  6917                           tblptrh	equ	0xFF7
  6918                           tblptrl	equ	0xFF6
  6919                           tablat	equ	0xFF5
  6920                           prodh	equ	0xFF4
  6921                           prodl	equ	0xFF3
  6922                           intcon	equ	0xFF2
  6923                           postinc0	equ	0xFEE
  6924                           wreg	equ	0xFE8
  6925                           postdec1	equ	0xFE5
  6926                           fsr1h	equ	0xFE2
  6927                           fsr1l	equ	0xFE1
  6928                           indf2	equ	0xFDF
  6929                           postinc2	equ	0xFDE
  6930                           postdec2	equ	0xFDD
  6931                           plusw2	equ	0xFDB
  6932                           fsr2h	equ	0xFDA
  6933                           fsr2l	equ	0xFD9
  6934                           status	equ	0xFD8
  6935                           
  6936 ;; *************** function _ModbusPoll *****************
  6937 ;; Defined at:
  6938 ;;		line 397 in file "ModbusRtu.c"
  6939 ;; Parameters:    Size  Location     Type
  6940 ;;  discreteInpu    2   38[COMRAM] unsigned short 
  6941 ;;  coils           1   40[COMRAM] PTR unsigned short 
  6942 ;;		 -> _MODBUSCoils(2), 
  6943 ;;  inputRegs       2   41[COMRAM] PTR unsigned short 
  6944 ;;		 -> _MODBUSInputRegs(30), 
  6945 ;;  inputRegsCou    1   43[COMRAM] const unsigned char 
  6946 ;;  holdingRegs     2   44[COMRAM] PTR unsigned short 
  6947 ;;		 -> _MODBUSHoldingRegs(30), 
  6948 ;;  holdingRegsC    1   46[COMRAM] const unsigned char 
  6949 ;; Auto vars:     Size  Location     Type
  6950 ;;  u8exception     1   49[COMRAM] unsigned char 
  6951 ;;  i8state         1   48[COMRAM] unsigned char 
  6952 ;;  u8current       1   47[COMRAM] unsigned char 
  6953 ;; Return value:  Size  Location     Type
  6954 ;;                  1    wreg      char 
  6955 ;; Registers used:
  6956 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6957 ;; Tracked objects:
  6958 ;;		On entry : E/0
  6959 ;;		On exit  : 0/0
  6960 ;;		Unchanged: 0/0
  6961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6962 ;;      Params:         9       0       0       0       0       0       0
  6963 ;;      Locals:         3       0       0       0       0       0       0
  6964 ;;      Temps:          0       0       0       0       0       0       0
  6965 ;;      Totals:        12       0       0       0       0       0       0
  6966 ;;Total ram usage:       12 bytes
  6967 ;; Hardware stack levels used:    1
  6968 ;; Hardware stack levels required when called:    5
  6969 ;; This function calls:
  6970 ;;		_ModbusBuildException
  6971 ;;		_ModbusGetRxBuffer
  6972 ;;		_ModbusProcess_FC1
  6973 ;;		_ModbusProcess_FC15
  6974 ;;		_ModbusProcess_FC16
  6975 ;;		_ModbusProcess_FC17
  6976 ;;		_ModbusProcess_FC21
  6977 ;;		_ModbusProcess_FC3
  6978 ;;		_ModbusProcess_FC5
  6979 ;;		_ModbusProcess_FC6
  6980 ;;		_ModbusSendTxBuffer
  6981 ;;		_ModbusValidateRequest
  6982 ;;		_PortAvailable
  6983 ;;		_millis
  6984 ;; This function is called by:
  6985 ;;		_main
  6986 ;; This function uses a non-reentrant model
  6987 ;;
  6988                           
  6989                           	psect	text28
  6990  001310                     __ptext28:
  6991                           	opt stack 0
  6992  001310                     _ModbusPoll:
  6993                           	opt stack 25
  6994                           
  6995                           ;incstack = 0
  6996  001310  FFFF               	dw	65535
  6997                           
  6998                           ;ModbusRtu.c: 402: _holdingRegs = holdingRegs;
  6999  001312  0100               	movlb	0	; () banked
  7000  001314  6BD8               	clrf	__lastCommand& (0+255),b
  7001                           
  7002                           ;ModbusRtu.c: 403: _inputRegsCount = inputRegsCount;
  7003  001316  C02C  F0C2         	movff	ModbusPoll@inputRegsCount,__inputRegsCount
  7004                           
  7005                           ;ModbusRtu.c: 404: _holdingRegsCount = holdingRegsCount;
  7006  00131A  C02F  F0C1         	movff	ModbusPoll@holdingRegsCount,__holdingRegsCount
  7007                           
  7008                           ; BSR set to: 0
  7009                           ;ModbusRtu.c: 409: uint8_t u8current = PortAvailable();
  7010  00131E  EC3A  F013         	call	_PortAvailable	;wreg free
  7011  001322  6E30               	movwf	ModbusPoll@u8current,c
  7012                           
  7013                           ;ModbusRtu.c: 413: if (u8current == 0) return 0;
  7014  001324  5030               	movf	ModbusPoll@u8current,w,c
  7015  001326  E103               	bnz	l4674
  7016  001328                     l4670:
  7017  001328  FFFF               	dw	65535	; assembler added errata NOP
  7018  00132A  0E00               	movlw	0
  7019  00132C  D09E               	goto	l770
  7020  00132E                     l4674:
  7021                           
  7022                           ;ModbusRtu.c: 416: if (u8current != _u8lastRec)
  7023  00132E  0100               	movlb	0	; () banked
  7024  001330  51C4               	movf	__u8lastRec& (0+255),w,b
  7025  001332  1830               	xorwf	ModbusPoll@u8current,w,c
  7026  001334  E012               	bz	l4684
  7027                           
  7028                           ; BSR set to: 0
  7029                           ;ModbusRtu.c: 417: {
  7030                           ;ModbusRtu.c: 418: _u8lastRec = u8current;
  7031  001336  C030  F0C4         	movff	ModbusPoll@u8current,__u8lastRec
  7032                           
  7033                           ; BSR set to: 0
  7034                           ;ModbusRtu.c: 419: _u32time = millis() + 5;
  7035  00133A  0E05               	movlw	5
  7036  00133C  ECB1  F012         	call	_millis	;wreg free
  7037  001340  2405               	addwf	?_millis,w,c
  7038  001342  0100               	movlb	0	; () banked
  7039  001344  6FA0               	movwf	__u32time& (0+255),b
  7040  001346  0E00               	movlw	0
  7041  001348  2006               	addwfc	?_millis+1,w,c
  7042  00134A  6FA1               	movwf	(__u32time+1)& (0+255),b
  7043  00134C  0E00               	movlw	0
  7044  00134E  2007               	addwfc	?_millis+2,w,c
  7045  001350  6FA2               	movwf	(__u32time+2)& (0+255),b
  7046  001352  0E00               	movlw	0
  7047  001354  2008               	addwfc	?_millis+3,w,c
  7048  001356  6FA3               	movwf	(__u32time+3)& (0+255),b
  7049  001358  D7E7               	goto	l4670
  7050  00135A                     l4684:
  7051                           
  7052                           ; BSR set to: 0
  7053                           ;ModbusRtu.c: 421: }
  7054                           ;ModbusRtu.c: 422: if (millis() < _u32time)
  7055  00135A  ECB1  F012         	call	_millis	;wreg free
  7056  00135E  0100               	movlb	0	; () banked
  7057  001360  51A0               	movf	__u32time& (0+255),w,b
  7058  001362  5C05               	subwf	?_millis,w,c
  7059  001364  51A1               	movf	(__u32time+1)& (0+255),w,b
  7060  001366  5806               	subwfb	?_millis+1,w,c
  7061  001368  51A2               	movf	(__u32time+2)& (0+255),w,b
  7062  00136A  5807               	subwfb	?_millis+2,w,c
  7063  00136C  51A3               	movf	(__u32time+3)& (0+255),w,b
  7064  00136E  5808               	subwfb	?_millis+3,w,c
  7065  001370  E3DB               	bnc	l4670
  7066                           
  7067                           ; BSR set to: 0
  7068                           ;ModbusRtu.c: 425: _u8lastRec = 0;
  7069  001372  6BC4               	clrf	__u8lastRec& (0+255),b
  7070                           
  7071                           ; BSR set to: 0
  7072                           ;ModbusRtu.c: 427: _u8lastError = i8state;
  7073  001374  EC08  F012         	call	_ModbusGetRxBuffer	;wreg free
  7074  001378  6E31               	movwf	ModbusPoll@i8state,c
  7075                           
  7076                           ;ModbusRtu.c: 428: if (i8state < 7)
  7077  00137A  0E07               	movlw	7
  7078  00137C  6031               	cpfslt	ModbusPoll@i8state,c
  7079  00137E  D003               	goto	l4698
  7080  001380                     l4694:
  7081  001380  FFFF               	dw	65535	; assembler added errata NOP
  7082                           
  7083                           ;ModbusRtu.c: 429: return i8state;
  7084  001382  5031               	movf	ModbusPoll@i8state,w,c
  7085  001384  D072               	goto	l770
  7086  001386                     l4698:
  7087  001386  FFFF               	dw	65535	; assembler added errata NOP
  7088                           
  7089                           ;ModbusRtu.c: 432: if (_au8Buffer[ ID ] != _u8id)
  7090  001388  0100               	movlb	0	; () banked
  7091  00138A  51C3               	movf	__u8id& (0+255),w,b
  7092  00138C  0101               	movlb	1	; () banked
  7093  00138E  1900               	xorwf	__au8Buffer& (0+255),w,b
  7094  001390  E1CB               	bnz	l4670
  7095                           
  7096                           ; BSR set to: 1
  7097                           ;ModbusRtu.c: 436: uint8_t u8exception = ModbusValidateRequest();
  7098  001392  EC75  F008         	call	_ModbusValidateRequest	;wreg free
  7099  001396  6E32               	movwf	ModbusPoll@u8exception,c
  7100                           
  7101                           ;ModbusRtu.c: 437: if (u8exception > 0) {
  7102  001398  5032               	movf	ModbusPoll@u8exception,w,c
  7103  00139A  E009               	bz	l4718
  7104                           
  7105                           ;ModbusRtu.c: 438: if (u8exception != NO_REPLY) {
  7106  00139C  2832               	incf	ModbusPoll@u8exception,w,c
  7107  00139E  E005               	bz	l4714
  7108                           
  7109                           ;ModbusRtu.c: 439: ModbusBuildException( u8exception );
  7110  0013A0  5032               	movf	ModbusPoll@u8exception,w,c
  7111  0013A2  ECD9  F012         	call	_ModbusBuildException
  7112                           
  7113                           ; BSR set to: 1
  7114                           ;ModbusRtu.c: 440: ModbusSendTxBuffer();
  7115  0013A6  EC53  F011         	call	_ModbusSendTxBuffer	;wreg free
  7116  0013AA                     l4714:
  7117                           
  7118                           ;ModbusRtu.c: 443: return u8exception;
  7119  0013AA  5032               	movf	ModbusPoll@u8exception,w,c
  7120  0013AC  D05E               	goto	l770
  7121  0013AE                     l4718:
  7122                           
  7123                           ;ModbusRtu.c: 447: _u8lastError = 0;
  7124  0013AE  ECB1  F012         	call	_millis	;wreg free
  7125                           
  7126                           ;ModbusRtu.c: 450: switch( _au8Buffer[ FUNC ] ) {
  7127  0013B2  D043               	goto	l4762
  7128  0013B4                     l4720:
  7129                           
  7130                           ; BSR set to: 1
  7131                           ;ModbusRtu.c: 452: return ModbusProcess_FC1( *coils );
  7132  0013B4  5029               	movf	ModbusPoll@coils,w,c
  7133  0013B6  6ED9               	movwf	fsr2l,c
  7134  0013B8  6ADA               	clrf	fsr2h,c
  7135  0013BA  CFDE F014          	movff	postinc2,ModbusProcess_FC1@regs
  7136  0013BE  CFDD F015          	movff	postdec2,ModbusProcess_FC1@regs+1
  7137  0013C2  EC38  F00A         	call	_ModbusProcess_FC1	;wreg free
  7138  0013C6  D051               	goto	l770
  7139  0013C8                     l4724:
  7140                           
  7141                           ; BSR set to: 1
  7142                           ;ModbusRtu.c: 454: return ModbusProcess_FC1( discreteInputs );
  7143  0013C8  C027  F014         	movff	ModbusPoll@discreteInputs,ModbusProcess_FC1@regs
  7144  0013CC  C028  F015         	movff	ModbusPoll@discreteInputs+1,ModbusProcess_FC1@regs+1
  7145  0013D0  EC38  F00A         	call	_ModbusProcess_FC1	;wreg free
  7146  0013D4  D04A               	goto	l770
  7147  0013D6                     l4728:
  7148                           
  7149                           ; BSR set to: 1
  7150                           ;ModbusRtu.c: 456: return ModbusProcess_FC3( holdingRegs, holdingRegsCount );
  7151  0013D6  C02D  F014         	movff	ModbusPoll@holdingRegs,ModbusProcess_FC3@regs
  7152  0013DA  C02E  F015         	movff	ModbusPoll@holdingRegs+1,ModbusProcess_FC3@regs+1
  7153  0013DE  C02F  F016         	movff	ModbusPoll@holdingRegsCount,ModbusProcess_FC3@u8size
  7154  0013E2  ECFD  F00D         	call	_ModbusProcess_FC3	;wreg free
  7155  0013E6  D041               	goto	l770
  7156  0013E8                     l4732:
  7157                           
  7158                           ; BSR set to: 1
  7159                           ;ModbusRtu.c: 458: return ModbusProcess_FC3( inputRegs, inputRegsCount );
  7160  0013E8  C02A  F014         	movff	ModbusPoll@inputRegs,ModbusProcess_FC3@regs
  7161  0013EC  C02B  F015         	movff	ModbusPoll@inputRegs+1,ModbusProcess_FC3@regs+1
  7162  0013F0  C02C  F016         	movff	ModbusPoll@inputRegsCount,ModbusProcess_FC3@u8size
  7163  0013F4  ECFD  F00D         	call	_ModbusProcess_FC3	;wreg free
  7164  0013F8  D038               	goto	l770
  7165  0013FA                     l4736:
  7166                           
  7167                           ; BSR set to: 1
  7168                           ;ModbusRtu.c: 460: return ModbusProcess_FC5( coils );
  7169  0013FA  5029               	movf	ModbusPoll@coils,w,c
  7170  0013FC  ECB3  F00E         	call	_ModbusProcess_FC5
  7171  001400  D034               	goto	l770
  7172  001402                     l4740:
  7173                           
  7174                           ; BSR set to: 1
  7175                           ;ModbusRtu.c: 462: return ModbusProcess_FC6( holdingRegs, holdingRegsCount );
  7176  001402  C02D  F014         	movff	ModbusPoll@holdingRegs,ModbusProcess_FC6@regs
  7177  001406  C02E  F015         	movff	ModbusPoll@holdingRegs+1,ModbusProcess_FC6@regs+1
  7178  00140A  C02F  F016         	movff	ModbusPoll@holdingRegsCount,ModbusProcess_FC6@u8size
  7179  00140E  ECA6  F010         	call	_ModbusProcess_FC6	;wreg free
  7180  001412  D02B               	goto	l770
  7181  001414                     l4744:
  7182                           
  7183                           ; BSR set to: 1
  7184                           ;ModbusRtu.c: 464: return ModbusProcess_FC15( coils );
  7185  001414  5029               	movf	ModbusPoll@coils,w,c
  7186  001416  ECD1  F00A         	call	_ModbusProcess_FC15
  7187  00141A  D027               	goto	l770
  7188  00141C                     l4748:
  7189                           
  7190                           ; BSR set to: 1
  7191                           ;ModbusRtu.c: 466: return ModbusProcess_FC16( holdingRegs, holdingRegsCount );
  7192  00141C  C02D  F014         	movff	ModbusPoll@holdingRegs,ModbusProcess_FC16@regs
  7193  001420  C02E  F015         	movff	ModbusPoll@holdingRegs+1,ModbusProcess_FC16@regs+1
  7194  001424  C02F  F016         	movff	ModbusPoll@holdingRegsCount,ModbusProcess_FC16@u8size
  7195  001428  ECD5  F00C         	call	_ModbusProcess_FC16	;wreg free
  7196  00142C  D01E               	goto	l770
  7197  00142E                     l4752:
  7198                           
  7199                           ; BSR set to: 1
  7200                           ;ModbusRtu.c: 468: return ModbusProcess_FC17();
  7201  00142E  EC79  F011         	call	_ModbusProcess_FC17	;wreg free
  7202  001432  D01B               	goto	l770
  7203  001434                     l4756:
  7204                           
  7205                           ; BSR set to: 1
  7206                           ;ModbusRtu.c: 470: return ModbusProcess_FC21();
  7207  001434  EC5A  F00E         	call	_ModbusProcess_FC21	;wreg free
  7208  001438  D018               	goto	l770
  7209  00143A                     l4762:
  7210  00143A  FFFF               	dw	65535	; assembler added errata NOP
  7211  00143C  0101               	movlb	1	; () banked
  7212  00143E  5101               	movf	(__au8Buffer+1)& (0+255),w,b
  7213                           
  7214                           ; Switch size 1, requested type "speed"
  7215                           ; Number of cases is 10, Range of values is 1 to 21
  7216                           ; switch strategies available:
  7217                           ; Name         Instructions Cycles
  7218                           ; simple_byte           31    16 (average)
  7219                           ;	Chosen strategy is simple_byte
  7220  001440  0A01               	xorlw	1	; case 1
  7221  001442  E0B8               	bz	l4720
  7222  001444  0A03               	xorlw	3	; case 2
  7223  001446  E0C0               	bz	l4724
  7224  001448  0A01               	xorlw	1	; case 3
  7225  00144A  E0C5               	bz	l4728
  7226  00144C  0A07               	xorlw	7	; case 4
  7227  00144E  E0CC               	bz	l4732
  7228  001450  0A01               	xorlw	1	; case 5
  7229  001452  E0D3               	bz	l4736
  7230  001454  0A03               	xorlw	3	; case 6
  7231  001456  E0D5               	bz	l4740
  7232  001458  0A09               	xorlw	9	; case 15
  7233  00145A  E0DC               	bz	l4744
  7234  00145C  0A1F               	xorlw	31	; case 16
  7235  00145E  E0DE               	bz	l4748
  7236  001460  0A01               	xorlw	1	; case 17
  7237  001462  E0E5               	bz	l4752
  7238  001464  0A04               	xorlw	4	; case 21
  7239  001466  E0E6               	bz	l4756
  7240  001468  D78B               	goto	l4694
  7241  00146A                     l770:
  7242  00146A  FFFF               	dw	65535	; assembler added errata NOP
  7243  00146C  0012               	return		;funcret
  7244  00146E  FFFF               	dw	65535	; errata NOP
  7245  001470                     __end_of_ModbusPoll:
  7246                           	opt stack 0
  7247                           tblptru	equ	0xFF8
  7248                           tblptrh	equ	0xFF7
  7249                           tblptrl	equ	0xFF6
  7250                           tablat	equ	0xFF5
  7251                           prodh	equ	0xFF4
  7252                           prodl	equ	0xFF3
  7253                           intcon	equ	0xFF2
  7254                           postinc0	equ	0xFEE
  7255                           wreg	equ	0xFE8
  7256                           postdec1	equ	0xFE5
  7257                           fsr1h	equ	0xFE2
  7258                           fsr1l	equ	0xFE1
  7259                           indf2	equ	0xFDF
  7260                           postinc2	equ	0xFDE
  7261                           postdec2	equ	0xFDD
  7262                           plusw2	equ	0xFDB
  7263                           fsr2h	equ	0xFDA
  7264                           fsr2l	equ	0xFD9
  7265                           status	equ	0xFD8
  7266                           
  7267 ;; *************** function _ModbusValidateRequest *****************
  7268 ;; Defined at:
  7269 ;;		line 672 in file "ModbusRtu.c"
  7270 ;; Parameters:    Size  Location     Type
  7271 ;;		None
  7272 ;; Auto vars:     Size  Location     Type
  7273 ;;  recLenBytes     4   25[COMRAM] unsigned long 
  7274 ;;  startAddrByt    4   21[COMRAM] unsigned long 
  7275 ;;  i               1   34[COMRAM] unsigned char 
  7276 ;;  u16regs         2   36[COMRAM] unsigned short 
  7277 ;;  u16count        2   32[COMRAM] unsigned short 
  7278 ;;  u16MsgCRC       2   29[COMRAM] unsigned short 
  7279 ;;  u8regs          1   35[COMRAM] unsigned char 
  7280 ;;  isSupported     1   31[COMRAM] unsigned char 
  7281 ;; Return value:  Size  Location     Type
  7282 ;;                  1    wreg      unsigned char 
  7283 ;; Registers used:
  7284 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7285 ;; Tracked objects:
  7286 ;;		On entry : F/1
  7287 ;;		On exit  : 0/0
  7288 ;;		Unchanged: 0/0
  7289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7290 ;;      Params:         0       0       0       0       0       0       0
  7291 ;;      Locals:        17       0       0       0       0       0       0
  7292 ;;      Temps:          4       0       0       0       0       0       0
  7293 ;;      Totals:        21       0       0       0       0       0       0
  7294 ;;Total ram usage:       21 bytes
  7295 ;; Hardware stack levels used:    1
  7296 ;; Hardware stack levels required when called:    3
  7297 ;; This function calls:
  7298 ;;		_ModbusCalcCRC
  7299 ;; This function is called by:
  7300 ;;		_ModbusPoll
  7301 ;; This function uses a non-reentrant model
  7302 ;;
  7303                           
  7304                           	psect	text29
  7305  0010EA                     __ptext29:
  7306                           	opt stack 0
  7307  0010EA                     _ModbusValidateRequest:
  7308                           	opt stack 26
  7309                           
  7310                           ;incstack = 0
  7311  0010EA  FFFF               	dw	65535
  7312                           
  7313                           ; BSR set to: 1
  7314                           ;ModbusRtu.c: 674: uint16_t u16MsgCRC =
  7315                           ;ModbusRtu.c: 675: ((_au8Buffer[_u8BufferSize - 2] << 8)
  7316                           ;ModbusRtu.c: 676: | _au8Buffer[_u8BufferSize - 1]);
  7317  0010EC  0EFE               	movlw	low (__au8Buffer+65534)
  7318  0010EE  2471               	addwf	__u8BufferSize,w,c
  7319  0010F0  6ED9               	movwf	fsr2l,c
  7320  0010F2  6ADA               	clrf	fsr2h,c
  7321  0010F4  0E00               	movlw	high (__au8Buffer+65534)
  7322  0010F6  22DA               	addwfc	fsr2h,f,c
  7323  0010F8  50DF               	movf	indf2,w,c
  7324  0010FA  6E13               	movwf	(??_ModbusValidateRequest+1)& (0+255),c
  7325  0010FC  6A12               	clrf	??_ModbusValidateRequest& (0+255),c
  7326  0010FE  0EFF               	movlw	low (__au8Buffer+65535)
  7327  001100  2471               	addwf	__u8BufferSize,w,c
  7328  001102  6ED9               	movwf	fsr2l,c
  7329  001104  6ADA               	clrf	fsr2h,c
  7330  001106  0E00               	movlw	high (__au8Buffer+65535)
  7331  001108  22DA               	addwfc	fsr2h,f,c
  7332  00110A  50DF               	movf	indf2,w,c
  7333  00110C  1012               	iorwf	??_ModbusValidateRequest,w,c
  7334  00110E  6E1E               	movwf	ModbusValidateRequest@u16MsgCRC,c
  7335  001110  5013               	movf	??_ModbusValidateRequest+1,w,c
  7336  001112  6E1F               	movwf	ModbusValidateRequest@u16MsgCRC+1,c
  7337                           
  7338                           ; BSR set to: 1
  7339                           ;ModbusRtu.c: 678: _u16errCnt ++;
  7340  001114  5071               	movf	__u8BufferSize,w,c
  7341  001116  0FFE               	addlw	254
  7342  001118  EC6C  F010         	call	_ModbusCalcCRC
  7343  00111C  501E               	movf	ModbusValidateRequest@u16MsgCRC,w,c
  7344  00111E  1805               	xorwf	?_ModbusCalcCRC,w,c
  7345  001120  E103               	bnz	u3310
  7346  001122  501F               	movf	ModbusValidateRequest@u16MsgCRC+1,w,c
  7347  001124  1806               	xorwf	?_ModbusCalcCRC+1,w,c
  7348  001126  E002               	bz	l823
  7349  001128                     u3310:
  7350                           
  7351                           ;ModbusRtu.c: 679: return NO_REPLY;
  7352  001128  0EFF               	movlw	255
  7353  00112A  D0EF               	goto	l824
  7354  00112C                     l823:
  7355                           
  7356                           ;ModbusRtu.c: 680: }
  7357                           ;ModbusRtu.c: 683: bool isSupported = 0;
  7358  00112C  6A20               	clrf	ModbusValidateRequest@isSupported,c
  7359                           
  7360                           ;ModbusRtu.c: 684: for (uint8_t i = 0; i< sizeof( fctsupported ); i++) {
  7361  00112E  6A23               	clrf	ModbusValidateRequest@i,c
  7362  001130                     l4004:
  7363  001130  FFFF               	dw	65535	; assembler added errata NOP
  7364                           
  7365                           ;ModbusRtu.c: 685: if (fctsupported[i] == _au8Buffer[FUNC]) {
  7366  001132  0E9D               	movlw	low _fctsupported
  7367  001134  2423               	addwf	ModbusValidateRequest@i,w,c
  7368  001136  6EF6               	movwf	tblptrl,c
  7369  001138  6AF7               	clrf	tblptrh,c
  7370  00113A  0E7D               	movlw	high _fctsupported
  7371  00113C  22F7               	addwfc	tblptrh,f,c
  7372  00113E                     	if	0	;There are less than 3 active tblptr bytes
  7373  00113E                     	endif
  7374  00113E  0008               	tblrd		*
  7375  001140  FFFF               	dw	65535	; errata NOP
  7376  001142  50F5               	movf	tablat,w,c
  7377  001144  0101               	movlb	1	; () banked
  7378  001146  1901               	xorwf	(__au8Buffer+1)& (0+255),w,b
  7379  001148  E103               	bnz	l4008
  7380                           
  7381                           ; BSR set to: 1
  7382                           ;ModbusRtu.c: 686: isSupported = 1;
  7383  00114A  0E01               	movlw	1
  7384  00114C  6E20               	movwf	ModbusValidateRequest@isSupported,c
  7385                           
  7386                           ;ModbusRtu.c: 687: break;
  7387  00114E  D004               	goto	l4012
  7388  001150                     l4008:
  7389                           
  7390                           ; BSR set to: 1
  7391  001150  2A23               	incf	ModbusValidateRequest@i,f,c
  7392                           
  7393                           ; BSR set to: 1
  7394  001152  0E08               	movlw	8
  7395  001154  6423               	cpfsgt	ModbusValidateRequest@i,c
  7396  001156  D7EC               	goto	l4004
  7397  001158                     l4012:
  7398  001158  FFFF               	dw	65535	; assembler added errata NOP
  7399                           
  7400                           ; BSR set to: 1
  7401                           ;ModbusRtu.c: 691: _u16errCnt ++;
  7402  00115A  5020               	movf	ModbusValidateRequest@isSupported,w,c
  7403  00115C  E102               	bnz	l828
  7404                           
  7405                           ; BSR set to: 1
  7406                           ;ModbusRtu.c: 692: return EXC_FUNC_CODE;
  7407  00115E  0E01               	movlw	1
  7408  001160  D0D4               	goto	l824
  7409  001162                     l828:
  7410                           
  7411                           ; BSR set to: 1
  7412                           ;ModbusRtu.c: 697: uint16_t u16count = 0;
  7413  001162  6A21               	clrf	ModbusValidateRequest@u16count,c
  7414  001164  6A22               	clrf	ModbusValidateRequest@u16count+1,c
  7415                           
  7416                           ;ModbusRtu.c: 698: uint8_t u8regs;
  7417                           ;ModbusRtu.c: 699: switch ( _au8Buffer[ FUNC ] ) {
  7418  001166  D0B4               	goto	l4106
  7419  001168                     l4018:
  7420                           
  7421                           ; BSR set to: 1
  7422                           ;ModbusRtu.c: 701: case MB_FC_READ_DISCRETE_INPUT:
  7423                           ;ModbusRtu.c: 702: case MB_FC_WRITE_MULTIPLE_COILS:
  7424                           ;ModbusRtu.c: 704: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  7425  001168  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  7426  00116A  6E12               	movwf	??_ModbusValidateRequest& (0+255),c
  7427  00116C  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  7428  00116E  6E25               	movwf	ModbusValidateRequest@u16regs,c
  7429  001170  C012  F026         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  7430                           
  7431                           ;ModbusRtu.c: 705: u16count = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ NB_LO ]);
  7432  001174  5104               	movf	(__au8Buffer+4)& (0+255),w,b
  7433  001176  6E12               	movwf	??_ModbusValidateRequest& (0+255),c
  7434  001178  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  7435  00117A  6E21               	movwf	ModbusValidateRequest@u16count,c
  7436  00117C  C012  F022         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16count+1
  7437                           
  7438                           ; BSR set to: 1
  7439                           ;ModbusRtu.c: 706: if(u16count > 16)
  7440  001180  5022               	movf	ModbusValidateRequest@u16count+1,w,c
  7441  001182  E103               	bnz	u3350
  7442  001184  0E11               	movlw	17
  7443  001186  5C21               	subwf	ModbusValidateRequest@u16count,w,c
  7444  001188  E302               	bnc	l4026
  7445  00118A                     u3350:
  7446  00118A                     l4022:
  7447                           
  7448                           ; BSR set to: 1
  7449                           ;ModbusRtu.c: 707: return EXC_REGS_QUANT;
  7450  00118A  0E03               	movlw	3
  7451  00118C  D0BE               	goto	l824
  7452  00118E                     l4026:
  7453                           
  7454                           ; BSR set to: 1
  7455                           ;ModbusRtu.c: 708: if(u16regs > 15 || u16regs + u16count > 16)
  7456  00118E  5026               	movf	ModbusValidateRequest@u16regs+1,w,c
  7457  001190  E110               	bnz	l4030
  7458  001192  0E10               	movlw	16
  7459  001194  5C25               	subwf	ModbusValidateRequest@u16regs,w,c
  7460  001196  E20D               	bc	l4030
  7461                           
  7462                           ; BSR set to: 1
  7463  001198  5021               	movf	ModbusValidateRequest@u16count,w,c
  7464  00119A  2425               	addwf	ModbusValidateRequest@u16regs,w,c
  7465  00119C  6E12               	movwf	??_ModbusValidateRequest& (0+255),c
  7466  00119E  5022               	movf	ModbusValidateRequest@u16count+1,w,c
  7467  0011A0  2026               	addwfc	ModbusValidateRequest@u16regs+1,w,c
  7468  0011A2  6E13               	movwf	(??_ModbusValidateRequest+1)& (0+255),c
  7469  0011A4  5013               	movf	??_ModbusValidateRequest+1,w,c
  7470  0011A6  E105               	bnz	u3370
  7471  0011A8  0E11               	movlw	17
  7472  0011AA  5C12               	subwf	??_ModbusValidateRequest,w,c
  7473  0011AC                     L4:
  7474  0011AC  FFFF               	dw	65535	; assembler added errata NOP
  7475  0011AE  E201 D0AA          	bnc	l4108
  7476  0011B2                     u3370:
  7477  0011B2                     l4030:
  7478  0011B2  FFFF               	dw	65535	; assembler added errata NOP
  7479                           
  7480                           ;ModbusRtu.c: 709: return EXC_ADDR_RANGE;
  7481  0011B4  0E02               	movlw	2
  7482  0011B6  D0A9               	goto	l824
  7483  0011B8                     l4034:
  7484                           
  7485                           ; BSR set to: 1
  7486                           ;ModbusRtu.c: 712: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  7487  0011B8  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  7488  0011BA  6E12               	movwf	??_ModbusValidateRequest& (0+255),c
  7489  0011BC  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  7490  0011BE  6E25               	movwf	ModbusValidateRequest@u16regs,c
  7491  0011C0  C012  F026         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  7492                           
  7493                           ; BSR set to: 1
  7494                           ;ModbusRtu.c: 713: u8regs = _au8Buffer[ NB_HI ];
  7495  0011C4  C104  F024         	movff	__au8Buffer+4,ModbusValidateRequest@u8regs
  7496                           
  7497                           ;ModbusRtu.c: 714: if(u8regs != 0x00 && u8regs != 0xFF)
  7498  0011C8  5024               	movf	ModbusValidateRequest@u8regs,w,c
  7499  0011CA  E002               	bz	l4044
  7500                           
  7501                           ; BSR set to: 1
  7502  0011CC  2824               	incf	ModbusValidateRequest@u8regs,w,c
  7503  0011CE  E1DD               	bnz	l4022
  7504  0011D0                     l4044:
  7505                           
  7506                           ; BSR set to: 1
  7507                           ;ModbusRtu.c: 716: if (u16regs > 15)
  7508  0011D0  5026               	movf	ModbusValidateRequest@u16regs+1,w,c
  7509  0011D2  E1EF               	bnz	l4030
  7510  0011D4  0E10               	movlw	16
  7511  0011D6  5C25               	subwf	ModbusValidateRequest@u16regs,w,c
  7512  0011D8  D7E9               	goto	L4
  7513  0011DA                     l4050:
  7514                           
  7515                           ; BSR set to: 1
  7516                           ;ModbusRtu.c: 720: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  7517  0011DA  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  7518  0011DC  6E12               	movwf	??_ModbusValidateRequest& (0+255),c
  7519  0011DE  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  7520  0011E0  6E25               	movwf	ModbusValidateRequest@u16regs,c
  7521  0011E2  C012  F026         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  7522  0011E6                     l4052:
  7523  0011E6  FFFF               	dw	65535	; assembler added errata NOP
  7524                           
  7525                           ; BSR set to: 1
  7526                           ;ModbusRtu.c: 721: u8regs = (uint8_t) u16regs;
  7527  0011E8  C025  F024         	movff	ModbusValidateRequest@u16regs,ModbusValidateRequest@u8regs
  7528                           
  7529                           ; BSR set to: 1
  7530                           ;ModbusRtu.c: 722: if (u8regs > _holdingRegsCount) return EXC_ADDR_RANGE;
  7531  0011EC  5024               	movf	ModbusValidateRequest@u8regs,w,c
  7532  0011EE  0100               	movlb	0	; () banked
  7533  0011F0  5DC1               	subwf	__holdingRegsCount& (0+255),w,b
  7534  0011F2  FFFF               	dw	65535	; assembler added errata NOP
  7535  0011F4  E3DE               	bnc	l4030
  7536  0011F6  D087               	goto	l4108
  7537  0011F8                     l4060:
  7538                           
  7539                           ; BSR set to: 1
  7540                           ;ModbusRtu.c: 725: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  7541  0011F8  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  7542  0011FA  6E12               	movwf	??_ModbusValidateRequest& (0+255),c
  7543  0011FC  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  7544  0011FE  6E25               	movwf	ModbusValidateRequest@u16regs,c
  7545  001200  C012  F026         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  7546                           
  7547                           ; BSR set to: 1
  7548                           ;ModbusRtu.c: 726: u16regs += (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ NB_LO ]);
  7549  001204  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  7550  001206  C104  F012         	movff	__au8Buffer+4,??_ModbusValidateRequest
  7551  00120A  6A13               	clrf	(??_ModbusValidateRequest+1)& (0+255),c
  7552  00120C  C012  F013         	movff	??_ModbusValidateRequest,??_ModbusValidateRequest+1
  7553  001210  6A12               	clrf	??_ModbusValidateRequest,c
  7554  001212  1212               	iorwf	??_ModbusValidateRequest,f,c
  7555  001214  5012               	movf	??_ModbusValidateRequest,w,c
  7556  001216  2625               	addwf	ModbusValidateRequest@u16regs,f,c
  7557  001218  5013               	movf	??_ModbusValidateRequest+1,w,c
  7558  00121A  2226               	addwfc	ModbusValidateRequest@u16regs+1,f,c
  7559                           
  7560                           ; BSR set to: 1
  7561                           ;ModbusRtu.c: 727: u8regs = (uint8_t) u16regs;
  7562  00121C  C025  F024         	movff	ModbusValidateRequest@u16regs,ModbusValidateRequest@u8regs
  7563                           
  7564                           ; BSR set to: 1
  7565                           ;ModbusRtu.c: 728: if (u8regs > _inputRegsCount)
  7566  001220  5024               	movf	ModbusValidateRequest@u8regs,w,c
  7567  001222  0100               	movlb	0	; () banked
  7568  001224  5DC2               	subwf	__inputRegsCount& (0+255),w,b
  7569  001226  D7E5               	goto	L5
  7570  001228                     l4072:
  7571                           
  7572                           ; BSR set to: 1
  7573                           ;ModbusRtu.c: 732: case MB_FC_WRITE_MULTIPLE_REGISTERS :
  7574                           ;ModbusRtu.c: 733: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  7575  001228  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  7576  00122A  6E12               	movwf	??_ModbusValidateRequest& (0+255),c
  7577  00122C  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  7578  00122E  6E25               	movwf	ModbusValidateRequest@u16regs,c
  7579  001230  C012  F026         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  7580                           
  7581                           ; BSR set to: 1
  7582                           ;ModbusRtu.c: 734: u16regs += (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ NB_LO ]);
  7583  001234  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  7584  001236  C104  F012         	movff	__au8Buffer+4,??_ModbusValidateRequest
  7585  00123A  6A13               	clrf	(??_ModbusValidateRequest+1)& (0+255),c
  7586  00123C  C012  F013         	movff	??_ModbusValidateRequest,??_ModbusValidateRequest+1
  7587  001240  6A12               	clrf	??_ModbusValidateRequest,c
  7588  001242  1212               	iorwf	??_ModbusValidateRequest,f,c
  7589  001244  5012               	movf	??_ModbusValidateRequest,w,c
  7590  001246  2625               	addwf	ModbusValidateRequest@u16regs,f,c
  7591  001248  5013               	movf	??_ModbusValidateRequest+1,w,c
  7592  00124A  2226               	addwfc	ModbusValidateRequest@u16regs+1,f,c
  7593  00124C  D7CC               	goto	l4052
  7594  00124E                     l4084:
  7595                           
  7596                           ; BSR set to: 1
  7597                           ;ModbusRtu.c: 743: if(_au8Buffer[ FILE_REF_TYPE ] != 6)
  7598  00124E  0E06               	movlw	6
  7599  001250  1903               	xorwf	(__au8Buffer+3)& (0+255),w,b
  7600  001252  E1AF               	bnz	l4030
  7601                           
  7602                           ; BSR set to: 1
  7603                           ;ModbusRtu.c: 746: if(_au8Buffer[ FILE_NUM_HI ] != 0x00 || _au8Buffer[ FILE_NUM_LO ] != 
      +                          0x01)
  7604  001254  5104               	movf	(__au8Buffer+4)& (0+255),w,b
  7605  001256  E1AD               	bnz	l4030
  7606                           
  7607                           ; BSR set to: 1
  7608  001258  0505               	decf	(__au8Buffer+5)& (0+255),w,b
  7609  00125A  E1AB               	bnz	l4030
  7610                           
  7611                           ; BSR set to: 1
  7612                           ;ModbusRtu.c: 749: unsigned long startAddrBytes = ((_au8Buffer[ FILE_REC_HI ] << 8) | _a
      +                          u8Buffer[ FILE_REC_LO ]) << 1;
  7613  00125C  5107               	movf	(__au8Buffer+7)& (0+255),w,b
  7614  00125E  C106  F012         	movff	__au8Buffer+6,??_ModbusValidateRequest
  7615  001262  6A13               	clrf	(??_ModbusValidateRequest+1)& (0+255),c
  7616  001264  C012  F013         	movff	??_ModbusValidateRequest,??_ModbusValidateRequest+1
  7617  001268  6A12               	clrf	??_ModbusValidateRequest,c
  7618  00126A  1212               	iorwf	??_ModbusValidateRequest,f,c
  7619  00126C  0E00               	movlw	0
  7620  00126E  90D8               	bcf	status,0,c
  7621  001270  3612               	rlcf	??_ModbusValidateRequest,f,c
  7622  001272  3613               	rlcf	??_ModbusValidateRequest+1,f,c
  7623  001274  C012  F016         	movff	??_ModbusValidateRequest,ModbusValidateRequest@startAddrBytes
  7624  001278  C013  F017         	movff	??_ModbusValidateRequest+1,ModbusValidateRequest@startAddrBytes+1
  7625  00127C  BE17               	btfsc	ModbusValidateRequest@startAddrBytes+1,7,c
  7626  00127E  0EFF               	movlw	-1
  7627  001280  6E18               	movwf	ModbusValidateRequest@startAddrBytes+2,c
  7628  001282  6E19               	movwf	ModbusValidateRequest@startAddrBytes+3,c
  7629                           
  7630                           ;ModbusRtu.c: 750: unsigned long recLenBytes = ((_au8Buffer[ FILE_REC_LEN_HI ] << 8) | _
      +                          au8Buffer[ FILE_REC_LEN_LO ]) << 1;
  7631  001284  5109               	movf	(__au8Buffer+9)& (0+255),w,b
  7632  001286  C108  F012         	movff	__au8Buffer+8,??_ModbusValidateRequest
  7633  00128A  6A13               	clrf	(??_ModbusValidateRequest+1)& (0+255),c
  7634  00128C  C012  F013         	movff	??_ModbusValidateRequest,??_ModbusValidateRequest+1
  7635  001290  6A12               	clrf	??_ModbusValidateRequest,c
  7636  001292  1212               	iorwf	??_ModbusValidateRequest,f,c
  7637  001294  0E00               	movlw	0
  7638  001296  90D8               	bcf	status,0,c
  7639  001298  3612               	rlcf	??_ModbusValidateRequest,f,c
  7640  00129A  3613               	rlcf	??_ModbusValidateRequest+1,f,c
  7641  00129C  C012  F01A         	movff	??_ModbusValidateRequest,ModbusValidateRequest@recLenBytes
  7642  0012A0  C013  F01B         	movff	??_ModbusValidateRequest+1,ModbusValidateRequest@recLenBytes+1
  7643  0012A4  BE1B               	btfsc	ModbusValidateRequest@recLenBytes+1,7,c
  7644  0012A6  0EFF               	movlw	-1
  7645  0012A8  6E1C               	movwf	ModbusValidateRequest@recLenBytes+2,c
  7646  0012AA  6E1D               	movwf	ModbusValidateRequest@recLenBytes+3,c
  7647                           
  7648                           ;ModbusRtu.c: 752: if(startAddrBytes + recLenBytes >= 256)
  7649  0012AC  501A               	movf	ModbusValidateRequest@recLenBytes,w,c
  7650  0012AE  2416               	addwf	ModbusValidateRequest@startAddrBytes,w,c
  7651  0012B0  6E12               	movwf	??_ModbusValidateRequest& (0+255),c
  7652  0012B2  501B               	movf	ModbusValidateRequest@recLenBytes+1,w,c
  7653  0012B4  2017               	addwfc	ModbusValidateRequest@startAddrBytes+1,w,c
  7654  0012B6  6E13               	movwf	(??_ModbusValidateRequest+1)& (0+255),c
  7655  0012B8  501C               	movf	ModbusValidateRequest@recLenBytes+2,w,c
  7656  0012BA  2018               	addwfc	ModbusValidateRequest@startAddrBytes+2,w,c
  7657  0012BC  6E14               	movwf	(??_ModbusValidateRequest+2)& (0+255),c
  7658  0012BE  501D               	movf	ModbusValidateRequest@recLenBytes+3,w,c
  7659  0012C0  2019               	addwfc	ModbusValidateRequest@startAddrBytes+3,w,c
  7660  0012C2  6E15               	movwf	(??_ModbusValidateRequest+3)& (0+255),c
  7661  0012C4  5015               	movf	??_ModbusValidateRequest+3,w,c
  7662  0012C6  1014               	iorwf	??_ModbusValidateRequest+2,w,c
  7663  0012C8  E102               	bnz	u3470
  7664  0012CA  0413               	decf	??_ModbusValidateRequest+1,w,c
  7665  0012CC  D76F               	goto	L4
  7666  0012CE                     u3470:
  7667  0012CE  D771               	goto	l4030
  7668  0012D0                     l4106:
  7669  0012D0  FFFF               	dw	65535	; assembler added errata NOP
  7670                           
  7671                           ; BSR set to: 1
  7672  0012D2  5101               	movf	(__au8Buffer+1)& (0+255),w,b
  7673                           
  7674                           ; Switch size 1, requested type "speed"
  7675                           ; Number of cases is 10, Range of values is 1 to 21
  7676                           ; switch strategies available:
  7677                           ; Name         Instructions Cycles
  7678                           ; simple_byte           31    16 (average)
  7679                           ;	Chosen strategy is simple_byte
  7680  0012D4  0A01               	xorlw	1	; case 1
  7681  0012D6  E101 D747          	bz	l4018
  7682  0012DA  0A03               	xorlw	3	; case 2
  7683  0012DC  E101 D744          	bz	l4018
  7684  0012E0  0A01               	xorlw	1	; case 3
  7685  0012E2  E0A2               	bz	l4072
  7686  0012E4  0A07               	xorlw	7	; case 4
  7687  0012E6  E088               	bz	l4060
  7688  0012E8  0A01               	xorlw	1	; case 5
  7689  0012EA  E101 D765          	bz	l4034
  7690  0012EE  0A03               	xorlw	3	; case 6
  7691  0012F0  E101 D773          	bz	l4050
  7692  0012F4  0A09               	xorlw	9	; case 15
  7693  0012F6  E101 D737          	bz	l4018
  7694  0012FA  0A1F               	xorlw	31	; case 16
  7695  0012FC  E095               	bz	l4072
  7696  0012FE  0A01               	xorlw	1	; case 17
  7697  001300  E002               	bz	l4108
  7698  001302  0A04               	xorlw	4	; case 21
  7699  001304  E0A4               	bz	l4084
  7700  001306                     l4108:
  7701  001306  FFFF               	dw	65535	; assembler added errata NOP
  7702                           
  7703                           ;ModbusRtu.c: 756: return 0;
  7704  001308  0E00               	movlw	0
  7705  00130A                     l824:
  7706  00130A  FFFF               	dw	65535	; assembler added errata NOP
  7707  00130C  0012               	return		;funcret
  7708  00130E  FFFF               	dw	65535	; errata NOP
  7709  001310                     __end_of_ModbusValidateRequest:
  7710                           	opt stack 0
  7711                           tblptru	equ	0xFF8
  7712                           tblptrh	equ	0xFF7
  7713                           tblptrl	equ	0xFF6
  7714                           tablat	equ	0xFF5
  7715                           prodh	equ	0xFF4
  7716                           prodl	equ	0xFF3
  7717                           intcon	equ	0xFF2
  7718                           postinc0	equ	0xFEE
  7719                           wreg	equ	0xFE8
  7720                           postdec1	equ	0xFE5
  7721                           fsr1h	equ	0xFE2
  7722                           fsr1l	equ	0xFE1
  7723                           indf2	equ	0xFDF
  7724                           postinc2	equ	0xFDE
  7725                           postdec2	equ	0xFDD
  7726                           plusw2	equ	0xFDB
  7727                           fsr2h	equ	0xFDA
  7728                           fsr2l	equ	0xFD9
  7729                           status	equ	0xFD8
  7730                           
  7731 ;; *************** function _ModbusProcess_FC6 *****************
  7732 ;; Defined at:
  7733 ;;		line 996 in file "ModbusRtu.c"
  7734 ;; Parameters:    Size  Location     Type
  7735 ;;  regs            2   19[COMRAM] PTR unsigned short 
  7736 ;;		 -> _MODBUSHoldingRegs(30), 
  7737 ;;  u8size          1   21[COMRAM] unsigned char 
  7738 ;; Auto vars:     Size  Location     Type
  7739 ;;  u16add          2   27[COMRAM] unsigned short 
  7740 ;;  u16val          2   24[COMRAM] unsigned short 
  7741 ;;  u8CopyBuffer    1   26[COMRAM] unsigned char 
  7742 ;; Return value:  Size  Location     Type
  7743 ;;                  1    wreg      unsigned char 
  7744 ;; Registers used:
  7745 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7746 ;; Tracked objects:
  7747 ;;		On entry : E/1
  7748 ;;		On exit  : 0/0
  7749 ;;		Unchanged: 0/0
  7750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7751 ;;      Params:         3       0       0       0       0       0       0
  7752 ;;      Locals:         5       0       0       0       0       0       0
  7753 ;;      Temps:          2       0       0       0       0       0       0
  7754 ;;      Totals:        10       0       0       0       0       0       0
  7755 ;;Total ram usage:       10 bytes
  7756 ;; Hardware stack levels used:    1
  7757 ;; Hardware stack levels required when called:    4
  7758 ;; This function calls:
  7759 ;;		_ModbusSendTxBuffer
  7760 ;; This function is called by:
  7761 ;;		_ModbusPoll
  7762 ;; This function uses a non-reentrant model
  7763 ;;
  7764                           
  7765                           	psect	text30
  7766  00214C                     __ptext30:
  7767                           	opt stack 0
  7768  00214C                     _ModbusProcess_FC6:
  7769                           	opt stack 25
  7770                           
  7771                           ;incstack = 0
  7772  00214C  FFFF               	dw	65535
  7773                           
  7774                           ;ModbusRtu.c: 998: _lastCommand = MODBUS_COM_WRITE_SINGLE_REGISTER;
  7775  00214E  0E06               	movlw	6
  7776  002150  0100               	movlb	0	; () banked
  7777  002152  6FD8               	movwf	__lastCommand& (0+255),b
  7778                           
  7779                           ;ModbusRtu.c: 1000: uint16_t u16add = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ A
      +                          DD_LO ]);
  7780  002154  0101               	movlb	1	; () banked
  7781  002156  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  7782  002158  6E17               	movwf	??_ModbusProcess_FC6& (0+255),c
  7783  00215A  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  7784  00215C  6E1C               	movwf	ModbusProcess_FC6@u16add,c
  7785  00215E  C017  F01D         	movff	??_ModbusProcess_FC6,ModbusProcess_FC6@u16add+1
  7786                           
  7787                           ; BSR set to: 1
  7788                           ;ModbusRtu.c: 1001: _lastAddress = u16add;
  7789  002162  C01C  F0B6         	movff	ModbusProcess_FC6@u16add,__lastAddress
  7790  002166  C01D  F0B7         	movff	ModbusProcess_FC6@u16add+1,__lastAddress+1
  7791                           
  7792                           ;ModbusRtu.c: 1002: _lastCount = 1;
  7793  00216A  0100               	movlb	0	; () banked
  7794  00216C  6BB9               	clrf	(__lastCount+1)& (0+255),b
  7795  00216E  0E01               	movlw	1
  7796  002170  6FB8               	movwf	__lastCount& (0+255),b
  7797                           
  7798                           ;ModbusRtu.c: 1003: uint8_t u8CopyBufferSize;
  7799                           ;ModbusRtu.c: 1004: uint16_t u16val = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ NB
      +                          _LO ]);
  7800  002172  0101               	movlb	1	; () banked
  7801  002174  5104               	movf	(__au8Buffer+4)& (0+255),w,b
  7802  002176  6E17               	movwf	??_ModbusProcess_FC6& (0+255),c
  7803  002178  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  7804  00217A  6E19               	movwf	ModbusProcess_FC6@u16val,c
  7805  00217C  C017  F01A         	movff	??_ModbusProcess_FC6,ModbusProcess_FC6@u16val+1
  7806                           
  7807                           ; BSR set to: 1
  7808                           ;ModbusRtu.c: 1006: regs[ u16add ] = u16val;
  7809  002180  90D8               	bcf	status,0,c
  7810  002182  341C               	rlcf	ModbusProcess_FC6@u16add,w,c
  7811  002184  6ED9               	movwf	fsr2l,c
  7812  002186  341D               	rlcf	ModbusProcess_FC6@u16add+1,w,c
  7813  002188  6EDA               	movwf	fsr2h,c
  7814  00218A  5014               	movf	ModbusProcess_FC6@regs,w,c
  7815  00218C  26D9               	addwf	fsr2l,f,c
  7816  00218E  5015               	movf	ModbusProcess_FC6@regs+1,w,c
  7817  002190  22DA               	addwfc	fsr2h,f,c
  7818  002192  C019  FFDE         	movff	ModbusProcess_FC6@u16val,postinc2
  7819  002196  C01A  FFDD         	movff	ModbusProcess_FC6@u16val+1,postdec2
  7820                           
  7821                           ; BSR set to: 1
  7822                           ;ModbusRtu.c: 1009: _u8BufferSize = RESPONSE_SIZE;
  7823  00219A  0E06               	movlw	6
  7824  00219C  6E71               	movwf	__u8BufferSize,c
  7825                           
  7826                           ; BSR set to: 1
  7827                           ;ModbusRtu.c: 1011: u8CopyBufferSize = _u8BufferSize +2;
  7828  00219E  5071               	movf	__u8BufferSize,w,c
  7829  0021A0  0F02               	addlw	2
  7830  0021A2  6E1B               	movwf	ModbusProcess_FC6@u8CopyBufferSize,c
  7831                           
  7832                           ; BSR set to: 1
  7833                           ;ModbusRtu.c: 1012: ModbusSendTxBuffer();
  7834  0021A4  EC53  F011         	call	_ModbusSendTxBuffer	;wreg free
  7835                           
  7836                           ;ModbusRtu.c: 1014: return u8CopyBufferSize;
  7837  0021A8  501B               	movf	ModbusProcess_FC6@u8CopyBufferSize,w,c
  7838  0021AA  0012               	return		;funcret
  7839  0021AC  FFFF               	dw	65535	; errata NOP
  7840  0021AE                     __end_of_ModbusProcess_FC6:
  7841                           	opt stack 0
  7842                           tblptru	equ	0xFF8
  7843                           tblptrh	equ	0xFF7
  7844                           tblptrl	equ	0xFF6
  7845                           tablat	equ	0xFF5
  7846                           prodh	equ	0xFF4
  7847                           prodl	equ	0xFF3
  7848                           intcon	equ	0xFF2
  7849                           postinc0	equ	0xFEE
  7850                           wreg	equ	0xFE8
  7851                           postdec1	equ	0xFE5
  7852                           fsr1h	equ	0xFE2
  7853                           fsr1l	equ	0xFE1
  7854                           indf2	equ	0xFDF
  7855                           postinc2	equ	0xFDE
  7856                           postdec2	equ	0xFDD
  7857                           plusw2	equ	0xFDB
  7858                           fsr2h	equ	0xFDA
  7859                           fsr2l	equ	0xFD9
  7860                           status	equ	0xFD8
  7861                           
  7862 ;; *************** function _ModbusProcess_FC5 *****************
  7863 ;; Defined at:
  7864 ;;		line 959 in file "ModbusRtu.c"
  7865 ;; Parameters:    Size  Location     Type
  7866 ;;  regs            1    wreg     PTR unsigned short 
  7867 ;;		 -> _MODBUSCoils(2), 
  7868 ;; Auto vars:     Size  Location     Type
  7869 ;;  regs            1   28[COMRAM] PTR unsigned short 
  7870 ;;		 -> _MODBUSCoils(2), 
  7871 ;;  u16coil         2   25[COMRAM] unsigned short 
  7872 ;;  u8currentBit    1   27[COMRAM] unsigned char 
  7873 ;;  u8CopyBuffer    1   24[COMRAM] unsigned char 
  7874 ;; Return value:  Size  Location     Type
  7875 ;;                  1    wreg      unsigned char 
  7876 ;; Registers used:
  7877 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7878 ;; Tracked objects:
  7879 ;;		On entry : E/1
  7880 ;;		On exit  : 0/0
  7881 ;;		Unchanged: 0/0
  7882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7883 ;;      Params:         0       0       0       0       0       0       0
  7884 ;;      Locals:         5       0       0       0       0       0       0
  7885 ;;      Temps:          5       0       0       0       0       0       0
  7886 ;;      Totals:        10       0       0       0       0       0       0
  7887 ;;Total ram usage:       10 bytes
  7888 ;; Hardware stack levels used:    1
  7889 ;; Hardware stack levels required when called:    4
  7890 ;; This function calls:
  7891 ;;		_ModbusSendTxBuffer
  7892 ;; This function is called by:
  7893 ;;		_ModbusPoll
  7894 ;; This function uses a non-reentrant model
  7895 ;;
  7896                           
  7897                           	psect	text31
  7898  001D66                     __ptext31:
  7899                           	opt stack 0
  7900  001D66                     _ModbusProcess_FC5:
  7901                           	opt stack 25
  7902                           
  7903                           ;incstack = 0
  7904  001D66  FFFF               	dw	65535
  7905                           
  7906                           ;ModbusProcess_FC5@regs stored from wreg
  7907  001D68  6E1D               	movwf	ModbusProcess_FC5@regs,c
  7908                           
  7909                           ;ModbusRtu.c: 961: _lastCommand = MODBUS_COM_WRITE_SINGLE_COIL;
  7910  001D6A  0E05               	movlw	5
  7911  001D6C  0100               	movlb	0	; () banked
  7912  001D6E  6FD8               	movwf	__lastCommand& (0+255),b
  7913                           
  7914                           ; BSR set to: 0
  7915                           ;ModbusRtu.c: 964: uint8_t u8currentBit;
  7916                           ;ModbusRtu.c: 965: uint8_t u8CopyBufferSize;
  7917                           ;ModbusRtu.c: 966: uint16_t u16coil = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ A
      +                          DD_LO ]);
  7918  001D70  0101               	movlb	1	; () banked
  7919  001D72  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  7920  001D74  6E14               	movwf	??_ModbusProcess_FC5& (0+255),c
  7921  001D76  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  7922  001D78  6E1A               	movwf	ModbusProcess_FC5@u16coil,c
  7923  001D7A  C014  F01B         	movff	??_ModbusProcess_FC5,ModbusProcess_FC5@u16coil+1
  7924                           
  7925                           ; BSR set to: 1
  7926                           ;ModbusRtu.c: 967: _lastAddress = u16coil;
  7927  001D7E  C01A  F0B6         	movff	ModbusProcess_FC5@u16coil,__lastAddress
  7928  001D82  C01B  F0B7         	movff	ModbusProcess_FC5@u16coil+1,__lastAddress+1
  7929                           
  7930                           ; BSR set to: 1
  7931                           ;ModbusRtu.c: 968: _lastCount = 1;
  7932  001D86  0100               	movlb	0	; () banked
  7933  001D88  6BB9               	clrf	(__lastCount+1)& (0+255),b
  7934  001D8A  0E01               	movlw	1
  7935  001D8C  6FB8               	movwf	__lastCount& (0+255),b
  7936                           
  7937                           ; BSR set to: 0
  7938                           ;ModbusRtu.c: 971: u8currentBit = (uint8_t) (u16coil % 16);
  7939  001D8E  501A               	movf	ModbusProcess_FC5@u16coil,w,c
  7940  001D90  0B0F               	andlw	15
  7941  001D92  6E1C               	movwf	ModbusProcess_FC5@u8currentBit,c
  7942                           
  7943                           ; BSR set to: 0
  7944                           ;ModbusRtu.c: 974: (_au8Buffer[ NB_HI ] == 0xff ? ((*regs) |= ((unsigned short)1 << (u8c
      +                          urrentBit))) : ((*regs) &= ~((unsigned short)1 << (u8currentBit))));
  7945  001D94  0101               	movlb	1	; () banked
  7946  001D96  2904               	incf	(__au8Buffer+4)& (0+255),w,b
  7947  001D98  E116               	bnz	l4216
  7948                           
  7949                           ; BSR set to: 1
  7950  001D9A  C01C  F014         	movff	ModbusProcess_FC5@u8currentBit,??_ModbusProcess_FC5
  7951  001D9E  0E01               	movlw	1
  7952  001DA0  6E15               	movwf	(??_ModbusProcess_FC5+1)& (0+255),c
  7953  001DA2  6A16               	clrf	(??_ModbusProcess_FC5+2)& (0+255),c
  7954  001DA4  2A14               	incf	??_ModbusProcess_FC5,f,c
  7955  001DA6  D004               	goto	u3584
  7956  001DA8                     u3585:
  7957  001DA8  FFFF               	dw	65535	; assembler added errata NOP
  7958  001DAA  90D8               	bcf	status,0,c
  7959  001DAC  3615               	rlcf	??_ModbusProcess_FC5+1,f,c
  7960  001DAE  3616               	rlcf	??_ModbusProcess_FC5+2,f,c
  7961  001DB0                     u3584:
  7962  001DB0  FFFF               	dw	65535	; assembler added errata NOP
  7963  001DB2  2E14               	decfsz	??_ModbusProcess_FC5,f,c
  7964  001DB4  D7F9               	goto	u3585
  7965  001DB6  501D               	movf	ModbusProcess_FC5@regs,w,c
  7966  001DB8  6ED9               	movwf	fsr2l,c
  7967  001DBA  6ADA               	clrf	fsr2h,c
  7968  001DBC  5015               	movf	??_ModbusProcess_FC5+1,w,c
  7969  001DBE  12DE               	iorwf	postinc2,f,c
  7970  001DC0  5016               	movf	??_ModbusProcess_FC5+2,w,c
  7971  001DC2  12DD               	iorwf	postdec2,f,c
  7972  001DC4  D019               	goto	l4218
  7973  001DC6                     l4216:
  7974                           
  7975                           ; BSR set to: 1
  7976  001DC6  C01C  F014         	movff	ModbusProcess_FC5@u8currentBit,??_ModbusProcess_FC5
  7977  001DCA  0E01               	movlw	1
  7978  001DCC  6E15               	movwf	(??_ModbusProcess_FC5+1)& (0+255),c
  7979  001DCE  6A16               	clrf	(??_ModbusProcess_FC5+2)& (0+255),c
  7980  001DD0  2A14               	incf	??_ModbusProcess_FC5,f,c
  7981  001DD2  D004               	goto	u3594
  7982  001DD4                     u3595:
  7983  001DD4  FFFF               	dw	65535	; assembler added errata NOP
  7984  001DD6  90D8               	bcf	status,0,c
  7985  001DD8  3615               	rlcf	??_ModbusProcess_FC5+1,f,c
  7986  001DDA  3616               	rlcf	??_ModbusProcess_FC5+2,f,c
  7987  001DDC                     u3594:
  7988  001DDC  FFFF               	dw	65535	; assembler added errata NOP
  7989  001DDE  2E14               	decfsz	??_ModbusProcess_FC5,f,c
  7990  001DE0  D7F9               	goto	u3595
  7991  001DE2  1C15               	comf	??_ModbusProcess_FC5+1,w,c
  7992  001DE4  6E17               	movwf	(??_ModbusProcess_FC5+3)& (0+255),c
  7993  001DE6  1C16               	comf	??_ModbusProcess_FC5+2,w,c
  7994  001DE8  6E18               	movwf	(??_ModbusProcess_FC5+4)& (0+255),c
  7995  001DEA  501D               	movf	ModbusProcess_FC5@regs,w,c
  7996  001DEC  6ED9               	movwf	fsr2l,c
  7997  001DEE  6ADA               	clrf	fsr2h,c
  7998  001DF0  5017               	movf	??_ModbusProcess_FC5+3,w,c
  7999  001DF2  16DE               	andwf	postinc2,f,c
  8000  001DF4  5018               	movf	??_ModbusProcess_FC5+4,w,c
  8001  001DF6  16DD               	andwf	postdec2,f,c
  8002  001DF8                     l4218:
  8003  001DF8  FFFF               	dw	65535	; assembler added errata NOP
  8004                           
  8005                           ;ModbusRtu.c: 981: _u8BufferSize = 6;
  8006  001DFA  0E06               	movlw	6
  8007  001DFC  6E71               	movwf	__u8BufferSize,c
  8008                           
  8009                           ;ModbusRtu.c: 982: u8CopyBufferSize = _u8BufferSize +2;
  8010  001DFE  5071               	movf	__u8BufferSize,w,c
  8011  001E00  0F02               	addlw	2
  8012  001E02  6E19               	movwf	ModbusProcess_FC5@u8CopyBufferSize,c
  8013                           
  8014                           ;ModbusRtu.c: 983: ModbusSendTxBuffer();
  8015  001E04  EC53  F011         	call	_ModbusSendTxBuffer	;wreg free
  8016                           
  8017                           ;ModbusRtu.c: 985: return u8CopyBufferSize;
  8018  001E08  5019               	movf	ModbusProcess_FC5@u8CopyBufferSize,w,c
  8019  001E0A  0012               	return		;funcret
  8020  001E0C  FFFF               	dw	65535	; errata NOP
  8021  001E0E                     __end_of_ModbusProcess_FC5:
  8022                           	opt stack 0
  8023                           tblptru	equ	0xFF8
  8024                           tblptrh	equ	0xFF7
  8025                           tblptrl	equ	0xFF6
  8026                           tablat	equ	0xFF5
  8027                           prodh	equ	0xFF4
  8028                           prodl	equ	0xFF3
  8029                           intcon	equ	0xFF2
  8030                           postinc0	equ	0xFEE
  8031                           wreg	equ	0xFE8
  8032                           postdec1	equ	0xFE5
  8033                           fsr1h	equ	0xFE2
  8034                           fsr1l	equ	0xFE1
  8035                           indf2	equ	0xFDF
  8036                           postinc2	equ	0xFDE
  8037                           postdec2	equ	0xFDD
  8038                           plusw2	equ	0xFDB
  8039                           fsr2h	equ	0xFDA
  8040                           fsr2l	equ	0xFD9
  8041                           status	equ	0xFD8
  8042                           
  8043 ;; *************** function _ModbusProcess_FC3 *****************
  8044 ;; Defined at:
  8045 ;;		line 925 in file "ModbusRtu.c"
  8046 ;; Parameters:    Size  Location     Type
  8047 ;;  regs            2   19[COMRAM] PTR unsigned short 
  8048 ;;		 -> _MODBUSHoldingRegs(30), _MODBUSInputRegs(30), 
  8049 ;;  u8size          1   21[COMRAM] unsigned char 
  8050 ;; Auto vars:     Size  Location     Type
  8051 ;;  u16regsno       2   27[COMRAM] unsigned short 
  8052 ;;  i               1   30[COMRAM] unsigned char 
  8053 ;;  u8StartAdd      1   29[COMRAM] unsigned char 
  8054 ;;  u8CopyBuffer    1   26[COMRAM] unsigned char 
  8055 ;; Return value:  Size  Location     Type
  8056 ;;                  1    wreg      unsigned char 
  8057 ;; Registers used:
  8058 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8059 ;; Tracked objects:
  8060 ;;		On entry : E/1
  8061 ;;		On exit  : 0/0
  8062 ;;		Unchanged: 0/0
  8063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8064 ;;      Params:         3       0       0       0       0       0       0
  8065 ;;      Locals:         5       0       0       0       0       0       0
  8066 ;;      Temps:          4       0       0       0       0       0       0
  8067 ;;      Totals:        12       0       0       0       0       0       0
  8068 ;;Total ram usage:       12 bytes
  8069 ;; Hardware stack levels used:    1
  8070 ;; Hardware stack levels required when called:    4
  8071 ;; This function calls:
  8072 ;;		_ModbusSendTxBuffer
  8073 ;; This function is called by:
  8074 ;;		_ModbusPoll
  8075 ;; This function uses a non-reentrant model
  8076 ;;
  8077                           
  8078                           	psect	text32
  8079  001BFA                     __ptext32:
  8080                           	opt stack 0
  8081  001BFA                     _ModbusProcess_FC3:
  8082                           	opt stack 25
  8083                           
  8084                           ;incstack = 0
  8085  001BFA  FFFF               	dw	65535
  8086                           
  8087                           ;ModbusRtu.c: 927: _lastCommand = MODBUS_COM_READ_HOLDING;
  8088  001BFC  0E03               	movlw	3
  8089  001BFE  0100               	movlb	0	; () banked
  8090  001C00  6FD8               	movwf	__lastCommand& (0+255),b
  8091                           
  8092                           ; BSR set to: 0
  8093                           ;ModbusRtu.c: 929: uint8_t u8StartAdd = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[
      +                           ADD_LO ]);
  8094  001C02  C103  F01E         	movff	__au8Buffer+3,ModbusProcess_FC3@u8StartAdd
  8095                           
  8096                           ; BSR set to: 0
  8097                           ;ModbusRtu.c: 930: _lastAddress = u8StartAdd;
  8098  001C06  C01E  F0B6         	movff	ModbusProcess_FC3@u8StartAdd,__lastAddress
  8099  001C0A  6BB7               	clrf	(__lastAddress+1)& (0+255),b
  8100                           
  8101                           ;ModbusRtu.c: 931: uint16_t u16regsno = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ 
      +                          NB_LO ]);
  8102  001C0C  0101               	movlb	1	; () banked
  8103  001C0E  5104               	movf	(__au8Buffer+4)& (0+255),w,b
  8104  001C10  6E17               	movwf	??_ModbusProcess_FC3& (0+255),c
  8105  001C12  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  8106  001C14  6E1C               	movwf	ModbusProcess_FC3@u16regsno,c
  8107  001C16  C017  F01D         	movff	??_ModbusProcess_FC3,ModbusProcess_FC3@u16regsno+1
  8108                           
  8109                           ; BSR set to: 1
  8110                           ;ModbusRtu.c: 932: _lastCount = u16regsno;
  8111  001C1A  C01C  F0B8         	movff	ModbusProcess_FC3@u16regsno,__lastCount
  8112  001C1E  C01D  F0B9         	movff	ModbusProcess_FC3@u16regsno+1,__lastCount+1
  8113                           
  8114                           ; BSR set to: 1
  8115                           ;ModbusRtu.c: 933: uint8_t u8CopyBufferSize;
  8116                           ;ModbusRtu.c: 934: uint8_t i;
  8117                           ;ModbusRtu.c: 936: _au8Buffer[ 2 ] = u16regsno * 2;
  8118  001C22  501C               	movf	ModbusProcess_FC3@u16regsno,w,c
  8119  001C24  241C               	addwf	ModbusProcess_FC3@u16regsno,w,c
  8120  001C26  6F02               	movwf	(__au8Buffer+2)& (0+255),b
  8121                           
  8122                           ; BSR set to: 1
  8123                           ;ModbusRtu.c: 937: _u8BufferSize = 3;
  8124  001C28  0E03               	movlw	3
  8125  001C2A  6E71               	movwf	__u8BufferSize,c
  8126                           
  8127                           ; BSR set to: 1
  8128                           ;ModbusRtu.c: 939: for (i = u8StartAdd; i < u8StartAdd + u16regsno; i++) {
  8129  001C2C  C01E  F01F         	movff	ModbusProcess_FC3@u8StartAdd,ModbusProcess_FC3@i
  8130  001C30  D02A               	goto	l4192
  8131  001C32                     l4186:
  8132                           
  8133                           ; BSR set to: 1
  8134                           ;ModbusRtu.c: 940: _au8Buffer[ _u8BufferSize ] = ((unsigned char)(((regs[i])>>8)&0xFF));
  8135  001C32  0E00               	movlw	low __au8Buffer
  8136  001C34  2471               	addwf	__u8BufferSize,w,c
  8137  001C36  6ED9               	movwf	fsr2l,c
  8138  001C38  6ADA               	clrf	fsr2h,c
  8139  001C3A  0E01               	movlw	high __au8Buffer
  8140  001C3C  22DA               	addwfc	fsr2h,f,c
  8141  001C3E  501F               	movf	ModbusProcess_FC3@i,w,c
  8142  001C40  0D02               	mullw	2
  8143  001C42  50F3               	movf	prodl,w,c
  8144  001C44  2414               	addwf	ModbusProcess_FC3@regs,w,c
  8145  001C46  6EE1               	movwf	fsr1l,c
  8146  001C48  50F4               	movf	prodh,w,c
  8147  001C4A  2015               	addwfc	ModbusProcess_FC3@regs+1,w,c
  8148  001C4C  6EE2               	movwf	fsr1h,c
  8149  001C4E  CFE6 F017          	movff	postinc1,??_ModbusProcess_FC3
  8150  001C52  CFE5 F018          	movff	postdec1,??_ModbusProcess_FC3+1
  8151  001C56  C018  F017         	movff	??_ModbusProcess_FC3+1,??_ModbusProcess_FC3
  8152  001C5A  6A18               	clrf	??_ModbusProcess_FC3+1,c
  8153  001C5C  5017               	movf	??_ModbusProcess_FC3,w,c
  8154  001C5E  6EDF               	movwf	indf2,c
  8155                           
  8156                           ; BSR set to: 1
  8157                           ;ModbusRtu.c: 941: _u8BufferSize++;
  8158  001C60  2A71               	incf	__u8BufferSize,f,c
  8159                           
  8160                           ; BSR set to: 1
  8161                           ;ModbusRtu.c: 942: _au8Buffer[ _u8BufferSize ] = ((unsigned char)((regs[i])&0xFF));
  8162  001C62  501F               	movf	ModbusProcess_FC3@i,w,c
  8163  001C64  0D02               	mullw	2
  8164  001C66  50F3               	movf	prodl,w,c
  8165  001C68  2414               	addwf	ModbusProcess_FC3@regs,w,c
  8166  001C6A  6ED9               	movwf	fsr2l,c
  8167  001C6C  50F4               	movf	prodh,w,c
  8168  001C6E  2015               	addwfc	ModbusProcess_FC3@regs+1,w,c
  8169  001C70  6EDA               	movwf	fsr2h,c
  8170  001C72  0E00               	movlw	low __au8Buffer
  8171  001C74  2471               	addwf	__u8BufferSize,w,c
  8172  001C76  6EE1               	movwf	fsr1l,c
  8173  001C78  6AE2               	clrf	fsr1h,c
  8174  001C7A  0E01               	movlw	high __au8Buffer
  8175  001C7C  22E2               	addwfc	fsr1h,f,c
  8176  001C7E  CFDF FFE7          	movff	indf2,indf1
  8177                           
  8178                           ;ModbusRtu.c: 943: _u8BufferSize++;
  8179  001C82  2A71               	incf	__u8BufferSize,f,c
  8180  001C84  2A1F               	incf	ModbusProcess_FC3@i,f,c
  8181  001C86                     l4192:
  8182  001C86  FFFF               	dw	65535	; assembler added errata NOP
  8183                           
  8184                           ; BSR set to: 1
  8185  001C88  501E               	movf	ModbusProcess_FC3@u8StartAdd,w,c
  8186  001C8A  241C               	addwf	ModbusProcess_FC3@u16regsno,w,c
  8187  001C8C  6E17               	movwf	??_ModbusProcess_FC3& (0+255),c
  8188  001C8E  0E00               	movlw	0
  8189  001C90  201D               	addwfc	ModbusProcess_FC3@u16regsno+1,w,c
  8190  001C92  6E18               	movwf	(??_ModbusProcess_FC3+1)& (0+255),c
  8191  001C94  501F               	movf	ModbusProcess_FC3@i,w,c
  8192  001C96  6E19               	movwf	(??_ModbusProcess_FC3+2)& (0+255),c
  8193  001C98  6A1A               	clrf	(??_ModbusProcess_FC3+3)& (0+255),c
  8194  001C9A  5017               	movf	??_ModbusProcess_FC3,w,c
  8195  001C9C  5C19               	subwf	??_ModbusProcess_FC3+2,w,c
  8196  001C9E  5018               	movf	??_ModbusProcess_FC3+1,w,c
  8197  001CA0  581A               	subwfb	??_ModbusProcess_FC3+3,w,c
  8198  001CA2  E3C7               	bnc	l4186
  8199                           
  8200                           ; BSR set to: 1
  8201                           ;ModbusRtu.c: 944: }
  8202                           ;ModbusRtu.c: 945: u8CopyBufferSize = _u8BufferSize +2;
  8203  001CA4  5071               	movf	__u8BufferSize,w,c
  8204  001CA6  0F02               	addlw	2
  8205  001CA8  6E1B               	movwf	ModbusProcess_FC3@u8CopyBufferSize,c
  8206                           
  8207                           ; BSR set to: 1
  8208                           ;ModbusRtu.c: 946: ModbusSendTxBuffer();
  8209  001CAA  EC53  F011         	call	_ModbusSendTxBuffer	;wreg free
  8210                           
  8211                           ;ModbusRtu.c: 948: return u8CopyBufferSize;
  8212  001CAE  501B               	movf	ModbusProcess_FC3@u8CopyBufferSize,w,c
  8213  001CB0  0012               	return		;funcret
  8214  001CB2  FFFF               	dw	65535	; errata NOP
  8215  001CB4                     __end_of_ModbusProcess_FC3:
  8216                           	opt stack 0
  8217                           tblptru	equ	0xFF8
  8218                           tblptrh	equ	0xFF7
  8219                           tblptrl	equ	0xFF6
  8220                           tablat	equ	0xFF5
  8221                           prodh	equ	0xFF4
  8222                           prodl	equ	0xFF3
  8223                           intcon	equ	0xFF2
  8224                           postinc0	equ	0xFEE
  8225                           wreg	equ	0xFE8
  8226                           indf1	equ	0xFE7
  8227                           postinc1	equ	0xFE6
  8228                           postdec1	equ	0xFE5
  8229                           fsr1h	equ	0xFE2
  8230                           fsr1l	equ	0xFE1
  8231                           indf2	equ	0xFDF
  8232                           postinc2	equ	0xFDE
  8233                           postdec2	equ	0xFDD
  8234                           plusw2	equ	0xFDB
  8235                           fsr2h	equ	0xFDA
  8236                           fsr2l	equ	0xFD9
  8237                           status	equ	0xFD8
  8238                           
  8239 ;; *************** function _ModbusProcess_FC21 *****************
  8240 ;; Defined at:
  8241 ;;		line 1145 in file "ModbusRtu.c"
  8242 ;; Parameters:    Size  Location     Type
  8243 ;;		None
  8244 ;; Auto vars:     Size  Location     Type
  8245 ;;  recLenBytes     2   25[COMRAM] unsigned short 
  8246 ;;  startAddrsBy    2   23[COMRAM] unsigned short 
  8247 ;;  i               1   27[COMRAM] unsigned char 
  8248 ;;  u8CopyBuffer    1   22[COMRAM] unsigned char 
  8249 ;;  requestDataL    1   21[COMRAM] unsigned char 
  8250 ;; Return value:  Size  Location     Type
  8251 ;;                  1    wreg      unsigned char 
  8252 ;; Registers used:
  8253 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8254 ;; Tracked objects:
  8255 ;;		On entry : E/1
  8256 ;;		On exit  : 0/0
  8257 ;;		Unchanged: 0/0
  8258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8259 ;;      Params:         0       0       0       0       0       0       0
  8260 ;;      Locals:         7       0       0       0       0       0       0
  8261 ;;      Temps:          2       0       0       0       0       0       0
  8262 ;;      Totals:         9       0       0       0       0       0       0
  8263 ;;Total ram usage:        9 bytes
  8264 ;; Hardware stack levels used:    1
  8265 ;; Hardware stack levels required when called:    4
  8266 ;; This function calls:
  8267 ;;		_ModbusSendTxBuffer
  8268 ;; This function is called by:
  8269 ;;		_ModbusPoll
  8270 ;; This function uses a non-reentrant model
  8271 ;;
  8272                           
  8273                           	psect	text33
  8274  001CB4                     __ptext33:
  8275                           	opt stack 0
  8276  001CB4                     _ModbusProcess_FC21:
  8277                           	opt stack 25
  8278                           
  8279                           ;incstack = 0
  8280  001CB4  FFFF               	dw	65535
  8281                           
  8282                           ;ModbusRtu.c: 1147: _lastCommand = MODBUS_COM_WRITE_FILE_RECORD;
  8283  001CB6  0E15               	movlw	21
  8284  001CB8  0100               	movlb	0	; () banked
  8285  001CBA  6FD8               	movwf	__lastCommand& (0+255),b
  8286                           
  8287                           ; BSR set to: 0
  8288                           ;ModbusRtu.c: 1150: int8_t requestDataLen = _au8Buffer[ FILE_DATA_LEN ];
  8289  001CBC  C102  F016         	movff	__au8Buffer+2,ModbusProcess_FC21@requestDataLen
  8290                           
  8291                           ; BSR set to: 0
  8292                           ;ModbusRtu.c: 1152: uint16_t startAddrsBytes = ((((uint16_t)_au8Buffer[ FILE_REC_HI ]<<8
      +                          )|_au8Buffer[ FILE_REC_LO ])) << 1;
  8293  001CC0  0101               	movlb	1	; () banked
  8294  001CC2  5107               	movf	(__au8Buffer+7)& (0+255),w,b
  8295  001CC4  C106  F014         	movff	__au8Buffer+6,??_ModbusProcess_FC21
  8296  001CC8  6A15               	clrf	(??_ModbusProcess_FC21+1)& (0+255),c
  8297  001CCA  C014  F015         	movff	??_ModbusProcess_FC21,??_ModbusProcess_FC21+1
  8298  001CCE  6A14               	clrf	??_ModbusProcess_FC21,c
  8299  001CD0  1214               	iorwf	??_ModbusProcess_FC21,f,c
  8300  001CD2  90D8               	bcf	status,0,c
  8301  001CD4  3414               	rlcf	??_ModbusProcess_FC21,w,c
  8302  001CD6  6E18               	movwf	ModbusProcess_FC21@startAddrsBytes,c
  8303  001CD8  3415               	rlcf	??_ModbusProcess_FC21+1,w,c
  8304  001CDA  6E19               	movwf	ModbusProcess_FC21@startAddrsBytes+1,c
  8305                           
  8306                           ; BSR set to: 1
  8307                           ;ModbusRtu.c: 1153: _lastAddress = startAddrsBytes;
  8308  001CDC  C018  F0B6         	movff	ModbusProcess_FC21@startAddrsBytes,__lastAddress
  8309  001CE0  C019  F0B7         	movff	ModbusProcess_FC21@startAddrsBytes+1,__lastAddress+1
  8310                           
  8311                           ; BSR set to: 1
  8312                           ;ModbusRtu.c: 1154: uint16_t recLenBytes = ((((uint16_t)_au8Buffer[ FILE_REC_LEN_HI ]<<8
      +                          )|_au8Buffer[ FILE_REC_LEN_LO ])) << 1;
  8313  001CE4  5109               	movf	(__au8Buffer+9)& (0+255),w,b
  8314  001CE6  C108  F014         	movff	__au8Buffer+8,??_ModbusProcess_FC21
  8315  001CEA  6A15               	clrf	(??_ModbusProcess_FC21+1)& (0+255),c
  8316  001CEC  C014  F015         	movff	??_ModbusProcess_FC21,??_ModbusProcess_FC21+1
  8317  001CF0  6A14               	clrf	??_ModbusProcess_FC21,c
  8318  001CF2  1214               	iorwf	??_ModbusProcess_FC21,f,c
  8319  001CF4  90D8               	bcf	status,0,c
  8320  001CF6  3414               	rlcf	??_ModbusProcess_FC21,w,c
  8321  001CF8  6E1A               	movwf	ModbusProcess_FC21@recLenBytes,c
  8322  001CFA  3415               	rlcf	??_ModbusProcess_FC21+1,w,c
  8323  001CFC  6E1B               	movwf	ModbusProcess_FC21@recLenBytes+1,c
  8324                           
  8325                           ; BSR set to: 1
  8326                           ;ModbusRtu.c: 1155: _lastCount = recLenBytes;
  8327  001CFE  C01A  F0B8         	movff	ModbusProcess_FC21@recLenBytes,__lastCount
  8328  001D02  C01B  F0B9         	movff	ModbusProcess_FC21@recLenBytes+1,__lastCount+1
  8329                           
  8330                           ; BSR set to: 1
  8331                           ;ModbusRtu.c: 1156: uint8_t u8CopyBufferSize;
  8332                           ;ModbusRtu.c: 1157: uint8_t i;
  8333                           ;ModbusRtu.c: 1163: _u8BufferSize = requestDataLen + 1;
  8334  001D06  2816               	incf	ModbusProcess_FC21@requestDataLen,w,c
  8335  001D08  6E71               	movwf	__u8BufferSize,c
  8336                           
  8337                           ; BSR set to: 1
  8338                           ;ModbusRtu.c: 1167: for (i = 0; i < recLenBytes; i++)
  8339  001D0A  6A1C               	clrf	ModbusProcess_FC21@i,c
  8340  001D0C  D01C               	goto	l4390
  8341  001D0E                     l921:
  8342  001D0E  FFFF               	dw	65535	; assembler added errata NOP
  8343                           
  8344                           ; BSR set to: 1
  8345  001D10  B2A6               	btfsc	4006,1,c	;volatile
  8346  001D12  D7FD               	goto	l921
  8347                           
  8348                           ; BSR set to: 1
  8349  001D14  501C               	movf	ModbusProcess_FC21@i,w,c
  8350  001D16  2418               	addwf	ModbusProcess_FC21@startAddrsBytes,w,c
  8351  001D18  6EA9               	movwf	4009,c	;volatile
  8352                           
  8353                           ; BSR set to: 1
  8354  001D1A  0E0A               	movlw	low (__au8Buffer+10)
  8355  001D1C  241C               	addwf	ModbusProcess_FC21@i,w,c
  8356  001D1E  6ED9               	movwf	fsr2l,c
  8357  001D20  6ADA               	clrf	fsr2h,c
  8358  001D22  0E01               	movlw	high (__au8Buffer+10)
  8359  001D24  22DA               	addwfc	fsr2h,f,c
  8360  001D26  50DF               	movf	indf2,w,c
  8361  001D28  6EA8               	movwf	4008,c	;volatile
  8362                           
  8363                           ; BSR set to: 1
  8364  001D2A  90D8               	bcf	status,0,c	;volatile
  8365                           
  8366                           ; BSR set to: 1
  8367  001D2C  BEF2               	btfsc	intcon,7,c	;volatile
  8368                           
  8369                           ; BSR set to: 1
  8370  001D2E  80D8               	bsf	status,0,c	;volatile
  8371                           
  8372                           ; BSR set to: 1
  8373  001D30  9EF2               	bcf	intcon,7,c	;volatile
  8374  001D32  84A6               	bsf	4006,2,c	;volatile
  8375                           
  8376                           ; BSR set to: 1
  8377  001D34  0E55               	movlw	85
  8378  001D36  6EA7               	movwf	4007,c	;volatile
  8379  001D38  0EAA               	movlw	170
  8380  001D3A  6EA7               	movwf	4007,c	;volatile
  8381                           
  8382                           ; BSR set to: 1
  8383  001D3C  82A6               	bsf	4006,1,c	;volatile
  8384                           
  8385                           ; BSR set to: 1
  8386  001D3E  94A6               	bcf	4006,2,c	;volatile
  8387                           
  8388                           ; BSR set to: 1
  8389  001D40  E301               	bnc	l4388
  8390                           
  8391                           ; BSR set to: 1
  8392  001D42  8EF2               	bsf	intcon,7,c	;volatile
  8393  001D44                     l4388:
  8394                           
  8395                           ; BSR set to: 1
  8396  001D44  2A1C               	incf	ModbusProcess_FC21@i,f,c
  8397  001D46                     l4390:
  8398  001D46  FFFF               	dw	65535	; assembler added errata NOP
  8399                           
  8400                           ; BSR set to: 1
  8401  001D48  501C               	movf	ModbusProcess_FC21@i,w,c
  8402  001D4A  6E14               	movwf	??_ModbusProcess_FC21& (0+255),c
  8403  001D4C  6A15               	clrf	(??_ModbusProcess_FC21+1)& (0+255),c
  8404  001D4E  501A               	movf	ModbusProcess_FC21@recLenBytes,w,c
  8405  001D50  5C14               	subwf	??_ModbusProcess_FC21,w,c
  8406  001D52  501B               	movf	ModbusProcess_FC21@recLenBytes+1,w,c
  8407  001D54  5815               	subwfb	??_ModbusProcess_FC21+1,w,c
  8408  001D56  E3DB               	bnc	l921
  8409                           
  8410                           ; BSR set to: 1
  8411                           ;ModbusRtu.c: 1170: }
  8412                           ;ModbusRtu.c: 1172: u8CopyBufferSize = _u8BufferSize;
  8413  001D58  C071  F017         	movff	__u8BufferSize,ModbusProcess_FC21@u8CopyBufferSize
  8414                           
  8415                           ; BSR set to: 1
  8416                           ;ModbusRtu.c: 1173: ModbusSendTxBuffer();
  8417  001D5C  EC53  F011         	call	_ModbusSendTxBuffer	;wreg free
  8418                           
  8419                           ;ModbusRtu.c: 1175: return u8CopyBufferSize;
  8420  001D60  5017               	movf	ModbusProcess_FC21@u8CopyBufferSize,w,c
  8421  001D62  0012               	return		;funcret
  8422  001D64  FFFF               	dw	65535	; errata NOP
  8423  001D66                     __end_of_ModbusProcess_FC21:
  8424                           	opt stack 0
  8425                           tblptru	equ	0xFF8
  8426                           tblptrh	equ	0xFF7
  8427                           tblptrl	equ	0xFF6
  8428                           tablat	equ	0xFF5
  8429                           prodh	equ	0xFF4
  8430                           prodl	equ	0xFF3
  8431                           intcon	equ	0xFF2
  8432                           postinc0	equ	0xFEE
  8433                           wreg	equ	0xFE8
  8434                           indf1	equ	0xFE7
  8435                           postinc1	equ	0xFE6
  8436                           postdec1	equ	0xFE5
  8437                           fsr1h	equ	0xFE2
  8438                           fsr1l	equ	0xFE1
  8439                           indf2	equ	0xFDF
  8440                           postinc2	equ	0xFDE
  8441                           postdec2	equ	0xFDD
  8442                           plusw2	equ	0xFDB
  8443                           fsr2h	equ	0xFDA
  8444                           fsr2l	equ	0xFD9
  8445                           status	equ	0xFD8
  8446                           
  8447 ;; *************** function _ModbusProcess_FC17 *****************
  8448 ;; Defined at:
  8449 ;;		line 1122 in file "ModbusRtu.c"
  8450 ;; Parameters:    Size  Location     Type
  8451 ;;		None
  8452 ;; Auto vars:     Size  Location     Type
  8453 ;;  i               1   20[COMRAM] unsigned char 
  8454 ;;  u8CopyBuffer    1   19[COMRAM] unsigned char 
  8455 ;; Return value:  Size  Location     Type
  8456 ;;                  1    wreg      unsigned char 
  8457 ;; Registers used:
  8458 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8459 ;; Tracked objects:
  8460 ;;		On entry : E/1
  8461 ;;		On exit  : 0/0
  8462 ;;		Unchanged: 0/0
  8463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8464 ;;      Params:         0       0       0       0       0       0       0
  8465 ;;      Locals:         2       0       0       0       0       0       0
  8466 ;;      Temps:          0       0       0       0       0       0       0
  8467 ;;      Totals:         2       0       0       0       0       0       0
  8468 ;;Total ram usage:        2 bytes
  8469 ;; Hardware stack levels used:    1
  8470 ;; Hardware stack levels required when called:    4
  8471 ;; This function calls:
  8472 ;;		_ModbusSendTxBuffer
  8473 ;; This function is called by:
  8474 ;;		_ModbusPoll
  8475 ;; This function uses a non-reentrant model
  8476 ;;
  8477                           
  8478                           	psect	text34
  8479  0022F2                     __ptext34:
  8480                           	opt stack 0
  8481  0022F2                     _ModbusProcess_FC17:
  8482                           	opt stack 25
  8483                           
  8484                           ;incstack = 0
  8485  0022F2  FFFF               	dw	65535
  8486                           
  8487                           ;ModbusRtu.c: 1124: _au8Buffer[ 2 ] = sizeof("Tablo s raspisaniem") + 1 + 1;
  8488  0022F4  0E16               	movlw	22
  8489  0022F6  0101               	movlb	1	; () banked
  8490  0022F8  6F02               	movwf	(__au8Buffer+2)& (0+255),b
  8491                           
  8492                           ;ModbusRtu.c: 1126: _u8BufferSize = 3;
  8493  0022FA  0E03               	movlw	3
  8494  0022FC  6E71               	movwf	__u8BufferSize,c
  8495                           
  8496                           ; BSR set to: 1
  8497                           ;ModbusRtu.c: 1128: for(uint8_t i = 0; i < sizeof("Tablo s raspisaniem"); i++, _u8Buffer
      +                          Size++)
  8498  0022FE  6A15               	clrf	ModbusProcess_FC17@i,c
  8499  002300                     l4336:
  8500  002300  FFFF               	dw	65535	; assembler added errata NOP
  8501                           
  8502                           ; BSR set to: 1
  8503                           ;ModbusRtu.c: 1129: _au8Buffer[_u8BufferSize] = "Tablo s raspisaniem"[i];
  8504  002302  0EA6               	movlw	low STR_3
  8505  002304  2415               	addwf	ModbusProcess_FC17@i,w,c
  8506  002306  6EF6               	movwf	tblptrl,c
  8507  002308  6AF7               	clrf	tblptrh,c
  8508  00230A  0E7D               	movlw	high STR_3
  8509  00230C  22F7               	addwfc	tblptrh,f,c
  8510  00230E                     	if	0	;There are less than 3 active tblptr bytes
  8511  00230E                     	endif
  8512  00230E  0E00               	movlw	low __au8Buffer
  8513  002310  2471               	addwf	__u8BufferSize,w,c
  8514  002312  6ED9               	movwf	fsr2l,c
  8515  002314  6ADA               	clrf	fsr2h,c
  8516  002316  0E01               	movlw	high __au8Buffer
  8517  002318  22DA               	addwfc	fsr2h,f,c
  8518  00231A  0008               	tblrd		*
  8519  00231C  FFFF               	dw	65535	; errata NOP
  8520  00231E  CFF5 FFDF          	movff	tablat,indf2
  8521                           
  8522                           ; BSR set to: 1
  8523  002322  2A15               	incf	ModbusProcess_FC17@i,f,c
  8524                           
  8525                           ; BSR set to: 1
  8526  002324  2A71               	incf	__u8BufferSize,f,c
  8527                           
  8528                           ; BSR set to: 1
  8529  002326  0E13               	movlw	19
  8530  002328  6415               	cpfsgt	ModbusProcess_FC17@i,c
  8531  00232A  D7EA               	goto	l4336
  8532                           
  8533                           ; BSR set to: 1
  8534                           ;ModbusRtu.c: 1131: uint8_t u8CopyBufferSize = _u8BufferSize +2;
  8535  00232C  5071               	movf	__u8BufferSize,w,c
  8536  00232E  0F02               	addlw	2
  8537  002330  6E14               	movwf	ModbusProcess_FC17@u8CopyBufferSize,c
  8538                           
  8539                           ; BSR set to: 1
  8540                           ;ModbusRtu.c: 1132: ModbusSendTxBuffer();
  8541  002332  EC53  F011         	call	_ModbusSendTxBuffer	;wreg free
  8542                           
  8543                           ;ModbusRtu.c: 1134: return u8CopyBufferSize;
  8544  002336  5014               	movf	ModbusProcess_FC17@u8CopyBufferSize,w,c
  8545  002338  0012               	return		;funcret
  8546  00233A  FFFF               	dw	65535	; errata NOP
  8547  00233C                     __end_of_ModbusProcess_FC17:
  8548                           	opt stack 0
  8549                           tblptru	equ	0xFF8
  8550                           tblptrh	equ	0xFF7
  8551                           tblptrl	equ	0xFF6
  8552                           tablat	equ	0xFF5
  8553                           prodh	equ	0xFF4
  8554                           prodl	equ	0xFF3
  8555                           intcon	equ	0xFF2
  8556                           postinc0	equ	0xFEE
  8557                           wreg	equ	0xFE8
  8558                           indf1	equ	0xFE7
  8559                           postinc1	equ	0xFE6
  8560                           postdec1	equ	0xFE5
  8561                           fsr1h	equ	0xFE2
  8562                           fsr1l	equ	0xFE1
  8563                           indf2	equ	0xFDF
  8564                           postinc2	equ	0xFDE
  8565                           postdec2	equ	0xFDD
  8566                           plusw2	equ	0xFDB
  8567                           fsr2h	equ	0xFDA
  8568                           fsr2l	equ	0xFD9
  8569                           status	equ	0xFD8
  8570                           
  8571 ;; *************** function _ModbusProcess_FC16 *****************
  8572 ;; Defined at:
  8573 ;;		line 1082 in file "ModbusRtu.c"
  8574 ;; Parameters:    Size  Location     Type
  8575 ;;  regs            2   19[COMRAM] PTR unsigned short 
  8576 ;;		 -> _MODBUSHoldingRegs(30), 
  8577 ;;  u8size          1   21[COMRAM] unsigned char 
  8578 ;; Auto vars:     Size  Location     Type
  8579 ;;  u16StartAdd     2   29[COMRAM] unsigned short 
  8580 ;;  temp            2   26[COMRAM] unsigned short 
  8581 ;;  i               1   32[COMRAM] unsigned char 
  8582 ;;  u8regsno        1   31[COMRAM] unsigned char 
  8583 ;;  u8CopyBuffer    1   28[COMRAM] unsigned char 
  8584 ;; Return value:  Size  Location     Type
  8585 ;;                  1    wreg      unsigned char 
  8586 ;; Registers used:
  8587 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8588 ;; Tracked objects:
  8589 ;;		On entry : E/1
  8590 ;;		On exit  : 0/0
  8591 ;;		Unchanged: 0/0
  8592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8593 ;;      Params:         3       0       0       0       0       0       0
  8594 ;;      Locals:         7       0       0       0       0       0       0
  8595 ;;      Temps:          4       0       0       0       0       0       0
  8596 ;;      Totals:        14       0       0       0       0       0       0
  8597 ;;Total ram usage:       14 bytes
  8598 ;; Hardware stack levels used:    1
  8599 ;; Hardware stack levels required when called:    4
  8600 ;; This function calls:
  8601 ;;		_ModbusSendTxBuffer
  8602 ;; This function is called by:
  8603 ;;		_ModbusPoll
  8604 ;; This function uses a non-reentrant model
  8605 ;;
  8606                           
  8607                           	psect	text35
  8608  0019AA                     __ptext35:
  8609                           	opt stack 0
  8610  0019AA                     _ModbusProcess_FC16:
  8611                           	opt stack 25
  8612                           
  8613                           ;incstack = 0
  8614  0019AA  FFFF               	dw	65535
  8615                           
  8616                           ;ModbusRtu.c: 1084: _lastCommand = MODBUS_COM_WRITE_MULTIPLE_REGISTERS;
  8617  0019AC  0E10               	movlw	16
  8618  0019AE  0100               	movlb	0	; () banked
  8619  0019B0  6FD8               	movwf	__lastCommand& (0+255),b
  8620                           
  8621                           ; BSR set to: 0
  8622                           ;ModbusRtu.c: 1086: uint16_t u16StartAdd = _au8Buffer[ ADD_HI ] << 8 | _au8Buffer[ ADD_L
      +                          O ];
  8623  0019B2  0101               	movlb	1	; () banked
  8624  0019B4  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  8625  0019B6  C102  F017         	movff	__au8Buffer+2,??_ModbusProcess_FC16
  8626  0019BA  6A18               	clrf	(??_ModbusProcess_FC16+1)& (0+255),c
  8627  0019BC  C017  F018         	movff	??_ModbusProcess_FC16,??_ModbusProcess_FC16+1
  8628  0019C0  6A17               	clrf	??_ModbusProcess_FC16,c
  8629  0019C2  1017               	iorwf	??_ModbusProcess_FC16,w,c
  8630  0019C4  6E1E               	movwf	ModbusProcess_FC16@u16StartAdd,c
  8631  0019C6  5018               	movf	??_ModbusProcess_FC16+1,w,c
  8632  0019C8  6E1F               	movwf	ModbusProcess_FC16@u16StartAdd+1,c
  8633                           
  8634                           ; BSR set to: 1
  8635                           ;ModbusRtu.c: 1087: _lastAddress = u16StartAdd;
  8636  0019CA  C01E  F0B6         	movff	ModbusProcess_FC16@u16StartAdd,__lastAddress
  8637  0019CE  C01F  F0B7         	movff	ModbusProcess_FC16@u16StartAdd+1,__lastAddress+1
  8638                           
  8639                           ; BSR set to: 1
  8640                           ;ModbusRtu.c: 1088: int8_t u8regsno = _au8Buffer[ NB_HI ] << 8 | _au8Buffer[ NB_LO ];
  8641  0019D2  C105  F020         	movff	__au8Buffer+5,ModbusProcess_FC16@u8regsno
  8642                           
  8643                           ; BSR set to: 1
  8644                           ;ModbusRtu.c: 1089: _lastCount = u8regsno;
  8645  0019D6  C020  F0B8         	movff	ModbusProcess_FC16@u8regsno,__lastCount
  8646  0019DA  0100               	movlb	0	; () banked
  8647  0019DC  6BB9               	clrf	(__lastCount+1)& (0+255),b
  8648                           
  8649                           ; BSR set to: 0
  8650                           ;ModbusRtu.c: 1090: uint8_t u8CopyBufferSize;
  8651                           ;ModbusRtu.c: 1091: uint8_t i;
  8652                           ;ModbusRtu.c: 1092: uint16_t temp;
  8653                           ;ModbusRtu.c: 1095: _au8Buffer[ NB_HI ] = 0;
  8654  0019DE  0101               	movlb	1	; () banked
  8655  0019E0  6B04               	clrf	(__au8Buffer+4)& (0+255),b
  8656                           
  8657                           ; BSR set to: 1
  8658                           ;ModbusRtu.c: 1096: _au8Buffer[ NB_LO ] = u8regsno;
  8659  0019E2  C020  F105         	movff	ModbusProcess_FC16@u8regsno,__au8Buffer+5
  8660                           
  8661                           ; BSR set to: 1
  8662                           ;ModbusRtu.c: 1097: _u8BufferSize = RESPONSE_SIZE;
  8663  0019E6  0E06               	movlw	6
  8664  0019E8  6E71               	movwf	__u8BufferSize,c
  8665                           
  8666                           ; BSR set to: 1
  8667                           ;ModbusRtu.c: 1100: for (i = 0; i < u8regsno && (u16StartAdd + i) < u8size; i++)
  8668  0019EA  6A21               	clrf	ModbusProcess_FC16@i,c
  8669  0019EC  D02C               	goto	l4316
  8670  0019EE                     l4310:
  8671                           
  8672                           ; BSR set to: 1
  8673                           ;ModbusRtu.c: 1101: {
  8674                           ;ModbusRtu.c: 1102: temp = (((uint16_t)_au8Buffer[ (BYTE_CNT + 1) + i * 2 ]<<8)|_au8Buff
      +                          er[ (BYTE_CNT + 2) + i * 2 ]);
  8675  0019EE  5021               	movf	ModbusProcess_FC16@i,w,c
  8676  0019F0  0D02               	mullw	2
  8677  0019F2  0E08               	movlw	low (__au8Buffer+8)
  8678  0019F4  24F3               	addwf	prodl,w,c
  8679  0019F6  6ED9               	movwf	fsr2l,c
  8680  0019F8  0E01               	movlw	high (__au8Buffer+8)
  8681  0019FA  20F4               	addwfc	prodh,w,c
  8682  0019FC  6EDA               	movwf	fsr2h,c
  8683  0019FE  50DF               	movf	indf2,w,c
  8684  001A00  6E17               	movwf	??_ModbusProcess_FC16& (0+255),c
  8685  001A02  5021               	movf	ModbusProcess_FC16@i,w,c
  8686  001A04  0D02               	mullw	2
  8687  001A06  0E07               	movlw	low (__au8Buffer+7)
  8688  001A08  24F3               	addwf	prodl,w,c
  8689  001A0A  6ED9               	movwf	fsr2l,c
  8690  001A0C  0E01               	movlw	high (__au8Buffer+7)
  8691  001A0E  20F4               	addwfc	prodh,w,c
  8692  001A10  6EDA               	movwf	fsr2h,c
  8693  001A12  50DF               	movf	indf2,w,c
  8694  001A14  6E18               	movwf	(??_ModbusProcess_FC16+1)& (0+255),c
  8695  001A16  5017               	movf	??_ModbusProcess_FC16,w,c
  8696  001A18  6E1B               	movwf	ModbusProcess_FC16@temp,c
  8697  001A1A  C018  F01C         	movff	??_ModbusProcess_FC16+1,ModbusProcess_FC16@temp+1
  8698                           
  8699                           ; BSR set to: 1
  8700                           ;ModbusRtu.c: 1106: regs[ u16StartAdd + i ] = temp;
  8701  001A1E  5021               	movf	ModbusProcess_FC16@i,w,c
  8702  001A20  241E               	addwf	ModbusProcess_FC16@u16StartAdd,w,c
  8703  001A22  6E17               	movwf	??_ModbusProcess_FC16& (0+255),c
  8704  001A24  0E00               	movlw	0
  8705  001A26  201F               	addwfc	ModbusProcess_FC16@u16StartAdd+1,w,c
  8706  001A28  6E18               	movwf	(??_ModbusProcess_FC16+1)& (0+255),c
  8707  001A2A  90D8               	bcf	status,0,c
  8708  001A2C  3617               	rlcf	??_ModbusProcess_FC16,f,c
  8709  001A2E  3618               	rlcf	??_ModbusProcess_FC16+1,f,c
  8710  001A30  5017               	movf	??_ModbusProcess_FC16,w,c
  8711  001A32  2414               	addwf	ModbusProcess_FC16@regs,w,c
  8712  001A34  6ED9               	movwf	fsr2l,c
  8713  001A36  5018               	movf	??_ModbusProcess_FC16+1,w,c
  8714  001A38  2015               	addwfc	ModbusProcess_FC16@regs+1,w,c
  8715  001A3A  6EDA               	movwf	fsr2h,c
  8716  001A3C  C01B  FFDE         	movff	ModbusProcess_FC16@temp,postinc2
  8717  001A40  C01C  FFDD         	movff	ModbusProcess_FC16@temp+1,postdec2
  8718                           
  8719                           ; BSR set to: 1
  8720  001A44  2A21               	incf	ModbusProcess_FC16@i,f,c
  8721  001A46                     l4316:
  8722  001A46  FFFF               	dw	65535	; assembler added errata NOP
  8723                           
  8724                           ; BSR set to: 1
  8725  001A48  5020               	movf	ModbusProcess_FC16@u8regsno,w,c
  8726  001A4A  5C21               	subwf	ModbusProcess_FC16@i,w,c
  8727  001A4C  E20E               	bc	l4320
  8728                           
  8729                           ; BSR set to: 1
  8730  001A4E  5016               	movf	ModbusProcess_FC16@u8size,w,c
  8731  001A50  6E17               	movwf	??_ModbusProcess_FC16& (0+255),c
  8732  001A52  6A18               	clrf	(??_ModbusProcess_FC16+1)& (0+255),c
  8733  001A54  5021               	movf	ModbusProcess_FC16@i,w,c
  8734  001A56  241E               	addwf	ModbusProcess_FC16@u16StartAdd,w,c
  8735  001A58  6E19               	movwf	(??_ModbusProcess_FC16+2)& (0+255),c
  8736  001A5A  0E00               	movlw	0
  8737  001A5C  201F               	addwfc	ModbusProcess_FC16@u16StartAdd+1,w,c
  8738  001A5E  6E1A               	movwf	(??_ModbusProcess_FC16+3)& (0+255),c
  8739  001A60  5017               	movf	??_ModbusProcess_FC16,w,c
  8740  001A62  5C19               	subwf	??_ModbusProcess_FC16+2,w,c
  8741  001A64  5018               	movf	??_ModbusProcess_FC16+1,w,c
  8742  001A66  581A               	subwfb	??_ModbusProcess_FC16+3,w,c
  8743  001A68  E3C2               	bnc	l4310
  8744  001A6A                     l4320:
  8745                           
  8746                           ; BSR set to: 1
  8747                           ;ModbusRtu.c: 1107: }
  8748                           ;ModbusRtu.c: 1108: u8CopyBufferSize = _u8BufferSize + 2;
  8749  001A6A  5071               	movf	__u8BufferSize,w,c
  8750  001A6C  0F02               	addlw	2
  8751  001A6E  6E1D               	movwf	ModbusProcess_FC16@u8CopyBufferSize,c
  8752                           
  8753                           ; BSR set to: 1
  8754                           ;ModbusRtu.c: 1109: ModbusSendTxBuffer();
  8755  001A70  EC53  F011         	call	_ModbusSendTxBuffer	;wreg free
  8756                           
  8757                           ;ModbusRtu.c: 1111: return u8CopyBufferSize;
  8758  001A74  501D               	movf	ModbusProcess_FC16@u8CopyBufferSize,w,c
  8759  001A76  0012               	return		;funcret
  8760  001A78  FFFF               	dw	65535	; errata NOP
  8761  001A7A                     __end_of_ModbusProcess_FC16:
  8762                           	opt stack 0
  8763                           tblptru	equ	0xFF8
  8764                           tblptrh	equ	0xFF7
  8765                           tblptrl	equ	0xFF6
  8766                           tablat	equ	0xFF5
  8767                           prodh	equ	0xFF4
  8768                           prodl	equ	0xFF3
  8769                           intcon	equ	0xFF2
  8770                           postinc0	equ	0xFEE
  8771                           wreg	equ	0xFE8
  8772                           indf1	equ	0xFE7
  8773                           postinc1	equ	0xFE6
  8774                           postdec1	equ	0xFE5
  8775                           fsr1h	equ	0xFE2
  8776                           fsr1l	equ	0xFE1
  8777                           indf2	equ	0xFDF
  8778                           postinc2	equ	0xFDE
  8779                           postdec2	equ	0xFDD
  8780                           plusw2	equ	0xFDB
  8781                           fsr2h	equ	0xFDA
  8782                           fsr2l	equ	0xFD9
  8783                           status	equ	0xFD8
  8784                           
  8785 ;; *************** function _ModbusProcess_FC15 *****************
  8786 ;; Defined at:
  8787 ;;		line 1025 in file "ModbusRtu.c"
  8788 ;; Parameters:    Size  Location     Type
  8789 ;;  regs            1    wreg     PTR unsigned short 
  8790 ;;		 -> _MODBUSCoils(2), 
  8791 ;; Auto vars:     Size  Location     Type
  8792 ;;  regs            1   36[COMRAM] PTR unsigned short 
  8793 ;;		 -> _MODBUSCoils(2), 
  8794 ;;  u16currentCo    2   33[COMRAM] unsigned short 
  8795 ;;  u16Coilno       2   31[COMRAM] unsigned short 
  8796 ;;  u16StartCoil    2   29[COMRAM] unsigned short 
  8797 ;;  u16coil         2   24[COMRAM] unsigned short 
  8798 ;;  u8bitsno        1   37[COMRAM] unsigned char 
  8799 ;;  u8currentBit    1   35[COMRAM] unsigned char 
  8800 ;;  u8frameByte     1   28[COMRAM] unsigned char 
  8801 ;;  bTemp           1   27[COMRAM] unsigned char 
  8802 ;;  u8CopyBuffer    1   26[COMRAM] unsigned char 
  8803 ;; Return value:  Size  Location     Type
  8804 ;;                  1    wreg      unsigned char 
  8805 ;; Registers used:
  8806 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8807 ;; Tracked objects:
  8808 ;;		On entry : E/1
  8809 ;;		On exit  : 0/0
  8810 ;;		Unchanged: 0/0
  8811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8812 ;;      Params:         0       0       0       0       0       0       0
  8813 ;;      Locals:        14       0       0       0       0       0       0
  8814 ;;      Temps:          5       0       0       0       0       0       0
  8815 ;;      Totals:        19       0       0       0       0       0       0
  8816 ;;Total ram usage:       19 bytes
  8817 ;; Hardware stack levels used:    1
  8818 ;; Hardware stack levels required when called:    4
  8819 ;; This function calls:
  8820 ;;		_ModbusSendTxBuffer
  8821 ;; This function is called by:
  8822 ;;		_ModbusPoll
  8823 ;; This function uses a non-reentrant model
  8824 ;;
  8825                           
  8826                           	psect	text36
  8827  0015A2                     __ptext36:
  8828                           	opt stack 0
  8829  0015A2                     _ModbusProcess_FC15:
  8830                           	opt stack 25
  8831                           
  8832                           ;incstack = 0
  8833  0015A2  FFFF               	dw	65535
  8834                           
  8835                           ;ModbusProcess_FC15@regs stored from wreg
  8836  0015A4  6E25               	movwf	ModbusProcess_FC15@regs,c
  8837                           
  8838                           ;ModbusRtu.c: 1027: _lastCommand = MODBUS_COM_WRITE_MULTIPLE_COILS;
  8839  0015A6  0E0F               	movlw	15
  8840  0015A8  0100               	movlb	0	; () banked
  8841  0015AA  6FD8               	movwf	__lastCommand& (0+255),b
  8842                           
  8843                           ; BSR set to: 0
  8844                           ;ModbusRtu.c: 1029: uint8_t u8currentBit, u8frameByte, u8bitsno;
  8845                           ;ModbusRtu.c: 1030: uint8_t u8CopyBufferSize;
  8846                           ;ModbusRtu.c: 1031: uint16_t u16currentCoil, u16coil;
  8847                           ;ModbusRtu.c: 1032: boolean bTemp;
  8848                           ;ModbusRtu.c: 1035: uint16_t u16StartCoil = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buf
      +                          fer[ ADD_LO ]);
  8849  0015AC  0101               	movlb	1	; () banked
  8850  0015AE  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  8851  0015B0  6E14               	movwf	??_ModbusProcess_FC15& (0+255),c
  8852  0015B2  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  8853  0015B4  6E1E               	movwf	ModbusProcess_FC15@u16StartCoil,c
  8854  0015B6  C014  F01F         	movff	??_ModbusProcess_FC15,ModbusProcess_FC15@u16StartCoil+1
  8855                           
  8856                           ; BSR set to: 1
  8857                           ;ModbusRtu.c: 1036: _lastAddress = u16StartCoil;
  8858  0015BA  C01E  F0B6         	movff	ModbusProcess_FC15@u16StartCoil,__lastAddress
  8859  0015BE  C01F  F0B7         	movff	ModbusProcess_FC15@u16StartCoil+1,__lastAddress+1
  8860                           
  8861                           ; BSR set to: 1
  8862                           ;ModbusRtu.c: 1037: uint16_t u16Coilno = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[
      +                           NB_LO ]);
  8863  0015C2  5104               	movf	(__au8Buffer+4)& (0+255),w,b
  8864  0015C4  6E14               	movwf	??_ModbusProcess_FC15& (0+255),c
  8865  0015C6  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  8866  0015C8  6E20               	movwf	ModbusProcess_FC15@u16Coilno,c
  8867  0015CA  C014  F021         	movff	??_ModbusProcess_FC15,ModbusProcess_FC15@u16Coilno+1
  8868                           
  8869                           ; BSR set to: 1
  8870                           ;ModbusRtu.c: 1038: _lastCount = u16Coilno;
  8871  0015CE  C020  F0B8         	movff	ModbusProcess_FC15@u16Coilno,__lastCount
  8872  0015D2  C021  F0B9         	movff	ModbusProcess_FC15@u16Coilno+1,__lastCount+1
  8873                           
  8874                           ; BSR set to: 1
  8875                           ;ModbusRtu.c: 1041: u8bitsno = 0;
  8876  0015D6  6A26               	clrf	ModbusProcess_FC15@u8bitsno,c
  8877                           
  8878                           ; BSR set to: 1
  8879                           ;ModbusRtu.c: 1042: u8frameByte = 7;
  8880  0015D8  0E07               	movlw	7
  8881  0015DA  6E1D               	movwf	ModbusProcess_FC15@u8frameByte,c
  8882                           
  8883                           ; BSR set to: 1
  8884                           ;ModbusRtu.c: 1043: for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil+
      +                          +) {
  8885  0015DC  6A22               	clrf	ModbusProcess_FC15@u16currentCoil,c
  8886  0015DE  6A23               	clrf	ModbusProcess_FC15@u16currentCoil+1,c
  8887  0015E0  D058               	goto	l4280
  8888  0015E2                     l4260:
  8889                           
  8890                           ;ModbusRtu.c: 1045: u16coil = u16StartCoil + u16currentCoil;
  8891  0015E2  5022               	movf	ModbusProcess_FC15@u16currentCoil,w,c
  8892  0015E4  241E               	addwf	ModbusProcess_FC15@u16StartCoil,w,c
  8893  0015E6  6E19               	movwf	ModbusProcess_FC15@u16coil,c
  8894  0015E8  5023               	movf	ModbusProcess_FC15@u16currentCoil+1,w,c
  8895  0015EA  201F               	addwfc	ModbusProcess_FC15@u16StartCoil+1,w,c
  8896  0015EC  6E1A               	movwf	ModbusProcess_FC15@u16coil+1,c
  8897                           
  8898                           ;ModbusRtu.c: 1047: u8currentBit = (uint8_t) u16coil;
  8899  0015EE  C019  F024         	movff	ModbusProcess_FC15@u16coil,ModbusProcess_FC15@u8currentBit
  8900                           
  8901                           ;ModbusRtu.c: 1049: bTemp = (((_au8Buffer[ u8frameByte ]) >> (u8bitsno)) & 0x01);
  8902  0015F2  C026  F014         	movff	ModbusProcess_FC15@u8bitsno,??_ModbusProcess_FC15
  8903  0015F6  0E00               	movlw	low __au8Buffer
  8904  0015F8  241D               	addwf	ModbusProcess_FC15@u8frameByte,w,c
  8905  0015FA  6ED9               	movwf	fsr2l,c
  8906  0015FC  6ADA               	clrf	fsr2h,c
  8907  0015FE  0E01               	movlw	high __au8Buffer
  8908  001600  22DA               	addwfc	fsr2h,f,c
  8909  001602  50DF               	movf	indf2,w,c
  8910  001604  6E15               	movwf	(??_ModbusProcess_FC15+1)& (0+255),c
  8911  001606  2A14               	incf	??_ModbusProcess_FC15,f,c
  8912  001608  D003               	goto	u3604
  8913  00160A                     u3605:
  8914  00160A  FFFF               	dw	65535	; assembler added errata NOP
  8915  00160C  90D8               	bcf	status,0,c
  8916  00160E  3215               	rrcf	??_ModbusProcess_FC15+1,f,c
  8917  001610                     u3604:
  8918  001610  FFFF               	dw	65535	; assembler added errata NOP
  8919  001612  2E14               	decfsz	??_ModbusProcess_FC15,f,c
  8920  001614  D7FA               	goto	u3605
  8921  001616  5015               	movf	??_ModbusProcess_FC15+1,w,c
  8922  001618  0B01               	andlw	1
  8923  00161A  6E1C               	movwf	ModbusProcess_FC15@bTemp,c
  8924                           
  8925                           ;ModbusRtu.c: 1053: (bTemp ? ((*regs) |= ((unsigned short)1 << (u8currentBit))) : ((*reg
      +                          s) &= ~((unsigned short)1 << (u8currentBit))));
  8926  00161C  501C               	movf	ModbusProcess_FC15@bTemp,w,c
  8927  00161E  E016               	bz	l4270
  8928  001620  C024  F014         	movff	ModbusProcess_FC15@u8currentBit,??_ModbusProcess_FC15
  8929  001624  0E01               	movlw	1
  8930  001626  6E15               	movwf	(??_ModbusProcess_FC15+1)& (0+255),c
  8931  001628  6A16               	clrf	(??_ModbusProcess_FC15+2)& (0+255),c
  8932  00162A  2A14               	incf	??_ModbusProcess_FC15,f,c
  8933  00162C  D004               	goto	u3624
  8934  00162E                     u3625:
  8935  00162E  FFFF               	dw	65535	; assembler added errata NOP
  8936  001630  90D8               	bcf	status,0,c
  8937  001632  3615               	rlcf	??_ModbusProcess_FC15+1,f,c
  8938  001634  3616               	rlcf	??_ModbusProcess_FC15+2,f,c
  8939  001636                     u3624:
  8940  001636  FFFF               	dw	65535	; assembler added errata NOP
  8941  001638  2E14               	decfsz	??_ModbusProcess_FC15,f,c
  8942  00163A  D7F9               	goto	u3625
  8943  00163C  5025               	movf	ModbusProcess_FC15@regs,w,c
  8944  00163E  6ED9               	movwf	fsr2l,c
  8945  001640  6ADA               	clrf	fsr2h,c
  8946  001642  5015               	movf	??_ModbusProcess_FC15+1,w,c
  8947  001644  12DE               	iorwf	postinc2,f,c
  8948  001646  5016               	movf	??_ModbusProcess_FC15+2,w,c
  8949  001648  12DD               	iorwf	postdec2,f,c
  8950  00164A  D019               	goto	l4272
  8951  00164C                     l4270:
  8952  00164C  C024  F014         	movff	ModbusProcess_FC15@u8currentBit,??_ModbusProcess_FC15
  8953  001650  0E01               	movlw	1
  8954  001652  6E15               	movwf	(??_ModbusProcess_FC15+1)& (0+255),c
  8955  001654  6A16               	clrf	(??_ModbusProcess_FC15+2)& (0+255),c
  8956  001656  2A14               	incf	??_ModbusProcess_FC15,f,c
  8957  001658  D004               	goto	u3634
  8958  00165A                     u3635:
  8959  00165A  FFFF               	dw	65535	; assembler added errata NOP
  8960  00165C  90D8               	bcf	status,0,c
  8961  00165E  3615               	rlcf	??_ModbusProcess_FC15+1,f,c
  8962  001660  3616               	rlcf	??_ModbusProcess_FC15+2,f,c
  8963  001662                     u3634:
  8964  001662  FFFF               	dw	65535	; assembler added errata NOP
  8965  001664  2E14               	decfsz	??_ModbusProcess_FC15,f,c
  8966  001666  D7F9               	goto	u3635
  8967  001668  1C15               	comf	??_ModbusProcess_FC15+1,w,c
  8968  00166A  6E17               	movwf	(??_ModbusProcess_FC15+3)& (0+255),c
  8969  00166C  1C16               	comf	??_ModbusProcess_FC15+2,w,c
  8970  00166E  6E18               	movwf	(??_ModbusProcess_FC15+4)& (0+255),c
  8971  001670  5025               	movf	ModbusProcess_FC15@regs,w,c
  8972  001672  6ED9               	movwf	fsr2l,c
  8973  001674  6ADA               	clrf	fsr2h,c
  8974  001676  5017               	movf	??_ModbusProcess_FC15+3,w,c
  8975  001678  16DE               	andwf	postinc2,f,c
  8976  00167A  5018               	movf	??_ModbusProcess_FC15+4,w,c
  8977  00167C  16DD               	andwf	postdec2,f,c
  8978  00167E                     l4272:
  8979  00167E  FFFF               	dw	65535	; assembler added errata NOP
  8980                           
  8981                           ;ModbusRtu.c: 1058: u8bitsno ++;
  8982  001680  2A26               	incf	ModbusProcess_FC15@u8bitsno,f,c
  8983                           
  8984                           ;ModbusRtu.c: 1060: if (u8bitsno > 7) {
  8985  001682  0E07               	movlw	7
  8986  001684  6426               	cpfsgt	ModbusProcess_FC15@u8bitsno,c
  8987  001686  D002               	goto	l900
  8988                           
  8989                           ;ModbusRtu.c: 1061: u8bitsno = 0;
  8990  001688  6A26               	clrf	ModbusProcess_FC15@u8bitsno,c
  8991                           
  8992                           ;ModbusRtu.c: 1062: u8frameByte++;
  8993  00168A  2A1D               	incf	ModbusProcess_FC15@u8frameByte,f,c
  8994  00168C                     l900:
  8995  00168C  FFFF               	dw	65535	; assembler added errata NOP
  8996  00168E  4A22               	infsnz	ModbusProcess_FC15@u16currentCoil,f,c
  8997  001690  2A23               	incf	ModbusProcess_FC15@u16currentCoil+1,f,c
  8998  001692                     l4280:
  8999  001692  FFFF               	dw	65535	; assembler added errata NOP
  9000  001694  5020               	movf	ModbusProcess_FC15@u16Coilno,w,c
  9001  001696  5C22               	subwf	ModbusProcess_FC15@u16currentCoil,w,c
  9002  001698  5021               	movf	ModbusProcess_FC15@u16Coilno+1,w,c
  9003  00169A  5823               	subwfb	ModbusProcess_FC15@u16currentCoil+1,w,c
  9004  00169C  E3A2               	bnc	l4260
  9005                           
  9006                           ;ModbusRtu.c: 1063: }
  9007                           ;ModbusRtu.c: 1064: }
  9008                           ;ModbusRtu.c: 1068: _u8BufferSize = 6;
  9009  00169E  0E06               	movlw	6
  9010  0016A0  6E71               	movwf	__u8BufferSize,c
  9011                           
  9012                           ;ModbusRtu.c: 1069: u8CopyBufferSize = _u8BufferSize +2;
  9013  0016A2  5071               	movf	__u8BufferSize,w,c
  9014  0016A4  0F02               	addlw	2
  9015  0016A6  6E1B               	movwf	ModbusProcess_FC15@u8CopyBufferSize,c
  9016                           
  9017                           ;ModbusRtu.c: 1070: ModbusSendTxBuffer();
  9018  0016A8  EC53  F011         	call	_ModbusSendTxBuffer	;wreg free
  9019                           
  9020                           ;ModbusRtu.c: 1071: return u8CopyBufferSize;
  9021  0016AC  501B               	movf	ModbusProcess_FC15@u8CopyBufferSize,w,c
  9022  0016AE  0012               	return		;funcret
  9023  0016B0  FFFF               	dw	65535	; errata NOP
  9024  0016B2                     __end_of_ModbusProcess_FC15:
  9025                           	opt stack 0
  9026                           tblptru	equ	0xFF8
  9027                           tblptrh	equ	0xFF7
  9028                           tblptrl	equ	0xFF6
  9029                           tablat	equ	0xFF5
  9030                           prodh	equ	0xFF4
  9031                           prodl	equ	0xFF3
  9032                           intcon	equ	0xFF2
  9033                           postinc0	equ	0xFEE
  9034                           wreg	equ	0xFE8
  9035                           indf1	equ	0xFE7
  9036                           postinc1	equ	0xFE6
  9037                           postdec1	equ	0xFE5
  9038                           fsr1h	equ	0xFE2
  9039                           fsr1l	equ	0xFE1
  9040                           indf2	equ	0xFDF
  9041                           postinc2	equ	0xFDE
  9042                           postdec2	equ	0xFDD
  9043                           plusw2	equ	0xFDB
  9044                           fsr2h	equ	0xFDA
  9045                           fsr2l	equ	0xFD9
  9046                           status	equ	0xFD8
  9047                           
  9048 ;; *************** function _ModbusProcess_FC1 *****************
  9049 ;; Defined at:
  9050 ;;		line 867 in file "ModbusRtu.c"
  9051 ;; Parameters:    Size  Location     Type
  9052 ;;  regs            2   19[COMRAM] unsigned short 
  9053 ;; Auto vars:     Size  Location     Type
  9054 ;;  u16Coilno       2   34[COMRAM] unsigned short 
  9055 ;;  u16currentCo    2   31[COMRAM] unsigned short 
  9056 ;;  u16StartCoil    2   29[COMRAM] unsigned short 
  9057 ;;  u16coil         2   24[COMRAM] unsigned short 
  9058 ;;  u8bitsno        1   33[COMRAM] unsigned char 
  9059 ;;  u8bytesno       1   28[COMRAM] unsigned char 
  9060 ;;  u8CopyBuffer    1   27[COMRAM] unsigned char 
  9061 ;;  u8currentBit    1   26[COMRAM] unsigned char 
  9062 ;; Return value:  Size  Location     Type
  9063 ;;                  1    wreg      unsigned char 
  9064 ;; Registers used:
  9065 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9066 ;; Tracked objects:
  9067 ;;		On entry : E/1
  9068 ;;		On exit  : 0/0
  9069 ;;		Unchanged: 0/0
  9070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9071 ;;      Params:         2       0       0       0       0       0       0
  9072 ;;      Locals:        12       0       0       0       0       0       0
  9073 ;;      Temps:          3       0       0       0       0       0       0
  9074 ;;      Totals:        17       0       0       0       0       0       0
  9075 ;;Total ram usage:       17 bytes
  9076 ;; Hardware stack levels used:    1
  9077 ;; Hardware stack levels required when called:    4
  9078 ;; This function calls:
  9079 ;;		_ModbusSendTxBuffer
  9080 ;; This function is called by:
  9081 ;;		_ModbusPoll
  9082 ;; This function uses a non-reentrant model
  9083 ;;
  9084                           
  9085                           	psect	text37
  9086  001470                     __ptext37:
  9087                           	opt stack 0
  9088  001470                     _ModbusProcess_FC1:
  9089                           	opt stack 25
  9090                           
  9091                           ;incstack = 0
  9092  001470  FFFF               	dw	65535
  9093                           
  9094                           ;ModbusRtu.c: 869: _lastCommand = MODBUS_COM_READ_COILS;
  9095  001472  0E01               	movlw	1
  9096  001474  0100               	movlb	0	; () banked
  9097  001476  6FD8               	movwf	__lastCommand& (0+255),b
  9098                           
  9099                           ;ModbusRtu.c: 872: uint8_t u8currentBit, u8bytesno, u8bitsno;
  9100                           ;ModbusRtu.c: 873: uint8_t u8CopyBufferSize;
  9101                           ;ModbusRtu.c: 874: uint16_t u16currentCoil, u16coil;
  9102                           ;ModbusRtu.c: 877: uint16_t u16StartCoil = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buff
      +                          er[ ADD_LO ]);
  9103  001478  0101               	movlb	1	; () banked
  9104  00147A  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  9105  00147C  6E16               	movwf	??_ModbusProcess_FC1& (0+255),c
  9106  00147E  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  9107  001480  6E1E               	movwf	ModbusProcess_FC1@u16StartCoil,c
  9108  001482  C016  F01F         	movff	??_ModbusProcess_FC1,ModbusProcess_FC1@u16StartCoil+1
  9109                           
  9110                           ; BSR set to: 1
  9111                           ;ModbusRtu.c: 878: _lastAddress = u16StartCoil;
  9112  001486  C01E  F0B6         	movff	ModbusProcess_FC1@u16StartCoil,__lastAddress
  9113  00148A  C01F  F0B7         	movff	ModbusProcess_FC1@u16StartCoil+1,__lastAddress+1
  9114                           
  9115                           ;ModbusRtu.c: 879: uint16_t u16Coilno = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ 
      +                          NB_LO ]);
  9116  00148E  5104               	movf	(__au8Buffer+4)& (0+255),w,b
  9117  001490  6E16               	movwf	??_ModbusProcess_FC1& (0+255),c
  9118  001492  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  9119  001494  6E23               	movwf	ModbusProcess_FC1@u16Coilno,c
  9120  001496  C016  F024         	movff	??_ModbusProcess_FC1,ModbusProcess_FC1@u16Coilno+1
  9121                           
  9122                           ; BSR set to: 1
  9123                           ;ModbusRtu.c: 880: _lastCount = u16Coilno;
  9124  00149A  C023  F0B8         	movff	ModbusProcess_FC1@u16Coilno,__lastCount
  9125  00149E  C024  F0B9         	movff	ModbusProcess_FC1@u16Coilno+1,__lastCount+1
  9126                           
  9127                           ; BSR set to: 1
  9128                           ;ModbusRtu.c: 882: u8bytesno = (uint8_t) (u16Coilno / 8);
  9129  0014A2  C023  F016         	movff	ModbusProcess_FC1@u16Coilno,??_ModbusProcess_FC1
  9130  0014A6  C024  F017         	movff	ModbusProcess_FC1@u16Coilno+1,??_ModbusProcess_FC1+1
  9131  0014AA  90D8               	bcf	status,0,c
  9132  0014AC  3217               	rrcf	??_ModbusProcess_FC1+1,f,c
  9133  0014AE  3216               	rrcf	??_ModbusProcess_FC1,f,c
  9134  0014B0  90D8               	bcf	status,0,c
  9135  0014B2  3217               	rrcf	??_ModbusProcess_FC1+1,f,c
  9136  0014B4  3216               	rrcf	??_ModbusProcess_FC1,f,c
  9137  0014B6  90D8               	bcf	status,0,c
  9138  0014B8  3217               	rrcf	??_ModbusProcess_FC1+1,f,c
  9139  0014BA  3216               	rrcf	??_ModbusProcess_FC1,f,c
  9140  0014BC  5016               	movf	??_ModbusProcess_FC1,w,c
  9141  0014BE  6E1D               	movwf	ModbusProcess_FC1@u8bytesno,c
  9142                           
  9143                           ; BSR set to: 1
  9144                           ;ModbusRtu.c: 883: if (u16Coilno % 8 != 0)
  9145  0014C0  C023  F016         	movff	ModbusProcess_FC1@u16Coilno,??_ModbusProcess_FC1
  9146  0014C4  0E07               	movlw	7
  9147  0014C6  1616               	andwf	??_ModbusProcess_FC1,f,c
  9148  0014C8  E001               	bz	l4132
  9149                           
  9150                           ; BSR set to: 1
  9151                           ;ModbusRtu.c: 884: u8bytesno ++;
  9152  0014CA  2A1D               	incf	ModbusProcess_FC1@u8bytesno,f,c
  9153  0014CC                     l4132:
  9154                           
  9155                           ; BSR set to: 1
  9156                           ;ModbusRtu.c: 885: _au8Buffer[ ADD_HI ] = u8bytesno;
  9157  0014CC  C01D  F102         	movff	ModbusProcess_FC1@u8bytesno,__au8Buffer+2
  9158                           
  9159                           ; BSR set to: 1
  9160                           ;ModbusRtu.c: 886: _u8BufferSize = ADD_LO;
  9161  0014D0  0E03               	movlw	3
  9162  0014D2  6E71               	movwf	__u8BufferSize,c
  9163                           
  9164                           ; BSR set to: 1
  9165                           ;ModbusRtu.c: 889: u8bitsno = 0;
  9166  0014D4  6A22               	clrf	ModbusProcess_FC1@u8bitsno,c
  9167                           
  9168                           ; BSR set to: 1
  9169                           ;ModbusRtu.c: 891: for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++
      +                          )
  9170  0014D6  6A20               	clrf	ModbusProcess_FC1@u16currentCoil,c
  9171  0014D8  6A21               	clrf	ModbusProcess_FC1@u16currentCoil+1,c
  9172  0014DA  D04F               	goto	l4158
  9173  0014DC                     l4140:
  9174                           
  9175                           ;ModbusRtu.c: 892: {
  9176                           ;ModbusRtu.c: 893: u16coil = u16StartCoil + u16currentCoil;
  9177  0014DC  5020               	movf	ModbusProcess_FC1@u16currentCoil,w,c
  9178  0014DE  241E               	addwf	ModbusProcess_FC1@u16StartCoil,w,c
  9179  0014E0  6E19               	movwf	ModbusProcess_FC1@u16coil,c
  9180  0014E2  5021               	movf	ModbusProcess_FC1@u16currentCoil+1,w,c
  9181  0014E4  201F               	addwfc	ModbusProcess_FC1@u16StartCoil+1,w,c
  9182  0014E6  6E1A               	movwf	ModbusProcess_FC1@u16coil+1,c
  9183                           
  9184                           ;ModbusRtu.c: 895: u8currentBit = (uint8_t) u16coil;
  9185  0014E8  C019  F01B         	movff	ModbusProcess_FC1@u16coil,ModbusProcess_FC1@u8currentBit
  9186                           
  9187                           ;ModbusRtu.c: 897: ((((regs) >> (u8currentBit)) & 0x01) ? ((_au8Buffer[ _u8BufferSize ])
      +                           |= ((unsigned short)1 << (u8bitsno))) : ((_au8Buffer[ _u8BufferSize ]) &= ~((unsigned s
      +                          hort)1 << (u8bitsno))));
  9188  0014EC  C01B  F016         	movff	ModbusProcess_FC1@u8currentBit,??_ModbusProcess_FC1
  9189  0014F0  C014  F017         	movff	ModbusProcess_FC1@regs,??_ModbusProcess_FC1+1
  9190  0014F4  C015  F018         	movff	ModbusProcess_FC1@regs+1,??_ModbusProcess_FC1+2
  9191  0014F8  2A16               	incf	??_ModbusProcess_FC1,f,c
  9192  0014FA  D004               	goto	u3494
  9193  0014FC                     u3495:
  9194  0014FC  FFFF               	dw	65535	; assembler added errata NOP
  9195  0014FE  90D8               	bcf	status,0,c
  9196  001500  3218               	rrcf	??_ModbusProcess_FC1+2,f,c
  9197  001502  3217               	rrcf	??_ModbusProcess_FC1+1,f,c
  9198  001504                     u3494:
  9199  001504  FFFF               	dw	65535	; assembler added errata NOP
  9200  001506  2E16               	decfsz	??_ModbusProcess_FC1,f,c
  9201  001508  D7F9               	goto	u3495
  9202  00150A  A017               	btfss	??_ModbusProcess_FC1+1,0,c
  9203  00150C  D015               	goto	l4148
  9204  00150E  C022  F016         	movff	ModbusProcess_FC1@u8bitsno,??_ModbusProcess_FC1
  9205  001512  0E01               	movlw	1
  9206  001514  6E17               	movwf	(??_ModbusProcess_FC1+1)& (0+255),c
  9207  001516  2A16               	incf	??_ModbusProcess_FC1,f,c
  9208  001518  D003               	goto	u3514
  9209  00151A                     u3515:
  9210  00151A  FFFF               	dw	65535	; assembler added errata NOP
  9211  00151C  90D8               	bcf	status,0,c
  9212  00151E  3617               	rlcf	??_ModbusProcess_FC1+1,f,c
  9213  001520                     u3514:
  9214  001520  FFFF               	dw	65535	; assembler added errata NOP
  9215  001522  2E16               	decfsz	??_ModbusProcess_FC1,f,c
  9216  001524  D7FA               	goto	u3515
  9217  001526  0E00               	movlw	low __au8Buffer
  9218  001528  2471               	addwf	__u8BufferSize,w,c
  9219  00152A  6ED9               	movwf	fsr2l,c
  9220  00152C  6ADA               	clrf	fsr2h,c
  9221  00152E  0E01               	movlw	high __au8Buffer
  9222  001530  22DA               	addwfc	fsr2h,f,c
  9223  001532  5017               	movf	??_ModbusProcess_FC1+1,w,c
  9224  001534  12DF               	iorwf	indf2,f,c
  9225  001536  D017               	goto	l4150
  9226  001538                     l4148:
  9227  001538  FFFF               	dw	65535	; assembler added errata NOP
  9228  00153A  C022  F016         	movff	ModbusProcess_FC1@u8bitsno,??_ModbusProcess_FC1
  9229  00153E  0E01               	movlw	1
  9230  001540  6E17               	movwf	(??_ModbusProcess_FC1+1)& (0+255),c
  9231  001542  2A16               	incf	??_ModbusProcess_FC1,f,c
  9232  001544  D003               	goto	u3524
  9233  001546                     u3525:
  9234  001546  FFFF               	dw	65535	; assembler added errata NOP
  9235  001548  90D8               	bcf	status,0,c
  9236  00154A  3617               	rlcf	??_ModbusProcess_FC1+1,f,c
  9237  00154C                     u3524:
  9238  00154C  FFFF               	dw	65535	; assembler added errata NOP
  9239  00154E  2E16               	decfsz	??_ModbusProcess_FC1,f,c
  9240  001550  D7FA               	goto	u3525
  9241  001552  1C17               	comf	??_ModbusProcess_FC1+1,w,c
  9242  001554  6E18               	movwf	(??_ModbusProcess_FC1+2)& (0+255),c
  9243  001556  0E00               	movlw	low __au8Buffer
  9244  001558  2471               	addwf	__u8BufferSize,w,c
  9245  00155A  6ED9               	movwf	fsr2l,c
  9246  00155C  6ADA               	clrf	fsr2h,c
  9247  00155E  0E01               	movlw	high __au8Buffer
  9248  001560  22DA               	addwfc	fsr2h,f,c
  9249  001562  5018               	movf	??_ModbusProcess_FC1+2,w,c
  9250  001564  16DF               	andwf	indf2,f,c
  9251  001566                     l4150:
  9252  001566  FFFF               	dw	65535	; assembler added errata NOP
  9253                           
  9254                           ;ModbusRtu.c: 901: u8bitsno ++;
  9255  001568  2A22               	incf	ModbusProcess_FC1@u8bitsno,f,c
  9256                           
  9257                           ;ModbusRtu.c: 903: if (u8bitsno > 7) {
  9258  00156A  0E07               	movlw	7
  9259  00156C  6422               	cpfsgt	ModbusProcess_FC1@u8bitsno,c
  9260  00156E  D002               	goto	l872
  9261                           
  9262                           ;ModbusRtu.c: 904: u8bitsno = 0;
  9263  001570  6A22               	clrf	ModbusProcess_FC1@u8bitsno,c
  9264                           
  9265                           ;ModbusRtu.c: 905: _u8BufferSize++;
  9266  001572  2A71               	incf	__u8BufferSize,f,c
  9267  001574                     l872:
  9268  001574  FFFF               	dw	65535	; assembler added errata NOP
  9269  001576  4A20               	infsnz	ModbusProcess_FC1@u16currentCoil,f,c
  9270  001578  2A21               	incf	ModbusProcess_FC1@u16currentCoil+1,f,c
  9271  00157A                     l4158:
  9272  00157A  FFFF               	dw	65535	; assembler added errata NOP
  9273  00157C  5023               	movf	ModbusProcess_FC1@u16Coilno,w,c
  9274  00157E  5C20               	subwf	ModbusProcess_FC1@u16currentCoil,w,c
  9275  001580  5024               	movf	ModbusProcess_FC1@u16Coilno+1,w,c
  9276  001582  5821               	subwfb	ModbusProcess_FC1@u16currentCoil+1,w,c
  9277  001584  E3AB               	bnc	l4140
  9278                           
  9279                           ;ModbusRtu.c: 906: }
  9280                           ;ModbusRtu.c: 907: }
  9281                           ;ModbusRtu.c: 910: if (u16Coilno % 8 != 0)
  9282  001586  C023  F016         	movff	ModbusProcess_FC1@u16Coilno,??_ModbusProcess_FC1
  9283  00158A  0E07               	movlw	7
  9284  00158C  1616               	andwf	??_ModbusProcess_FC1,f,c
  9285  00158E  E001               	bz	l4164
  9286                           
  9287                           ;ModbusRtu.c: 911: _u8BufferSize ++;
  9288  001590  2A71               	incf	__u8BufferSize,f,c
  9289  001592                     l4164:
  9290                           
  9291                           ;ModbusRtu.c: 912: u8CopyBufferSize = _u8BufferSize +2;
  9292  001592  5071               	movf	__u8BufferSize,w,c
  9293  001594  0F02               	addlw	2
  9294  001596  6E1C               	movwf	ModbusProcess_FC1@u8CopyBufferSize,c
  9295                           
  9296                           ;ModbusRtu.c: 913: ModbusSendTxBuffer();
  9297  001598  EC53  F011         	call	_ModbusSendTxBuffer	;wreg free
  9298                           
  9299                           ;ModbusRtu.c: 914: return u8CopyBufferSize;
  9300  00159C  501C               	movf	ModbusProcess_FC1@u8CopyBufferSize,w,c
  9301  00159E  0012               	return		;funcret
  9302  0015A0  FFFF               	dw	65535	; errata NOP
  9303  0015A2                     __end_of_ModbusProcess_FC1:
  9304                           	opt stack 0
  9305                           tblptru	equ	0xFF8
  9306                           tblptrh	equ	0xFF7
  9307                           tblptrl	equ	0xFF6
  9308                           tablat	equ	0xFF5
  9309                           prodh	equ	0xFF4
  9310                           prodl	equ	0xFF3
  9311                           intcon	equ	0xFF2
  9312                           postinc0	equ	0xFEE
  9313                           wreg	equ	0xFE8
  9314                           indf1	equ	0xFE7
  9315                           postinc1	equ	0xFE6
  9316                           postdec1	equ	0xFE5
  9317                           fsr1h	equ	0xFE2
  9318                           fsr1l	equ	0xFE1
  9319                           indf2	equ	0xFDF
  9320                           postinc2	equ	0xFDE
  9321                           postdec2	equ	0xFDD
  9322                           plusw2	equ	0xFDB
  9323                           fsr2h	equ	0xFDA
  9324                           fsr2l	equ	0xFD9
  9325                           status	equ	0xFD8
  9326                           
  9327 ;; *************** function _ModbusSendTxBuffer *****************
  9328 ;; Defined at:
  9329 ;;		line 531 in file "ModbusRtu.c"
  9330 ;; Parameters:    Size  Location     Type
  9331 ;;		None
  9332 ;; Auto vars:     Size  Location     Type
  9333 ;;  u16crc          2   17[COMRAM] unsigned short 
  9334 ;; Return value:  Size  Location     Type
  9335 ;;                  1    wreg      void 
  9336 ;; Registers used:
  9337 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9338 ;; Tracked objects:
  9339 ;;		On entry : 0/1
  9340 ;;		On exit  : 0/0
  9341 ;;		Unchanged: 0/0
  9342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9343 ;;      Params:         0       0       0       0       0       0       0
  9344 ;;      Locals:         2       0       0       0       0       0       0
  9345 ;;      Temps:          0       0       0       0       0       0       0
  9346 ;;      Totals:         2       0       0       0       0       0       0
  9347 ;;Total ram usage:        2 bytes
  9348 ;; Hardware stack levels used:    1
  9349 ;; Hardware stack levels required when called:    3
  9350 ;; This function calls:
  9351 ;;		_ModbusCalcCRC
  9352 ;;		_PortWrite
  9353 ;;		_millis
  9354 ;; This function is called by:
  9355 ;;		_ModbusPoll
  9356 ;;		_ModbusProcess_FC1
  9357 ;;		_ModbusProcess_FC3
  9358 ;;		_ModbusProcess_FC5
  9359 ;;		_ModbusProcess_FC6
  9360 ;;		_ModbusProcess_FC15
  9361 ;;		_ModbusProcess_FC16
  9362 ;;		_ModbusProcess_FC17
  9363 ;;		_ModbusProcess_FC21
  9364 ;; This function uses a non-reentrant model
  9365 ;;
  9366                           
  9367                           	psect	text38
  9368  0022A6                     __ptext38:
  9369                           	opt stack 0
  9370  0022A6                     _ModbusSendTxBuffer:
  9371                           	opt stack 26
  9372                           
  9373                           ;incstack = 0
  9374  0022A6  FFFF               	dw	65535
  9375                           
  9376                           ;ModbusRtu.c: 536: uint16_t u16crc = ModbusCalcCRC( _u8BufferSize );
  9377  0022A8  5071               	movf	__u8BufferSize,w,c
  9378  0022AA  EC6C  F010         	call	_ModbusCalcCRC
  9379  0022AE  C005  F012         	movff	?_ModbusCalcCRC,ModbusSendTxBuffer@u16crc
  9380  0022B2  C006  F013         	movff	?_ModbusCalcCRC+1,ModbusSendTxBuffer@u16crc+1
  9381                           
  9382                           ;ModbusRtu.c: 537: _au8Buffer[ _u8BufferSize ] = u16crc >> 8;
  9383  0022B6  0E00               	movlw	low __au8Buffer
  9384  0022B8  2471               	addwf	__u8BufferSize,w,c
  9385  0022BA  6ED9               	movwf	fsr2l,c
  9386  0022BC  6ADA               	clrf	fsr2h,c
  9387  0022BE  0E01               	movlw	high __au8Buffer
  9388  0022C0  22DA               	addwfc	fsr2h,f,c
  9389  0022C2  C013  FFDF         	movff	ModbusSendTxBuffer@u16crc+1,indf2
  9390                           
  9391                           ;ModbusRtu.c: 538: _u8BufferSize++;
  9392  0022C6  2A71               	incf	__u8BufferSize,f,c
  9393                           
  9394                           ;ModbusRtu.c: 539: _au8Buffer[ _u8BufferSize ] = u16crc & 0x00ff;
  9395  0022C8  0E00               	movlw	low __au8Buffer
  9396  0022CA  2471               	addwf	__u8BufferSize,w,c
  9397  0022CC  6ED9               	movwf	fsr2l,c
  9398  0022CE  6ADA               	clrf	fsr2h,c
  9399  0022D0  0E01               	movlw	high __au8Buffer
  9400  0022D2  22DA               	addwfc	fsr2h,f,c
  9401  0022D4  C012  FFDF         	movff	ModbusSendTxBuffer@u16crc,indf2
  9402                           
  9403                           ;ModbusRtu.c: 540: _u8BufferSize++;
  9404  0022D8  2A71               	incf	__u8BufferSize,f,c
  9405                           
  9406                           ;ModbusRtu.c: 544: PortWrite( _au8Buffer, _u8BufferSize );
  9407  0022DA  0E00               	movlw	low __au8Buffer
  9408  0022DC  6E05               	movwf	PortWrite@buf,c
  9409  0022DE  0E01               	movlw	high __au8Buffer
  9410  0022E0  6E06               	movwf	PortWrite@buf+1,c
  9411  0022E2  C071  F007         	movff	__u8BufferSize,PortWrite@buflen
  9412  0022E6  EC4A  F012         	call	_PortWrite	;wreg free
  9413                           
  9414                           ;ModbusRtu.c: 550: _u8BufferSize = 0;
  9415  0022EA  6A71               	clrf	__u8BufferSize,c
  9416                           
  9417                           ;ModbusRtu.c: 556: _u16OutCnt++;
  9418  0022EC  EFB1  F012         	goto	_millis	;wreg free
  9419  0022F0  FFFF               	dw	65535	; errata NOP
  9420  0022F2                     __end_of_ModbusSendTxBuffer:
  9421                           	opt stack 0
  9422                           tblptru	equ	0xFF8
  9423                           tblptrh	equ	0xFF7
  9424                           tblptrl	equ	0xFF6
  9425                           tablat	equ	0xFF5
  9426                           prodh	equ	0xFF4
  9427                           prodl	equ	0xFF3
  9428                           intcon	equ	0xFF2
  9429                           postinc0	equ	0xFEE
  9430                           wreg	equ	0xFE8
  9431                           indf1	equ	0xFE7
  9432                           postinc1	equ	0xFE6
  9433                           postdec1	equ	0xFE5
  9434                           fsr1h	equ	0xFE2
  9435                           fsr1l	equ	0xFE1
  9436                           indf2	equ	0xFDF
  9437                           postinc2	equ	0xFDE
  9438                           postdec2	equ	0xFDD
  9439                           plusw2	equ	0xFDB
  9440                           fsr2h	equ	0xFDA
  9441                           fsr2l	equ	0xFD9
  9442                           status	equ	0xFD8
  9443                           
  9444 ;; *************** function _millis *****************
  9445 ;; Defined at:
  9446 ;;		line 234 in file "interrupts.c"
  9447 ;; Parameters:    Size  Location     Type
  9448 ;;		None
  9449 ;; Auto vars:     Size  Location     Type
  9450 ;;  ret             4    8[COMRAM] unsigned long 
  9451 ;; Return value:  Size  Location     Type
  9452 ;;                  4    4[COMRAM] unsigned long 
  9453 ;; Registers used:
  9454 ;;		None
  9455 ;; Tracked objects:
  9456 ;;		On entry : 0/0
  9457 ;;		On exit  : 0/0
  9458 ;;		Unchanged: 0/0
  9459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9460 ;;      Params:         4       0       0       0       0       0       0
  9461 ;;      Locals:         4       0       0       0       0       0       0
  9462 ;;      Temps:          0       0       0       0       0       0       0
  9463 ;;      Totals:         8       0       0       0       0       0       0
  9464 ;;Total ram usage:        8 bytes
  9465 ;; Hardware stack levels used:    1
  9466 ;; Hardware stack levels required when called:    2
  9467 ;; This function calls:
  9468 ;;		Nothing
  9469 ;; This function is called by:
  9470 ;;		_main
  9471 ;;		_ModbusPoll
  9472 ;;		_ModbusSendTxBuffer
  9473 ;; This function uses a non-reentrant model
  9474 ;;
  9475                           
  9476                           	psect	text39
  9477  002562                     __ptext39:
  9478                           	opt stack 0
  9479  002562                     _millis:
  9480                           	opt stack 28
  9481                           
  9482                           ;incstack = 0
  9483  002562  FFFF               	dw	65535
  9484                           
  9485                           ;interrupts.c: 237: (INTCONbits.GIE = 0);
  9486  002564  9EF2               	bcf	intcon,7,c	;volatile
  9487                           
  9488                           ;interrupts.c: 238: unsigned long ret = millisecondsFromStart;
  9489  002566  C0AC  F009         	movff	_millisecondsFromStart,millis@ret	;volatile
  9490  00256A  C0AD  F00A         	movff	_millisecondsFromStart+1,millis@ret+1	;volatile
  9491  00256E  C0AE  F00B         	movff	_millisecondsFromStart+2,millis@ret+2	;volatile
  9492  002572  C0AF  F00C         	movff	_millisecondsFromStart+3,millis@ret+3	;volatile
  9493                           
  9494                           ;interrupts.c: 239: (INTCONbits.GIE = 1);
  9495  002576  8EF2               	bsf	intcon,7,c	;volatile
  9496                           
  9497                           ;interrupts.c: 240: return ret;
  9498  002578  C009  F005         	movff	millis@ret,?_millis
  9499  00257C  C00A  F006         	movff	millis@ret+1,?_millis+1
  9500  002580  C00B  F007         	movff	millis@ret+2,?_millis+2
  9501  002584  C00C  F008         	movff	millis@ret+3,?_millis+3
  9502  002588  0012               	return		;funcret
  9503  00258A  FFFF               	dw	65535	; errata NOP
  9504  00258C                     __end_of_millis:
  9505                           	opt stack 0
  9506                           tblptru	equ	0xFF8
  9507                           tblptrh	equ	0xFF7
  9508                           tblptrl	equ	0xFF6
  9509                           tablat	equ	0xFF5
  9510                           prodh	equ	0xFF4
  9511                           prodl	equ	0xFF3
  9512                           intcon	equ	0xFF2
  9513                           postinc0	equ	0xFEE
  9514                           wreg	equ	0xFE8
  9515                           indf1	equ	0xFE7
  9516                           postinc1	equ	0xFE6
  9517                           postdec1	equ	0xFE5
  9518                           fsr1h	equ	0xFE2
  9519                           fsr1l	equ	0xFE1
  9520                           indf2	equ	0xFDF
  9521                           postinc2	equ	0xFDE
  9522                           postdec2	equ	0xFDD
  9523                           plusw2	equ	0xFDB
  9524                           fsr2h	equ	0xFDA
  9525                           fsr2l	equ	0xFD9
  9526                           status	equ	0xFD8
  9527                           
  9528 ;; *************** function _PortWrite *****************
  9529 ;; Defined at:
  9530 ;;		line 91 in file "interrupts.c"
  9531 ;; Parameters:    Size  Location     Type
  9532 ;;  buf             2    4[COMRAM] PTR unsigned char 
  9533 ;;		 -> _au8Buffer(140), 
  9534 ;;  buflen          1    6[COMRAM] unsigned char 
  9535 ;; Auto vars:     Size  Location     Type
  9536 ;;  i               1    7[COMRAM] unsigned char 
  9537 ;; Return value:  Size  Location     Type
  9538 ;;                  1    wreg      void 
  9539 ;; Registers used:
  9540 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9541 ;; Tracked objects:
  9542 ;;		On entry : 0/1
  9543 ;;		On exit  : 0/0
  9544 ;;		Unchanged: 0/0
  9545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9546 ;;      Params:         3       0       0       0       0       0       0
  9547 ;;      Locals:         1       0       0       0       0       0       0
  9548 ;;      Temps:          0       0       0       0       0       0       0
  9549 ;;      Totals:         4       0       0       0       0       0       0
  9550 ;;Total ram usage:        4 bytes
  9551 ;; Hardware stack levels used:    1
  9552 ;; Hardware stack levels required when called:    2
  9553 ;; This function calls:
  9554 ;;		Nothing
  9555 ;; This function is called by:
  9556 ;;		_ModbusSendTxBuffer
  9557 ;; This function uses a non-reentrant model
  9558 ;;
  9559                           
  9560                           	psect	text40
  9561  002494                     __ptext40:
  9562                           	opt stack 0
  9563  002494                     _PortWrite:
  9564                           	opt stack 26
  9565                           
  9566                           ;incstack = 0
  9567  002494  FFFF               	dw	65535
  9568                           
  9569                           ;interrupts.c: 93: LATCbits.LATC5 = 1;
  9570  002496  8A8B               	bsf	3979,5,c	;volatile
  9571                           
  9572                           ;interrupts.c: 94: _delay((unsigned long)((10)*(10000000L/4000000.0)));
  9573  002498  0E06               	movlw	6
  9574  00249A                     u5357:
  9575  00249A  FFFF               	dw	65535	; errata NOP
  9576  00249C  2EE8               	decfsz	wreg,f,c
  9577  00249E  D7FD               	goto	u5357
  9578  0024A0  F000               	nop	
  9579                           
  9580                           ;interrupts.c: 95: for(uint8_t i = 0; i < buflen; i++)
  9581  0024A2  6A08               	clrf	PortWrite@i,c
  9582  0024A4  D00C               	goto	l3580
  9583  0024A6                     l76:
  9584  0024A6  FFFF               	dw	65535	; assembler added errata NOP
  9585  0024A8  A2AC               	btfss	4012,1,c	;volatile
  9586  0024AA  D7FD               	goto	l76
  9587                           
  9588                           ;interrupts.c: 98: TXREG = buf[i];
  9589  0024AC  5008               	movf	PortWrite@i,w,c
  9590  0024AE  2405               	addwf	PortWrite@buf,w,c
  9591  0024B0  6ED9               	movwf	fsr2l,c
  9592  0024B2  0E00               	movlw	0
  9593  0024B4  2006               	addwfc	PortWrite@buf+1,w,c
  9594  0024B6  6EDA               	movwf	fsr2h,c
  9595  0024B8  50DF               	movf	indf2,w,c
  9596  0024BA  6EAD               	movwf	4013,c	;volatile
  9597  0024BC  2A08               	incf	PortWrite@i,f,c
  9598  0024BE                     l3580:
  9599  0024BE  FFFF               	dw	65535	; assembler added errata NOP
  9600  0024C0  5007               	movf	PortWrite@buflen,w,c
  9601  0024C2  5C08               	subwf	PortWrite@i,w,c
  9602  0024C4  E3F0               	bnc	l76
  9603  0024C6                     l80:
  9604  0024C6  FFFF               	dw	65535	; assembler added errata NOP
  9605  0024C8  A2AC               	btfss	4012,1,c	;volatile
  9606  0024CA  D7FD               	goto	l80
  9607                           
  9608                           ;interrupts.c: 101: LATCbits.LATC5 = 0;
  9609  0024CC  9A8B               	bcf	3979,5,c	;volatile
  9610  0024CE  0012               	return		;funcret
  9611  0024D0  FFFF               	dw	65535	; errata NOP
  9612  0024D2                     __end_of_PortWrite:
  9613                           	opt stack 0
  9614                           tblptru	equ	0xFF8
  9615                           tblptrh	equ	0xFF7
  9616                           tblptrl	equ	0xFF6
  9617                           tablat	equ	0xFF5
  9618                           prodh	equ	0xFF4
  9619                           prodl	equ	0xFF3
  9620                           intcon	equ	0xFF2
  9621                           postinc0	equ	0xFEE
  9622                           wreg	equ	0xFE8
  9623                           indf1	equ	0xFE7
  9624                           postinc1	equ	0xFE6
  9625                           postdec1	equ	0xFE5
  9626                           fsr1h	equ	0xFE2
  9627                           fsr1l	equ	0xFE1
  9628                           indf2	equ	0xFDF
  9629                           postinc2	equ	0xFDE
  9630                           postdec2	equ	0xFDD
  9631                           plusw2	equ	0xFDB
  9632                           fsr2h	equ	0xFDA
  9633                           fsr2l	equ	0xFD9
  9634                           status	equ	0xFD8
  9635                           
  9636 ;; *************** function _ModbusCalcCRC *****************
  9637 ;; Defined at:
  9638 ;;		line 642 in file "ModbusRtu.c"
  9639 ;; Parameters:    Size  Location     Type
  9640 ;;  u8length        1    wreg     unsigned char 
  9641 ;; Auto vars:     Size  Location     Type
  9642 ;;  u8length        1   12[COMRAM] unsigned char 
  9643 ;;  j               1   14[COMRAM] unsigned char 
  9644 ;;  i               1   13[COMRAM] unsigned char 
  9645 ;;  temp            2   15[COMRAM] unsigned int 
  9646 ;;  flag            2   10[COMRAM] unsigned int 
  9647 ;;  temp2           2    8[COMRAM] unsigned int 
  9648 ;; Return value:  Size  Location     Type
  9649 ;;                  2    4[COMRAM] unsigned short 
  9650 ;; Registers used:
  9651 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9652 ;; Tracked objects:
  9653 ;;		On entry : 0/1
  9654 ;;		On exit  : 0/0
  9655 ;;		Unchanged: 0/0
  9656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9657 ;;      Params:         2       0       0       0       0       0       0
  9658 ;;      Locals:         9       0       0       0       0       0       0
  9659 ;;      Temps:          2       0       0       0       0       0       0
  9660 ;;      Totals:        13       0       0       0       0       0       0
  9661 ;;Total ram usage:       13 bytes
  9662 ;; Hardware stack levels used:    1
  9663 ;; Hardware stack levels required when called:    2
  9664 ;; This function calls:
  9665 ;;		Nothing
  9666 ;; This function is called by:
  9667 ;;		_ModbusSendTxBuffer
  9668 ;;		_ModbusValidateRequest
  9669 ;; This function uses a non-reentrant model
  9670 ;;
  9671                           
  9672                           	psect	text41
  9673  0020D8                     __ptext41:
  9674                           	opt stack 0
  9675  0020D8                     _ModbusCalcCRC:
  9676                           	opt stack 26
  9677                           
  9678                           ;incstack = 0
  9679  0020D8  FFFF               	dw	65535
  9680                           
  9681                           ;ModbusCalcCRC@u8length stored from wreg
  9682  0020DA  6E0D               	movwf	ModbusCalcCRC@u8length,c
  9683                           
  9684                           ;ModbusRtu.c: 643: unsigned int temp, temp2, flag;
  9685                           ;ModbusRtu.c: 644: temp = 0xFFFF;
  9686  0020DC  6810               	setf	ModbusCalcCRC@temp,c
  9687  0020DE  6811               	setf	ModbusCalcCRC@temp+1,c
  9688                           
  9689                           ;ModbusRtu.c: 645: for (uint8_t i = 0; i < u8length; i++)
  9690  0020E0  6A0E               	clrf	ModbusCalcCRC@i,c
  9691  0020E2  D01E               	goto	l3628
  9692  0020E4                     l3606:
  9693                           
  9694                           ;ModbusRtu.c: 646: {
  9695                           ;ModbusRtu.c: 647: temp = temp ^ _au8Buffer[i];
  9696  0020E4  0E00               	movlw	low __au8Buffer
  9697  0020E6  240E               	addwf	ModbusCalcCRC@i,w,c
  9698  0020E8  6ED9               	movwf	fsr2l,c
  9699  0020EA  6ADA               	clrf	fsr2h,c
  9700  0020EC  0E01               	movlw	high __au8Buffer
  9701  0020EE  22DA               	addwfc	fsr2h,f,c
  9702  0020F0  50DF               	movf	indf2,w,c
  9703  0020F2  1A10               	xorwf	ModbusCalcCRC@temp,f,c
  9704                           
  9705                           ;ModbusRtu.c: 648: for (uint8_t j = 1; j <= 8; j++)
  9706  0020F4  0E01               	movlw	1
  9707  0020F6  6E0F               	movwf	ModbusCalcCRC@j,c
  9708  0020F8                     l3614:
  9709  0020F8  FFFF               	dw	65535	; assembler added errata NOP
  9710                           
  9711                           ;ModbusRtu.c: 649: {
  9712                           ;ModbusRtu.c: 650: flag = temp & 0x0001;
  9713  0020FA  0E01               	movlw	1
  9714  0020FC  1410               	andwf	ModbusCalcCRC@temp,w,c
  9715  0020FE  6E0B               	movwf	ModbusCalcCRC@flag,c
  9716  002100  6A0C               	clrf	ModbusCalcCRC@flag+1,c
  9717                           
  9718                           ;ModbusRtu.c: 651: temp >>=1;
  9719  002102  90D8               	bcf	status,0,c
  9720  002104  3211               	rrcf	ModbusCalcCRC@temp+1,f,c
  9721  002106  3210               	rrcf	ModbusCalcCRC@temp,f,c
  9722                           
  9723                           ;ModbusRtu.c: 652: if (flag)
  9724  002108  500B               	movf	ModbusCalcCRC@flag,w,c
  9725  00210A  100C               	iorwf	ModbusCalcCRC@flag+1,w,c
  9726  00210C  E004               	bz	l3622
  9727                           
  9728                           ;ModbusRtu.c: 653: temp ^= 0xA001;
  9729  00210E  0E01               	movlw	1
  9730  002110  1A10               	xorwf	ModbusCalcCRC@temp,f,c
  9731  002112  0EA0               	movlw	160
  9732  002114  1A11               	xorwf	ModbusCalcCRC@temp+1,f,c
  9733  002116                     l3622:
  9734  002116  2A0F               	incf	ModbusCalcCRC@j,f,c
  9735  002118  0E08               	movlw	8
  9736  00211A  640F               	cpfsgt	ModbusCalcCRC@j,c
  9737  00211C  D7ED               	goto	l3614
  9738  00211E  2A0E               	incf	ModbusCalcCRC@i,f,c
  9739  002120                     l3628:
  9740  002120  FFFF               	dw	65535	; assembler added errata NOP
  9741  002122  500D               	movf	ModbusCalcCRC@u8length,w,c
  9742  002124  5C0E               	subwf	ModbusCalcCRC@i,w,c
  9743  002126  E3DE               	bnc	l3606
  9744                           
  9745                           ;ModbusRtu.c: 654: }
  9746                           ;ModbusRtu.c: 655: }
  9747                           ;ModbusRtu.c: 657: temp2 = temp >> 8;
  9748  002128  C011  F009         	movff	ModbusCalcCRC@temp+1,ModbusCalcCRC@temp2
  9749  00212C  6A0A               	clrf	ModbusCalcCRC@temp2+1,c
  9750                           
  9751                           ;ModbusRtu.c: 658: temp = (temp << 8) | temp2;
  9752  00212E  5010               	movf	ModbusCalcCRC@temp,w,c
  9753  002130  6E08               	movwf	(??_ModbusCalcCRC+1)& (0+255),c
  9754  002132  6A07               	clrf	??_ModbusCalcCRC& (0+255),c
  9755  002134  5009               	movf	ModbusCalcCRC@temp2,w,c
  9756  002136  1007               	iorwf	??_ModbusCalcCRC,w,c
  9757  002138  6E10               	movwf	ModbusCalcCRC@temp,c
  9758  00213A  500A               	movf	ModbusCalcCRC@temp2+1,w,c
  9759  00213C  1008               	iorwf	??_ModbusCalcCRC+1,w,c
  9760  00213E  6E11               	movwf	ModbusCalcCRC@temp+1,c
  9761                           
  9762                           ;ModbusRtu.c: 662: return temp;
  9763  002140  C010  F005         	movff	ModbusCalcCRC@temp,?_ModbusCalcCRC
  9764  002144  C011  F006         	movff	ModbusCalcCRC@temp+1,?_ModbusCalcCRC+1
  9765  002148  0012               	return		;funcret
  9766  00214A  FFFF               	dw	65535	; errata NOP
  9767  00214C                     __end_of_ModbusCalcCRC:
  9768                           	opt stack 0
  9769                           tblptru	equ	0xFF8
  9770                           tblptrh	equ	0xFF7
  9771                           tblptrl	equ	0xFF6
  9772                           tablat	equ	0xFF5
  9773                           prodh	equ	0xFF4
  9774                           prodl	equ	0xFF3
  9775                           intcon	equ	0xFF2
  9776                           postinc0	equ	0xFEE
  9777                           wreg	equ	0xFE8
  9778                           indf1	equ	0xFE7
  9779                           postinc1	equ	0xFE6
  9780                           postdec1	equ	0xFE5
  9781                           fsr1h	equ	0xFE2
  9782                           fsr1l	equ	0xFE1
  9783                           indf2	equ	0xFDF
  9784                           postinc2	equ	0xFDE
  9785                           postdec2	equ	0xFDD
  9786                           plusw2	equ	0xFDB
  9787                           fsr2h	equ	0xFDA
  9788                           fsr2l	equ	0xFD9
  9789                           status	equ	0xFD8
  9790                           
  9791 ;; *************** function _ModbusGetRxBuffer *****************
  9792 ;; Defined at:
  9793 ;;		line 493 in file "ModbusRtu.c"
  9794 ;; Parameters:    Size  Location     Type
  9795 ;;		None
  9796 ;; Auto vars:     Size  Location     Type
  9797 ;;  bBuffOverflo    1    6[COMRAM] unsigned char 
  9798 ;; Return value:  Size  Location     Type
  9799 ;;                  1    wreg      unsigned char 
  9800 ;; Registers used:
  9801 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9802 ;; Tracked objects:
  9803 ;;		On entry : F/0
  9804 ;;		On exit  : 0/0
  9805 ;;		Unchanged: 0/0
  9806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9807 ;;      Params:         0       0       0       0       0       0       0
  9808 ;;      Locals:         1       0       0       0       0       0       0
  9809 ;;      Temps:          1       0       0       0       0       0       0
  9810 ;;      Totals:         2       0       0       0       0       0       0
  9811 ;;Total ram usage:        2 bytes
  9812 ;; Hardware stack levels used:    1
  9813 ;; Hardware stack levels required when called:    3
  9814 ;; This function calls:
  9815 ;;		_PortAvailable
  9816 ;;		_PortRead
  9817 ;; This function is called by:
  9818 ;;		_ModbusPoll
  9819 ;; This function uses a non-reentrant model
  9820 ;;
  9821                           
  9822                           	psect	text42
  9823  002410                     __ptext42:
  9824                           	opt stack 0
  9825  002410                     _ModbusGetRxBuffer:
  9826                           	opt stack 26
  9827                           
  9828                           ;incstack = 0
  9829  002410  FFFF               	dw	65535
  9830                           
  9831                           ; BSR set to: 0
  9832                           ;ModbusRtu.c: 495: bool bBuffOverflow = 0;
  9833  002412  6A07               	clrf	ModbusGetRxBuffer@bBuffOverflow,c
  9834                           
  9835                           ;ModbusRtu.c: 500: _u8BufferSize = 0;
  9836  002414  6A71               	clrf	__u8BufferSize,c
  9837                           
  9838                           ;ModbusRtu.c: 502: while ( PortAvailable())
  9839  002416  D011               	goto	l3980
  9840  002418                     l3972:
  9841                           
  9842                           ;ModbusRtu.c: 503: {
  9843                           ;ModbusRtu.c: 504: _au8Buffer[ _u8BufferSize ] = PortRead();
  9844  002418  EC69  F012         	call	_PortRead	;wreg free
  9845  00241C  6E06               	movwf	??_ModbusGetRxBuffer& (0+255),c
  9846  00241E  0E00               	movlw	low __au8Buffer
  9847  002420  2471               	addwf	__u8BufferSize,w,c
  9848  002422  6ED9               	movwf	fsr2l,c
  9849  002424  6ADA               	clrf	fsr2h,c
  9850  002426  0E01               	movlw	high __au8Buffer
  9851  002428  22DA               	addwfc	fsr2h,f,c
  9852  00242A  C006  FFDF         	movff	??_ModbusGetRxBuffer,indf2
  9853                           
  9854                           ;ModbusRtu.c: 506: _u8BufferSize ++;
  9855  00242E  2A71               	incf	__u8BufferSize,f,c
  9856                           
  9857                           ;ModbusRtu.c: 508: if (_u8BufferSize >= 140) bBuffOverflow = 1;
  9858  002430  0E8B               	movlw	139
  9859  002432  6471               	cpfsgt	__u8BufferSize,c
  9860  002434  D002               	goto	l3980
  9861  002436  0E01               	movlw	1
  9862  002438  6E07               	movwf	ModbusGetRxBuffer@bBuffOverflow,c
  9863  00243A                     l3980:
  9864  00243A  FFFF               	dw	65535	; assembler added errata NOP
  9865  00243C  EC3A  F013         	call	_PortAvailable	;wreg free
  9866  002440  0900               	iorlw	0
  9867  002442  E1EA               	bnz	l3972
  9868                           
  9869                           ;ModbusRtu.c: 513: _u16errCnt++;
  9870  002444  5007               	movf	ModbusGetRxBuffer@bBuffOverflow,w,c
  9871  002446  E002               	bz	l3988
  9872                           
  9873                           ;ModbusRtu.c: 514: return ERR_BUFF_OVERFLOW;
  9874  002448  0EFD               	movlw	253
  9875  00244A  D001               	goto	l804
  9876  00244C                     l3988:
  9877                           
  9878                           ;ModbusRtu.c: 515: }
  9879                           ;ModbusRtu.c: 516: return _u8BufferSize;
  9880  00244C  5071               	movf	__u8BufferSize,w,c
  9881  00244E                     l804:
  9882  00244E  FFFF               	dw	65535	; assembler added errata NOP
  9883  002450  0012               	return		;funcret
  9884  002452  FFFF               	dw	65535	; errata NOP
  9885  002454                     __end_of_ModbusGetRxBuffer:
  9886                           	opt stack 0
  9887                           tblptru	equ	0xFF8
  9888                           tblptrh	equ	0xFF7
  9889                           tblptrl	equ	0xFF6
  9890                           tablat	equ	0xFF5
  9891                           prodh	equ	0xFF4
  9892                           prodl	equ	0xFF3
  9893                           intcon	equ	0xFF2
  9894                           postinc0	equ	0xFEE
  9895                           wreg	equ	0xFE8
  9896                           indf1	equ	0xFE7
  9897                           postinc1	equ	0xFE6
  9898                           postdec1	equ	0xFE5
  9899                           fsr1h	equ	0xFE2
  9900                           fsr1l	equ	0xFE1
  9901                           indf2	equ	0xFDF
  9902                           postinc2	equ	0xFDE
  9903                           postdec2	equ	0xFDD
  9904                           plusw2	equ	0xFDB
  9905                           fsr2h	equ	0xFDA
  9906                           fsr2l	equ	0xFD9
  9907                           status	equ	0xFD8
  9908                           
  9909 ;; *************** function _PortRead *****************
  9910 ;; Defined at:
  9911 ;;		line 57 in file "interrupts.c"
  9912 ;; Parameters:    Size  Location     Type
  9913 ;;		None
  9914 ;; Auto vars:     Size  Location     Type
  9915 ;;  ret             1    4[COMRAM] unsigned char 
  9916 ;; Return value:  Size  Location     Type
  9917 ;;                  1    wreg      unsigned char 
  9918 ;; Registers used:
  9919 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9920 ;; Tracked objects:
  9921 ;;		On entry : 0/0
  9922 ;;		On exit  : 0/0
  9923 ;;		Unchanged: 0/0
  9924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9925 ;;      Params:         0       0       0       0       0       0       0
  9926 ;;      Locals:         1       0       0       0       0       0       0
  9927 ;;      Temps:          0       0       0       0       0       0       0
  9928 ;;      Totals:         1       0       0       0       0       0       0
  9929 ;;Total ram usage:        1 bytes
  9930 ;; Hardware stack levels used:    1
  9931 ;; Hardware stack levels required when called:    2
  9932 ;; This function calls:
  9933 ;;		Nothing
  9934 ;; This function is called by:
  9935 ;;		_ModbusGetRxBuffer
  9936 ;; This function uses a non-reentrant model
  9937 ;;
  9938                           
  9939                           	psect	text43
  9940  0024D2                     __ptext43:
  9941                           	opt stack 0
  9942  0024D2                     _PortRead:
  9943                           	opt stack 26
  9944                           
  9945                           ;incstack = 0
  9946  0024D2  FFFF               	dw	65535
  9947                           
  9948                           ;interrupts.c: 59: (INTCONbits.GIE = 0);
  9949  0024D4  9EF2               	bcf	intcon,7,c	;volatile
  9950                           
  9951                           ;interrupts.c: 60: if(UartBufferLen > 0)
  9952  0024D6  506F               	movf	_UartBufferLen,w,c	;volatile
  9953  0024D8  E012               	bz	l59
  9954                           
  9955                           ;interrupts.c: 61: {
  9956                           ;interrupts.c: 63: uint8_t ret = UartRingBuffer[UartBufferTail];
  9957  0024DA  0E00               	movlw	low _UartRingBuffer
  9958  0024DC  2470               	addwf	_UartBufferTail,w,c	;volatile
  9959  0024DE  6ED9               	movwf	fsr2l,c
  9960  0024E0  6ADA               	clrf	fsr2h,c
  9961  0024E2  0E02               	movlw	high _UartRingBuffer
  9962  0024E4  22DA               	addwfc	fsr2h,f,c
  9963  0024E6  50DF               	movf	indf2,w,c
  9964  0024E8  6E05               	movwf	PortRead@ret,c
  9965                           
  9966                           ;interrupts.c: 64: UartBufferLen--;
  9967  0024EA  066F               	decf	_UartBufferLen,f,c	;volatile
  9968                           
  9969                           ;interrupts.c: 65: if(UartBufferTail == 256u - 1)
  9970  0024EC  2870               	incf	_UartBufferTail,w,c
  9971  0024EE  E102               	bnz	l3672
  9972                           
  9973                           ;interrupts.c: 66: UartBufferTail = 0;
  9974  0024F0  6A70               	clrf	_UartBufferTail,c	;volatile
  9975  0024F2  D001               	goto	l3674
  9976  0024F4                     l3672:
  9977                           
  9978                           ;interrupts.c: 67: else
  9979                           ;interrupts.c: 68: UartBufferTail++;
  9980  0024F4  2A70               	incf	_UartBufferTail,f,c	;volatile
  9981  0024F6                     l3674:
  9982  0024F6  FFFF               	dw	65535	; assembler added errata NOP
  9983                           
  9984                           ;interrupts.c: 69: (INTCONbits.GIE = 1);
  9985  0024F8  8EF2               	bsf	intcon,7,c	;volatile
  9986                           
  9987                           ;interrupts.c: 70: return ret;
  9988  0024FA  5005               	movf	PortRead@ret,w,c
  9989  0024FC  D002               	goto	l62
  9990  0024FE                     l59:
  9991                           
  9992                           ;interrupts.c: 71: }
  9993                           ;interrupts.c: 72: (INTCONbits.GIE = 1);
  9994  0024FE  8EF2               	bsf	intcon,7,c	;volatile
  9995                           
  9996                           ;interrupts.c: 73: return 0;
  9997  002500  0E00               	movlw	0
  9998  002502                     l62:
  9999  002502  FFFF               	dw	65535	; assembler added errata NOP
 10000  002504  0012               	return		;funcret
 10001  002506  FFFF               	dw	65535	; errata NOP
 10002  002508                     __end_of_PortRead:
 10003                           	opt stack 0
 10004                           tblptru	equ	0xFF8
 10005                           tblptrh	equ	0xFF7
 10006                           tblptrl	equ	0xFF6
 10007                           tablat	equ	0xFF5
 10008                           prodh	equ	0xFF4
 10009                           prodl	equ	0xFF3
 10010                           intcon	equ	0xFF2
 10011                           postinc0	equ	0xFEE
 10012                           wreg	equ	0xFE8
 10013                           indf1	equ	0xFE7
 10014                           postinc1	equ	0xFE6
 10015                           postdec1	equ	0xFE5
 10016                           fsr1h	equ	0xFE2
 10017                           fsr1l	equ	0xFE1
 10018                           indf2	equ	0xFDF
 10019                           postinc2	equ	0xFDE
 10020                           postdec2	equ	0xFDD
 10021                           plusw2	equ	0xFDB
 10022                           fsr2h	equ	0xFDA
 10023                           fsr2l	equ	0xFD9
 10024                           status	equ	0xFD8
 10025                           
 10026 ;; *************** function _PortAvailable *****************
 10027 ;; Defined at:
 10028 ;;		line 52 in file "interrupts.c"
 10029 ;; Parameters:    Size  Location     Type
 10030 ;;		None
 10031 ;; Auto vars:     Size  Location     Type
 10032 ;;		None
 10033 ;; Return value:  Size  Location     Type
 10034 ;;                  1    wreg      unsigned char 
 10035 ;; Registers used:
 10036 ;;		wreg, status,2
 10037 ;; Tracked objects:
 10038 ;;		On entry : 0/0
 10039 ;;		On exit  : 0/0
 10040 ;;		Unchanged: 0/0
 10041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10042 ;;      Params:         0       0       0       0       0       0       0
 10043 ;;      Locals:         0       0       0       0       0       0       0
 10044 ;;      Temps:          0       0       0       0       0       0       0
 10045 ;;      Totals:         0       0       0       0       0       0       0
 10046 ;;Total ram usage:        0 bytes
 10047 ;; Hardware stack levels used:    1
 10048 ;; Hardware stack levels required when called:    2
 10049 ;; This function calls:
 10050 ;;		Nothing
 10051 ;; This function is called by:
 10052 ;;		_ModbusPoll
 10053 ;;		_ModbusGetRxBuffer
 10054 ;; This function uses a non-reentrant model
 10055 ;;
 10056                           
 10057                           	psect	text44
 10058  002674                     __ptext44:
 10059                           	opt stack 0
 10060  002674                     _PortAvailable:
 10061                           	opt stack 27
 10062                           
 10063                           ;incstack = 0
 10064  002674  FFFF               	dw	65535
 10065                           
 10066                           ;interrupts.c: 54: return UartBufferLen;
 10067  002676  506F               	movf	_UartBufferLen,w,c	;volatile
 10068  002678  0012               	return		;funcret
 10069  00267A  FFFF               	dw	65535	; errata NOP
 10070  00267C                     __end_of_PortAvailable:
 10071                           	opt stack 0
 10072                           tblptru	equ	0xFF8
 10073                           tblptrh	equ	0xFF7
 10074                           tblptrl	equ	0xFF6
 10075                           tablat	equ	0xFF5
 10076                           prodh	equ	0xFF4
 10077                           prodl	equ	0xFF3
 10078                           intcon	equ	0xFF2
 10079                           postinc0	equ	0xFEE
 10080                           wreg	equ	0xFE8
 10081                           indf1	equ	0xFE7
 10082                           postinc1	equ	0xFE6
 10083                           postdec1	equ	0xFE5
 10084                           fsr1h	equ	0xFE2
 10085                           fsr1l	equ	0xFE1
 10086                           indf2	equ	0xFDF
 10087                           postinc2	equ	0xFDE
 10088                           postdec2	equ	0xFDD
 10089                           plusw2	equ	0xFDB
 10090                           fsr2h	equ	0xFDA
 10091                           fsr2l	equ	0xFD9
 10092                           status	equ	0xFD8
 10093                           
 10094 ;; *************** function _ModbusBuildException *****************
 10095 ;; Defined at:
 10096 ;;		line 804 in file "ModbusRtu.c"
 10097 ;; Parameters:    Size  Location     Type
 10098 ;;  u8exception     1    wreg     unsigned char 
 10099 ;; Auto vars:     Size  Location     Type
 10100 ;;  u8exception     1    4[COMRAM] unsigned char 
 10101 ;;  u8func          1    5[COMRAM] unsigned char 
 10102 ;; Return value:  Size  Location     Type
 10103 ;;                  1    wreg      void 
 10104 ;; Registers used:
 10105 ;;		wreg, status,2, status,0
 10106 ;; Tracked objects:
 10107 ;;		On entry : 0/1
 10108 ;;		On exit  : F/1
 10109 ;;		Unchanged: 0/0
 10110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10111 ;;      Params:         0       0       0       0       0       0       0
 10112 ;;      Locals:         2       0       0       0       0       0       0
 10113 ;;      Temps:          0       0       0       0       0       0       0
 10114 ;;      Totals:         2       0       0       0       0       0       0
 10115 ;;Total ram usage:        2 bytes
 10116 ;; Hardware stack levels used:    1
 10117 ;; Hardware stack levels required when called:    2
 10118 ;; This function calls:
 10119 ;;		Nothing
 10120 ;; This function is called by:
 10121 ;;		_ModbusPoll
 10122 ;; This function uses a non-reentrant model
 10123 ;;
 10124                           
 10125                           	psect	text45
 10126  0025B2                     __ptext45:
 10127                           	opt stack 0
 10128  0025B2                     _ModbusBuildException:
 10129                           	opt stack 27
 10130                           
 10131                           ;incstack = 0
 10132  0025B2  FFFF               	dw	65535
 10133                           
 10134                           ;ModbusBuildException@u8exception stored from wreg
 10135  0025B4  6E05               	movwf	ModbusBuildException@u8exception,c
 10136                           
 10137                           ;ModbusRtu.c: 805: uint8_t u8func = _au8Buffer[ FUNC ];
 10138  0025B6  C101  F006         	movff	__au8Buffer+1,ModbusBuildException@u8func
 10139                           
 10140                           ;ModbusRtu.c: 807: _au8Buffer[ ID ] = _u8id;
 10141  0025BA  C0C3  F100         	movff	__u8id,__au8Buffer
 10142                           
 10143                           ;ModbusRtu.c: 808: _au8Buffer[ FUNC ] = u8func + 0x80;
 10144  0025BE  5006               	movf	ModbusBuildException@u8func,w,c
 10145  0025C0  0F80               	addlw	128
 10146  0025C2  0101               	movlb	1	; () banked
 10147  0025C4  6F01               	movwf	(__au8Buffer+1)& (0+255),b
 10148                           
 10149                           ; BSR set to: 1
 10150                           ;ModbusRtu.c: 809: _au8Buffer[ 2 ] = u8exception;
 10151  0025C6  C005  F102         	movff	ModbusBuildException@u8exception,__au8Buffer+2
 10152                           
 10153                           ; BSR set to: 1
 10154                           ;ModbusRtu.c: 810: _u8BufferSize = EXCEPTION_SIZE;
 10155  0025CA  0E03               	movlw	3
 10156  0025CC  6E71               	movwf	__u8BufferSize,c
 10157                           
 10158                           ; BSR set to: 1
 10159  0025CE  0C03               	retlw	3	;funcret
 10160  0025D0  FFFF               	dw	65535	; errata NOP
 10161  0025D2                     __end_of_ModbusBuildException:
 10162                           	opt stack 0
 10163                           tblptru	equ	0xFF8
 10164                           tblptrh	equ	0xFF7
 10165                           tblptrl	equ	0xFF6
 10166                           tablat	equ	0xFF5
 10167                           prodh	equ	0xFF4
 10168                           prodl	equ	0xFF3
 10169                           intcon	equ	0xFF2
 10170                           postinc0	equ	0xFEE
 10171                           wreg	equ	0xFE8
 10172                           indf1	equ	0xFE7
 10173                           postinc1	equ	0xFE6
 10174                           postdec1	equ	0xFE5
 10175                           fsr1h	equ	0xFE2
 10176                           fsr1l	equ	0xFE1
 10177                           indf2	equ	0xFDF
 10178                           postinc2	equ	0xFDE
 10179                           postdec2	equ	0xFDD
 10180                           plusw2	equ	0xFDB
 10181                           fsr2h	equ	0xFDA
 10182                           fsr2l	equ	0xFD9
 10183                           status	equ	0xFD8
 10184                           
 10185 ;; *************** function _InitApp *****************
 10186 ;; Defined at:
 10187 ;;		line 66 in file "user.c"
 10188 ;; Parameters:    Size  Location     Type
 10189 ;;		None
 10190 ;; Auto vars:     Size  Location     Type
 10191 ;;  i               1    4[COMRAM] unsigned char 
 10192 ;; Return value:  Size  Location     Type
 10193 ;;                  1    wreg      void 
 10194 ;; Registers used:
 10195 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10196 ;; Tracked objects:
 10197 ;;		On entry : 0/0
 10198 ;;		On exit  : 0/0
 10199 ;;		Unchanged: 0/0
 10200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10201 ;;      Params:         0       0       0       0       0       0       0
 10202 ;;      Locals:         1       0       0       0       0       0       0
 10203 ;;      Temps:          0       0       0       0       0       0       0
 10204 ;;      Totals:         1       0       0       0       0       0       0
 10205 ;;Total ram usage:        1 bytes
 10206 ;; Hardware stack levels used:    1
 10207 ;; Hardware stack levels required when called:    3
 10208 ;; This function calls:
 10209 ;;		_InitUartBuffer
 10210 ;;		_PortBegin
 10211 ;; This function is called by:
 10212 ;;		_main
 10213 ;; This function uses a non-reentrant model
 10214 ;;
 10215                           
 10216                           	psect	text46
 10217  001FCE                     __ptext46:
 10218                           	opt stack 0
 10219  001FCE                     _InitApp:
 10220                           	opt stack 27
 10221                           
 10222                           ; BSR set to: 1
 10223                           ;incstack = 0
 10224  001FCE  FFFF               	dw	65535
 10225                           
 10226                           ;user.c: 77: INTCONbits.PEIE = 1;
 10227  001FD0  8CF2               	bsf	intcon,6,c	;volatile
 10228                           
 10229                           ;user.c: 78: (INTCONbits.GIE = 1);
 10230  001FD2  8EF2               	bsf	intcon,7,c	;volatile
 10231                           
 10232                           ;user.c: 79: RCONbits.IPEN = 1;
 10233  001FD4  8ED0               	bsf	4048,7,c	;volatile
 10234                           
 10235                           ;user.c: 84: T1CONbits.RD16 = 1;
 10236  001FD6  8ECD               	bsf	4045,7,c	;volatile
 10237                           
 10238                           ;user.c: 85: T1CONbits.T1SYNC = 0;
 10239  001FD8  94CD               	bcf	4045,2,c	;volatile
 10240                           
 10241                           ;user.c: 86: T1CONbits.TMR1CS = 0;
 10242  001FDA  92CD               	bcf	4045,1,c	;volatile
 10243                           
 10244                           ;user.c: 88: T1CONbits.T1CKPS = 0;
 10245  001FDC  0ECF               	movlw	-49
 10246  001FDE  16CD               	andwf	4045,f,c	;volatile
 10247                           
 10248                           ;user.c: 92: PIE1bits.TMR1IE = 1;
 10249  001FE0  809D               	bsf	3997,0,c	;volatile
 10250                           
 10251                           ;user.c: 93: IPR1bits.TMR1IP = 1;
 10252  001FE2  809F               	bsf	3999,0,c	;volatile
 10253                           
 10254                           ;user.c: 94: ((void)(TMR1H=((0x10000 - 10000000L/4 / 1000)>>8),TMR1L=((0x10000 - 1000000
      +                          0L/4 / 1000)&0xFF)));
 10255  001FE4  0EF6               	movlw	246
 10256  001FE6  6ECF               	movwf	4047,c	;volatile
 10257  001FE8  0E3C               	movlw	60
 10258  001FEA  6ECE               	movwf	4046,c	;volatile
 10259                           
 10260                           ;user.c: 97: PIR1bits.TMR1IF = 0;
 10261  001FEC  909E               	bcf	3998,0,c	;volatile
 10262                           
 10263                           ;user.c: 99: T1CONbits.TMR1ON = 1;
 10264  001FEE  80CD               	bsf	4045,0,c	;volatile
 10265                           
 10266                           ;user.c: 102: T0CONbits.T08BIT = 0;
 10267  001FF0  9CD5               	bcf	4053,6,c	;volatile
 10268                           
 10269                           ;user.c: 103: T0CONbits.T0CS = 0;
 10270  001FF2  9AD5               	bcf	4053,5,c	;volatile
 10271                           
 10272                           ;user.c: 105: T0CONbits.PSA = 0;
 10273  001FF4  96D5               	bcf	4053,3,c	;volatile
 10274                           
 10275                           ;user.c: 116: T0CONbits.T0PS = 7;
 10276  001FF6  0E07               	movlw	7
 10277  001FF8  12D5               	iorwf	4053,f,c	;volatile
 10278                           
 10279                           ;user.c: 120: INTCONbits.TMR0IE = 1;
 10280  001FFA  8AF2               	bsf	intcon,5,c	;volatile
 10281                           
 10282                           ;user.c: 121: INTCON2bits.TMR0IP = 1;
 10283  001FFC  84F1               	bsf	intcon2,2,c	;volatile
 10284                           
 10285                           ;user.c: 122: ((void)(TMR0H=((0x10000 - (10000000L/4 * 6 / 256 + 0))>>8),TMR0L=((0x10000
      +                           - (10000000L/4 * 6 / 256 + 0))&0xFF)));
 10286  001FFE  0E1B               	movlw	27
 10287  002000  6ED7               	movwf	4055,c	;volatile
 10288  002002  0E1F               	movlw	31
 10289  002004  6ED6               	movwf	4054,c	;volatile
 10290                           
 10291                           ;user.c: 125: INTCONbits.TMR0IF = 0;
 10292  002006  94F2               	bcf	intcon,2,c	;volatile
 10293                           
 10294                           ;user.c: 127: T0CONbits.TMR0ON = 1;
 10295  002008  8ED5               	bsf	4053,7,c	;volatile
 10296                           
 10297                           ;user.c: 132: InitUartBuffer();
 10298  00200A  EC2F  F013         	call	_InitUartBuffer	;wreg free
 10299                           
 10300                           ;user.c: 134: PortBegin();
 10301  00200E  EC06  F013         	call	_PortBegin	;wreg free
 10302                           
 10303                           ; BSR set to: 0
 10304                           ;user.c: 135: PIE1bits.RCIE = 1;
 10305  002012  8A9D               	bsf	3997,5,c	;volatile
 10306                           
 10307                           ; BSR set to: 0
 10308                           ;user.c: 137: IPR1bits.RCIP = 1;
 10309  002014  8A9F               	bsf	3999,5,c	;volatile
 10310                           
 10311                           ; BSR set to: 0
 10312                           ;user.c: 141: for (unsigned char i = 0; i < 15; i++)
 10313  002016  6A05               	clrf	InitApp@i,c
 10314  002018                     l4656:
 10315  002018  FFFF               	dw	65535	; assembler added errata NOP
 10316                           
 10317                           ;user.c: 142: _MODBUSInputRegs[i] = 0;
 10318  00201A  5005               	movf	InitApp@i,w,c
 10319  00201C  0D02               	mullw	2
 10320  00201E  0EAA               	movlw	low __MODBUSInputRegs
 10321  002020  24F3               	addwf	prodl,w,c
 10322  002022  6ED9               	movwf	fsr2l,c
 10323  002024  0E01               	movlw	high __MODBUSInputRegs
 10324  002026  20F4               	addwfc	prodh,w,c
 10325  002028  6EDA               	movwf	fsr2h,c
 10326  00202A  6ADE               	clrf	postinc2,c
 10327  00202C  6ADD               	clrf	postdec2,c
 10328  00202E  2A05               	incf	InitApp@i,f,c
 10329  002030  0E0E               	movlw	14
 10330  002032  6405               	cpfsgt	InitApp@i,c
 10331  002034  D7F1               	goto	l4656
 10332                           
 10333                           ;user.c: 148: TRISB = 0;
 10334  002036  6A93               	clrf	3987,c	;volatile
 10335                           
 10336                           ;user.c: 151: LATAbits.LATA0 = 0;
 10337  002038  9089               	bcf	3977,0,c	;volatile
 10338                           
 10339                           ;user.c: 152: LATAbits.LATA1 = 0;
 10340  00203A  9289               	bcf	3977,1,c	;volatile
 10341                           
 10342                           ;user.c: 153: LATAbits.LATA2 = 0;
 10343  00203C  9489               	bcf	3977,2,c	;volatile
 10344                           
 10345                           ;user.c: 154: LATAbits.LATA3 = 0;
 10346  00203E  9689               	bcf	3977,3,c	;volatile
 10347                           
 10348                           ;user.c: 155: TRISAbits.RA0 = 0;
 10349  002040  9092               	bcf	3986,0,c	;volatile
 10350                           
 10351                           ;user.c: 156: TRISAbits.RA1 = 0;
 10352  002042  9292               	bcf	3986,1,c	;volatile
 10353                           
 10354                           ;user.c: 157: TRISAbits.RA2 = 0;
 10355  002044  9492               	bcf	3986,2,c	;volatile
 10356                           
 10357                           ;user.c: 158: TRISAbits.RA3 = 0;
 10358  002046  9692               	bcf	3986,3,c	;volatile
 10359                           
 10360                           ;user.c: 160: TRISCbits.RC3 = 1;
 10361  002048  8694               	bsf	3988,3,c	;volatile
 10362                           
 10363                           ;user.c: 161: TRISCbits.RC1 = 1;
 10364  00204A  8294               	bsf	3988,1,c	;volatile
 10365                           
 10366                           ;user.c: 162: TRISCbits.RC0 = 0;
 10367  00204C  9094               	bcf	3988,0,c	;volatile
 10368                           
 10369                           ;user.c: 164: LATCbits.LATC2 = 0;
 10370  00204E  948B               	bcf	3979,2,c	;volatile
 10371  002050  0012               	return		;funcret
 10372  002052  FFFF               	dw	65535	; errata NOP
 10373  002054                     __end_of_InitApp:
 10374                           	opt stack 0
 10375                           tblptru	equ	0xFF8
 10376                           tblptrh	equ	0xFF7
 10377                           tblptrl	equ	0xFF6
 10378                           tablat	equ	0xFF5
 10379                           prodh	equ	0xFF4
 10380                           prodl	equ	0xFF3
 10381                           intcon	equ	0xFF2
 10382                           intcon2	equ	0xFF1
 10383                           postinc0	equ	0xFEE
 10384                           wreg	equ	0xFE8
 10385                           indf1	equ	0xFE7
 10386                           postinc1	equ	0xFE6
 10387                           postdec1	equ	0xFE5
 10388                           fsr1h	equ	0xFE2
 10389                           fsr1l	equ	0xFE1
 10390                           indf2	equ	0xFDF
 10391                           postinc2	equ	0xFDE
 10392                           postdec2	equ	0xFDD
 10393                           plusw2	equ	0xFDB
 10394                           fsr2h	equ	0xFDA
 10395                           fsr2l	equ	0xFD9
 10396                           status	equ	0xFD8
 10397                           
 10398 ;; *************** function _PortBegin *****************
 10399 ;; Defined at:
 10400 ;;		line 48 in file "user.c"
 10401 ;; Parameters:    Size  Location     Type
 10402 ;;		None
 10403 ;; Auto vars:     Size  Location     Type
 10404 ;;		None
 10405 ;; Return value:  Size  Location     Type
 10406 ;;                  1    wreg      void 
 10407 ;; Registers used:
 10408 ;;		wreg, status,2
 10409 ;; Tracked objects:
 10410 ;;		On entry : F/0
 10411 ;;		On exit  : F/0
 10412 ;;		Unchanged: F/0
 10413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10414 ;;      Params:         0       0       0       0       0       0       0
 10415 ;;      Locals:         0       0       0       0       0       0       0
 10416 ;;      Temps:          0       0       0       0       0       0       0
 10417 ;;      Totals:         0       0       0       0       0       0       0
 10418 ;;Total ram usage:        0 bytes
 10419 ;; Hardware stack levels used:    1
 10420 ;; Hardware stack levels required when called:    2
 10421 ;; This function calls:
 10422 ;;		Nothing
 10423 ;; This function is called by:
 10424 ;;		_InitApp
 10425 ;; This function uses a non-reentrant model
 10426 ;;
 10427                           
 10428                           	psect	text47
 10429  00260C                     __ptext47:
 10430                           	opt stack 0
 10431  00260C                     _PortBegin:
 10432                           	opt stack 27
 10433                           
 10434                           ;incstack = 0
 10435  00260C  FFFF               	dw	65535
 10436                           
 10437                           ; BSR set to: 0
 10438                           ;user.c: 50: TXSTA = 0;
 10439  00260E  6AAC               	clrf	4012,c	;volatile
 10440                           
 10441                           ;user.c: 51: TXSTAbits.TXEN = 1;
 10442  002610  8AAC               	bsf	4012,5,c	;volatile
 10443                           
 10444                           ;user.c: 52: TXSTAbits.BRGH = 1;
 10445  002612  84AC               	bsf	4012,2,c	;volatile
 10446                           
 10447                           ; BSR set to: 0
 10448                           ;user.c: 54: SPBRG = ( (((10000000L / 9600) / 8) - 1) / 2 );
 10449  002614  0E40               	movlw	64
 10450  002616  6EAF               	movwf	4015,c	;volatile
 10451                           
 10452                           ; BSR set to: 0
 10453                           ;user.c: 55: RCSTA = 0;
 10454  002618  6AAB               	clrf	4011,c	;volatile
 10455                           
 10456                           ; BSR set to: 0
 10457                           ;user.c: 56: RCSTAbits.SPEN = 1;
 10458  00261A  8EAB               	bsf	4011,7,c	;volatile
 10459                           
 10460                           ; BSR set to: 0
 10461                           ;user.c: 57: RCSTAbits.CREN = 1;
 10462  00261C  88AB               	bsf	4011,4,c	;volatile
 10463                           
 10464                           ; BSR set to: 0
 10465                           ;user.c: 59: TRISCbits.RC5 = 0;
 10466  00261E  9A94               	bcf	3988,5,c	;volatile
 10467                           
 10468                           ; BSR set to: 0
 10469                           ;user.c: 60: LATCbits.LATC5 = 0;
 10470  002620  9A8B               	bcf	3979,5,c	;volatile
 10471                           
 10472                           ; BSR set to: 0
 10473  002622  0012               	return		;funcret
 10474  002624  FFFF               	dw	65535	; errata NOP
 10475  002626                     __end_of_PortBegin:
 10476                           	opt stack 0
 10477                           tblptru	equ	0xFF8
 10478                           tblptrh	equ	0xFF7
 10479                           tblptrl	equ	0xFF6
 10480                           tablat	equ	0xFF5
 10481                           prodh	equ	0xFF4
 10482                           prodl	equ	0xFF3
 10483                           intcon	equ	0xFF2
 10484                           intcon2	equ	0xFF1
 10485                           postinc0	equ	0xFEE
 10486                           wreg	equ	0xFE8
 10487                           indf1	equ	0xFE7
 10488                           postinc1	equ	0xFE6
 10489                           postdec1	equ	0xFE5
 10490                           fsr1h	equ	0xFE2
 10491                           fsr1l	equ	0xFE1
 10492                           indf2	equ	0xFDF
 10493                           postinc2	equ	0xFDE
 10494                           postdec2	equ	0xFDD
 10495                           plusw2	equ	0xFDB
 10496                           fsr2h	equ	0xFDA
 10497                           fsr2l	equ	0xFD9
 10498                           status	equ	0xFD8
 10499                           
 10500 ;; *************** function _InitUartBuffer *****************
 10501 ;; Defined at:
 10502 ;;		line 43 in file "interrupts.c"
 10503 ;; Parameters:    Size  Location     Type
 10504 ;;		None
 10505 ;; Auto vars:     Size  Location     Type
 10506 ;;		None
 10507 ;; Return value:  Size  Location     Type
 10508 ;;                  1    wreg      void 
 10509 ;; Registers used:
 10510 ;;		None
 10511 ;; Tracked objects:
 10512 ;;		On entry : 0/0
 10513 ;;		On exit  : F/0
 10514 ;;		Unchanged: 0/0
 10515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10516 ;;      Params:         0       0       0       0       0       0       0
 10517 ;;      Locals:         0       0       0       0       0       0       0
 10518 ;;      Temps:          0       0       0       0       0       0       0
 10519 ;;      Totals:         0       0       0       0       0       0       0
 10520 ;;Total ram usage:        0 bytes
 10521 ;; Hardware stack levels used:    1
 10522 ;; Hardware stack levels required when called:    2
 10523 ;; This function calls:
 10524 ;;		Nothing
 10525 ;; This function is called by:
 10526 ;;		_InitApp
 10527 ;; This function uses a non-reentrant model
 10528 ;;
 10529                           
 10530                           	psect	text48
 10531  00265E                     __ptext48:
 10532                           	opt stack 0
 10533  00265E                     _InitUartBuffer:
 10534                           	opt stack 27
 10535                           
 10536                           ; BSR set to: 0
 10537                           ;incstack = 0
 10538  00265E  FFFF               	dw	65535
 10539                           
 10540                           ;interrupts.c: 45: UartBufferHead = 0;
 10541  002660  0100               	movlb	0	; () banked
 10542  002662  6BBF               	clrf	_UartBufferHead& (0+255),b
 10543                           
 10544                           ;interrupts.c: 46: UartBufferTail = 0;
 10545  002664  6A70               	clrf	_UartBufferTail,c	;volatile
 10546                           
 10547                           ;interrupts.c: 47: UartBufferLen = 0;
 10548  002666  6A6F               	clrf	_UartBufferLen,c	;volatile
 10549                           
 10550                           ; BSR set to: 0
 10551  002668  0012               	return		;funcret
 10552  00266A  FFFF               	dw	65535	; errata NOP
 10553  00266C                     __end_of_InitUartBuffer:
 10554                           	opt stack 0
 10555                           tblptru	equ	0xFF8
 10556                           tblptrh	equ	0xFF7
 10557                           tblptrl	equ	0xFF6
 10558                           tablat	equ	0xFF5
 10559                           prodh	equ	0xFF4
 10560                           prodl	equ	0xFF3
 10561                           intcon	equ	0xFF2
 10562                           intcon2	equ	0xFF1
 10563                           postinc0	equ	0xFEE
 10564                           wreg	equ	0xFE8
 10565                           indf1	equ	0xFE7
 10566                           postinc1	equ	0xFE6
 10567                           postdec1	equ	0xFE5
 10568                           fsr1h	equ	0xFE2
 10569                           fsr1l	equ	0xFE1
 10570                           indf2	equ	0xFDF
 10571                           postinc2	equ	0xFDE
 10572                           postdec2	equ	0xFDD
 10573                           plusw2	equ	0xFDB
 10574                           fsr2h	equ	0xFDA
 10575                           fsr2l	equ	0xFD9
 10576                           status	equ	0xFD8
 10577                           
 10578 ;; *************** function _ConfigureOscillator *****************
 10579 ;; Defined at:
 10580 ;;		line 50 in file "system.c"
 10581 ;; Parameters:    Size  Location     Type
 10582 ;;		None
 10583 ;; Auto vars:     Size  Location     Type
 10584 ;;		None
 10585 ;; Return value:  Size  Location     Type
 10586 ;;                  1    wreg      void 
 10587 ;; Registers used:
 10588 ;;		None
 10589 ;; Tracked objects:
 10590 ;;		On entry : 0/0
 10591 ;;		On exit  : 0/0
 10592 ;;		Unchanged: 0/0
 10593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10594 ;;      Params:         0       0       0       0       0       0       0
 10595 ;;      Locals:         0       0       0       0       0       0       0
 10596 ;;      Temps:          0       0       0       0       0       0       0
 10597 ;;      Totals:         0       0       0       0       0       0       0
 10598 ;;Total ram usage:        0 bytes
 10599 ;; Hardware stack levels used:    1
 10600 ;; Hardware stack levels required when called:    2
 10601 ;; This function calls:
 10602 ;;		Nothing
 10603 ;; This function is called by:
 10604 ;;		_main
 10605 ;; This function uses a non-reentrant model
 10606 ;;
 10607                           
 10608                           	psect	text49
 10609  00267C                     __ptext49:
 10610                           	opt stack 0
 10611  00267C                     _ConfigureOscillator:
 10612                           	opt stack 28
 10613                           
 10614                           ; BSR set to: 0
 10615                           ;incstack = 0
 10616  00267C  FFFF               	dw	65535
 10617  00267E  0012               	return		;funcret
 10618  002680  FFFF               	dw	65535	; errata NOP
 10619  002682                     __end_of_ConfigureOscillator:
 10620                           	opt stack 0
 10621                           tblptru	equ	0xFF8
 10622                           tblptrh	equ	0xFF7
 10623                           tblptrl	equ	0xFF6
 10624                           tablat	equ	0xFF5
 10625                           prodh	equ	0xFF4
 10626                           prodl	equ	0xFF3
 10627                           intcon	equ	0xFF2
 10628                           intcon2	equ	0xFF1
 10629                           postinc0	equ	0xFEE
 10630                           wreg	equ	0xFE8
 10631                           indf1	equ	0xFE7
 10632                           postinc1	equ	0xFE6
 10633                           postdec1	equ	0xFE5
 10634                           fsr1h	equ	0xFE2
 10635                           fsr1l	equ	0xFE1
 10636                           indf2	equ	0xFDF
 10637                           postinc2	equ	0xFDE
 10638                           postdec2	equ	0xFDD
 10639                           plusw2	equ	0xFDB
 10640                           fsr2h	equ	0xFDA
 10641                           fsr2l	equ	0xFD9
 10642                           status	equ	0xFD8
 10643                           
 10644 ;; *************** function _AddSecond *****************
 10645 ;; Defined at:
 10646 ;;		line 179 in file "user.c"
 10647 ;; Parameters:    Size  Location     Type
 10648 ;;		None
 10649 ;; Auto vars:     Size  Location     Type
 10650 ;;		None
 10651 ;; Return value:  Size  Location     Type
 10652 ;;                  1    wreg      void 
 10653 ;; Registers used:
 10654 ;;		wreg, status,2, status,0
 10655 ;; Tracked objects:
 10656 ;;		On entry : F/0
 10657 ;;		On exit  : F/0
 10658 ;;		Unchanged: 0/0
 10659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10660 ;;      Params:         0       0       0       0       0       0       0
 10661 ;;      Locals:         0       0       0       0       0       0       0
 10662 ;;      Temps:          0       0       0       0       0       0       0
 10663 ;;      Totals:         0       0       0       0       0       0       0
 10664 ;;Total ram usage:        0 bytes
 10665 ;; Hardware stack levels used:    1
 10666 ;; Hardware stack levels required when called:    2
 10667 ;; This function calls:
 10668 ;;		Nothing
 10669 ;; This function is called by:
 10670 ;;		_main
 10671 ;; This function uses a non-reentrant model
 10672 ;;
 10673                           
 10674                           	psect	text50
 10675  00264E                     __ptext50:
 10676                           	opt stack 0
 10677  00264E                     _AddSecond:
 10678                           	opt stack 28
 10679                           
 10680                           ;incstack = 0
 10681  00264E  FFFF               	dw	65535
 10682                           
 10683                           ; BSR set to: 0
 10684                           ;user.c: 181: currentTime++;
 10685  002650  2BD2               	incf	_currentTime& (0+255),f,b
 10686  002652  0E00               	movlw	0
 10687  002654  23D3               	addwfc	(_currentTime+1)& (0+255),f,b
 10688  002656  23D4               	addwfc	(_currentTime+2)& (0+255),f,b
 10689  002658  23D5               	addwfc	(_currentTime+3)& (0+255),f,b
 10690                           
 10691                           ; BSR set to: 0
 10692  00265A  0C00               	retlw	0	;funcret
 10693  00265C  FFFF               	dw	65535	; errata NOP
 10694  00265E                     __end_of_AddSecond:
 10695                           	opt stack 0
 10696                           tblptru	equ	0xFF8
 10697                           tblptrh	equ	0xFF7
 10698                           tblptrl	equ	0xFF6
 10699                           tablat	equ	0xFF5
 10700                           prodh	equ	0xFF4
 10701                           prodl	equ	0xFF3
 10702                           intcon	equ	0xFF2
 10703                           intcon2	equ	0xFF1
 10704                           postinc0	equ	0xFEE
 10705                           wreg	equ	0xFE8
 10706                           indf1	equ	0xFE7
 10707                           postinc1	equ	0xFE6
 10708                           postdec1	equ	0xFE5
 10709                           fsr1h	equ	0xFE2
 10710                           fsr1l	equ	0xFE1
 10711                           indf2	equ	0xFDF
 10712                           postinc2	equ	0xFDE
 10713                           postdec2	equ	0xFDD
 10714                           plusw2	equ	0xFDB
 10715                           fsr2h	equ	0xFDA
 10716                           fsr2l	equ	0xFD9
 10717                           status	equ	0xFD8
 10718                           
 10719 ;; *************** function _low_isr *****************
 10720 ;; Defined at:
 10721 ;;		line 197 in file "interrupts.c"
 10722 ;; Parameters:    Size  Location     Type
 10723 ;;		None
 10724 ;; Auto vars:     Size  Location     Type
 10725 ;;		None
 10726 ;; Return value:  Size  Location     Type
 10727 ;;                  1    wreg      void 
 10728 ;; Registers used:
 10729 ;;		None
 10730 ;; Tracked objects:
 10731 ;;		On entry : 0/0
 10732 ;;		On exit  : 0/0
 10733 ;;		Unchanged: 0/0
 10734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10735 ;;      Params:         0       0       0       0       0       0       0
 10736 ;;      Locals:         0       0       0       0       0       0       0
 10737 ;;      Temps:          1       0       0       0       0       0       0
 10738 ;;      Totals:         1       0       0       0       0       0       0
 10739 ;;Total ram usage:        1 bytes
 10740 ;; Hardware stack levels used:    1
 10741 ;; Hardware stack levels required when called:    1
 10742 ;; This function calls:
 10743 ;;		Nothing
 10744 ;; This function is called by:
 10745 ;;		Interrupt level 1
 10746 ;; This function uses a non-reentrant model
 10747 ;;
 10748                           
 10749                           	psect	intcodelo
 10750  000018                     __pintcodelo:
 10751                           	opt stack 0
 10752  000018                     _low_isr:
 10753                           	opt stack 0
 10754  000018  FFFF               	dw	65535	; assembler added errata NOP
 10755                           
 10756                           ; BSR set to: 0
 10757                           ;incstack = 0
 10758  00001A  807A               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
 10759  00001C  FFFF               	dw	65535	; errata NOP
 10760  00001E  CFE0 F004          	movff	bsr,??_low_isr
 10761  000022  C004  FFE0         	movff	??_low_isr,bsr
 10762  000026  907A               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
 10763  000028  0010               	retfie	
 10764  00002A  FFFF               	dw	65535	; errata NOP
 10765  00002C                     __end_of_low_isr:
 10766                           	opt stack 0
 10767                           tblptru	equ	0xFF8
 10768                           tblptrh	equ	0xFF7
 10769                           tblptrl	equ	0xFF6
 10770                           tablat	equ	0xFF5
 10771                           prodh	equ	0xFF4
 10772                           prodl	equ	0xFF3
 10773                           intcon	equ	0xFF2
 10774                           intcon2	equ	0xFF1
 10775                           postinc0	equ	0xFEE
 10776                           wreg	equ	0xFE8
 10777                           indf1	equ	0xFE7
 10778                           postinc1	equ	0xFE6
 10779                           postdec1	equ	0xFE5
 10780                           fsr1h	equ	0xFE2
 10781                           fsr1l	equ	0xFE1
 10782                           bsr	equ	0xFE0
 10783                           indf2	equ	0xFDF
 10784                           postinc2	equ	0xFDE
 10785                           postdec2	equ	0xFDD
 10786                           plusw2	equ	0xFDB
 10787                           fsr2h	equ	0xFDA
 10788                           fsr2l	equ	0xFD9
 10789                           status	equ	0xFD8
 10790                           
 10791 ;; *************** function _high_isr *****************
 10792 ;; Defined at:
 10793 ;;		line 111 in file "interrupts.c"
 10794 ;; Parameters:    Size  Location     Type
 10795 ;;		None
 10796 ;; Auto vars:     Size  Location     Type
 10797 ;;  c               1    2[COMRAM] unsigned char 
 10798 ;; Return value:  Size  Location     Type
 10799 ;;                  1    wreg      void 
 10800 ;; Registers used:
 10801 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10802 ;; Tracked objects:
 10803 ;;		On entry : 0/0
 10804 ;;		On exit  : 0/0
 10805 ;;		Unchanged: 0/0
 10806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10807 ;;      Params:         0       0       0       0       0       0       0
 10808 ;;      Locals:         1       0       0       0       0       0       0
 10809 ;;      Temps:          2       0       0       0       0       0       0
 10810 ;;      Totals:         3       0       0       0       0       0       0
 10811 ;;Total ram usage:        3 bytes
 10812 ;; Hardware stack levels used:    1
 10813 ;; This function calls:
 10814 ;;		Nothing
 10815 ;; This function is called by:
 10816 ;;		Interrupt level 2
 10817 ;; This function uses a non-reentrant model
 10818 ;;
 10819                           
 10820                           	psect	intcode
 10821  000008                     __pintcode:
 10822                           	opt stack 0
 10823  000008                     _high_isr:
 10824                           	opt stack 0
 10825  000008  FFFF               	dw	65535	; assembler added errata NOP
 10826                           
 10827                           ;incstack = 0
 10828  00000A  827A               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 10829  00000C  FFFF               	dw	65535	; errata NOP
 10830  00000E  CFD9 F001          	movff	fsr2l,??_high_isr
 10831  000012  CFDA F002          	movff	fsr2h,??_high_isr+1
 10832  000016  EF59  F00F         	goto	int_func
 10833                           tblptru	equ	0xFF8
 10834                           tblptrh	equ	0xFF7
 10835                           tblptrl	equ	0xFF6
 10836                           tablat	equ	0xFF5
 10837                           prodh	equ	0xFF4
 10838                           prodl	equ	0xFF3
 10839                           intcon	equ	0xFF2
 10840                           intcon2	equ	0xFF1
 10841                           postinc0	equ	0xFEE
 10842                           wreg	equ	0xFE8
 10843                           indf1	equ	0xFE7
 10844                           postinc1	equ	0xFE6
 10845                           postdec1	equ	0xFE5
 10846                           fsr1h	equ	0xFE2
 10847                           fsr1l	equ	0xFE1
 10848                           bsr	equ	0xFE0
 10849                           indf2	equ	0xFDF
 10850                           postinc2	equ	0xFDE
 10851                           postdec2	equ	0xFDD
 10852                           plusw2	equ	0xFDB
 10853                           fsr2h	equ	0xFDA
 10854                           fsr2l	equ	0xFD9
 10855                           status	equ	0xFD8
 10856                           
 10857                           	psect	intcode_body
 10858  001EB2                     __pintcode_body:
 10859                           	opt stack 23
 10860  001EB2                     int_func:
 10861                           	opt stack 23
 10862  001EB2  FFFF               	dw	65535	; errata NOP
 10863                           
 10864                           ;interrupts.c: 132: if(PIR1bits.TMR1IF && PIE1bits.TMR1IE)
 10865  001EB4  B09E               	btfsc	3998,0,c	;volatile
 10866  001EB6  A09D               	btfss	3997,0,c	;volatile
 10867  001EB8  D00C               	goto	i2l86
 10868                           
 10869                           ;interrupts.c: 133: {
 10870                           ;interrupts.c: 134: PIR1bits.TMR1IF = 0;
 10871  001EBA  909E               	bcf	3998,0,c	;volatile
 10872                           
 10873                           ;interrupts.c: 135: millisecondsFromStart++;
 10874  001EBC  0100               	movlb	0	; () banked
 10875  001EBE  2BAC               	incf	_millisecondsFromStart& (0+255),f,b	;volatile
 10876  001EC0  0E00               	movlw	0
 10877  001EC2  23AD               	addwfc	(_millisecondsFromStart+1)& (0+255),f,b	;volatile
 10878  001EC4  23AE               	addwfc	(_millisecondsFromStart+2)& (0+255),f,b	;volatile
 10879  001EC6  23AF               	addwfc	(_millisecondsFromStart+3)& (0+255),f,b	;volatile
 10880                           
 10881                           ; BSR set to: 0
 10882                           ;interrupts.c: 136: ((void)(TMR1H=((0x10000 - 10000000L/4 / 1000)>>8),TMR1L=((0x10000 - 
      +                          10000000L/4 / 1000)&0xFF)));
 10883  001EC8  0EF6               	movlw	246
 10884  001ECA  6ECF               	movwf	4047,c	;volatile
 10885                           
 10886                           ; BSR set to: 0
 10887  001ECC  0E3C               	movlw	60
 10888  001ECE  6ECE               	movwf	4046,c	;volatile
 10889  001ED0  D033               	goto	i2l87
 10890  001ED2                     i2l86:
 10891  001ED2  FFFF               	dw	65535	; assembler added errata NOP
 10892                           
 10893                           ;interrupts.c: 138: }
 10894                           ;interrupts.c: 140: if(INTCONbits.TMR0IF)
 10895  001ED4  A4F2               	btfss	intcon,2,c	;volatile
 10896  001ED6  D016               	goto	i2l88
 10897                           
 10898                           ;interrupts.c: 141: {
 10899                           ;interrupts.c: 142: INTCONbits.TMR0IF = 0;
 10900  001ED8  94F2               	bcf	intcon,2,c	;volatile
 10901                           
 10902                           ;interrupts.c: 143: _6sCounter++;
 10903  001EDA  0100               	movlb	0	; () banked
 10904  001EDC  2BC0               	incf	__6sCounter& (0+255),f,b	;volatile
 10905                           
 10906                           ; BSR set to: 0
 10907                           ;interrupts.c: 144: if(_6sCounter == 10)
 10908  001EDE  0E0A               	movlw	10
 10909  001EE0  19C0               	xorwf	__6sCounter& (0+255),w,b	;volatile
 10910  001EE2  E10B               	bnz	i2l5326
 10911                           
 10912                           ; BSR set to: 0
 10913                           ;interrupts.c: 145: {
 10914                           ;interrupts.c: 146: _6sCounter = 0;
 10915  001EE4  6BC0               	clrf	__6sCounter& (0+255),b	;volatile
 10916                           
 10917                           ; BSR set to: 0
 10918                           ;interrupts.c: 147: globalMinutes++;
 10919  001EE6  2A76               	incf	_globalMinutes,f,c	;volatile
 10920                           
 10921                           ; BSR set to: 0
 10922                           ;interrupts.c: 148: if(globalMinutes == 60)
 10923  001EE8  0E3C               	movlw	60
 10924  001EEA  1876               	xorwf	_globalMinutes,w,c	;volatile
 10925  001EEC  E106               	bnz	i2l5326
 10926                           
 10927                           ; BSR set to: 0
 10928                           ;interrupts.c: 149: {
 10929                           ;interrupts.c: 150: globalMinutes = 0;
 10930  001EEE  6A76               	clrf	_globalMinutes,c	;volatile
 10931                           
 10932                           ; BSR set to: 0
 10933                           ;interrupts.c: 151: globalHours++;
 10934  001EF0  2A78               	incf	_globalHours,f,c	;volatile
 10935                           
 10936                           ; BSR set to: 0
 10937                           ;interrupts.c: 152: if(globalHours == 24)
 10938  001EF2  0E18               	movlw	24
 10939  001EF4  1878               	xorwf	_globalHours,w,c	;volatile
 10940  001EF6  E101               	bnz	i2l5326
 10941                           
 10942                           ; BSR set to: 0
 10943                           ;interrupts.c: 153: {
 10944                           ;interrupts.c: 154: globalHours = 0;
 10945  001EF8  6A78               	clrf	_globalHours,c	;volatile
 10946  001EFA                     i2l5326:
 10947                           
 10948                           ; BSR set to: 0
 10949                           ;interrupts.c: 155: }
 10950                           ;interrupts.c: 156: }
 10951                           ;interrupts.c: 157: }
 10952                           ;interrupts.c: 158: ((void)(TMR0H=((0x10000 - (10000000L/4 * 6 / 256 + 0))>>8),TMR0L=((0
      +                          x10000 - (10000000L/4 * 6 / 256 + 0))&0xFF)));
 10953  001EFA  0E1B               	movlw	27
 10954  001EFC  6ED7               	movwf	4055,c	;volatile
 10955  001EFE  0E1F               	movlw	31
 10956  001F00  6ED6               	movwf	4054,c	;volatile
 10957  001F02  D01A               	goto	i2l87
 10958  001F04                     i2l88:
 10959  001F04  FFFF               	dw	65535	; assembler added errata NOP
 10960                           
 10961                           ;interrupts.c: 160: }
 10962                           ;interrupts.c: 162: if (PIR1bits.RCIF && PIE1bits.RCIE)
 10963  001F06  BA9E               	btfsc	3998,5,c	;volatile
 10964  001F08  AA9D               	btfss	3997,5,c	;volatile
 10965  001F0A  D016               	goto	i2l87
 10966  001F0C                     i2l97:
 10967  001F0C  FFFF               	dw	65535	; assembler added errata NOP
 10968  001F0E  AA9E               	btfss	3998,5,c	;volatile
 10969  001F10  D7FD               	goto	i2l97
 10970                           
 10971                           ;interrupts.c: 176: uint8_t c = RCREG;
 10972  001F12  CFAE F003          	movff	4014,high_isr@c	;volatile
 10973                           
 10974                           ;interrupts.c: 179: UartRingBuffer[UartBufferHead] = c;
 10975  001F16  0E00               	movlw	low _UartRingBuffer
 10976  001F18  0100               	movlb	0	; () banked
 10977  001F1A  25BF               	addwf	_UartBufferHead& (0+255),w,b
 10978  001F1C  6ED9               	movwf	fsr2l,c
 10979  001F1E  6ADA               	clrf	fsr2h,c
 10980  001F20  0E02               	movlw	high _UartRingBuffer
 10981  001F22  22DA               	addwfc	fsr2h,f,c
 10982  001F24  C003  FFDF         	movff	high_isr@c,indf2
 10983                           
 10984                           ; BSR set to: 0
 10985                           ;interrupts.c: 180: UartBufferLen++;
 10986  001F28  2A6F               	incf	_UartBufferLen,f,c	;volatile
 10987                           
 10988                           ; BSR set to: 0
 10989                           ;interrupts.c: 181: if(UartBufferHead == 256u - 1)
 10990  001F2A  29BF               	incf	_UartBufferHead& (0+255),w,b
 10991  001F2C  E102               	bnz	i2l5344
 10992                           
 10993                           ; BSR set to: 0
 10994                           ;interrupts.c: 182: UartBufferHead = 0;
 10995  001F2E  6BBF               	clrf	_UartBufferHead& (0+255),b
 10996  001F30  D001               	goto	i2l5346
 10997  001F32                     i2l5344:
 10998                           
 10999                           ; BSR set to: 0
 11000                           ;interrupts.c: 183: else
 11001                           ;interrupts.c: 184: UartBufferHead++;
 11002  001F32  2BBF               	incf	_UartBufferHead& (0+255),f,b
 11003  001F34                     i2l5346:
 11004  001F34  FFFF               	dw	65535	; assembler added errata NOP
 11005                           
 11006                           ; BSR set to: 0
 11007                           ;interrupts.c: 187: PIR1bits.RCIF = 0;
 11008  001F36  9A9E               	bcf	3998,5,c	;volatile
 11009  001F38                     i2l87:
 11010  001F38  FFFF               	dw	65535	; assembler added errata NOP
 11011  001F3A  C002  FFDA         	movff	??_high_isr+1,fsr2h
 11012  001F3E  C001  FFD9         	movff	??_high_isr,fsr2l
 11013  001F42  927A               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 11014  001F44  0011               	retfie		f
 11015  001F46  FFFF               	dw	65535	; errata NOP
 11016  001F48                     __end_of_high_isr:
 11017                           	opt stack 0
 11018                           tblptru	equ	0xFF8
 11019                           tblptrh	equ	0xFF7
 11020                           tblptrl	equ	0xFF6
 11021                           tablat	equ	0xFF5
 11022                           prodh	equ	0xFF4
 11023                           prodl	equ	0xFF3
 11024                           intcon	equ	0xFF2
 11025                           intcon2	equ	0xFF1
 11026                           postinc0	equ	0xFEE
 11027                           wreg	equ	0xFE8
 11028                           indf1	equ	0xFE7
 11029                           postinc1	equ	0xFE6
 11030                           postdec1	equ	0xFE5
 11031                           fsr1h	equ	0xFE2
 11032                           fsr1l	equ	0xFE1
 11033                           bsr	equ	0xFE0
 11034                           indf2	equ	0xFDF
 11035                           postinc2	equ	0xFDE
 11036                           postdec2	equ	0xFDD
 11037                           plusw2	equ	0xFDB
 11038                           fsr2h	equ	0xFDA
 11039                           fsr2l	equ	0xFD9
 11040                           status	equ	0xFD8
 11041                           tblptru	equ	0xFF8
 11042                           tblptrh	equ	0xFF7
 11043                           tblptrl	equ	0xFF6
 11044                           tablat	equ	0xFF5
 11045                           prodh	equ	0xFF4
 11046                           prodl	equ	0xFF3
 11047                           intcon	equ	0xFF2
 11048                           intcon2	equ	0xFF1
 11049                           postinc0	equ	0xFEE
 11050                           wreg	equ	0xFE8
 11051                           indf1	equ	0xFE7
 11052                           postinc1	equ	0xFE6
 11053                           postdec1	equ	0xFE5
 11054                           fsr1h	equ	0xFE2
 11055                           fsr1l	equ	0xFE1
 11056                           bsr	equ	0xFE0
 11057                           indf2	equ	0xFDF
 11058                           postinc2	equ	0xFDE
 11059                           postdec2	equ	0xFDD
 11060                           plusw2	equ	0xFDB
 11061                           fsr2h	equ	0xFDA
 11062                           fsr2l	equ	0xFD9
 11063                           status	equ	0xFD8
 11064                           
 11065                           	psect	rparam
 11066  0000                     tblptru	equ	0xFF8
 11067                           tblptrh	equ	0xFF7
 11068                           tblptrl	equ	0xFF6
 11069                           tablat	equ	0xFF5
 11070                           prodh	equ	0xFF4
 11071                           prodl	equ	0xFF3
 11072                           intcon	equ	0xFF2
 11073                           intcon2	equ	0xFF1
 11074                           postinc0	equ	0xFEE
 11075                           wreg	equ	0xFE8
 11076                           indf1	equ	0xFE7
 11077                           postinc1	equ	0xFE6
 11078                           postdec1	equ	0xFE5
 11079                           fsr1h	equ	0xFE2
 11080                           fsr1l	equ	0xFE1
 11081                           bsr	equ	0xFE0
 11082                           indf2	equ	0xFDF
 11083                           postinc2	equ	0xFDE
 11084                           postdec2	equ	0xFDD
 11085                           plusw2	equ	0xFDB
 11086                           fsr2h	equ	0xFDA
 11087                           fsr2l	equ	0xFD9
 11088                           status	equ	0xFD8
 11089                           
 11090                           	psect	temp
 11091  00007A                     btemp:
 11092                           	opt stack 0
 11093  00007A                     	ds	1
 11094  0000                     int$flags	set	btemp
 11095                           tblptru	equ	0xFF8
 11096                           tblptrh	equ	0xFF7
 11097                           tblptrl	equ	0xFF6
 11098                           tablat	equ	0xFF5
 11099                           prodh	equ	0xFF4
 11100                           prodl	equ	0xFF3
 11101                           intcon	equ	0xFF2
 11102                           intcon2	equ	0xFF1
 11103                           postinc0	equ	0xFEE
 11104                           wreg	equ	0xFE8
 11105                           indf1	equ	0xFE7
 11106                           postinc1	equ	0xFE6
 11107                           postdec1	equ	0xFE5
 11108                           fsr1h	equ	0xFE2
 11109                           fsr1l	equ	0xFE1
 11110                           bsr	equ	0xFE0
 11111                           indf2	equ	0xFDF
 11112                           postinc2	equ	0xFDE
 11113                           postdec2	equ	0xFDD
 11114                           plusw2	equ	0xFDB
 11115                           fsr2h	equ	0xFDA
 11116                           fsr2l	equ	0xFD9
 11117                           status	equ	0xFD8


Data Sizes:
    Strings     20
    Constant    9
    Data        7
    BSS         553
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    110     121
    BANK0           128     20     113
    BANK1           256      0     200
    BANK2           256      0     256
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    minutes	PTR unsigned int  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    mktime@timeptr	PTR struct tm size(1) Largest target is 18
		 -> SetTimeFromRegs@newTime(COMRAM[18]), 

    ModbusProcess_FC16@regs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSHoldingRegs(BANK1[30]), 

    ModbusProcess_FC15@regs	PTR unsigned short  size(1) Largest target is 2
		 -> _MODBUSCoils(BANK0[2]), 

    ModbusProcess_FC6@regs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSHoldingRegs(BANK1[30]), 

    ModbusProcess_FC5@regs	PTR unsigned short  size(1) Largest target is 2
		 -> _MODBUSCoils(BANK0[2]), 

    ModbusProcess_FC3@regs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSHoldingRegs(BANK1[30]), _MODBUSInputRegs(BANK1[30]), 

    ModbusGetLastCommand@count	PTR unsigned short  size(1) Largest target is 2
		 -> io_poll@lastEndAddress(COMRAM[2]), 

    ModbusGetLastCommand@address	PTR unsigned short  size(1) Largest target is 2
		 -> io_poll@lastAddress(COMRAM[2]), 

    ModbusPoll@inputRegs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSInputRegs(BANK1[30]), 

    ModbusPoll@coils	PTR unsigned short  size(1) Largest target is 2
		 -> _MODBUSCoils(BANK0[2]), 

    ModbusPoll@holdingRegs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSHoldingRegs(BANK1[30]), 

    _holdingRegs	PTR unsigned short  size(2) Largest target is 30
		 -> NULL(NULL[0]), _MODBUSHoldingRegs(BANK1[30]), 

    SetTime@newTime	PTR long  size(1) Largest target is 4
		 -> SetTimeFromRegs@newRawTime(COMRAM[4]), 

    sp__ModbusGetLastCommand	PTR enum E2336 size(1) Largest target is 1
		 -> _lastCommand(BANK0[1]), 

    io_poll@lastCommand	PTR enum E2336 size(1) Largest target is 1
		 -> _lastCommand(BANK0[1]), 

    SetTimeFromRegs@hourMin	PTR unsigned int  size(1) Largest target is 2
		 -> io_poll@hourMin(COMRAM[2]), 

    SetTimeFromRegs@daySec	PTR unsigned int  size(1) Largest target is 2
		 -> io_poll@daySec(COMRAM[2]), 

    SetTimeFromRegs@yearMonth	PTR unsigned int  size(1) Largest target is 2
		 -> io_poll@yearMonth(COMRAM[2]), 

    sp__GetTime	PTR long  size(1) Largest target is 4
		 -> currentTime(BANK0[4]), 

    ProcessLightBlock@curMs	PTR unsigned long  size(1) Largest target is 4
		 -> main@curMs(BANK0[4]), 

    SetHourMin@newMin	PTR int  size(1) Largest target is 18
		 -> SetTimeFromRegs@newTime(COMRAM[18]), 

    SetHourMin@newHour	PTR int  size(1) Largest target is 18
		 -> SetTimeFromRegs@newTime(COMRAM[18]), 

    getHourMin@min	PTR unsigned char  size(1) Largest target is 1
		 -> main@minute(BANK0[1]), ProcessDiary@minute(COMRAM[1]), LoadNextEvent@minute(COMRAM[1]), 

    getHourMin@hour	PTR unsigned char  size(1) Largest target is 1
		 -> main@hour(BANK0[1]), ProcessDiary@hour(COMRAM[1]), LoadNextEvent@hour(COMRAM[1]), 

    PortWrite@buf	PTR unsigned char  size(2) Largest target is 140
		 -> _au8Buffer(BANK1[140]), 


Critical Paths under _main in COMRAM

    _main->_io_poll
    _io_poll->_SetTimeFromRegs
    _SetTimeFromRegs->_mktime
    _mktime->_ymd_to_scalar
    _ymd_to_scalar->_years_to_days
    _years_to_days->___lwdiv
    _months_to_days->___lwdiv
    _isleap->___lwmod
    _InitFromEeprom->_Modbus
    _Modbus->_ModbusInit
    _ResetEvent->_LightLed
    _ProcessLightBlock->_UpdateLedRegister
    _ProcessDiary->_LightLed
    _LoadNextEvent->_getHourMin
    _ModbusPoll->_ModbusProcess_FC15
    _ModbusPoll->_ModbusValidateRequest
    _ModbusValidateRequest->_ModbusCalcCRC
    _ModbusProcess_FC6->_ModbusSendTxBuffer
    _ModbusProcess_FC5->_ModbusSendTxBuffer
    _ModbusProcess_FC3->_ModbusSendTxBuffer
    _ModbusProcess_FC21->_ModbusSendTxBuffer
    _ModbusProcess_FC17->_ModbusSendTxBuffer
    _ModbusProcess_FC16->_ModbusSendTxBuffer
    _ModbusProcess_FC15->_ModbusSendTxBuffer
    _ModbusProcess_FC1->_ModbusSendTxBuffer
    _ModbusSendTxBuffer->_ModbusCalcCRC
    _ModbusGetRxBuffer->_PortRead

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                20    20      0   25167
                                              0 BANK0     20    20      0
                          _AddSecond
                _ConfigureOscillator
                            _GetTime
                            _InitApp
                     _InitFromEeprom
                     _LightStatusLed
                         _ModbusPoll
                       _ProcessDiary
                  _ProcessLightBlock
                         _ResetEvent
                      _SetBuzzerDuty
                         _getHourMin
                            _io_poll
                             _millis
                           _pwm_init
 ---------------------------------------------------------------------------------
 (1) _pwm_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _io_poll                                             17    17      0    8749
                                             93 COMRAM    17    17      0
                     _InitFromEeprom
                           _LightLed
               _ModbusGetLastCommand
                      _SetBuzzerDuty
                    _SetTimeFromRegs
 ---------------------------------------------------------------------------------
 (2) _SetTimeFromRegs                                     27    25      2    4536
                                             66 COMRAM    27    25      2
                     _LightStatusLed
                      _LoadNextEvent
                         _SetHourMin
                            _SetTime
                             _mktime
 ---------------------------------------------------------------------------------
 (3) _mktime                                              23    19      4    2768
                                             43 COMRAM    23    19      4
                      _ymd_to_scalar
 ---------------------------------------------------------------------------------
 (4) _ymd_to_scalar                                       16    10      6    2468
                                             27 COMRAM    16    10      6
                             _isleap
                     _months_to_days
                      _years_to_days
 ---------------------------------------------------------------------------------
 (5) _years_to_days                                       16    12      4     723
                                             11 COMRAM    16    12      4
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (5) _months_to_days                                       6     4      2     632
                                             11 COMRAM     6     4      2
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              7     3      4     546
                                              4 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) _isleap                                               4     2      2     569
                                              9 COMRAM     4     2      2
                            ___lwmod
 ---------------------------------------------------------------------------------
 (6) ___lwmod                                              5     1      4     415
                                              4 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (3) _SetTime                                              1     1      0      52
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _SetHourMin                                           2     1      1     138
                                              4 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (3) _LightStatusLed                                       8     6      2     604
                                              4 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (2) _ModbusGetLastCommand                                 3     1      2     182
                                              4 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _InitFromEeprom                                       2     2      0    1223
                                             12 COMRAM     2     2      0
                      _LoadNextEvent
                             _Modbus
                      _SetBuzzerDuty
                   _SwitchOffAllLeds
 ---------------------------------------------------------------------------------
 (2) _SetBuzzerDuty                                        4     2      2     258
                                              4 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _Modbus                                               3     1      2     412
                                              9 COMRAM     3     1      2
                         _ModbusInit
 ---------------------------------------------------------------------------------
 (4) _ModbusInit                                           5     3      2     218
                                              4 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _ResetEvent                                           5     5      0    1587
                                             12 COMRAM     5     5      0
                           _LightLed
 ---------------------------------------------------------------------------------
 (1) _ProcessLightBlock                                    5     5      0      96
                                              5 COMRAM     5     5      0
                  _UpdateLedRegister
 ---------------------------------------------------------------------------------
 (2) _UpdateLedRegister                                    1     1      0      22
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ProcessDiary                                         6     6      0    2556
                                             12 COMRAM     6     6      0
                            _GetTime
                           _LightLed
                      _LoadNextEvent
                   _SwitchOffAllLeds
                         _getHourMin
 ---------------------------------------------------------------------------------
 (3) _SwitchOffAllLeds                                     1     1      0      90
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _LoadNextEvent                                        5     5      0     463
                                              6 COMRAM     5     5      0
                         _getHourMin
 ---------------------------------------------------------------------------------
 (4) _getHourMin                                           2     1      1     326
                                              4 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _LightLed                                             8     6      2    1541
                                              4 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (2) _GetTime                                              2     0      2       0
                                              4 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _ModbusPoll                                          12     3      9    9136
                                             38 COMRAM    12     3      9
               _ModbusBuildException
                  _ModbusGetRxBuffer
                  _ModbusProcess_FC1
                 _ModbusProcess_FC15
                 _ModbusProcess_FC16
                 _ModbusProcess_FC17
                 _ModbusProcess_FC21
                  _ModbusProcess_FC3
                  _ModbusProcess_FC5
                  _ModbusProcess_FC6
                 _ModbusSendTxBuffer
              _ModbusValidateRequest
                      _PortAvailable
                             _millis
 ---------------------------------------------------------------------------------
 (2) _ModbusValidateRequest                               21    21      0     715
                                             17 COMRAM    21    21      0
                      _ModbusCalcCRC
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC6                                   10     7      3     749
                                             19 COMRAM    10     7      3
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC5                                   10    10      0     728
                                             19 COMRAM    10    10      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC3                                   12     9      3    1000
                                             19 COMRAM    12     9      3
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC21                                   9     9      0     745
                                             19 COMRAM     9     9      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC17                                   2     2      0     632
                                             19 COMRAM     2     2      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC16                                  14    11      3     972
                                             19 COMRAM    14    11      3
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC15                                  19    19      0     936
                                             19 COMRAM    19    19      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC1                                   17    15      2    1055
                                             19 COMRAM    17    15      2
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusSendTxBuffer                                   2     2      0     541
                                             17 COMRAM     2     2      0
                      _ModbusCalcCRC
                          _PortWrite
                             _millis
 ---------------------------------------------------------------------------------
 (1) _millis                                               8     4      4      23
                                              4 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _PortWrite                                            4     1      3     218
                                              4 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (3) _ModbusCalcCRC                                       13    11      2     254
                                              4 COMRAM    13    11      2
 ---------------------------------------------------------------------------------
 (2) _ModbusGetRxBuffer                                    2     2      0      47
                                              5 COMRAM     2     2      0
                      _PortAvailable
                           _PortRead
 ---------------------------------------------------------------------------------
 (3) _PortRead                                             1     1      0      23
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _PortAvailable                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ModbusBuildException                                 2     2      0      45
                                              4 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              1     1      0      68
                                              4 COMRAM     1     1      0
                     _InitUartBuffer
                          _PortBegin
 ---------------------------------------------------------------------------------
 (2) _PortBegin                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitUartBuffer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _AddSecond                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _low_isr                                              1     1      0       0
                                              3 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _high_isr                                             3     3      0      23
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AddSecond
   _ConfigureOscillator
   _GetTime
   _InitApp
     _InitUartBuffer
     _PortBegin
   _InitFromEeprom
     _LoadNextEvent
       _getHourMin
     _Modbus
       _ModbusInit
     _SetBuzzerDuty
     _SwitchOffAllLeds
   _LightStatusLed
   _ModbusPoll
     _ModbusBuildException
     _ModbusGetRxBuffer
       _PortAvailable
       _PortRead
     _ModbusProcess_FC1
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC15
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC16
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC17
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC21
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC3
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC5
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC6
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusSendTxBuffer
       _ModbusCalcCRC
       _PortWrite
       _millis
     _ModbusValidateRequest
       _ModbusCalcCRC
     _PortAvailable
     _millis
   _ProcessDiary
     _GetTime
     _LightLed
     _LoadNextEvent
       _getHourMin
     _SwitchOffAllLeds
     _getHourMin
   _ProcessLightBlock
     _UpdateLedRegister
   _ResetEvent
     _LightLed
   _SetBuzzerDuty
   _getHourMin
   _io_poll
     _InitFromEeprom
       _LoadNextEvent
         _getHourMin
       _Modbus
         _ModbusInit
       _SetBuzzerDuty
       _SwitchOffAllLeds
     _LightLed
     _ModbusGetLastCommand
     _SetBuzzerDuty
     _SetTimeFromRegs
       _LightStatusLed
       _LoadNextEvent
         _getHourMin
       _SetHourMin
       _SetTime
       _mktime
         _ymd_to_scalar
           _isleap
             ___lwmod
           _months_to_days
             ___lwdiv
           _years_to_days
             ___lwdiv
   _millis
   _pwm_init

 _low_isr (ROOT)

 _high_isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0     100       9      100.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      C8       7       78.1%
BITBANK0            80      0       0       4        0.0%
BANK0               80     14      71       5       88.3%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     6E      79       1       96.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2B2      15        0.0%
DATA                 0      0     2B2       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Tue May 10 17:57:14 2016

                                               LoadNextEvent@minute 000B  
                                                     _years_to_days 16B2  
                                ModbusProcess_FC15@u8CopyBufferSize 001B  
                                                    _ResetEvent$826 0010  
                                        ModbusProcess_FC16@u8regsno 0020  
                                                                l62 2502  
                                                                l80 24C6  
                                                                l59 24FE  
                                                                l76 24A6  
                                                                _RD 007D30  
                                                                _WR 007D31  
                                               months_to_days@month 000C  
                                                       __CFG_BOR$ON 000000  
                                                                bsr 000FE0  
                                     ModbusProcess_FC5@u8currentBit 001C  
                                    ModbusProcess_FC15@u16StartCoil 001E  
                                                      __CFG_CP0$OFF 000000  
                                                      __CFG_CP1$OFF 000000  
                                                      __CFG_CP2$OFF 000000  
                                                      __CFG_CP3$OFF 000000  
                                                       __CFG_OSC$HS 000000  
                                                               l110 2542  
                                                               l111 255C  
                                               ModbusPoll@inputRegs 002A  
                                                               l305 000E  
                                                               l501 03DE  
                                                               l270 10E4  
                                                               l254 23D0  
                                                               l511 0436  
                                                               l415 0658  
                                                               l256 23DA  
                                                               l504 040A  
                                                               l432 0168  
                                                               l257 23E4  
                                                               l441 01AA  
                                                               l258 23EE  
                                                               l290 19A4  
                                                               l434 016C  
                                                               l259 240A  
                                                               l451 0230  
                                                               l427 0140  
                                                               l524 04AA  
                                                               l541 0526  
                                                               l509 0432  
                                                               l278 1002  
                                                               l366 02B4  
                                                               l534 04FA  
                                                               l526 04AE  
                                                               l519 0482  
                                                               l471 02D0  
                                                               l439 0194  
                                                               l456 0258  
                                                               l377 1FCA  
                                                               l393 1BB0  
                                                               l481 0330  
                                                               l473 02D4  
                                                               l466 02A8  
                                                               l458 025C  
                                                               l387 1BF6  
                                                               l539 0522  
                                                               l804 244E  
                                                               l900 168C  
                                                               l556 05B2  
                                                               l549 0574  
                                                               l397 0A94  
                                                               l823 112C  
                                                               l824 130A  
                                                               l496 03B6  
                                                               l488 0366  
                                                               l921 1D0E  
                                                               l770 146A  
                                                               l828 1162  
                                                               l872 1574  
                                                               l796 2648  
                                                               _GIE 007F97  
                                                      __CFG_CPB$OFF 000000  
                                                               _PR2 000FCB  
                                                      __CFG_CPD$OFF 000000  
                                          __end_of_SwitchOffAllLeds 25B2  
                                                  ProcessDiary@hour 0011  
                                  ModbusValidateRequest@recLenBytes 001A  
                                             ModbusPoll@holdingRegs 002D  
                                                      __CFG_BORV$42 000000  
                                                      __CFG_IDLOC0$ 000000  
                                                      __CFG_IDLOC1$ 000001  
                                                      __CFG_IDLOC2$ 000000  
                                                               prod 000FF3  
                                                               wreg 000FE8  
                                  ModbusValidateRequest@isSupported 0020  
                                            SetTimeFromRegs@newTime 004C  
                                            SetTimeFromRegs@hourMin 004B  
                                                     _LoadNextEvent 1F48  
                                                 _buzzeLoudDuration 0073  
                                               main@oldBuzzerOnTime 00E2  
                                                     _globalMinutes 0076  
                                                      __CFG_WDT$OFF 000000  
                                                              l1325 224E  
                                                              l1335 2378  
                                                              l1351 229C  
                                                              l1371 0BC0  
                                                              l4012 1158  
                                                              l4004 1130  
                                                              l4030 11B2  
                                                              l4022 118A  
                                                              l4008 1150  
                                                              l4050 11DA  
                                                              l4034 11B8  
                                                              l4026 118E  
                                                              l4018 1168  
                                                              l4106 12D0  
                                                              l4140 14DC  
                                                              l4132 14CC  
                                                              l4060 11F8  
                                                              l4052 11E6  
                                                              l4044 11D0  
                                                              l4108 1306  
                                                              l4150 1566  
                                                              l4310 19EE  
                                                              l5014 0358  
                                                              l4320 1A6A  
                                                              l4216 1DC6  
                                                              l4072 1228  
                                                              l3520 2228  
                                                              l5040 039E  
                                                              l4400 0006  
                                                              l4218 1DF8  
                                                              l4410 0034  
                                                              l5210 054E  
                                                              l5114 045E  
                                                              l4402 0008  
                                                              l4164 1592  
                                                              l4148 1538  
                                                              l4260 15E2  
                                                              l4316 1A46  
                                                              l4084 124E  
                                                              l4500 01BA  
                                                              l4420 00A2  
                                                              l4412 0058  
                                                              l3540 235A  
                                                              l3508 229A  
                                                              l3516 2218  
                                                              l5212 0556  
                                                              l5116 0466  
                                                              l4404 000A  
                                                              l3622 2116  
                                                              l3614 20F8  
                                                              l3606 20E4  
                                                              l4158 157A  
                                                              l4270 164C  
                                                              l4510 01E2  
                                                              l4502 01C4  
                                                              l4430 00C0  
                                                              l4422 00A4  
                                                              l4414 005C  
                                                              l3710 1904  
                                                              l3518 2222  
                                                              l5038 038E  
                                                              l4406 000C  
                                                              l4272 167E  
                                                              l4280 1692  
                                                              l4336 2300  
                                                              l4192 1C86  
                                                              l4520 0206  
                                                              l4512 01E8  
                                                              l4504 01CA  
                                                              l4440 00E4  
                                                              l4432 00C6  
                                                              l4424 00AA  
                                                              l4416 0074  
                                                              l4408 0004  
                                                              l3720 1976  
                                                              l3704 18C0  
                                                              l3544 236E  
                                                              l3536 234A  
                                                              l3528 2244  
                                                              l4186 1C32  
                                                              l4530 0228  
                                                              l4522 020E  
                                                              l4514 01F0  
                                                              l4506 01D2  
                                                              l4450 010C  
                                                              l4442 00EE  
                                                              l4434 00D0  
                                                              l4426 00B4  
                                                              l4418 007E  
                                                              l3714 192A  
                                                              l3538 2354  
                                                              l5162 04D6  
                                                              l3628 2120  
                                                              l3580 24BE  
                                                              l3820 0F5E  
                                                              l3812 0EAC  
                                                              l3740 1F66  
                                                              l4612 1BA2  
                                                              l4540 024C  
                                                              l4532 022E  
                                                              l4524 0214  
                                                              l4516 01F6  
                                                              l4508 01D8  
                                                              l4460 012E  
                                                              l4452 0112  
                                                              l4444 00F4  
                                                              l4436 00D6  
                                                              l4428 00BA  
                                                              l3716 1948  
                                                              l3708 18E6  
                                                              l3644 1E52  
                                                              l5164 04DE  
                                                              l5068 03EE  
                                                              l4390 1D46  
                                                              l3734 1F5C  
                                                              l4606 1B8A  
                                                              l3806 23F8  
                                                              l4550 0270  
                                                              l4542 0252  
                                                              l4534 0234  
                                                              l4526 0218  
                                                              l4518 0200  
                                                              l4470 0150  
                                                              l4462 0134  
                                                              l4454 011A  
                                                              l4446 00FC  
                                                              l4438 00DE  
                                                              l5262 05DA  
                                                              l5238 059C  
                                                              l5510 0B5A  
                                                              l3672 24F4  
                                                              l4720 13B4  
                                                              l4552 027A  
                                                              l4544 025C  
                                                              l4536 023E  
                                                              l4528 0222  
                                                              l4480 0176  
                                                              l4472 0158  
                                                              l4464 013A  
                                                              l4456 0120  
                                                              l4448 0102  
                                                              l3648 1E7C  
                                                              l4800 00F6  
                                                              l5440 069E  
                                                              l3674 24F6  
                                                              l4714 13AA  
                                                              l3826 0FD8  
                                                              l3818 0EC8  
                                                              l3738 1F64  
                                                              l4554 0280  
                                                              l4546 0262  
                                                              l4538 0244  
                                                              l4490 019A  
                                                              l4482 017C  
                                                              l4474 015E  
                                                              l4466 0140  
                                                              l4458 0124  
                                                              l4562 0292  
                                                              l4570 2462  
                                                              l3770 0BCC  
                                                              l5266 05F2  
                                                              l5506 0B3A  
                                                              l4388 1D44  
                                                              l4740 1402  
                                                              l4732 13E8  
                                                              l4724 13C8  
                                                              l3828 1030  
                                                              l4556 0288  
                                                              l4548 026A  
                                                              l4492 019E  
                                                              l4484 0186  
                                                              l4476 0168  
                                                              l4468 014A  
                                                              l4564 02AE  
                                                              l3780 0E84  
                                                              l5284 0646  
                                                              l4804 0110  
                                                              l5452 0A00  
                                                              l4718 13AE  
                                                              l4670 1328  
                                                              l3838 10D2  
                                                              l3694 2590  
                                                              l4558 028E  
                                                              l4494 01A8  
                                                              l4486 018C  
                                                              l4478 016E  
                                                              l4398 0002  
                                                              l4656 2018  
                                                              l4752 142E  
                                                              l4744 1414  
                                                              l4736 13FA  
                                                              l4728 13D6  
                                                              l4496 01AE  
                                                              l4488 0194  
                                                              l3952 2530  
                                                              l5480 0A9C  
                                                              l5448 06C6  
                                                              l4762 143A  
                                                              l4674 132E  
                                                              l4498 01B4  
                                                              l5490 0AF8  
                                                              l5474 0A72  
                                                              l5458 0A10  
                                                              l3972 2418  
                                                              l3980 243A  
                                                              l4756 1434  
                                                              l4748 141C  
                                                              l4684 135A  
                                                              l3948 251E  
                                                              l4780 007E  
                                                              l4694 1380  
                                                              l4598 1B6C  
                                                              l4934 0284  
                                                              l4936 028C  
                                                              l4872 01D2  
                                                              l4698 1386  
                                                              l4874 01DC  
                                                              l3988 244C  
                                                              l4876 01E4  
                                                              l4796 00EA  
                                                              l4788 00B2  
                                                              l4982 02FC  
                                                              l4984 0304  
                                                              l4888 021A  
                                                              STR_3 7DA6  
                                                 _UpdateLedRegister 23CA  
                                                              _LATA 000F89  
                                                              _LATB 000F8A  
                                                              u3104 0F04  
                                                              u3105 0EFE  
                                                              u3114 0F2E  
                                                              u3050 0BA6  
                                                              u3115 0F28  
                                                              u3204 106C  
                                                              u3124 0F56  
                                                              u3060 0BC0  
                                                              u3205 1066  
                                                              u3125 0F50  
                                                              u3310 1128  
                                                              u3214 1092  
                                                              u3134 0F72  
                                                              u3215 108C  
                                                              u3135 0F6C  
                                                              u3144 0F96  
                                                              u3145 0F90  
                                                              u3234 10BE  
                                                              u5010 0606  
                                                              u4130 0092  
                                                              u3235 10B8  
                                                              u3164 0FC4  
                                                              u3165 0FBE  
                                                              u3245 184C  
                                                              u3350 118A  
                                                              u3174 0FEC  
                                                              u3094 0EDC  
                                                              u5030 061A  
                                                              u4230 0124  
                                                              u3175 0FE6  
                                                              u3095 0ED6  
                                                              u3255 186E  
                                                              u3184 1016  
                                                              u2800 1E3A  
                                                              u3185 1010  
                                                              u4161 00BE  
                                                              u4145 009E  
                                                              u3514 1520  
                                                              u3370 11B2  
                                                              u3194 1044  
                                                              u4170 00CC  
                                                              u3515 151A  
                                                              u3195 103E  
                                                              u3524 154C  
                                                              u3604 1610  
                                                              u5300 0AC6  
                                                              u3525 1546  
                                                              u3605 160A  
                                                              u3470 12CE  
                                                              u3624 1636  
                                                              u3800 012E  
                                                              u2904 191C  
                                                              u3625 162E  
                                                              u3801 012C  
                                                              u2905 1916  
                                                              u4185 00D8  
                                                              u3634 1662  
                                                              u3810 014A  
                                                              u3730 0058  
                                                              u2914 193C  
                                                              u3635 165A  
                                                              u3811 0148  
                                                              u3731 0056  
                                                              u2915 1936  
                                                              u3900 025C  
                                                              u3820 0168  
                                                              u3740 007E  
                                                              u4620 03B2  
                                                              u4540 0326  
                                                              u4460 02A0  
                                                              u3901 025A  
                                                              u3821 0166  
                                                              u3741 007C  
                                                              u3494 1504  
                                                              u3910 027A  
                                                              u3830 0186  
                                                              u3750 00A2  
                                                              u2950 21BA  
                                                              u2934 1964  
                                                              u3495 14FC  
                                                              u3911 0278  
                                                              u3831 0184  
                                                              u3751 00A0  
                                                              u2935 195C  
                                                              u3584 1DB0  
                                                              u3840 01A8  
                                                              u3760 00B4  
                                                              u2944 198C  
                                                              u3585 1DA8  
                                                              u3841 01A6  
                                                              u3761 00B2  
                                                              u2945 1984  
                                                              u3594 1DDC  
                                                              u3850 01C4  
                                                              u3770 00D0  
                                                              u2970 21D6  
                                                              u2874 18D8  
                                                              u3595 1DD4  
                                                              u3851 01C2  
                                                              u3771 00CE  
                                                              u2875 18D2  
                                                              u3860 01E2  
                                                              u3780 00EE  
                                                              u2884 18F8  
                                                              _RCIF 007CF5  
                                                              u5357 249A  
                                                              u3861 01E0  
                                                              u3781 00EC  
                                                              u2885 18F2  
                                                              u3870 0200  
                                                              u3790 010C  
                                                              u4910 056A  
                                                              u4830 04F2  
                                                              u4750 047A  
                                                              u4670 0402  
                                                              u3871 01FE  
                                                              u3791 010A  
                                                              u3880 0222  
                                                              u2968 21BE  
                                                              u3881 0220  
                                                              u3890 023E  
                                                              u3891 023C  
                                                              u2988 21DA  
                                                              u4955 05A0  
                                                              i2l86 1ED2  
                                                              i2l87 1F38  
                                                              i2l88 1F04  
                                                              i2l97 1F0C  
                                                              u4995 05DE  
                                            ??_ModbusGetLastCommand 0007  
                                                              _TRMT 007D61  
                                                              _WREN 007D32  
                                     ModbusValidateRequest@u16count 0021  
                                                ?_UpdateLedRegister 0001  
                                                              _main 065E  
                                                              fsr1h 000FE2  
                                                              fsr2h 000FDA  
                                                              indf1 000FE7  
                                                              fsr1l 000FE1  
                                                              indf2 000FDF  
                                                              fsr2l 000FD9  
                                                              btemp 007A  
                                                              prodh 000FF4  
                                                              prodl 000FF3  
                                                              start 002C  
                                                   __end_of_GetTime 2674  
                                                      ___param_bank 000010  
                                               ??_UpdateLedRegister 0005  
                                                    ?_years_to_days 000C  
                                                   __end_of_InitApp 2054  
                                                        __6sCounter 00C0  
                                                  ?_SetTimeFromRegs 0043  
                                                   __end_of_SetTime 25F0  
                                                             ?_main 0001  
                                            __size_of_ymd_to_scalar 00A4  
                                                             _EEADR 000FA9  
                                                             _CARRY 007EC0  
                                                   __end_of___lwdiv 225A  
                                                   __end_of___lwmod 2384  
                                        __end_of_ModbusSendTxBuffer 22F2  
                                                             _RCREG 000FAE  
                                                             _RCSTA 000FAB  
                                                             _TMR0H 000FD7  
                                                             _TMR1H 000FCF  
                                                             _TMR0L 000FD6  
                                                             _TMR1L 000FCE  
                                                             _SPBRG 000FAF  
                                                             _TRISB 000F93  
                                                        _IsBusserOn 00BE  
                                                             _TXREG 000FAD  
                                                             _TXSTA 000FAC  
                                               _ConfigureOscillator 267C  
                                       ModbusProcess_FC3@u8StartAdd 001E  
                                                     __CFG_WRT0$OFF 000000  
                                                     __CFG_WRT1$OFF 000000  
                                                     __CFG_WRT2$OFF 000000  
                                                     __CFG_WRT3$OFF 000000  
                                                    __CFG_EBTR0$OFF 000000  
                                                    __CFG_EBTR1$OFF 000000  
                                                    __CFG_EBTR2$OFF 000000  
                                                    __CFG_EBTR3$OFF 000000  
                                                    _InitFromEeprom 17B4  
                                                    ?_LoadNextEvent 0001  
                                                ProcessDiary@minute 0012  
                                                        Modbus@u8id 000C  
                                                             __u8id 00C3  
                                                     __CFG_WRTB$OFF 000000  
                                                     __CFG_WRTC$OFF 000000  
                                                     __CFG_WRTD$OFF 000000  
                                         __end_of_UpdateLedRegister 2410  
                                        ModbusBuildException@u8func 0006  
                                                    __CFG_EBTRB$OFF 000000  
                                                   __end_of_io_poll 065E  
                                                   __end_of_low_isr 002C  
                                                __size_of_AddSecond 0010  
                                                             tablat 000FF5  
                                                  ymd_to_scalar@day 0020  
                                                    _UartBufferHead 00BF  
                                                    _UartBufferTail 0070  
                                                             plusw2 000FDB  
                                         ModbusProcess_FC1@u8bitsno 0022  
                                                             status 000FD8  
                                                   years_to_days@yr 000C  
                                        __size_of_ProcessLightBlock 0000  
                                              ?_ConfigureOscillator 0001  
                                      __end_of_ModbusBuildException 25D2  
                                                   __initialization 2054  
                                                      __end_of_main 0B88  
                                                  __end_of_LightLed 10EA  
                                 ModbusProcess_FC5@u8CopyBufferSize 0019  
                                        ModbusProcess_FC1@u16Coilno 0023  
                                                            ??_main 00D9  
                                                   ResetEvent@state 000F  
                                                     __activetblptr 000002  
                                            __end_of_InitFromEeprom 18B4  
                                                        _ModbusInit 263A  
                                                        _ModbusPoll 1310  
                                                  __end_of_PortRead 2508  
                                                    _InitUartBuffer 265E  
                                            __size_of_ModbusCalcCRC 0074  
                                ModbusProcess_FC16@u8CopyBufferSize 001D  
                                          ModbusSendTxBuffer@u16crc 0012  
                                                            _EEDATA 000FA8  
                                                            _CCPR1L 000FBE  
                                                            _EECON2 000FA7  
                                                        _SetHourMin 25F0  
                                          SetTimeFromRegs@yearMonth 0044  
                                                    _LightStatusLed 18B4  
                                                            i2l5326 1EFA  
                                                            i2l5344 1F32  
                                                            i2l5346 1F34  
                                                     _ymd_to_scalar 1E0E  
                                                         ??_GetTime 0007  
                                                 LightStatusLed@row 000C  
                                                        _ResetEvent 2454  
                                                     main@oldMinute 00E6  
                                  ModbusProcess_FC15@u16currentCoil 0022  
                                                         ??_InitApp 0005  
                                             ??_ConfigureOscillator 0005  
                                                   _currentLedBlock 00CC  
                                                   ??_years_to_days 0010  
                                                            _Modbus 2626  
                                                         ??_SetTime 0005  
                                                  __end_of_high_isr 1F48  
                                                    _UartRingBuffer 0200  
                                                      __lastAddress 00B6  
                                        ModbusProcess_FC3@u16regsno 001C  
                                          ModbusProcess_FC16@u8size 0016  
                                                         ??___lwdiv 0009  
                                                         ??___lwmod 0009  
                                                            _isleap 225A  
                                                            _millis 2562  
                                                            clear_0 205C  
                                                            clear_1 206E  
                                                            clear_2 207A  
                                                            clear_3 2086  
                                                 __end_of_AddSecond 265E  
                                                            _mktime 0B88  
                                                      __lastCommand 00D8  
                                             __end_of_PortAvailable 267C  
                                                        __au8Buffer 0100  
                                                __size_of_PortBegin 001A  
                                                         ??_io_poll 005E  
                                                   ?_InitFromEeprom 0001  
                                                   ??_LoadNextEvent 0007  
                                                      __pdataCOMRAM 0077  
                                            __end_of_InitUartBuffer 266C  
                                                      __MODBUSCoils 00D6  
                                                        PortWrite@i 0008  
                                                __size_of_PortWrite 003E  
                                                      __mediumconst 7D9C  
                                   ModbusBuildException@u8exception 0005  
                                                         ??_low_isr 0004  
                                                            tblptrh 000FF7  
                                                            tblptrl 000FF6  
                                                            tblptru 000FF8  
                                        __size_of_UpdateLedRegister 0046  
                                                  __end_of_pwm_init 0000  
                                            __end_of_LightStatusLed 19AA  
                                        ModbusProcess_FC1@u8bytesno 001D  
                                                  years_to_days@ret 0018  
                                          ModbusProcess_FC1@u16coil 0019  
                                                    ?_ymd_to_scalar 001C  
                                                        __u8lastRec 00C4  
                                                        __accesstop 0080  
                                           __end_of__initialization 20CA  
                                        __end_of_ModbusProcess_FC21 1D66  
                                        __end_of_ModbusProcess_FC15 16B2  
                                        __end_of_ModbusProcess_FC16 1A7A  
                                        __end_of_ModbusProcess_FC17 233C  
                                                   Modbus@u8txenpin 000B  
                                                  io_poll@yearMonth 0066  
                                                     ___rparam_used 000001  
                                          ModbusProcess_FC5@u16coil 001A  
                                    __size_of_ModbusValidateRequest 0226  
                                 ModbusProcess_FC21@startAddrsBytes 0018  
                                     __end_of_ModbusValidateRequest 1310  
                               ModbusValidateRequest@startAddrBytes 0016  
                                                    __pcstackCOMRAM 0001  
                                                     _ModbusCalcCRC 20D8  
                                                      __pidataBANK0 2682  
                                              __end_of_fctsupported 7DA6  
                                     ModbusProcess_FC16@u16StartAdd 001E  
                                                 ?_SwitchOffAllLeds 0001  
                                                       ?_ModbusInit 0005  
                                                       ?_ModbusPoll 0027  
                                                   ?_InitUartBuffer 0001  
                                           __size_of_months_to_days 0046  
                                              _ModbusBuildException 25B2  
                                                ??_SwitchOffAllLeds 0005  
                                                        __lastCount 00B8  
                                                   ?_LightStatusLed 0005  
                                                    io_poll@hourMin 0062  
                                                       ?_SetHourMin 0005  
                                                        __pbssBANK0 0080  
                                                        __pbssBANK1 0100  
                                                        __pbssBANK2 0200  
                                 ModbusProcess_FC6@u8CopyBufferSize 001B  
                                                         ?_LightLed 0005  
                                            __size_of_SetBuzzerDuty 0058  
                                                       ?_ResetEvent 0001  
                                                 __end_of_PortBegin 2626  
                                                           ?_Modbus 000A  
                                                 __end_of_PortWrite 24D2  
                                                    ?_ModbusCalcCRC 0005  
                                                   PortWrite@buflen 0007  
                                                         ?_PortRead 0001  
                                                  _buzzerInfoPeriod 00C7  
                                ModbusProcess_FC17@u8CopyBufferSize 0014  
                                             _millisecondsFromStart 00AC  
                                                    SetTime@newTime 0005  
                                                        _getHourMin 2536  
                                                           ?_isleap 000A  
                                                           ?_millis 0005  
                                                           ?_mktime 002C  
                                  ModbusProcess_FC21@requestDataLen 0016  
                                                     LightLed@blink 0006  
                                             ?_ModbusBuildException 0001  
                                                   ??_ymd_to_scalar 0022  
                                                   LoadNextEvent@v1 0009  
                                                         ?_high_isr 0001  
                                                    _oldBlinkOnTime 00B0  
                                    ModbusGetRxBuffer@bBuffOverflow 0007  
                                                        ??_LightLed 0007  
                                                _ModbusSendTxBuffer 22A6  
                                                           _GetTime 266C  
                                     __size_of_ModbusGetLastCommand 002E  
                                                   __inputRegsCount 00C2  
                                                           _InitApp 1FCE  
                                               LightLed@statusShift 000C  
                                                           __Hparam 0000  
                                                           _SetTime 25D2  
                                                           __Lparam 0000  
                                               __size_of_ModbusInit 0014  
                                               ?_ModbusSendTxBuffer 0001  
                                               __size_of_ModbusPoll 0160  
                                                   __size_of_Modbus 0014  
                                                        _eventCount 0075  
                                                     ?_ProcessDiary 0001  
                                                        ??_PortRead 0005  
                                                         ?_pwm_init 0001  
                                                           ___lwdiv 2206  
                                                           ___lwmod 233C  
                                                   SetBuzzerDuty@dc 0005  
                                   ModbusProcess_FC1@u16currentCoil 0020  
                                               __size_of_SetHourMin 001C  
                                                           __pcinit 2054  
                                                   __size_of_isleap 004C  
                                                     _SetBuzzerDuty 21AE  
                                                   __size_of_millis 002A  
                                                           __ramtop 0600  
                                                           _blinkOn 0072  
                                                   __size_of_mktime 0312  
                                                           __ptext0 065E  
                                                           __ptext1 0000  
                                                           __ptext2 0030  
                                                           __ptext3 1A7A  
                                                           __ptext4 0B88  
                                                           __ptext5 1E0E  
                                                           __ptext6 16B2  
                                                           __ptext7 2384  
                                                           __ptext8 2206  
                                                           __ptext9 225A  
                                                         _T0CONbits 000FD5  
                                                         _T1CONbits 000FCD  
                                                       PortRead@ret 0005  
                                                           _io_poll 0030  
                                                         _T2CONbits 000FCA  
                                                 SetHourMin@newHour 0006  
                                               __size_of_ResetEvent 0040  
                                          __size_of_SetTimeFromRegs 00C2  
                                                     mktime@timeptr 0042  
                                              ??_ModbusSendTxBuffer 0012  
                                                           _low_isr 0018  
                                                   ModbusPoll@coils 0029  
                                                        ??_high_isr 0001  
                                                    __pintcode_body 1EB2  
                                              end_of_initialization 20CA  
                                                     __Lmediumconst 7D9C  
                                                           int_func 1EB2  
                                         UpdateLedRegister@regIndex 0005  
                                                   ??_ModbusCalcCRC 0007  
                                                    ??_ProcessDiary 000D  
                                               LightLed@ststusIndex 000B  
                                                         _RCSTAbits 000FAB  
                                                           postdec1 000FE5  
                                                           postdec2 000FDD  
                                                           postinc0 000FEE  
                                                           postinc1 000FE6  
                                                           postinc2 000FDE  
                                     ModbusProcess_FC1@u8currentBit 001B  
                                               ModbusProcess_FC21@i 001C  
                                               ModbusProcess_FC16@i 0021  
                                               ModbusProcess_FC17@i 0015  
                                                        ??_pwm_init 0005  
                                                 SwitchOffAllLeds@i 0005  
                                                  ??_InitFromEeprom 000D  
                                                       ?_getHourMin 0005  
                                                    ?_SetBuzzerDuty 0005  
                                 ModbusProcess_FC1@u8CopyBufferSize 001C  
                                                         _PORTCbits 000F82  
                                                      _curEventHour 00C9  
                                            ??_ModbusBuildException 0005  
                                                      _curEventType 00CB  
                                                 ModbusInit@u8serno 0005  
                                                         _AddSecond 264E  
                                                    _months_to_days 2384  
                                                 _ModbusGetRxBuffer 2410  
                                                         _TRISAbits 000F92  
                                                         _TRISCbits 000F94  
                                       ModbusProcess_FC15@u16Coilno 0020  
                                                 LoadNextEvent@hour 000A  
                                                ?_ModbusGetRxBuffer 0001  
                                       __end_of_ConfigureOscillator 2682  
                                             SetTimeFromRegs@daySec 0043  
                                                      _fctsupported 7D9D  
                                                       _CCP1CONbits 000FBD  
                                     ModbusProcess_FC15@u8frameByte 001D  
                                               ??_ModbusGetRxBuffer 0006  
                                                         _TXSTAbits 000FAC  
                                                        main@lastMs 00DE  
                                      ModbusValidateRequest@u16regs 0025  
                                                        main@minute 00EC  
                                                 _buzzerAlarmPeriod 0074  
                                         ModbusGetLastCommand@count 0005  
                                                _buzzeQuietDuration 00C6  
                                             __end_of_years_to_days 17B4  
                                                    __end_of_Modbus 263A  
                                                  ??_InitUartBuffer 0005  
                                                _ModbusProcess_FC21 1CB4  
                                                _ModbusProcess_FC15 15A2  
                                                _ModbusProcess_FC16 19AA  
                                                _ModbusProcess_FC17 22F2  
                                                     __pidataCOMRAM 2686  
                                          ModbusPoll@discreteInputs 0027  
                                                    __end_of_isleap 22A6  
                                                    __end_of_millis 258C  
                                            __end_of_months_to_days 23CA  
                                         __end_of_ModbusGetRxBuffer 2454  
                                                    __end_of_mktime 0E9A  
                                                  ??_LightStatusLed 0007  
                                                   ymd_to_scalar@mo 001E  
                                                     _UartBufferLen 006F  
                                                   ymd_to_scalar@yr 001C  
                                                      ??_ModbusInit 0007  
                                                      ??_ModbusPoll 0030  
                                                        ?_AddSecond 0001  
                                               start_initialization 2054  
                                               ?_ModbusProcess_FC21 0001  
                                               ?_ModbusProcess_FC15 0001  
                                               ?_ModbusProcess_FC16 0014  
                                               ?_ModbusProcess_FC17 0001  
                                             __end_of_LoadNextEvent 1FCE  
                                                      ??_SetHourMin 0006  
                                                 ??_SetTimeFromRegs 0045  
                                               __size_of_getHourMin 002C  
                                                      ??_ResetEvent 000D  
                                         __size_of_SwitchOffAllLeds 0026  
                                            __size_of_PortAvailable 0008  
                                                 __size_of_LightLed 0250  
                                                  LightStatusLed@on 0005  
                                                    getHourMin@hour 0006  
                                              ??_ModbusProcess_FC21 0014  
                                              ??_ModbusProcess_FC15 0014  
                                              ??_ModbusProcess_FC16 0017  
                                              ??_ModbusProcess_FC17 0014  
                                                          ??_Modbus 000C  
                                           ModbusProcess_FC15@bTemp 001C  
                                                __end_of_ModbusInit 264E  
                                                __end_of_ModbusPoll 1470  
                                                         _PortBegin 260C  
                                                   ??_SetBuzzerDuty 0007  
                                             _ModbusValidateRequest 10EA  
                                                       __pdataBANK0 00ED  
                                                         _PortWrite 2494  
                                                 __size_of_PortRead 0036  
                                                          ??_isleap 000C  
                                                          ??_millis 0009  
                                                          ??_mktime 0030  
                                                __end_of_SetHourMin 260C  
                                                 __holdingRegsCount 00C1  
                                                   ?_months_to_days 000C  
                                                    ModbusCalcCRC@i 000E  
                                                    ModbusCalcCRC@j 000F  
                                     ModbusProcess_FC21@recLenBytes 001A  
                                                       __pbssCOMRAM 006F  
                                                __end_of_ResetEvent 2494  
                                                     __pcstackBANK0 00D9  
                                           ModbusProcess_FC6@u16add 001C  
                                           ModbusProcess_FC6@u16val 0019  
                                              __end_of_ProcessDiary 1BFA  
                                           ModbusProcess_FC3@u8size 0016  
                                           ModbusProcess_FC6@u8size 0016  
                                                     io_poll@daySec 0064  
                                                 __size_of_high_isr 1F40  
                                                          ?_GetTime 0005  
                                                          ?_InitApp 0001  
                                                          ?_SetTime 0001  
                                                  ___lwdiv@dividend 0005  
                                    ModbusProcess_FC15@u8currentBit 0024  
                                    ModbusValidateRequest@u16MsgCRC 001E  
                                                         __pintcode 0008  
                                                        ?_PortBegin 0001  
                                                     __pmediumconst 7D9C  
                                ModbusProcess_FC21@u8CopyBufferSize 0017  
                                                 _buzzerOnOffPeriod 00EF  
                                                      _nightEndHour 00D0  
                                                          ?___lwdiv 0005  
                                                          ?___lwmod 0005  
                                                       _blinkPeriod 00BC  
                                                        ?_PortWrite 0005  
                                                       __pintcodelo 0018  
                                               _buzzerOnOffDuration 00ED  
                                      __end_of_ModbusGetLastCommand 2536  
                                                 __size_of_pwm_init 0000  
                                                    ModbusInit@u8id 0009  
                                          ModbusPoll@inputRegsCount 002C  
                                        __size_of_ModbusGetRxBuffer 0044  
                                       ModbusGetLastCommand@address 0007  
                                                     _PortAvailable 2674  
                                                  __MODBUSInputRegs 01AA  
                                                          ?_io_poll 0001  
                                                     __u8BufferSize 0071  
                                                       ??_AddSecond 0005  
                                                __MODBUSHoldingRegs 018C  
                                                          ?_low_isr 0001  
                                                     _blinkDuration 00BA  
                                             io_poll@lastEndAddress 006B  
                                                  ___lwdiv@quotient 0009  
                                                  SetHourMin@newMin 0005  
                                             __end_of_ymd_to_scalar 1EB2  
                                            ModbusValidateRequest@i 0023  
                                                          _LATAbits 000F89  
                                                          _LATCbits 000F8B  
                                                   _eventAcceptTime 00CE  
                                                    LightLed@ledNum 000A  
                                                          _IPR1bits 000F9F  
                                                          _PIE1bits 000F9D  
                                                 ModbusPoll@i8state 0031  
                                                          _PIR1bits 000F9E  
                                                       _ledStatuses 0090  
                                                          _RCONbits 000FD0  
                                            ?_ModbusValidateRequest 0001  
                                                ModbusProcess_FC3@i 001F  
                                             ModbusCalcCRC@u8length 000D  
                                               LightStatusLed@blink 0006  
                                                      ??_getHourMin 0006  
                                                       _curEventNum 0077  
                                                    ?_PortAvailable 0001  
                                                 _buzzeEscaladeTime 00C5  
                                                         high_isr@c 0003  
                                                          InitApp@i 0005  
                                                       _globalHours 0078  
                                                         main@curMs 00E8  
                                       __size_of_ModbusSendTxBuffer 004C  
                                                 _ModbusProcess_FC1 1470  
                                                 _ModbusProcess_FC3 1BFA  
                                                 _ModbusProcess_FC5 1D66  
                                                 _ModbusProcess_FC6 214C  
                                                       _INTCON2bits 000FF1  
                                                         copy_data0 20A0  
                                                    _nightStartHour 00D1  
                                                ?_ModbusProcess_FC1 0014  
                                                ?_ModbusProcess_FC3 0014  
                                                ?_ModbusProcess_FC5 0001  
                                                ?_ModbusProcess_FC6 0014  
                                                          _LightLed 0E9A  
                                                __end_of_getHourMin 2562  
                                             ModbusPoll@u8exception 0032  
                                                  _SwitchOffAllLeds 258C  
                                                  __size_of_GetTime 0008  
                                                         io_poll@v1 0069  
                                                  __size_of_InitApp 0086  
                                                          __Hrparam 0000  
                                                          __u32time 00A0  
                                                     getHourMin@min 0005  
                                               ??_ModbusProcess_FC1 0016  
                                               ??_ModbusProcess_FC3 0017  
                                               ??_ModbusProcess_FC5 0014  
                                               ??_ModbusProcess_FC6 0017  
                                             __end_of_ModbusCalcCRC 214C  
                                                          __Lrparam 0000  
                                                  __size_of_SetTime 001E  
                                                       ??_PortBegin 0005  
                                            ModbusProcess_FC15@regs 0025  
                                                          _PortRead 24D2  
                                            ModbusProcess_FC16@regs 0014  
                                            ModbusProcess_FC16@temp 001B  
                                                  _eventResetSecond 00A8  
                                                       ??_PortWrite 0008  
                                                     Modbus@u8serno 000A  
                                                       _oldEventNum 0079  
                                                  __size_of___lwdiv 0054  
                                                  __size_of___lwmod 0048  
                                 ModbusProcess_FC3@u8CopyBufferSize 001B  
                                                         millis@ret 0009  
                                     ModbusProcess_FC1@u16StartCoil 001E  
                                             __size_of_ProcessDiary 00BE  
                                                       _isleap$2110 000D  
                                                   _SetTimeFromRegs 1A7A  
                                                       _currentTime 00D2  
                                                  __size_of_io_poll 062E  
                                                          _diffTime 00A4  
                                         __end_of_ModbusProcess_FC1 15A2  
                                         __end_of_ModbusProcess_FC3 1CB4  
                                         __end_of_ModbusProcess_FC5 1E0E  
                                         __end_of_ModbusProcess_FC6 21AE  
                                     __size_of_ModbusBuildException 0020  
                                                   ___lwdiv@divisor 0007  
                                                io_poll@lastAddress 006D  
                                                   ___lwdiv@counter 000B  
                                                          _ledBlink 0080  
                                                  __size_of_low_isr 0014  
                                                          __ptext10 233C  
                                                          __ptext11 25D2  
                                                          __ptext20 0000  
                                                          __ptext12 25F0  
                                                          __ptext21 23CA  
                                                          __ptext13 18B4  
                                                          __ptext30 214C  
                                                          __ptext22 1B3C  
                                                          __ptext14 2508  
                                                          __ptext31 1D66  
                                                          __ptext23 258C  
                                                          __ptext15 17B4  
                                                          __ptext40 2494  
                                                          __ptext32 1BFA  
                                                          __ptext24 1F48  
                                                          __ptext16 21AE  
                                                          __ptext41 20D8  
                                                          __ptext33 1CB4  
                                                          __ptext25 2536  
                                                          __ptext17 2626  
                                                          __ptext50 264E  
                                                          __ptext42 2410  
                                                          __ptext34 22F2  
                                                          __ptext26 0E9A  
                                                          __ptext18 263A  
                                                          __ptext43 24D2  
                                                          __ptext35 19AA  
                                                          __ptext27 266C  
                                                          __ptext19 2454  
                                                          __ptext44 2674  
                                                          __ptext36 15A2  
                                                          __ptext28 1310  
                                                          __ptext45 25B2  
                                                          __ptext37 1470  
                                                          __ptext29 10EA  
                                                          __ptext46 1FCE  
                                                          __ptext38 22A6  
                                                          __ptext47 260C  
                                                          __ptext39 2562  
                                                          __ptext48 265E  
                                                          __ptext49 267C  
                                                          _high_isr 0008  
                                                io_poll@lastCommand 006A  
                                                io_poll@eventEeAddr 0068  
                                                     __size_of_main 052A  
                                              _ModbusGetLastCommand 2508  
                                      __size_of_ConfigureOscillator 0006  
                                                      _ProcessDiary 1B3C  
                                         SetTimeFromRegs@newRawTime 0047  
                                                          int$flags 007A  
                                                  ??_months_to_days 000E  
                                                          _pwm_init 0000  
                                                   ??_PortAvailable 0005  
                                                          main@hour 00E7  
                                                  LightLed@ledState 0005  
                                                _ymd_to_scalar$2123 0026  
                                                        _INTCONbits 000FF2  
                                                   _eveningTimeHour 00CD  
                                           __size_of_InitFromEeprom 0100  
                                            ProcessLightBlock@curMs 000A  
                                            __size_of_years_to_days 0102  
                                                          isleap@yr 000A  
                                             ModbusProcess_FC1@regs 0014  
                                             ModbusProcess_FC3@regs 0014  
                                                          intlevel1 268A  
                                                          intlevel2 268A  
                                             ModbusProcess_FC5@regs 001D  
                                             ModbusProcess_FC6@regs 0014  
                                                      PortWrite@buf 0005  
                                                  ___lwmod@dividend 0005  
                                             ?_ModbusGetLastCommand 0005  
                                                          mktime@tt 003E  
                                               ymd_to_scalar@scalar 0028  
                                       __size_of_ModbusProcess_FC21 00B2  
                                       __size_of_ModbusProcess_FC15 0110  
                                       __size_of_ModbusProcess_FC16 00D0  
                                       __size_of_ModbusProcess_FC17 004A  
                                                 _ProcessLightBlock 0000  
                                             __MODBUSDiscreteInputs 00B4  
                                            __size_of_LoadNextEvent 0086  
                                                ?_ProcessLightBlock 0001  
                                           __end_of_SetTimeFromRegs 1B3C  
                                             __end_of_SetBuzzerDuty 2206  
                                               ModbusPoll@u8current 0030  
                                               ??_ProcessLightBlock 0006  
                                                   ___lwmod@divisor 0007  
                                                   ___lwmod@counter 0009  
                                            _buzzerStartDurationDiv 00C8  
                                                    _curEventMinute 00CA  
                                        __size_of_ModbusProcess_FC1 0132  
                                        __size_of_ModbusProcess_FC3 00BA  
                                        __size_of_ModbusProcess_FC5 00A8  
                                        __size_of_ModbusProcess_FC6 0062  
                                           __size_of_InitUartBuffer 000E  
                                                ModbusCalcCRC@temp2 0009  
                                       ModbusValidateRequest@u8regs 0024  
                                         ModbusProcess_FC15@u16coil 0019  
                                           __size_of_LightStatusLed 00F6  
                                               ModbusInit@u8txenpin 0006  
                                                 ModbusCalcCRC@flag 000B  
                                                 ModbusCalcCRC@temp 0010  
                                         __end_of_ProcessLightBlock 0000  
                                           ??_ModbusValidateRequest 0012  
                                        ModbusPoll@holdingRegsCount 002F  
                                        ModbusProcess_FC15@u8bitsno 0026  
                                                   _morningTimeHour 00CF  
