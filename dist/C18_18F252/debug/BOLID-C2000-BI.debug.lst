

Microchip Technology PIC18 PRO Macro Assembler V1.37 build -260352376 
                                                                                               Sat Jun 04 16:44:18 2016

Microchip Technology Omniscient Code Generator v1.37 (PRO mode) build 201603110536
     1                           	processor	18F252
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	eeprom_data,global,class=EEDATA,delta=1
     6                           	psect	idataCOMRAM,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1
    75                           	psect	text59,global,reloc=2,class=CODE,delta=1
    76                           	psect	text60,global,reloc=2,class=CODE,delta=1
    77                           	psect	text61,global,reloc=2,class=CODE,delta=1
    78                           	psect	text62,global,reloc=2,class=CODE,delta=1
    79                           	psect	text63,global,reloc=2,class=CODE,delta=1
    80                           	psect	text64,global,reloc=2,class=CODE,delta=1
    81                           	psect	text65,global,reloc=2,class=CODE,delta=1
    82                           	psect	text66,global,reloc=2,class=CODE,delta=1
    83                           	psect	text67,global,reloc=2,class=CODE,delta=1
    84                           	psect	text68,global,reloc=2,class=CODE,delta=1
    85                           	psect	text69,global,reloc=2,class=CODE,delta=1
    86                           	psect	text70,global,reloc=2,class=CODE,delta=1
    87                           	psect	text71,global,reloc=2,class=CODE,delta=1
    88                           	psect	text72,global,reloc=2,class=CODE,delta=1
    89                           	psect	text73,global,reloc=2,class=CODE,delta=1
    90                           	psect	text74,global,reloc=2,class=CODE,delta=1
    91                           	psect	text75,global,reloc=2,class=CODE,delta=1
    92                           	psect	text76,global,reloc=2,class=CODE,delta=1
    93                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    94                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    95                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    96                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    97                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    98                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    99  0000                     
   100                           	psect	eeprom_data
   101  F00000  11 7F FF 06 09 FF 01 04 	db	17,127,255,6,9,255,1,4	;# 
   102  F00008  10 03 FF 15 17 09 0B 06 	db	16,3,255,21,23,9,11,6	;# 
   103  F00010  09 00 01 30 20 00 00 00 	db	9,0,1,48,32,0,0,0	;# 
   104  0000                     
   105                           	psect	idataCOMRAM
   106  003050                     __pidataCOMRAM:
   107                           	opt stack 0
   108                           
   109                           ;initializer for _globalHours
   110  003050  FF                 	db	255
   111                           
   112                           	psect	smallconst
   113  000600                     __psmallconst:
   114                           	opt stack 0
   115  000600  00                 	db	0
   116  000601                     _fctsupported:
   117                           	opt stack 0
   118  000601  01                 	db	1
   119  000602  02                 	db	2
   120  000603  03                 	db	3
   121  000604  04                 	db	4
   122  000605  05                 	db	5
   123  000606  06                 	db	6
   124  000607  07                 	db	7
   125  000608  0F                 	db	15
   126  000609  10                 	db	16
   127  00060A  11                 	db	17
   128  00060B  15                 	db	21
   129  00060C  2B                 	db	43
   130  00060D  64                 	db	100
   131  00060E  65                 	db	101
   132  00060F  66                 	db	102
   133  000610                     __end_of_fctsupported:
   134                           	opt stack 0
   135  0000                     _CCP1CONbits	set	4029
   136  0000                     _CCPR1L	set	4030
   137  0000                     _EEADR	set	4009
   138  0000                     _EECON2	set	4007
   139  0000                     _EEDATA	set	4008
   140  0000                     _INTCON2bits	set	4081
   141  0000                     _INTCONbits	set	4082
   142  0000                     _IPR1bits	set	3999
   143  0000                     _LATA	set	3977
   144  0000                     _LATAbits	set	3977
   145  0000                     _LATB	set	3978
   146  0000                     _LATCbits	set	3979
   147  0000                     _PIE1bits	set	3997
   148  0000                     _PIR1bits	set	3998
   149  0000                     _PORTCbits	set	3970
   150  0000                     _PR2	set	4043
   151  0000                     _RCONbits	set	4048
   152  0000                     _RCREG	set	4014
   153  0000                     _RCSTA	set	4011
   154  0000                     _RCSTAbits	set	4011
   155  0000                     _SPBRG	set	4015
   156  0000                     _T0CONbits	set	4053
   157  0000                     _T1CONbits	set	4045
   158  0000                     _T2CONbits	set	4042
   159  0000                     _TMR0H	set	4055
   160  0000                     _TMR0L	set	4054
   161  0000                     _TMR1H	set	4047
   162  0000                     _TMR1L	set	4046
   163  0000                     _TRISAbits	set	3986
   164  0000                     _TRISB	set	3987
   165  0000                     _TRISCbits	set	3988
   166  0000                     _TXREG	set	4013
   167  0000                     _TXSTA	set	4012
   168  0000                     _TXSTAbits	set	4012
   169  0000                     _CARRY	set	32448
   170  0000                     _GIE	set	32663
   171  0000                     _RCIF	set	31989
   172  0000                     _RD	set	32048
   173  0000                     _TRMT	set	32097
   174  0000                     _WR	set	32049
   175  0000                     _WREN	set	32050
   176  000610                     STR_9:
   177  000610  54                 	db	84	;'T'
   178  000611  61                 	db	97	;'a'
   179  000612  62                 	db	98	;'b'
   180  000613  6C                 	db	108	;'l'
   181  000614  6F                 	db	111	;'o'
   182  000615  20                 	db	32
   183  000616  73                 	db	115	;'s'
   184  000617  20                 	db	32
   185  000618  72                 	db	114	;'r'
   186  000619  61                 	db	97	;'a'
   187  00061A  73                 	db	115	;'s'
   188  00061B  70                 	db	112	;'p'
   189  00061C  69                 	db	105	;'i'
   190  00061D  73                 	db	115	;'s'
   191  00061E  61                 	db	97	;'a'
   192  00061F  6E                 	db	110	;'n'
   193  000620  69                 	db	105	;'i'
   194  000621  65                 	db	101	;'e'
   195  000622  6D                 	db	109	;'m'
   196  000623  00                 	db	0
   197  000624                     STR_7:
   198  000624  68                 	db	104	;'h'
   199  000625  74                 	db	116	;'t'
   200  000626  74                 	db	116	;'t'
   201  000627  70                 	db	112	;'p'
   202  000628  3A                 	db	58	;':'
   203  000629  2F                 	db	47
   204  00062A  2F                 	db	47
   205  00062B  62                 	db	98	;'b'
   206  00062C  6F                 	db	111	;'o'
   207  00062D  6C                 	db	108	;'l'
   208  00062E  69                 	db	105	;'i'
   209  00062F  64                 	db	100	;'d'
   210  000630  2E                 	db	46
   211  000631  72                 	db	114	;'r'
   212  000632  75                 	db	117	;'u'
   213  000633  00                 	db	0
   214  000634                     STR_13:
   215  000634  52                 	db	82	;'R'
   216  000635  61                 	db	97	;'a'
   217  000636  73                 	db	115	;'s'
   218  000637  70                 	db	112	;'p'
   219  000638  69                 	db	105	;'i'
   220  000639  73                 	db	115	;'s'
   221  00063A  61                 	db	97	;'a'
   222  00063B  6E                 	db	110	;'n'
   223  00063C  69                 	db	105	;'i'
   224  00063D  65                 	db	101	;'e'
   225  00063E  00                 	db	0
   226  00063F                     STR_3:
   227  00063F  43                 	db	67	;'C'
   228  000640  32                 	db	50	;'2'
   229  000641  30                 	db	48	;'0'
   230  000642  30                 	db	48	;'0'
   231  000643  30                 	db	48	;'0'
   232  000644  2D                 	db	45
   233  000645  42                 	db	66	;'B'
   234  000646  49                 	db	73	;'I'
   235  000647  00                 	db	0
   236  000648                     STR_1:
   237  000648  42                 	db	66	;'B'
   238  000649  4F                 	db	79	;'O'
   239  00064A  4C                 	db	76	;'L'
   240  00064B  49                 	db	73	;'I'
   241  00064C  44                 	db	68	;'D'
   242  00064D  00                 	db	0
   243  00064E                     STR_5:
   244  00064E  31                 	db	49	;'1'
   245  00064F  2E                 	db	46
   246  000650  30                 	db	48	;'0'
   247  000651  31                 	db	49	;'1'
   248  000652  00                 	db	0
   249  000653                     STR_11:
   250  000653  4D                 	db	77	;'M'
   251  000654  4D                 	db	77	;'M'
   252  000655  4D                 	db	77	;'M'
   253  000656  00                 	db	0
   254  0000                     
   255                           ; #config settings
   256  000657  00                 	db	0	; dummy byte at the end
   257  0000                     
   258                           	psect	cinit
   259  002924                     __pcinit:
   260                           	opt stack 0
   261  002924                     start_initialization:
   262                           	opt stack 0
   263  002924                     __initialization:
   264                           	opt stack 0
   265                           
   266                           ; Clear objects allocated to BANK2 (256 bytes)
   267  002924  EE02  F000         	lfsr	0,__pbssBANK2
   268  002928  EE11 F000          	lfsr	1,256
   269  00292C                     clear_0:
   270  00292C  6AEE               	clrf	postinc0,c
   271  00292E  50E5               	movf	postdec1,w,c
   272  002930  50E1               	movf	fsr1l,w,c
   273  002932  E1FC               	bnz	clear_0
   274  002934  50E2               	movf	fsr1h,w,c
   275  002936  E1FA               	bnz	clear_0
   276                           
   277                           ; Clear objects allocated to BANK1 (200 bytes)
   278  002938  EE01  F000         	lfsr	0,__pbssBANK1
   279  00293C  0EC8               	movlw	200
   280  00293E                     clear_1:
   281  00293E  6AEE               	clrf	postinc0,c
   282  002940  06E8               	decf	wreg,f,c
   283  002942  E1FD               	bnz	clear_1
   284                           
   285                           ; Clear objects allocated to BANK0 (115 bytes)
   286  002944  EE00  F080         	lfsr	0,__pbssBANK0
   287  002948  0E73               	movlw	115
   288  00294A                     clear_2:
   289  00294A  6AEE               	clrf	postinc0,c
   290  00294C  06E8               	decf	wreg,f,c
   291  00294E  E1FD               	bnz	clear_2
   292                           
   293                           ; Clear objects allocated to COMRAM (5 bytes)
   294  002950  6A71               	clrf	(__pbssCOMRAM+4)& (0+255),c
   295  002952  6A70               	clrf	(__pbssCOMRAM+3)& (0+255),c
   296  002954  6A6F               	clrf	(__pbssCOMRAM+2)& (0+255),c
   297  002956  6A6E               	clrf	(__pbssCOMRAM+1)& (0+255),c
   298  002958  6A6D               	clrf	__pbssCOMRAM& (0+255),c
   299                           
   300                           ; Initialize objects allocated to COMRAM (1 bytes)
   301                           ; load TBLPTR registers with __pidataCOMRAM
   302  00295A  0E50               	movlw	low __pidataCOMRAM
   303  00295C  6EF6               	movwf	tblptrl,c
   304  00295E  0E30               	movlw	high __pidataCOMRAM
   305  002960  6EF7               	movwf	tblptrh,c
   306  002962  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   307  002964  6EF8               	movwf	tblptru,c
   308  002966  0009               	tblrd		*+	;fetch initializer
   309  002968  CFF5 F072          	movff	tablat,__pdataCOMRAM
   310  00296C                     end_of_initialization:
   311                           	opt stack 0
   312  00296C                     __end_of__initialization:
   313                           	opt stack 0
   314  00296C  9073               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   315  00296E  9273               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   316  002970  0E00               	movlw	low (__Lmediumconst shr (0+16))
   317  002972  6EF8               	movwf	tblptru,c
   318  002974  0100               	movlb	0
   319  002976  EF99  F008         	goto	_main	;jump to C main() function
   320                           tblptru	equ	0xFF8
   321                           tblptrh	equ	0xFF7
   322                           tblptrl	equ	0xFF6
   323                           tablat	equ	0xFF5
   324                           postinc0	equ	0xFEE
   325                           wreg	equ	0xFE8
   326                           postdec1	equ	0xFE5
   327                           fsr1h	equ	0xFE2
   328                           fsr1l	equ	0xFE1
   329                           
   330                           	psect	bssCOMRAM
   331  00006D                     __pbssCOMRAM:
   332                           	opt stack 0
   333  00006D                     __maxDiaryEvents:
   334                           	opt stack 0
   335  00006D                     	ds	1
   336  00006E                     __u8BufferSize:
   337                           	opt stack 0
   338  00006E                     	ds	1
   339  00006F                     _blinkOn:
   340                           	opt stack 0
   341  00006F                     	ds	1
   342  000070                     _eventCount:
   343                           	opt stack 0
   344  000070                     	ds	1
   345  000071                     _globalMinutes:
   346                           	opt stack 0
   347  000071                     	ds	1
   348                           tblptru	equ	0xFF8
   349                           tblptrh	equ	0xFF7
   350                           tblptrl	equ	0xFF6
   351                           tablat	equ	0xFF5
   352                           postinc0	equ	0xFEE
   353                           wreg	equ	0xFE8
   354                           postdec1	equ	0xFE5
   355                           fsr1h	equ	0xFE2
   356                           fsr1l	equ	0xFE1
   357                           
   358                           	psect	dataCOMRAM
   359  000072                     __pdataCOMRAM:
   360                           	opt stack 0
   361  000072                     _globalHours:
   362                           	opt stack 0
   363  000072                     	ds	1
   364                           tblptru	equ	0xFF8
   365                           tblptrh	equ	0xFF7
   366                           tblptrl	equ	0xFF6
   367                           tablat	equ	0xFF5
   368                           postinc0	equ	0xFEE
   369                           wreg	equ	0xFE8
   370                           postdec1	equ	0xFE5
   371                           fsr1h	equ	0xFE2
   372                           fsr1l	equ	0xFE1
   373                           
   374                           	psect	bssBANK0
   375  000080                     __pbssBANK0:
   376                           	opt stack 0
   377  000080                     _ledBlink:
   378                           	opt stack 0
   379  000080                     	ds	16
   380  000090                     _ledStatuses:
   381                           	opt stack 0
   382  000090                     	ds	16
   383  0000A0                     __currenDiaryEvent:
   384                           	opt stack 0
   385  0000A0                     	ds	9
   386  0000A9                     __eventFromCommand:
   387                           	opt stack 0
   388  0000A9                     	ds	6
   389  0000AF                     __playingEndMs:
   390                           	opt stack 0
   391  0000AF                     	ds	4
   392  0000B3                     __u32time:
   393                           	opt stack 0
   394  0000B3                     	ds	4
   395  0000B7                     _diffTime:
   396                           	opt stack 0
   397  0000B7                     	ds	4
   398  0000BB                     _millisecondsFromStart:
   399                           	opt stack 0
   400  0000BB                     	ds	4
   401  0000BF                     _oldBlinkOnTime:
   402                           	opt stack 0
   403  0000BF                     	ds	4
   404  0000C3                     _soundTestEnd:
   405                           	opt stack 0
   406  0000C3                     	ds	4
   407  0000C7                     __lastAddress:
   408                           	opt stack 0
   409  0000C7                     	ds	2
   410  0000C9                     __lastCount:
   411                           	opt stack 0
   412  0000C9                     	ds	2
   413  0000CB                     __nextEventPlayDuration:
   414                           	opt stack 0
   415  0000CB                     	ds	2
   416  0000CD                     __totalMinutesFromDayStart:
   417                           	opt stack 0
   418  0000CD                     	ds	2
   419  0000CF                     _UartBufferHead:
   420                           	opt stack 0
   421  0000CF                     	ds	1
   422  0000D0                     _UartBufferLen:
   423                           	opt stack 0
   424  0000D0                     	ds	1
   425  0000D1                     _UartBufferTail:
   426                           	opt stack 0
   427  0000D1                     	ds	1
   428  0000D2                     __6sCounter:
   429                           	opt stack 0
   430  0000D2                     	ds	1
   431  0000D3                     __deviceStatus:
   432                           	opt stack 0
   433  0000D3                     	ds	1
   434  0000D4                     __eeFirstSoundAddress:
   435                           	opt stack 0
   436  0000D4                     	ds	1
   437  0000D5                     __eeSoundAddressesList:
   438                           	opt stack 0
   439  0000D5                     	ds	1
   440  0000D6                     __exceptionStatus:
   441                           	opt stack 0
   442  0000D6                     	ds	1
   443  0000D7                     __holdingRegsCount:
   444                           	opt stack 0
   445  0000D7                     	ds	1
   446  0000D8                     __inputRegsCount:
   447                           	opt stack 0
   448  0000D8                     	ds	1
   449  0000D9                     __isSoundPlaying:
   450                           	opt stack 0
   451  0000D9                     	ds	1
   452  0000DA                     __lastCommand:
   453                           	opt stack 0
   454  0000DA                     	ds	1
   455  0000DB                     __nextEventSoundId:
   456                           	opt stack 0
   457  0000DB                     	ds	1
   458  0000DC                     __playingSoundCurPos:
   459                           	opt stack 0
   460  0000DC                     	ds	1
   461  0000DD                     __playingSoundStartPosInEe:
   462                           	opt stack 0
   463  0000DD                     	ds	1
   464  0000DE                     __playingSoundSteps:
   465                           	opt stack 0
   466  0000DE                     	ds	1
   467  0000DF                     __soundCount:
   468                           	opt stack 0
   469  0000DF                     	ds	1
   470  0000E0                     __u8id:
   471                           	opt stack 0
   472  0000E0                     	ds	1
   473  0000E1                     __u8lastRec:
   474                           	opt stack 0
   475  0000E1                     	ds	1
   476  0000E2                     _currentLedBlock:
   477                           	opt stack 0
   478  0000E2                     	ds	1
   479  0000E3                     _eventAcceptTime:
   480                           	opt stack 0
   481  0000E3                     	ds	1
   482  0000E4                     _currentTime:
   483                           	opt stack 0
   484  0000E4                     	ds	4
   485  0000E8                     __MODBUSCoils:
   486                           	opt stack 0
   487  0000E8                     	ds	2
   488  0000EA                     _ModbusUserCommandAdditional1Hi:
   489                           	opt stack 0
   490  0000EA                     	ds	1
   491  0000EB                     _ModbusUserCommandAdditional1Lo:
   492                           	opt stack 0
   493  0000EB                     	ds	1
   494  0000EC                     _ModbusUserCommandAdditional2Hi:
   495                           	opt stack 0
   496  0000EC                     	ds	1
   497  0000ED                     _ModbusUserCommandAdditional2Lo:
   498                           	opt stack 0
   499  0000ED                     	ds	1
   500  0000EE                     _ModbusUserCommandAdditional3Hi:
   501                           	opt stack 0
   502  0000EE                     	ds	1
   503  0000EF                     _ModbusUserCommandAdditional3Lo:
   504                           	opt stack 0
   505  0000EF                     	ds	1
   506  0000F0                     _ModbusUserCommandData:
   507                           	opt stack 0
   508  0000F0                     	ds	1
   509  0000F1                     _ModbusUserCommandId:
   510                           	opt stack 0
   511  0000F1                     	ds	1
   512  0000F2                     __lastFunction:
   513                           	opt stack 0
   514  0000F2                     	ds	1
   515                           tblptru	equ	0xFF8
   516                           tblptrh	equ	0xFF7
   517                           tblptrl	equ	0xFF6
   518                           tablat	equ	0xFF5
   519                           postinc0	equ	0xFEE
   520                           wreg	equ	0xFE8
   521                           postdec1	equ	0xFE5
   522                           fsr1h	equ	0xFE2
   523                           fsr1l	equ	0xFE1
   524                           
   525                           	psect	bssBANK1
   526  000100                     __pbssBANK1:
   527                           	opt stack 0
   528  000100                     __au8Buffer:
   529                           	opt stack 0
   530  000100                     	ds	140
   531  00018C                     __MODBUSHoldingRegs:
   532                           	opt stack 0
   533  00018C                     	ds	30
   534  0001AA                     __MODBUSInputRegs:
   535                           	opt stack 0
   536  0001AA                     	ds	30
   537                           tblptru	equ	0xFF8
   538                           tblptrh	equ	0xFF7
   539                           tblptrl	equ	0xFF6
   540                           tablat	equ	0xFF5
   541                           postinc0	equ	0xFEE
   542                           wreg	equ	0xFE8
   543                           postdec1	equ	0xFE5
   544                           fsr1h	equ	0xFE2
   545                           fsr1l	equ	0xFE1
   546                           
   547                           	psect	bssBANK2
   548  000200                     __pbssBANK2:
   549                           	opt stack 0
   550  000200                     _UartRingBuffer:
   551                           	opt stack 0
   552  000200                     	ds	256
   553                           tblptru	equ	0xFF8
   554                           tblptrh	equ	0xFF7
   555                           tblptrl	equ	0xFF6
   556                           tablat	equ	0xFF5
   557                           postinc0	equ	0xFEE
   558                           wreg	equ	0xFE8
   559                           postdec1	equ	0xFE5
   560                           fsr1h	equ	0xFE2
   561                           fsr1l	equ	0xFE1
   562                           
   563                           	psect	cstackBANK1
   564  0001C8                     __pcstackBANK1:
   565                           	opt stack 0
   566  0001C8                     main@lastMs:
   567                           	opt stack 0
   568                           
   569                           ; 4 bytes @ 0x0
   570  0001C8                     	ds	4
   571  0001CC                     main@oldMinute:
   572                           	opt stack 0
   573                           
   574                           ; 2 bytes @ 0x4
   575  0001CC                     	ds	2
   576  0001CE                     main@hour:
   577                           	opt stack 0
   578                           
   579                           ; 1 bytes @ 0x6
   580  0001CE                     	ds	1
   581  0001CF                     main@minute:
   582                           	opt stack 0
   583                           
   584                           ; 1 bytes @ 0x7
   585  0001CF                     	ds	1
   586  0001D0                     main@curMs:
   587                           	opt stack 0
   588                           
   589                           ; 4 bytes @ 0x8
   590  0001D0                     	ds	4
   591  0001D4                     main@totalMinutes:
   592                           	opt stack 0
   593                           
   594                           ; 2 bytes @ 0xC
   595  0001D4                     	ds	2
   596                           tblptru	equ	0xFF8
   597                           tblptrh	equ	0xFF7
   598                           tblptrl	equ	0xFF6
   599                           tablat	equ	0xFF5
   600                           postinc0	equ	0xFEE
   601                           wreg	equ	0xFE8
   602                           postdec1	equ	0xFE5
   603                           fsr1h	equ	0xFE2
   604                           fsr1l	equ	0xFE1
   605                           
   606                           	psect	cstackCOMRAM
   607  000001                     __pcstackCOMRAM:
   608                           	opt stack 0
   609  000001                     ??_low_isr:
   610  000001                     
   611                           ; 1 bytes @ 0x0
   612  000001                     	ds	5
   613  000006                     low_isr@c:
   614                           	opt stack 0
   615                           
   616                           ; 1 bytes @ 0x5
   617  000006                     	ds	1
   618  000007                     ?_ModbusCalcCRC:
   619                           	opt stack 0
   620  000007                     ?___lwdiv:
   621                           	opt stack 0
   622  000007                     ?___lwmod:
   623                           	opt stack 0
   624  000007                     ?_millis:
   625                           	opt stack 0
   626  000007                     PortRead@ret:
   627                           	opt stack 0
   628  000007                     UpdateLedRegister@regIndex:
   629                           	opt stack 0
   630  000007                     SwitchOffAllLeds@i:
   631                           	opt stack 0
   632  000007                     LightLed@ledState:
   633                           	opt stack 0
   634  000007                     LightStatusLed@on:
   635                           	opt stack 0
   636  000007                     InitApp@i:
   637                           	opt stack 0
   638  000007                     SetTime@newTime:
   639                           	opt stack 0
   640  000007                     ModbusSetExceptionStatusBit@value:
   641                           	opt stack 0
   642  000007                     ModbusInit@u8serno:
   643                           	opt stack 0
   644  000007                     ModbusBuildException@u8exception:
   645                           	opt stack 0
   646  000007                     ModbusGetLastCommand@count:
   647                           	opt stack 0
   648  000007                     CopyStringToBuffer@src:
   649                           	opt stack 0
   650  000007                     ___lbdiv@divisor:
   651                           	opt stack 0
   652  000007                     ___lbmod@divisor:
   653                           	opt stack 0
   654  000007                     PortWrite@buf:
   655                           	opt stack 0
   656  000007                     getHourMin@hour:
   657                           	opt stack 0
   658  000007                     getTotalMinutes@totalMinutes:
   659                           	opt stack 0
   660  000007                     SetBuzzerDuty@dc:
   661                           	opt stack 0
   662  000007                     ___lwdiv@dividend:
   663                           	opt stack 0
   664  000007                     ___lwmod@dividend:
   665                           	opt stack 0
   666                           
   667                           ; 2 bytes @ 0x6
   668  000007                     	ds	1
   669  000008                     ??_ModbusSetExceptionStatusBit:
   670  000008                     ??_ModbusGetRxBufferHeader:
   671  000008                     ??_ModbusGetRxBuffer:
   672  000008                     LightLed@blink:
   673                           	opt stack 0
   674  000008                     LightStatusLed@blink:
   675                           	opt stack 0
   676  000008                     ModbusInit@u8txenpin:
   677                           	opt stack 0
   678  000008                     ModbusBuildException@u8func:
   679                           	opt stack 0
   680  000008                     ModbusGetLastCommand@command:
   681                           	opt stack 0
   682  000008                     CopyStringToBuffer@len:
   683                           	opt stack 0
   684  000008                     ___lbdiv@dividend:
   685                           	opt stack 0
   686  000008                     ___lbmod@dividend:
   687                           	opt stack 0
   688  000008                     ProcessLightBlock@curMs:
   689                           	opt stack 0
   690                           
   691                           ; 2 bytes @ 0x7
   692  000008                     	ds	1
   693  000009                     ??_LoadNextEvent:
   694  000009                     ??_ModbusCalcCRC:
   695  000009                     ??_LightLed:
   696  000009                     ??_LightStatusLed:
   697  000009                     ??_SetBuzzerDuty:
   698  000009                     ??_CopyStringToBuffer:
   699  000009                     PortWrite@buflen:
   700                           	opt stack 0
   701  000009                     ModbusGetRxBufferHeader@i:
   702                           	opt stack 0
   703  000009                     ModbusGetRxBuffer@bBuffOverflow:
   704                           	opt stack 0
   705  000009                     ModbusGetLastCommand@address:
   706                           	opt stack 0
   707  000009                     ___lbdiv@counter:
   708                           	opt stack 0
   709  000009                     ___lbmod@counter:
   710                           	opt stack 0
   711  000009                     getHourMin@min:
   712                           	opt stack 0
   713  000009                     ___lwdiv@divisor:
   714                           	opt stack 0
   715  000009                     ___lwmod@divisor:
   716                           	opt stack 0
   717                           
   718                           ; 2 bytes @ 0x8
   719  000009                     	ds	1
   720  00000A                     ??_ProcessLightBlock:
   721  00000A                     PortWrite@i:
   722                           	opt stack 0
   723  00000A                     ModbusSetExceptionStatusBit@bitNum:
   724                           	opt stack 0
   725  00000A                     CopyStringToBuffer@objId:
   726                           	opt stack 0
   727  00000A                     ___lbdiv@quotient:
   728                           	opt stack 0
   729  00000A                     ___lbmod@rem:
   730                           	opt stack 0
   731                           
   732                           ; 1 bytes @ 0x9
   733  00000A                     	ds	1
   734  00000B                     ModbusInit@u8id:
   735                           	opt stack 0
   736  00000B                     ModbusCalcCRC@u8length:
   737                           	opt stack 0
   738  00000B                     CopyStringToBuffer@i:
   739                           	opt stack 0
   740  00000B                     ___lwdiv@counter:
   741                           	opt stack 0
   742  00000B                     ___lwmod@counter:
   743                           	opt stack 0
   744  00000B                     SetHourMin@newHour:
   745                           	opt stack 0
   746  00000B                     LoadNextEvent@totalMinutes:
   747                           	opt stack 0
   748  00000B                     millis@ret:
   749                           	opt stack 0
   750                           
   751                           ; 4 bytes @ 0xA
   752  00000B                     	ds	1
   753  00000C                     ?_isleap:
   754                           	opt stack 0
   755  00000C                     LightLed@ledNum:
   756                           	opt stack 0
   757  00000C                     Modbus@u8serno:
   758                           	opt stack 0
   759  00000C                     ModbusCalcCRC@temp2:
   760                           	opt stack 0
   761  00000C                     ___lwdiv@quotient:
   762                           	opt stack 0
   763  00000C                     isleap@yr:
   764                           	opt stack 0
   765                           
   766                           ; 2 bytes @ 0xB
   767  00000C                     	ds	1
   768  00000D                     LightLed@ststusIndex:
   769                           	opt stack 0
   770  00000D                     LoadNextEvent@v1:
   771                           	opt stack 0
   772  00000D                     Modbus@u8txenpin:
   773                           	opt stack 0
   774  00000D                     SetHourMin@newMin:
   775                           	opt stack 0
   776                           
   777                           ; 2 bytes @ 0xC
   778  00000D                     	ds	1
   779  00000E                     ??_isleap:
   780  00000E                     ?_months_to_days:
   781                           	opt stack 0
   782  00000E                     ?_years_to_days:
   783                           	opt stack 0
   784  00000E                     LightLed@statusShift:
   785                           	opt stack 0
   786  00000E                     LightStatusLed@row:
   787                           	opt stack 0
   788  00000E                     Modbus@u8id:
   789                           	opt stack 0
   790  00000E                     ModbusCalcCRC@flag:
   791                           	opt stack 0
   792  00000E                     months_to_days@month:
   793                           	opt stack 0
   794  00000E                     years_to_days@yr:
   795                           	opt stack 0
   796                           
   797                           ; 2 bytes @ 0xD
   798  00000E                     	ds	1
   799  00000F                     ??_SoundPlayNextStep:
   800  00000F                     ??_ResetEvent:
   801  00000F                     SwitchOffAllDiaryLeds@i:
   802                           	opt stack 0
   803  00000F                     ShowFailure@additionalLed:
   804                           	opt stack 0
   805  00000F                     ResetEventFromCommand@state:
   806                           	opt stack 0
   807  00000F                     _isleap$2281:
   808                           	opt stack 0
   809  00000F                     SetHourMin@sec:
   810                           	opt stack 0
   811                           
   812                           ; 2 bytes @ 0xE
   813  00000F                     	ds	1
   814  000010                     ??_InitFromEeprom:
   815  000010                     ??_months_to_days:
   816  000010                     ModbusCalcCRC@i:
   817                           	opt stack 0
   818  000010                     _ResetEventFromCommand$912:
   819                           	opt stack 0
   820                           
   821                           ; 2 bytes @ 0xF
   822  000010                     	ds	1
   823  000011                     ??_SetHourMin:
   824  000011                     ResetEvent@state:
   825                           	opt stack 0
   826  000011                     ModbusCalcCRC@j:
   827                           	opt stack 0
   828                           
   829                           ; 1 bytes @ 0x10
   830  000011                     	ds	1
   831  000012                     ??_years_to_days:
   832  000012                     InitFromEeprom@eeSoundCountAddress:
   833                           	opt stack 0
   834  000012                     _ResetEvent$909:
   835                           	opt stack 0
   836  000012                     ModbusCalcCRC@temp:
   837                           	opt stack 0
   838                           
   839                           ; 2 bytes @ 0x11
   840  000012                     	ds	1
   841  000013                     InitFromEeprom@tmpModbusId:
   842                           	opt stack 0
   843                           
   844                           ; 1 bytes @ 0x12
   845  000013                     	ds	1
   846  000014                     ??_ModbusValidateRequest:
   847  000014                     SoundPlayNextStep@stepDuty:
   848                           	opt stack 0
   849  000014                     ModbusSendTxBuffer@u16crc:
   850                           	opt stack 0
   851                           
   852                           ; 2 bytes @ 0x13
   853  000014                     	ds	2
   854  000016                     ??_ModbusProcess_FC5:
   855  000016                     ??_ModbusProcess_FC15:
   856  000016                     ??_ModbusProcess_FC21:
   857  000016                     SoundPlayNextStep@duration:
   858                           	opt stack 0
   859  000016                     ModbusProcess_FC7@u8CopyBufferSize:
   860                           	opt stack 0
   861  000016                     ModbusProcess_FC17@u8CopyBufferSize:
   862                           	opt stack 0
   863  000016                     ModbusProcess_FC43@devIdCode:
   864                           	opt stack 0
   865  000016                     ModbusProcess_FC101@u8CopyBufferSize:
   866                           	opt stack 0
   867  000016                     ModbusProcess_FC102@u8CopyBufferSize:
   868                           	opt stack 0
   869  000016                     ModbusProcess_FC1@regs:
   870                           	opt stack 0
   871  000016                     ModbusProcess_FC3@regs:
   872                           	opt stack 0
   873  000016                     ModbusProcess_FC6@regs:
   874                           	opt stack 0
   875  000016                     ModbusProcess_FC16@regs:
   876                           	opt stack 0
   877                           
   878                           ; 2 bytes @ 0x15
   879  000016                     	ds	1
   880  000017                     ModbusProcess_FC43@u8CopyBufferSize:
   881                           	opt stack 0
   882  000017                     PlaySound@playDuration:
   883                           	opt stack 0
   884                           
   885                           ; 2 bytes @ 0x16
   886  000017                     	ds	1
   887  000018                     ??_ModbusProcess_FC1:
   888  000018                     ModbusProcess_FC3@u8size:
   889                           	opt stack 0
   890  000018                     ModbusProcess_FC6@u8size:
   891                           	opt stack 0
   892  000018                     ModbusProcess_FC16@u8size:
   893                           	opt stack 0
   894  000018                     ModbusProcess_FC21@requestDataLen:
   895                           	opt stack 0
   896  000018                     ModbusProcess_FC43@objId:
   897                           	opt stack 0
   898  000018                     ModbusValidateRequest@startAddrBytes:
   899                           	opt stack 0
   900                           
   901                           ; 4 bytes @ 0x17
   902  000018                     	ds	1
   903  000019                     ??_ModbusProcess_FC3:
   904  000019                     ??_ModbusProcess_FC6:
   905  000019                     ??_ModbusProcess_FC16:
   906  000019                     ??_PlaySound:
   907  000019                     ModbusProcess_FC21@u8CopyBufferSize:
   908                           	opt stack 0
   909                           
   910                           ; 1 bytes @ 0x18
   911  000019                     	ds	1
   912  00001A                     ModbusProcess_FC21@startAddrsBytes:
   913                           	opt stack 0
   914  00001A                     years_to_days@ret:
   915                           	opt stack 0
   916                           
   917                           ; 4 bytes @ 0x19
   918  00001A                     	ds	1
   919  00001B                     ModbusProcess_FC5@u8CopyBufferSize:
   920                           	opt stack 0
   921  00001B                     ModbusProcess_FC1@u16coil:
   922                           	opt stack 0
   923  00001B                     ModbusProcess_FC6@u16val:
   924                           	opt stack 0
   925  00001B                     ModbusProcess_FC15@u16coil:
   926                           	opt stack 0
   927                           
   928                           ; 2 bytes @ 0x1A
   929  00001B                     	ds	1
   930  00001C                     ModbusProcess_FC5@u16coil:
   931                           	opt stack 0
   932  00001C                     ModbusProcess_FC21@recLenBytes:
   933                           	opt stack 0
   934  00001C                     ModbusValidateRequest@recLenBytes:
   935                           	opt stack 0
   936                           
   937                           ; 4 bytes @ 0x1B
   938  00001C                     	ds	1
   939  00001D                     SetHourMin@tmpSec:
   940                           	opt stack 0
   941  00001D                     PlaySound@soundId:
   942                           	opt stack 0
   943  00001D                     ModbusProcess_FC1@u8currentBit:
   944                           	opt stack 0
   945  00001D                     ModbusProcess_FC3@u8CopyBufferSize:
   946                           	opt stack 0
   947  00001D                     ModbusProcess_FC6@u8CopyBufferSize:
   948                           	opt stack 0
   949  00001D                     ModbusProcess_FC15@u8CopyBufferSize:
   950                           	opt stack 0
   951  00001D                     ModbusProcess_FC16@temp:
   952                           	opt stack 0
   953                           
   954                           ; 2 bytes @ 0x1C
   955  00001D                     	ds	1
   956  00001E                     ?_ymd_to_scalar:
   957                           	opt stack 0
   958  00001E                     SetHourMin@secToNext6Sec:
   959                           	opt stack 0
   960  00001E                     PlaySound@soundAddr:
   961                           	opt stack 0
   962  00001E                     ModbusProcess_FC1@u8CopyBufferSize:
   963                           	opt stack 0
   964  00001E                     ModbusProcess_FC5@regs:
   965                           	opt stack 0
   966  00001E                     ModbusProcess_FC15@bTemp:
   967                           	opt stack 0
   968  00001E                     ModbusProcess_FC21@i:
   969                           	opt stack 0
   970  00001E                     ModbusProcess_FC3@u16regsno:
   971                           	opt stack 0
   972  00001E                     ModbusProcess_FC6@u16add:
   973                           	opt stack 0
   974  00001E                     ymd_to_scalar@yr:
   975                           	opt stack 0
   976                           
   977                           ; 2 bytes @ 0x1D
   978  00001E                     	ds	1
   979  00001F                     ??_ProcessDiary:
   980  00001F                     ??_CommandSetLed:
   981  00001F                     ??_CommandSetStatusLed:
   982  00001F                     ModbusProcess_FC1@u8bytesno:
   983                           	opt stack 0
   984  00001F                     ModbusProcess_FC5@u8currentBit:
   985                           	opt stack 0
   986  00001F                     ModbusProcess_FC15@u8frameByte:
   987                           	opt stack 0
   988  00001F                     ModbusProcess_FC16@u8CopyBufferSize:
   989                           	opt stack 0
   990                           
   991                           ; 1 bytes @ 0x1E
   992  00001F                     	ds	1
   993  000020                     CommandSetStatusLed@soundId:
   994                           	opt stack 0
   995  000020                     ModbusProcess_FC3@u8StartAdd:
   996                           	opt stack 0
   997  000020                     ModbusValidateRequest@u16MsgCRC:
   998                           	opt stack 0
   999  000020                     ModbusProcess_FC1@u16StartCoil:
  1000                           	opt stack 0
  1001  000020                     ModbusProcess_FC15@u16StartCoil:
  1002                           	opt stack 0
  1003  000020                     ModbusProcess_FC16@u16StartAdd:
  1004                           	opt stack 0
  1005  000020                     ymd_to_scalar@mo:
  1006                           	opt stack 0
  1007                           
  1008                           ; 2 bytes @ 0x1F
  1009  000020                     	ds	1
  1010  000021                     CommandSetStatusLed@commandData:
  1011                           	opt stack 0
  1012  000021                     ModbusProcess_FC3@i:
  1013                           	opt stack 0
  1014                           
  1015                           ; 1 bytes @ 0x20
  1016  000021                     	ds	1
  1017  000022                     CommandSetStatusLed@led:
  1018                           	opt stack 0
  1019  000022                     ModbusValidateRequest@isSupported:
  1020                           	opt stack 0
  1021  000022                     ModbusProcess_FC16@u8regsno:
  1022                           	opt stack 0
  1023  000022                     ModbusProcess_FC1@u16currentCoil:
  1024                           	opt stack 0
  1025  000022                     ModbusProcess_FC15@u16Coilno:
  1026                           	opt stack 0
  1027  000022                     ymd_to_scalar@day:
  1028                           	opt stack 0
  1029                           
  1030                           ; 2 bytes @ 0x21
  1031  000022                     	ds	1
  1032  000023                     ModbusProcess_FC16@i:
  1033                           	opt stack 0
  1034  000023                     ProcessDiary@totalMinutes:
  1035                           	opt stack 0
  1036  000023                     ModbusValidateRequest@u16count:
  1037                           	opt stack 0
  1038                           
  1039                           ; 2 bytes @ 0x22
  1040  000023                     	ds	1
  1041  000024                     ??_ymd_to_scalar:
  1042  000024                     CommandSetLed@soundId:
  1043                           	opt stack 0
  1044  000024                     ModbusProcess_FC1@u8bitsno:
  1045                           	opt stack 0
  1046  000024                     ModbusProcess_FC15@regs:
  1047                           	opt stack 0
  1048                           
  1049                           ; 1 bytes @ 0x23
  1050  000024                     	ds	1
  1051  000025                     CommandSetLed@ledColor:
  1052                           	opt stack 0
  1053  000025                     ModbusValidateRequest@i:
  1054                           	opt stack 0
  1055  000025                     ModbusProcess_FC15@u8currentBit:
  1056                           	opt stack 0
  1057  000025                     ModbusProcess_FC1@u16Coilno:
  1058                           	opt stack 0
  1059                           
  1060                           ; 2 bytes @ 0x24
  1061  000025                     	ds	1
  1062  000026                     CommandSetLed@blinkSeconds:
  1063                           	opt stack 0
  1064  000026                     ModbusValidateRequest@readDevId:
  1065                           	opt stack 0
  1066  000026                     ModbusProcess_FC15@u16currentCoil:
  1067                           	opt stack 0
  1068                           
  1069                           ; 2 bytes @ 0x25
  1070  000026                     	ds	1
  1071  000027                     CommandSetLed@commandData:
  1072                           	opt stack 0
  1073  000027                     ModbusValidateRequest@u8regs:
  1074                           	opt stack 0
  1075                           
  1076                           ; 1 bytes @ 0x26
  1077  000027                     	ds	1
  1078  000028                     CommandSetLed@led:
  1079                           	opt stack 0
  1080  000028                     ModbusProcess_FC15@u8bitsno:
  1081                           	opt stack 0
  1082  000028                     ModbusValidateRequest@u16regs:
  1083                           	opt stack 0
  1084  000028                     _ymd_to_scalar$2294:
  1085                           	opt stack 0
  1086                           
  1087                           ; 2 bytes @ 0x27
  1088  000028                     	ds	1
  1089  000029                     ??_io_poll:
  1090  000029                     
  1091                           ; 1 bytes @ 0x28
  1092  000029                     	ds	1
  1093  00002A                     ymd_to_scalar@scalar:
  1094                           	opt stack 0
  1095                           
  1096                           ; 4 bytes @ 0x29
  1097  00002A                     	ds	3
  1098  00002D                     io_poll@lastEndAddress:
  1099                           	opt stack 0
  1100                           
  1101                           ; 2 bytes @ 0x2C
  1102  00002D                     	ds	1
  1103  00002E                     ?_mktime:
  1104                           	opt stack 0
  1105                           
  1106                           ; 4 bytes @ 0x2D
  1107  00002E                     	ds	1
  1108  00002F                     io_poll@lastAddress:
  1109                           	opt stack 0
  1110                           
  1111                           ; 2 bytes @ 0x2E
  1112  00002F                     	ds	2
  1113  000031                     io_poll@lastCommand:
  1114                           	opt stack 0
  1115                           
  1116                           ; 1 bytes @ 0x30
  1117  000031                     	ds	1
  1118  000032                     ??_mktime:
  1119  000032                     io_poll@lastFunction:
  1120                           	opt stack 0
  1121                           
  1122                           ; 1 bytes @ 0x31
  1123  000032                     	ds	14
  1124  000040                     mktime@tt:
  1125                           	opt stack 0
  1126                           
  1127                           ; 4 bytes @ 0x3F
  1128  000040                     	ds	4
  1129  000044                     mktime@timeptr:
  1130                           	opt stack 0
  1131                           
  1132                           ; 1 bytes @ 0x43
  1133  000044                     	ds	1
  1134  000045                     ModbusProcess_FC100@newRawTime:
  1135                           	opt stack 0
  1136                           
  1137                           ; 4 bytes @ 0x44
  1138  000045                     	ds	4
  1139  000049                     ModbusProcess_FC100@u8CopyBufferSize:
  1140                           	opt stack 0
  1141                           
  1142                           ; 1 bytes @ 0x48
  1143  000049                     	ds	1
  1144  00004A                     ModbusProcess_FC100@newTime:
  1145                           	opt stack 0
  1146                           
  1147                           ; 18 bytes @ 0x49
  1148  00004A                     	ds	18
  1149  00005C                     ModbusPoll@discreteInputs:
  1150                           	opt stack 0
  1151                           
  1152                           ; 2 bytes @ 0x5B
  1153  00005C                     	ds	2
  1154  00005E                     ModbusPoll@coils:
  1155                           	opt stack 0
  1156                           
  1157                           ; 1 bytes @ 0x5D
  1158  00005E                     	ds	1
  1159  00005F                     ModbusPoll@inputRegs:
  1160                           	opt stack 0
  1161                           
  1162                           ; 2 bytes @ 0x5E
  1163  00005F                     	ds	2
  1164  000061                     ModbusPoll@inputRegsCount:
  1165                           	opt stack 0
  1166                           
  1167                           ; 1 bytes @ 0x60
  1168  000061                     	ds	1
  1169  000062                     ModbusPoll@holdingRegs:
  1170                           	opt stack 0
  1171                           
  1172                           ; 2 bytes @ 0x61
  1173  000062                     	ds	2
  1174  000064                     ModbusPoll@holdingRegsCount:
  1175                           	opt stack 0
  1176                           
  1177                           ; 1 bytes @ 0x63
  1178  000064                     	ds	1
  1179  000065                     ModbusPoll@u8current:
  1180                           	opt stack 0
  1181                           
  1182                           ; 1 bytes @ 0x64
  1183  000065                     	ds	1
  1184  000066                     ModbusPoll@i8state:
  1185                           	opt stack 0
  1186                           
  1187                           ; 1 bytes @ 0x65
  1188  000066                     	ds	1
  1189  000067                     ModbusPoll@u8exception:
  1190                           	opt stack 0
  1191                           
  1192                           ; 1 bytes @ 0x66
  1193  000067                     	ds	1
  1194  000068                     ??_main:
  1195                           
  1196                           ; 1 bytes @ 0x67
  1197  000068                     	ds	5
  1198                           tblptru	equ	0xFF8
  1199                           tblptrh	equ	0xFF7
  1200                           tblptrl	equ	0xFF6
  1201                           tablat	equ	0xFF5
  1202                           postinc0	equ	0xFEE
  1203                           wreg	equ	0xFE8
  1204                           postdec1	equ	0xFE5
  1205                           fsr1h	equ	0xFE2
  1206                           fsr1l	equ	0xFE1
  1207                           
  1208 ;;
  1209 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
  1210 ;;
  1211 ;; *************** function _main *****************
  1212 ;; Defined at:
  1213 ;;		line 829 in file "main.c"
  1214 ;; Parameters:    Size  Location     Type
  1215 ;;		None
  1216 ;; Auto vars:     Size  Location     Type
  1217 ;;  minute          1    7[BANK1 ] unsigned char 
  1218 ;;  hour            1    6[BANK1 ] unsigned char 
  1219 ;;  totalMinutes    2   12[BANK1 ] unsigned int 
  1220 ;;  curMs           4    8[BANK1 ] unsigned long 
  1221 ;;  lastMs          4    0[BANK1 ] unsigned long 
  1222 ;;  oldMinute       2    4[BANK1 ] unsigned int 
  1223 ;; Return value:  Size  Location     Type
  1224 ;;                  1    wreg      void 
  1225 ;; Registers used:
  1226 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1227 ;; Tracked objects:
  1228 ;;		On entry : 0/0
  1229 ;;		On exit  : 0/0
  1230 ;;		Unchanged: 0/0
  1231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1232 ;;      Params:         0       0       0       0       0       0       0
  1233 ;;      Locals:         0       0      14       0       0       0       0
  1234 ;;      Temps:          5       0       0       0       0       0       0
  1235 ;;      Totals:         5       0      14       0       0       0       0
  1236 ;;Total ram usage:       19 bytes
  1237 ;; Hardware stack levels required when called:    8
  1238 ;; This function calls:
  1239 ;;		_AddSecond
  1240 ;;		_ConfigureOscillator
  1241 ;;		_GetTime
  1242 ;;		_InitApp
  1243 ;;		_InitFromEeprom
  1244 ;;		_LightStatusLed
  1245 ;;		_LoadNextEvent
  1246 ;;		_ModbusPoll
  1247 ;;		_ModbusSetExceptionStatusBit
  1248 ;;		_ProcessDiary
  1249 ;;		_ProcessLightBlock
  1250 ;;		_ResetEvent
  1251 ;;		_ResetEventFromCommand
  1252 ;;		_SoundPlayNextStep
  1253 ;;		_StopPlaying
  1254 ;;		_SwitchOffAllDiaryLeds
  1255 ;;		_getHourMin
  1256 ;;		_getTotalMinutes
  1257 ;;		_io_poll
  1258 ;;		_millis
  1259 ;;		_pwm_init
  1260 ;; This function is called by:
  1261 ;;		Startup code after reset
  1262 ;; This function uses a non-reentrant model
  1263 ;;
  1264                           
  1265                           	psect	text0
  1266  001132                     __ptext0:
  1267                           	opt stack 0
  1268  001132                     _main:
  1269                           	opt stack 23
  1270                           
  1271                           ;incstack = 0
  1272  001132  FFFF               	dw	65535
  1273                           
  1274                           ;main.c: 832: ConfigureOscillator();
  1275  001134  EC24  F018         	call	_ConfigureOscillator	;wreg free
  1276                           
  1277                           ;main.c: 835: InitApp();
  1278  001138  EC50  F013         	call	_InitApp	;wreg free
  1279                           
  1280                           ;main.c: 839: InitFromEeprom();
  1281  00113C  EC7D  F010         	call	_InitFromEeprom	;wreg free
  1282                           
  1283                           ;main.c: 842: ModbusSetExceptionStatusBit(0, 1);
  1284  001140  0E01               	movlw	1
  1285  001142  6E07               	movwf	ModbusSetExceptionStatusBit@value,c
  1286  001144  0E00               	movlw	0
  1287  001146  EC34  F015         	call	_ModbusSetExceptionStatusBit
  1288                           
  1289                           ; BSR set to: 0
  1290                           ;main.c: 848: unsigned long lastMs = millis();
  1291  00114A  EC22  F017         	call	_millis	;wreg free
  1292  00114E  C007  F1C8         	movff	?_millis,main@lastMs
  1293  001152  C008  F1C9         	movff	?_millis+1,main@lastMs+1
  1294  001156  C009  F1CA         	movff	?_millis+2,main@lastMs+2
  1295  00115A  C00A  F1CB         	movff	?_millis+3,main@lastMs+3
  1296                           
  1297                           ;main.c: 851: pwm_init();
  1298  00115E  ECDB  F017         	call	_pwm_init	;wreg free
  1299                           
  1300                           ;main.c: 858: uint16_t oldMinute = 0xFFFF;
  1301  001162  0101               	movlb	1	; () banked
  1302  001164  69CC               	setf	main@oldMinute& (0+255),b
  1303  001166  69CD               	setf	(main@oldMinute+1)& (0+255),b
  1304                           
  1305                           ; BSR set to: 1
  1306                           ;main.c: 860: LightStatusLed(0x07, 1, 0);
  1307  001168  0E01               	movlw	1
  1308  00116A  6E07               	movwf	LightStatusLed@on,c
  1309  00116C  0E00               	movlw	0
  1310  00116E  6E08               	movwf	LightStatusLed@blink,c
  1311  001170  0E07               	movlw	7
  1312  001172  EC66  F00E         	call	_LightStatusLed
  1313                           
  1314                           ;main.c: 861: LightStatusLed(0x05, 1, 1);
  1315  001176  0E01               	movlw	1
  1316  001178  6E07               	movwf	LightStatusLed@on,c
  1317  00117A  6E08               	movwf	LightStatusLed@blink,c
  1318  00117C  0E05               	movlw	5
  1319  00117E  EC66  F00E         	call	_LightStatusLed
  1320  001182                     l8216:
  1321  001182  FFFF               	dw	65535	; assembler added errata NOP
  1322                           
  1323                           ;main.c: 863: {
  1324                           ;main.c: 864: unsigned long curMs = millis();
  1325  001184  EC22  F017         	call	_millis	;wreg free
  1326  001188  C007  F1D0         	movff	?_millis,main@curMs
  1327  00118C  C008  F1D1         	movff	?_millis+1,main@curMs+1
  1328  001190  C009  F1D2         	movff	?_millis+2,main@curMs+2
  1329  001194  C00A  F1D3         	movff	?_millis+3,main@curMs+3
  1330                           
  1331                           ;main.c: 865: ProcessLightBlock(&curMs);
  1332  001198  0ED0               	movlw	low main@curMs
  1333  00119A  6E08               	movwf	ProcessLightBlock@curMs,c
  1334  00119C  0E01               	movlw	high main@curMs
  1335  00119E  6E09               	movwf	ProcessLightBlock@curMs+1,c
  1336  0011A0  EC6D  F007         	call	_ProcessLightBlock	;wreg free
  1337                           
  1338                           ; BSR set to: 0
  1339                           ;main.c: 867: if(_isSoundPlaying && curMs >= _playingEndMs)
  1340  0011A4  51D9               	movf	__isSoundPlaying& (0+255),w,b
  1341  0011A6  E012               	bz	l8226
  1342                           
  1343                           ; BSR set to: 0
  1344  0011A8  51AF               	movf	__playingEndMs& (0+255),w,b
  1345  0011AA  0101               	movlb	1	; () banked
  1346  0011AC  5DD0               	subwf	main@curMs& (0+255),w,b
  1347  0011AE  0100               	movlb	0	; () banked
  1348  0011B0  51B0               	movf	(__playingEndMs+1)& (0+255),w,b
  1349  0011B2  0101               	movlb	1	; () banked
  1350  0011B4  59D1               	subwfb	(main@curMs+1)& (0+255),w,b
  1351  0011B6  0100               	movlb	0	; () banked
  1352  0011B8  51B1               	movf	(__playingEndMs+2)& (0+255),w,b
  1353  0011BA  0101               	movlb	1	; () banked
  1354  0011BC  59D2               	subwfb	(main@curMs+2)& (0+255),w,b
  1355  0011BE  0100               	movlb	0	; () banked
  1356  0011C0  51B2               	movf	(__playingEndMs+3)& (0+255),w,b
  1357  0011C2  0101               	movlb	1	; () banked
  1358  0011C4  59D3               	subwfb	(main@curMs+3)& (0+255),w,b
  1359  0011C6  E302               	bnc	l8226
  1360                           
  1361                           ; BSR set to: 1
  1362                           ;main.c: 868: {
  1363                           ;main.c: 869: SoundPlayNextStep();
  1364  0011C8  EC1E  F010         	call	_SoundPlayNextStep	;wreg free
  1365  0011CC                     l8226:
  1366                           
  1367                           ;main.c: 870: }
  1368                           ;main.c: 873: if(PORTCbits.RC1 == 0)
  1369  0011CC  B282               	btfsc	3970,1,c	;volatile
  1370  0011CE  D00F               	goto	l8238
  1371                           
  1372                           ;main.c: 874: {
  1373                           ;main.c: 875: if(_eventFromCommand.IsFire)
  1374  0011D0  0100               	movlb	0	; () banked
  1375  0011D2  51A9               	movf	__eventFromCommand& (0+255),w,b
  1376  0011D4  E004               	bz	l8232
  1377                           
  1378                           ; BSR set to: 0
  1379                           ;main.c: 876: {
  1380                           ;main.c: 877: ResetEventFromCommand(1);
  1381  0011D6  0E01               	movlw	1
  1382  0011D8  EC0D  F016         	call	_ResetEventFromCommand
  1383                           
  1384                           ;main.c: 878: }
  1385  0011DC  D008               	goto	l8238
  1386  0011DE                     l8232:
  1387                           
  1388                           ; BSR set to: 0
  1389                           ;main.c: 880: else if(_currenDiaryEvent.IsFire)
  1390  0011DE  51A0               	movf	__currenDiaryEvent& (0+255),w,b
  1391  0011E0  E004               	bz	l8236
  1392                           
  1393                           ; BSR set to: 0
  1394                           ;main.c: 881: {
  1395                           ;main.c: 882: ResetEvent(1);
  1396  0011E2  0E01               	movlw	1
  1397  0011E4  ECE7  F014         	call	_ResetEvent
  1398                           
  1399                           ;main.c: 883: }
  1400  0011E8  D002               	goto	l8238
  1401  0011EA                     l8236:
  1402                           
  1403                           ; BSR set to: 0
  1404                           ;main.c: 884: else
  1405                           ;main.c: 885: {
  1406                           ;main.c: 886: StopPlaying();
  1407  0011EA  ECED  F017         	call	_StopPlaying	;wreg free
  1408  0011EE                     l8238:
  1409  0011EE  FFFF               	dw	65535	; assembler added errata NOP
  1410                           
  1411                           ;main.c: 887: }
  1412                           ;main.c: 889: }
  1413                           ;main.c: 892: if(curMs - lastMs >= 1000)
  1414  0011F0  0101               	movlb	1	; () banked
  1415  0011F2  51C8               	movf	main@lastMs& (0+255),w,b
  1416  0011F4  5DD0               	subwf	main@curMs& (0+255),w,b
  1417  0011F6  6E68               	movwf	??_main& (0+255),c
  1418  0011F8  51C9               	movf	(main@lastMs+1)& (0+255),w,b
  1419  0011FA  59D1               	subwfb	(main@curMs+1)& (0+255),w,b
  1420  0011FC  6E69               	movwf	(??_main+1)& (0+255),c
  1421  0011FE  51CA               	movf	(main@lastMs+2)& (0+255),w,b
  1422  001200  59D2               	subwfb	(main@curMs+2)& (0+255),w,b
  1423  001202  6E6A               	movwf	(??_main+2)& (0+255),c
  1424  001204  51CB               	movf	(main@lastMs+3)& (0+255),w,b
  1425  001206  59D3               	subwfb	(main@curMs+3)& (0+255),w,b
  1426  001208  6E6B               	movwf	(??_main+3)& (0+255),c
  1427  00120A  506B               	movf	??_main+3,w,c
  1428  00120C  106A               	iorwf	??_main+2,w,c
  1429  00120E  E105               	bnz	u7210
  1430  001210  0EE8               	movlw	232
  1431  001212  5C68               	subwf	??_main,w,c
  1432  001214  0E03               	movlw	3
  1433  001216  5869               	subwfb	??_main+1,w,c
  1434  001218  E37C               	bnc	l8282
  1435  00121A                     u7210:
  1436                           
  1437                           ; BSR set to: 1
  1438                           ;main.c: 893: {
  1439                           ;main.c: 894: AddSecond();
  1440  00121A  ECE4  F017         	call	_AddSecond	;wreg free
  1441                           
  1442                           ; BSR set to: 0
  1443                           ;main.c: 896: if(_eventFromCommand.IsFire && *GetTime() >= _eventFromCommand.ResetSecond
      +                          )
  1444  00121E  51A9               	movf	__eventFromCommand& (0+255),w,b
  1445  001220  E015               	bz	l8248
  1446                           
  1447                           ; BSR set to: 0
  1448  001222  EC1C  F018         	call	_GetTime	;wreg free
  1449  001226  6ED9               	movwf	fsr2l,c
  1450  001228  6ADA               	clrf	fsr2h,c
  1451  00122A  0100               	movlb	0	; () banked
  1452  00122C  51AB               	movf	(__eventFromCommand+2)& (0+255),w,b
  1453  00122E  5CDE               	subwf	postinc2,w,c
  1454  001230  51AC               	movf	(__eventFromCommand+3)& (0+255),w,b
  1455  001232  58DE               	subwfb	postinc2,w,c
  1456  001234  51AD               	movf	(__eventFromCommand+4)& (0+255),w,b
  1457  001236  58DE               	subwfb	postinc2,w,c
  1458  001238  50DE               	movf	postinc2,w,c
  1459  00123A  0A80               	xorlw	128
  1460  00123C  6E6C               	movwf	(??_main+4)& (0+255),c
  1461  00123E  51AE               	movf	(__eventFromCommand+5)& (0+255),w,b
  1462  001240  0A80               	xorlw	128
  1463  001242  586C               	subwfb	(??_main+4)& (0+255),w,c
  1464  001244  E303               	bnc	l8248
  1465                           
  1466                           ; BSR set to: 0
  1467                           ;main.c: 897: {
  1468                           ;main.c: 898: ResetEventFromCommand(0);
  1469  001246  0E00               	movlw	0
  1470  001248  EC0D  F016         	call	_ResetEventFromCommand
  1471  00124C                     l8248:
  1472                           
  1473                           ; BSR set to: 0
  1474                           ;main.c: 899: }
  1475                           ;main.c: 900: if(_currenDiaryEvent.IsFire && *GetTime() >= _currenDiaryEvent.ResetSecond
      +                          )
  1476  00124C  51A0               	movf	__currenDiaryEvent& (0+255),w,b
  1477  00124E  E015               	bz	l8254
  1478                           
  1479                           ; BSR set to: 0
  1480  001250  EC1C  F018         	call	_GetTime	;wreg free
  1481  001254  6ED9               	movwf	fsr2l,c
  1482  001256  6ADA               	clrf	fsr2h,c
  1483  001258  0100               	movlb	0	; () banked
  1484  00125A  51A4               	movf	(__currenDiaryEvent+4)& (0+255),w,b
  1485  00125C  5CDE               	subwf	postinc2,w,c
  1486  00125E  51A5               	movf	(__currenDiaryEvent+5)& (0+255),w,b
  1487  001260  58DE               	subwfb	postinc2,w,c
  1488  001262  51A6               	movf	(__currenDiaryEvent+6)& (0+255),w,b
  1489  001264  58DE               	subwfb	postinc2,w,c
  1490  001266  50DE               	movf	postinc2,w,c
  1491  001268  0A80               	xorlw	128
  1492  00126A  6E6C               	movwf	(??_main+4)& (0+255),c
  1493  00126C  51A7               	movf	(__currenDiaryEvent+7)& (0+255),w,b
  1494  00126E  0A80               	xorlw	128
  1495  001270  586C               	subwfb	(??_main+4)& (0+255),w,c
  1496  001272  E303               	bnc	l8254
  1497                           
  1498                           ; BSR set to: 0
  1499                           ;main.c: 901: {
  1500                           ;main.c: 902: ResetEvent(0);
  1501  001274  0E00               	movlw	0
  1502  001276  ECE7  F014         	call	_ResetEvent
  1503  00127A                     l8254:
  1504                           
  1505                           ;main.c: 903: }
  1506                           ;main.c: 905: _MODBUSInputRegs[5] = *GetTime();
  1507  00127A  EC1C  F018         	call	_GetTime	;wreg free
  1508  00127E  6ED9               	movwf	fsr2l,c
  1509  001280  6ADA               	clrf	fsr2h,c
  1510  001282  CFDE F1B4          	movff	postinc2,__MODBUSInputRegs+10
  1511  001286  CFDD F1B5          	movff	postdec2,__MODBUSInputRegs+11
  1512                           
  1513                           ;main.c: 907: uint16_t totalMinutes;
  1514                           ;main.c: 908: if(getTotalMinutes(&totalMinutes) && (oldMinute != totalMinutes))
  1515  00128A  0ED4               	movlw	low main@totalMinutes
  1516  00128C  6E07               	movwf	getTotalMinutes@totalMinutes,c
  1517  00128E  0E01               	movlw	high main@totalMinutes
  1518  001290  6E08               	movwf	getTotalMinutes@totalMinutes+1,c
  1519  001292  EC5D  F017         	call	_getTotalMinutes	;wreg free
  1520  001296  0900               	iorlw	0
  1521  001298  E034               	bz	l8280
  1522  00129A  0101               	movlb	1	; () banked
  1523  00129C  51D4               	movf	main@totalMinutes& (0+255),w,b
  1524  00129E  19CC               	xorwf	main@oldMinute& (0+255),w,b
  1525  0012A0  E103               	bnz	u7270
  1526  0012A2  51D5               	movf	(main@totalMinutes+1)& (0+255),w,b
  1527  0012A4  19CD               	xorwf	(main@oldMinute+1)& (0+255),w,b
  1528  0012A6  E02D               	bz	l8280
  1529  0012A8                     u7270:
  1530                           
  1531                           ; BSR set to: 1
  1532                           ;main.c: 909: {
  1533                           ;main.c: 910: _MODBUSInputRegs[8] = totalMinutes;
  1534  0012A8  C1D4  F1BA         	movff	main@totalMinutes,__MODBUSInputRegs+16
  1535  0012AC  C1D5  F1BB         	movff	main@totalMinutes+1,__MODBUSInputRegs+17
  1536                           
  1537                           ;main.c: 911: uint8_t hour = 0, minute = 0;
  1538  0012B0  6BCE               	clrf	main@hour& (0+255),b
  1539  0012B2  6BCF               	clrf	main@minute& (0+255),b
  1540                           
  1541                           ; BSR set to: 1
  1542                           ;main.c: 912: getHourMin(&hour, &minute);
  1543  0012B4  0ECE               	movlw	low main@hour
  1544  0012B6  6E07               	movwf	getHourMin@hour,c
  1545  0012B8  0E01               	movlw	high main@hour
  1546  0012BA  6E08               	movwf	getHourMin@hour+1,c
  1547  0012BC  0ECF               	movlw	low main@minute
  1548  0012BE  6E09               	movwf	getHourMin@min,c
  1549  0012C0  0E01               	movlw	high main@minute
  1550  0012C2  6E0A               	movwf	getHourMin@min+1,c
  1551  0012C4  EC4A  F017         	call	_getHourMin	;wreg free
  1552                           
  1553                           ; BSR set to: 1
  1554                           ;main.c: 913: _MODBUSInputRegs[1] = (((uint16_t)hour<<8)|minute);
  1555  0012C8  51CE               	movf	main@hour& (0+255),w,b
  1556  0012CA  6E68               	movwf	??_main& (0+255),c
  1557  0012CC  51CF               	movf	main@minute& (0+255),w,b
  1558  0012CE  6FAC               	movwf	(__MODBUSInputRegs+2)& (0+255),b
  1559  0012D0  C068  F1AD         	movff	??_main,__MODBUSInputRegs+3
  1560                           
  1561                           ; BSR set to: 1
  1562                           ;main.c: 916: if(totalMinutes == 0)
  1563  0012D4  51D4               	movf	main@totalMinutes& (0+255),w,b
  1564  0012D6  11D5               	iorwf	(main@totalMinutes+1)& (0+255),w,b
  1565  0012D8  E10E               	bnz	l8276
  1566                           
  1567                           ; BSR set to: 1
  1568                           ;main.c: 917: {
  1569                           ;main.c: 918: SwitchOffAllDiaryLeds();
  1570  0012DA  EC0D  F017         	call	_SwitchOffAllDiaryLeds	;wreg free
  1571                           
  1572                           ;main.c: 919: _currenDiaryEvent.NextEventNum = 0xff;
  1573  0012DE  0100               	movlb	0	; () banked
  1574  0012E0  69A8               	setf	(__currenDiaryEvent+8)& (0+255),b
  1575                           
  1576                           ; BSR set to: 0
  1577                           ;main.c: 920: LoadNextEvent();
  1578  0012E2  ECBA  F00B         	call	_LoadNextEvent	;wreg free
  1579                           
  1580                           ;main.c: 921: _MODBUSInputRegs[2] = (((uint16_t)_currenDiaryEvent.FiredEventNum<<8)|_cur
      +                          renDiaryEvent.NextEventNum);
  1581  0012E6  0100               	movlb	0	; () banked
  1582  0012E8  51A1               	movf	(__currenDiaryEvent+1)& (0+255),w,b
  1583  0012EA  6E68               	movwf	??_main& (0+255),c
  1584  0012EC  51A8               	movf	(__currenDiaryEvent+8)& (0+255),w,b
  1585  0012EE  0101               	movlb	1	; () banked
  1586  0012F0  6FAE               	movwf	(__MODBUSInputRegs+4)& (0+255),b
  1587  0012F2  C068  F1AF         	movff	??_main,__MODBUSInputRegs+5
  1588  0012F6                     l8276:
  1589                           
  1590                           ; BSR set to: 1
  1591                           ;main.c: 922: }
  1592                           ;main.c: 923: oldMinute = totalMinutes;
  1593  0012F6  C1D4  F1CC         	movff	main@totalMinutes,main@oldMinute
  1594  0012FA  C1D5  F1CD         	movff	main@totalMinutes+1,main@oldMinute+1
  1595                           
  1596                           ; BSR set to: 1
  1597                           ;main.c: 924: ProcessDiary();
  1598  0012FE  EC34  F011         	call	_ProcessDiary	;wreg free
  1599  001302                     l8280:
  1600                           
  1601                           ;main.c: 925: }
  1602                           ;main.c: 929: lastMs = curMs;
  1603  001302  C1D0  F1C8         	movff	main@curMs,main@lastMs
  1604  001306  C1D1  F1C9         	movff	main@curMs+1,main@lastMs+1
  1605  00130A  C1D2  F1CA         	movff	main@curMs+2,main@lastMs+2
  1606  00130E  C1D3  F1CB         	movff	main@curMs+3,main@lastMs+3
  1607  001312                     l8282:
  1608                           
  1609                           ;main.c: 931: }
  1610                           ;main.c: 932: modbusState = ModbusPoll(_MODBUSDiscreteInputs, &_MODBUSCoils, _MODBUSInpu
      +                          tRegs, 15, _MODBUSHoldingRegs, 15);
  1611  001312  6A5D               	clrf	ModbusPoll@discreteInputs+1,c
  1612  001314  6A5C               	clrf	ModbusPoll@discreteInputs,c
  1613  001316  0EE8               	movlw	low __MODBUSCoils
  1614  001318  6E5E               	movwf	ModbusPoll@coils,c
  1615  00131A  0EAA               	movlw	low __MODBUSInputRegs
  1616  00131C  6E5F               	movwf	ModbusPoll@inputRegs,c
  1617  00131E  0E01               	movlw	high __MODBUSInputRegs
  1618  001320  6E60               	movwf	ModbusPoll@inputRegs+1,c
  1619  001322  0E0F               	movlw	15
  1620  001324  6E61               	movwf	ModbusPoll@inputRegsCount,c
  1621  001326  0E8C               	movlw	low __MODBUSHoldingRegs
  1622  001328  6E62               	movwf	ModbusPoll@holdingRegs,c
  1623  00132A  0E01               	movlw	high __MODBUSHoldingRegs
  1624  00132C  6E63               	movwf	ModbusPoll@holdingRegs+1,c
  1625  00132E  0E0F               	movlw	15
  1626  001330  6E64               	movwf	ModbusPoll@holdingRegsCount,c
  1627  001332  EC9E  F009         	call	_ModbusPoll	;wreg free
  1628                           
  1629                           ;main.c: 933: io_poll();
  1630  001336  EC84  F012         	call	_io_poll	;wreg free
  1631  00133A  D723               	goto	l8216
  1632  00133C                     __end_of_main:
  1633                           	opt stack 0
  1634                           tblptru	equ	0xFF8
  1635                           tblptrh	equ	0xFF7
  1636                           tblptrl	equ	0xFF6
  1637                           tablat	equ	0xFF5
  1638                           postinc0	equ	0xFEE
  1639                           wreg	equ	0xFE8
  1640                           postdec1	equ	0xFE5
  1641                           fsr1h	equ	0xFE2
  1642                           fsr1l	equ	0xFE1
  1643                           postinc2	equ	0xFDE
  1644                           postdec2	equ	0xFDD
  1645                           fsr2h	equ	0xFDA
  1646                           fsr2l	equ	0xFD9
  1647                           
  1648 ;; *************** function _pwm_init *****************
  1649 ;; Defined at:
  1650 ;;		line 383 in file "main.c"
  1651 ;; Parameters:    Size  Location     Type
  1652 ;;		None
  1653 ;; Auto vars:     Size  Location     Type
  1654 ;;		None
  1655 ;; Return value:  Size  Location     Type
  1656 ;;                  1    wreg      void 
  1657 ;; Registers used:
  1658 ;;		wreg, status,2
  1659 ;; Tracked objects:
  1660 ;;		On entry : 0/0
  1661 ;;		On exit  : 0/0
  1662 ;;		Unchanged: 0/0
  1663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1664 ;;      Params:         0       0       0       0       0       0       0
  1665 ;;      Locals:         0       0       0       0       0       0       0
  1666 ;;      Temps:          0       0       0       0       0       0       0
  1667 ;;      Totals:         0       0       0       0       0       0       0
  1668 ;;Total ram usage:        0 bytes
  1669 ;; Hardware stack levels used:    1
  1670 ;; Hardware stack levels required when called:    2
  1671 ;; This function calls:
  1672 ;;		Nothing
  1673 ;; This function is called by:
  1674 ;;		_main
  1675 ;; This function uses a non-reentrant model
  1676 ;;
  1677                           
  1678                           	psect	text1
  1679  002FB6                     __ptext1:
  1680                           	opt stack 0
  1681  002FB6                     _pwm_init:
  1682                           	opt stack 28
  1683                           
  1684                           ;incstack = 0
  1685  002FB6  FFFF               	dw	65535
  1686                           
  1687                           ;main.c: 395: CCP1CONbits.CCP1M = 0x0f;
  1688  002FB8  0E0F               	movlw	15
  1689  002FBA  12BD               	iorwf	4029,f,c	;volatile
  1690                           
  1691                           ;main.c: 402: PR2 = 255;
  1692  002FBC  68CB               	setf	4043,c	;volatile
  1693                           
  1694                           ;main.c: 405: T2CONbits.T2CKPS1 = 1;
  1695  002FBE  82CA               	bsf	4042,1,c	;volatile
  1696                           
  1697                           ;main.c: 406: T2CONbits.T2CKPS0 = 0;
  1698  002FC0  90CA               	bcf	4042,0,c	;volatile
  1699                           
  1700                           ;main.c: 409: TRISCbits.RC2 = 0;
  1701  002FC2  9494               	bcf	3988,2,c	;volatile
  1702  002FC4  0012               	return		;funcret
  1703  002FC6  FFFF               	dw	65535	; errata NOP
  1704  002FC8                     __end_of_pwm_init:
  1705                           	opt stack 0
  1706                           tblptru	equ	0xFF8
  1707                           tblptrh	equ	0xFF7
  1708                           tblptrl	equ	0xFF6
  1709                           tablat	equ	0xFF5
  1710                           postinc0	equ	0xFEE
  1711                           wreg	equ	0xFE8
  1712                           postdec1	equ	0xFE5
  1713                           fsr1h	equ	0xFE2
  1714                           fsr1l	equ	0xFE1
  1715                           postinc2	equ	0xFDE
  1716                           postdec2	equ	0xFDD
  1717                           fsr2h	equ	0xFDA
  1718                           fsr2l	equ	0xFD9
  1719                           
  1720 ;; *************** function _io_poll *****************
  1721 ;; Defined at:
  1722 ;;		line 1050 in file "main.c"
  1723 ;; Parameters:    Size  Location     Type
  1724 ;;		None
  1725 ;; Auto vars:     Size  Location     Type
  1726 ;;  lastAddress     2   46[COMRAM] unsigned int 
  1727 ;;  lastEndAddre    2   44[COMRAM] unsigned int 
  1728 ;;  lastFunction    1   49[COMRAM] PTR unsigned char 
  1729 ;;		 -> _lastFunction(1), 
  1730 ;;  lastCommand     1   48[COMRAM] unsigned char 
  1731 ;;  v1              1    0        unsigned char 
  1732 ;; Return value:  Size  Location     Type
  1733 ;;                  1    wreg      void 
  1734 ;; Registers used:
  1735 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1736 ;; Tracked objects:
  1737 ;;		On entry : 0/1
  1738 ;;		On exit  : 0/0
  1739 ;;		Unchanged: 0/0
  1740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1741 ;;      Params:         0       0       0       0       0       0       0
  1742 ;;      Locals:         6       0       0       0       0       0       0
  1743 ;;      Temps:          4       0       0       0       0       0       0
  1744 ;;      Totals:        10       0       0       0       0       0       0
  1745 ;;Total ram usage:       10 bytes
  1746 ;; Hardware stack levels used:    1
  1747 ;; Hardware stack levels required when called:    7
  1748 ;; This function calls:
  1749 ;;		_InitFromEeprom
  1750 ;;		_LightStatusLed
  1751 ;;		_LoadNextEvent
  1752 ;;		_ModbusGetLastCommand
  1753 ;;		_ModbusSetExceptionStatusBit
  1754 ;;		_ProcessUserCommands
  1755 ;; This function is called by:
  1756 ;;		_main
  1757 ;; This function uses a non-reentrant model
  1758 ;;
  1759                           
  1760                           	psect	text2
  1761  002508                     __ptext2:
  1762                           	opt stack 0
  1763  002508                     _io_poll:
  1764                           	opt stack 23
  1765                           
  1766                           ;incstack = 0
  1767  002508  FFFF               	dw	65535
  1768                           
  1769                           ;main.c: 1052: uint16_t lastAddress;
  1770                           ;main.c: 1053: uint16_t lastEndAddress;
  1771                           ;main.c: 1054: uint8_t lastCommand;
  1772                           ;main.c: 1056: uint8_t *lastFunction = ModbusGetLastCommand(&lastAddress, &lastEndAddres
      +                          s, &lastCommand);
  1773  00250A  0E2D               	movlw	low io_poll@lastEndAddress
  1774  00250C  6E07               	movwf	ModbusGetLastCommand@count,c
  1775  00250E  0E31               	movlw	low io_poll@lastCommand
  1776  002510  6E08               	movwf	ModbusGetLastCommand@command,c
  1777  002512  0E2F               	movlw	io_poll@lastAddress& (0+255)
  1778  002514  EC6C  F016         	call	_ModbusGetLastCommand
  1779  002518  6E32               	movwf	io_poll@lastFunction,c
  1780                           
  1781                           ;main.c: 1057: if(*lastFunction == MB_FC_NONE)
  1782  00251A  5032               	movf	io_poll@lastFunction,w,c
  1783  00251C  6ED9               	movwf	fsr2l,c
  1784  00251E  6ADA               	clrf	fsr2h,c
  1785  002520  50DF               	movf	indf2,w,c
  1786  002522  E036               	bz	l497
  1787                           
  1788                           ;main.c: 1060: lastEndAddress += lastAddress - 1;
  1789  002524  6829               	setf	??_io_poll& (0+255),c
  1790  002526  682A               	setf	(??_io_poll+1)& (0+255),c
  1791  002528  C02F  F02B         	movff	io_poll@lastAddress,??_io_poll+2
  1792  00252C  C030  F02C         	movff	io_poll@lastAddress+1,??_io_poll+3
  1793  002530  5029               	movf	??_io_poll,w,c
  1794  002532  262B               	addwf	??_io_poll+2,f,c
  1795  002534  502A               	movf	??_io_poll+1,w,c
  1796  002536  222C               	addwfc	??_io_poll+3,f,c
  1797  002538  502B               	movf	??_io_poll+2,w,c
  1798  00253A  262D               	addwf	io_poll@lastEndAddress,f,c
  1799  00253C  502C               	movf	??_io_poll+3,w,c
  1800  00253E  222E               	addwfc	io_poll@lastEndAddress+1,f,c
  1801                           
  1802                           ;main.c: 1062: uint8_t v1;
  1803                           ;main.c: 1063: if(*lastFunction == MB_FC_SYSTEM_COMMAND)
  1804  002540  5032               	movf	io_poll@lastFunction,w,c
  1805  002542  6ED9               	movwf	fsr2l,c
  1806  002544  6ADA               	clrf	fsr2h,c
  1807  002546  0E64               	movlw	100
  1808  002548  18DE               	xorwf	postinc2,w,c
  1809  00254A  E10C               	bnz	l8180
  1810                           
  1811                           ;main.c: 1064: {
  1812                           ;main.c: 1065: if(lastCommand == 0x10)
  1813  00254C  0E10               	movlw	16
  1814  00254E  1831               	xorwf	io_poll@lastCommand,w,c
  1815  002550  E11F               	bnz	l497
  1816                           
  1817                           ;main.c: 1066: {
  1818                           ;main.c: 1067: LightStatusLed(0x05, 0, 0);
  1819  002552  0E00               	movlw	0
  1820  002554  6E07               	movwf	LightStatusLed@on,c
  1821  002556  6E08               	movwf	LightStatusLed@blink,c
  1822  002558  0E05               	movlw	5
  1823  00255A  EC66  F00E         	call	_LightStatusLed
  1824                           
  1825                           ;main.c: 1068: LoadNextEvent();
  1826  00255E  ECBA  F00B         	call	_LoadNextEvent	;wreg free
  1827  002562  D016               	goto	l497
  1828  002564                     l8180:
  1829                           
  1830                           ;main.c: 1071: }
  1831                           ;main.c: 1072: if(*lastFunction == MB_FC_USER_COMMAND)
  1832  002564  5032               	movf	io_poll@lastFunction,w,c
  1833  002566  6ED9               	movwf	fsr2l,c
  1834  002568  6ADA               	clrf	fsr2h,c
  1835  00256A  0E65               	movlw	101
  1836  00256C  18DE               	xorwf	postinc2,w,c
  1837  00256E  E103               	bnz	l8190
  1838                           
  1839                           ;main.c: 1073: {
  1840                           ;main.c: 1074: ProcessUserCommands();
  1841  002570  EC0E  F013         	call	_ProcessUserCommands	;wreg free
  1842  002574  D00D               	goto	l497
  1843  002576                     l8190:
  1844                           
  1845                           ;main.c: 1081: }
  1846                           ;main.c: 1084: if(*lastFunction == MB_FC_WRITE_FILE_RECORD)
  1847  002576  5032               	movf	io_poll@lastFunction,w,c
  1848  002578  6ED9               	movwf	fsr2l,c
  1849  00257A  6ADA               	clrf	fsr2h,c
  1850  00257C  0E15               	movlw	21
  1851  00257E  18DE               	xorwf	postinc2,w,c
  1852  002580  E107               	bnz	l497
  1853                           
  1854                           ;main.c: 1085: {
  1855                           ;main.c: 1086: InitFromEeprom();
  1856  002582  EC7D  F010         	call	_InitFromEeprom	;wreg free
  1857                           
  1858                           ;main.c: 1087: ModbusSetExceptionStatusBit(0, 1);
  1859  002586  0E01               	movlw	1
  1860  002588  6E07               	movwf	ModbusSetExceptionStatusBit@value,c
  1861  00258A  0E00               	movlw	0
  1862  00258C  EC34  F015         	call	_ModbusSetExceptionStatusBit
  1863  002590                     l497:
  1864  002590  FFFF               	dw	65535	; assembler added errata NOP
  1865  002592  0012               	return		;funcret
  1866  002594  FFFF               	dw	65535	; errata NOP
  1867  002596                     __end_of_io_poll:
  1868                           	opt stack 0
  1869                           tblptru	equ	0xFF8
  1870                           tblptrh	equ	0xFF7
  1871                           tblptrl	equ	0xFF6
  1872                           tablat	equ	0xFF5
  1873                           postinc0	equ	0xFEE
  1874                           wreg	equ	0xFE8
  1875                           postdec1	equ	0xFE5
  1876                           fsr1h	equ	0xFE2
  1877                           fsr1l	equ	0xFE1
  1878                           indf2	equ	0xFDF
  1879                           postinc2	equ	0xFDE
  1880                           postdec2	equ	0xFDD
  1881                           fsr2h	equ	0xFDA
  1882                           fsr2l	equ	0xFD9
  1883                           
  1884 ;; *************** function _ProcessUserCommands *****************
  1885 ;; Defined at:
  1886 ;;		line 1025 in file "main.c"
  1887 ;; Parameters:    Size  Location     Type
  1888 ;;		None
  1889 ;; Auto vars:     Size  Location     Type
  1890 ;;  v1              1    0        unsigned char 
  1891 ;; Return value:  Size  Location     Type
  1892 ;;                  1    wreg      void 
  1893 ;; Registers used:
  1894 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1895 ;; Tracked objects:
  1896 ;;		On entry : 0/1
  1897 ;;		On exit  : 0/0
  1898 ;;		Unchanged: 0/0
  1899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1900 ;;      Params:         0       0       0       0       0       0       0
  1901 ;;      Locals:         0       0       0       0       0       0       0
  1902 ;;      Temps:          0       0       0       0       0       0       0
  1903 ;;      Totals:         0       0       0       0       0       0       0
  1904 ;;Total ram usage:        0 bytes
  1905 ;; Hardware stack levels used:    1
  1906 ;; Hardware stack levels required when called:    6
  1907 ;; This function calls:
  1908 ;;		_CommandSetLed
  1909 ;;		_CommandSetStatusLed
  1910 ;;		_ModbusGetUserCommandAdditional1Lo
  1911 ;;		_ModbusGetUserCommandData
  1912 ;;		_ModbusGetUserCommandId
  1913 ;;		_ModbusSetExceptionStatusBit
  1914 ;;		_PlaySound
  1915 ;; This function is called by:
  1916 ;;		_io_poll
  1917 ;; This function uses a non-reentrant model
  1918 ;;
  1919                           
  1920                           	psect	text3
  1921  00261C                     __ptext3:
  1922                           	opt stack 0
  1923  00261C                     _ProcessUserCommands:
  1924                           	opt stack 23
  1925                           
  1926                           ;incstack = 0
  1927  00261C  FFFF               	dw	65535
  1928                           
  1929                           ;main.c: 1027: uint8_t v1;
  1930                           ;main.c: 1028: switch(*ModbusGetUserCommandId())
  1931  00261E  D02F               	goto	l6542
  1932  002620                     l481:
  1933                           
  1934                           ;main.c: 1031: eventCount = 0;
  1935  002620  6A70               	clrf	_eventCount,c
  1936  002622                     l483:
  1937  002622  FFFF               	dw	65535	; assembler added errata NOP
  1938  002624  B2A6               	btfsc	4006,1,c	;volatile
  1939  002626  D7FD               	goto	l483
  1940  002628  0E0A               	movlw	10
  1941  00262A  6EA9               	movwf	4009,c	;volatile
  1942  00262C  6AA8               	clrf	4008,c	;volatile
  1943  00262E  90D8               	bcf	status,0,c	;volatile
  1944  002630  BEF2               	btfsc	intcon,7,c	;volatile
  1945  002632  80D8               	bsf	status,0,c	;volatile
  1946  002634  9EF2               	bcf	intcon,7,c	;volatile
  1947  002636  84A6               	bsf	4006,2,c	;volatile
  1948  002638  0E55               	movlw	85
  1949  00263A  6EA7               	movwf	4007,c	;volatile
  1950  00263C  0EAA               	movlw	170
  1951  00263E  6EA7               	movwf	4007,c	;volatile
  1952  002640  82A6               	bsf	4006,1,c	;volatile
  1953  002642  94A6               	bcf	4006,2,c	;volatile
  1954  002644  E301               	bnc	l6532
  1955  002646  8EF2               	bsf	intcon,7,c	;volatile
  1956  002648                     l6532:
  1957                           
  1958                           ;main.c: 1033: ModbusSetExceptionStatusBit(0, 1);
  1959  002648  0E01               	movlw	1
  1960  00264A  6E07               	movwf	ModbusSetExceptionStatusBit@value,c
  1961  00264C  0E00               	movlw	0
  1962  00264E  EC34  F015         	call	_ModbusSetExceptionStatusBit
  1963                           
  1964                           ;main.c: 1034: break;
  1965  002652  D023               	goto	l493
  1966  002654                     l6534:
  1967                           
  1968                           ;main.c: 1036: CommandSetLed();
  1969  002654  EC4A  F00C         	call	_CommandSetLed	;wreg free
  1970                           
  1971                           ;main.c: 1037: break;
  1972  002658  D020               	goto	l493
  1973  00265A                     l6536:
  1974                           
  1975                           ;main.c: 1041: PlaySound(*ModbusGetUserCommandData(), *ModbusGetUserCommandAdditional1Lo
      +                          ());
  1976  00265A  EC14  F018         	call	_ModbusGetUserCommandAdditional1Lo	;wreg free
  1977  00265E  6ED9               	movwf	fsr2l,c
  1978  002660  6ADA               	clrf	fsr2h,c
  1979  002662  50DF               	movf	indf2,w,c
  1980  002664  6E17               	movwf	PlaySound@playDuration,c
  1981  002666  6A18               	clrf	PlaySound@playDuration+1,c
  1982  002668  EC0C  F018         	call	_ModbusGetUserCommandData	;wreg free
  1983  00266C  6ED9               	movwf	fsr2l,c
  1984  00266E  6ADA               	clrf	fsr2h,c
  1985  002670  50DF               	movf	indf2,w,c
  1986  002672  EC51  F00F         	call	_PlaySound
  1987                           
  1988                           ;main.c: 1042: break;
  1989  002676  D011               	goto	l493
  1990  002678                     l6538:
  1991                           
  1992                           ;main.c: 1045: CommandSetStatusLed();
  1993  002678  ECCB  F012         	call	_CommandSetStatusLed	;wreg free
  1994                           
  1995                           ;main.c: 1046: break;
  1996  00267C  D00E               	goto	l493
  1997  00267E                     l6542:
  1998  00267E  FFFF               	dw	65535	; assembler added errata NOP
  1999  002680  EC08  F018         	call	_ModbusGetUserCommandId	;wreg free
  2000  002684  6ED9               	movwf	fsr2l,c
  2001  002686  6ADA               	clrf	fsr2h,c
  2002  002688  50DF               	movf	indf2,w,c
  2003                           
  2004                           ; Switch size 1, requested type "speed"
  2005                           ; Number of cases is 4, Range of values is 128 to 145
  2006                           ; switch strategies available:
  2007                           ; Name         Instructions Cycles
  2008                           ; simple_byte           13     7 (average)
  2009                           ;	Chosen strategy is simple_byte
  2010  00268A  0A80               	xorlw	128	; case 128
  2011  00268C  E0C9               	bz	l481
  2012  00268E  0A02               	xorlw	2	; case 130
  2013  002690  E0E1               	bz	l6534
  2014  002692  0A01               	xorlw	1	; case 131
  2015  002694  E0F1               	bz	l6538
  2016  002696  0A12               	xorlw	18	; case 145
  2017  002698  E0E0               	bz	l6536
  2018  00269A                     l493:
  2019  00269A  FFFF               	dw	65535	; assembler added errata NOP
  2020  00269C  0012               	return		;funcret
  2021  00269E  FFFF               	dw	65535	; errata NOP
  2022  0026A0                     __end_of_ProcessUserCommands:
  2023                           	opt stack 0
  2024                           tblptru	equ	0xFF8
  2025                           tblptrh	equ	0xFF7
  2026                           tblptrl	equ	0xFF6
  2027                           tablat	equ	0xFF5
  2028                           intcon	equ	0xFF2
  2029                           postinc0	equ	0xFEE
  2030                           wreg	equ	0xFE8
  2031                           postdec1	equ	0xFE5
  2032                           fsr1h	equ	0xFE2
  2033                           fsr1l	equ	0xFE1
  2034                           indf2	equ	0xFDF
  2035                           postinc2	equ	0xFDE
  2036                           postdec2	equ	0xFDD
  2037                           fsr2h	equ	0xFDA
  2038                           fsr2l	equ	0xFD9
  2039                           status	equ	0xFD8
  2040                           
  2041 ;; *************** function _ModbusGetUserCommandId *****************
  2042 ;; Defined at:
  2043 ;;		line 192 in file "ModbusRtu.c"
  2044 ;; Parameters:    Size  Location     Type
  2045 ;;		None
  2046 ;; Auto vars:     Size  Location     Type
  2047 ;;		None
  2048 ;; Return value:  Size  Location     Type
  2049 ;;                  1    wreg      PTR unsigned char 
  2050 ;; Registers used:
  2051 ;;		wreg
  2052 ;; Tracked objects:
  2053 ;;		On entry : 0/1
  2054 ;;		On exit  : 0/0
  2055 ;;		Unchanged: 0/0
  2056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2057 ;;      Params:         2       0       0       0       0       0       0
  2058 ;;      Locals:         0       0       0       0       0       0       0
  2059 ;;      Temps:          0       0       0       0       0       0       0
  2060 ;;      Totals:         2       0       0       0       0       0       0
  2061 ;;Total ram usage:        2 bytes
  2062 ;; Hardware stack levels used:    1
  2063 ;; Hardware stack levels required when called:    2
  2064 ;; This function calls:
  2065 ;;		Nothing
  2066 ;; This function is called by:
  2067 ;;		_ProcessUserCommands
  2068 ;; This function uses a non-reentrant model
  2069 ;;
  2070                           
  2071                           	psect	text4
  2072  003010                     __ptext4:
  2073                           	opt stack 0
  2074  003010                     _ModbusGetUserCommandId:
  2075                           	opt stack 26
  2076                           
  2077                           ;incstack = 0
  2078  003010  FFFF               	dw	65535
  2079  003012  0EF1               	movlw	_ModbusUserCommandId& (0+255)
  2080  003014  0012               	return		;funcret
  2081  003016  FFFF               	dw	65535	; errata NOP
  2082  003018                     __end_of_ModbusGetUserCommandId:
  2083                           	opt stack 0
  2084                           tblptru	equ	0xFF8
  2085                           tblptrh	equ	0xFF7
  2086                           tblptrl	equ	0xFF6
  2087                           tablat	equ	0xFF5
  2088                           intcon	equ	0xFF2
  2089                           postinc0	equ	0xFEE
  2090                           wreg	equ	0xFE8
  2091                           postdec1	equ	0xFE5
  2092                           fsr1h	equ	0xFE2
  2093                           fsr1l	equ	0xFE1
  2094                           indf2	equ	0xFDF
  2095                           postinc2	equ	0xFDE
  2096                           postdec2	equ	0xFDD
  2097                           fsr2h	equ	0xFDA
  2098                           fsr2l	equ	0xFD9
  2099                           status	equ	0xFD8
  2100                           
  2101 ;; *************** function _CommandSetStatusLed *****************
  2102 ;; Defined at:
  2103 ;;		line 1004 in file "main.c"
  2104 ;; Parameters:    Size  Location     Type
  2105 ;;		None
  2106 ;; Auto vars:     Size  Location     Type
  2107 ;;  led             1   33[COMRAM] unsigned char 
  2108 ;;  commandData     1   32[COMRAM] unsigned char 
  2109 ;;  soundId         1   31[COMRAM] unsigned char 
  2110 ;; Return value:  Size  Location     Type
  2111 ;;                  1    wreg      void 
  2112 ;; Registers used:
  2113 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2114 ;; Tracked objects:
  2115 ;;		On entry : 0/1
  2116 ;;		On exit  : 0/0
  2117 ;;		Unchanged: 0/0
  2118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2119 ;;      Params:         0       0       0       0       0       0       0
  2120 ;;      Locals:         3       0       0       0       0       0       0
  2121 ;;      Temps:          1       0       0       0       0       0       0
  2122 ;;      Totals:         4       0       0       0       0       0       0
  2123 ;;Total ram usage:        4 bytes
  2124 ;; Hardware stack levels used:    1
  2125 ;; Hardware stack levels required when called:    5
  2126 ;; This function calls:
  2127 ;;		_LightStatusLed
  2128 ;;		_ModbusGetUserCommandAdditional1Hi
  2129 ;;		_ModbusGetUserCommandAdditional1Lo
  2130 ;;		_ModbusGetUserCommandData
  2131 ;;		_ModbusSetExceptionStatusBit
  2132 ;;		_PlaySound
  2133 ;;		_StopPlaying
  2134 ;; This function is called by:
  2135 ;;		_ProcessUserCommands
  2136 ;; This function uses a non-reentrant model
  2137 ;;
  2138                           
  2139                           	psect	text5
  2140  002596                     __ptext5:
  2141                           	opt stack 0
  2142  002596                     _CommandSetStatusLed:
  2143                           	opt stack 23
  2144                           
  2145                           ;incstack = 0
  2146  002596  FFFF               	dw	65535
  2147                           
  2148                           ;main.c: 1008: uint8_t commandData = *ModbusGetUserCommandData();
  2149  002598  EC0C  F018         	call	_ModbusGetUserCommandData	;wreg free
  2150  00259C  6ED9               	movwf	fsr2l,c
  2151  00259E  6ADA               	clrf	fsr2h,c
  2152  0025A0  50DF               	movf	indf2,w,c
  2153  0025A2  6E21               	movwf	CommandSetStatusLed@commandData,c
  2154                           
  2155                           ;main.c: 1009: uint8_t soundId = *ModbusGetUserCommandAdditional1Hi();
  2156  0025A4  EC18  F018         	call	_ModbusGetUserCommandAdditional1Hi	;wreg free
  2157  0025A8  6ED9               	movwf	fsr2l,c
  2158  0025AA  6ADA               	clrf	fsr2h,c
  2159  0025AC  50DF               	movf	indf2,w,c
  2160  0025AE  6E20               	movwf	CommandSetStatusLed@soundId,c
  2161                           
  2162                           ;main.c: 1010: uint8_t led = commandData & 0x07;
  2163  0025B0  5021               	movf	CommandSetStatusLed@commandData,w,c
  2164  0025B2  0B07               	andlw	7
  2165  0025B4  6E22               	movwf	CommandSetStatusLed@led,c
  2166                           
  2167                           ;main.c: 1011: if(led >= 0x05)
  2168  0025B6  0E04               	movlw	4
  2169  0025B8  6422               	cpfsgt	CommandSetStatusLed@led,c
  2170  0025BA  D001               	goto	l6338
  2171  0025BC  D02C               	goto	l475
  2172  0025BE                     l6338:
  2173  0025BE  FFFF               	dw	65535	; assembler added errata NOP
  2174                           
  2175                           ;main.c: 1013: if((((commandData) >> (7)) & 0x01) == 0)
  2176  0025C0  6A1F               	clrf	??_CommandSetStatusLed& (0+255),c
  2177  0025C2  AE21               	btfss	CommandSetStatusLed@commandData,7,c
  2178  0025C4  D001               	bra	u5425
  2179  0025C6  2A1F               	incf	??_CommandSetStatusLed& (0+255),f,c
  2180  0025C8                     u5425:
  2181  0025C8  B01F               	btfsc	??_CommandSetStatusLed,0,c
  2182  0025CA  D00B               	goto	l6348
  2183                           
  2184                           ;main.c: 1014: {
  2185                           ;main.c: 1015: LightStatusLed(led, 0, 0);
  2186  0025CC  0E00               	movlw	0
  2187  0025CE  6E07               	movwf	LightStatusLed@on,c
  2188  0025D0  6E08               	movwf	LightStatusLed@blink,c
  2189  0025D2  5022               	movf	CommandSetStatusLed@led,w,c
  2190  0025D4  EC66  F00E         	call	_LightStatusLed
  2191                           
  2192                           ;main.c: 1016: if(soundId != 0xff)
  2193  0025D8  2820               	incf	CommandSetStatusLed@soundId,w,c
  2194  0025DA  E01D               	bz	l475
  2195                           
  2196                           ;main.c: 1017: StopPlaying();
  2197  0025DC  ECED  F017         	call	_StopPlaying	;wreg free
  2198  0025E0  D01A               	goto	l475
  2199  0025E2                     l6348:
  2200  0025E2  FFFF               	dw	65535	; assembler added errata NOP
  2201                           
  2202                           ;main.c: 1019: }
  2203                           ;main.c: 1020: LightStatusLed(led, 1, (((commandData) >> (6)) & 0x01));
  2204  0025E4  0E01               	movlw	1
  2205  0025E6  6E07               	movwf	LightStatusLed@on,c
  2206  0025E8  4421               	rlncf	CommandSetStatusLed@commandData,w,c
  2207  0025EA  46E8               	rlncf	wreg,f,c
  2208  0025EC  0B03               	andlw	3
  2209  0025EE  0B01               	andlw	1
  2210  0025F0  6E08               	movwf	LightStatusLed@blink,c
  2211  0025F2  5022               	movf	CommandSetStatusLed@led,w,c
  2212  0025F4  EC66  F00E         	call	_LightStatusLed
  2213                           
  2214                           ;main.c: 1021: PlaySound(soundId, *ModbusGetUserCommandAdditional1Lo());
  2215  0025F8  EC14  F018         	call	_ModbusGetUserCommandAdditional1Lo	;wreg free
  2216  0025FC  6ED9               	movwf	fsr2l,c
  2217  0025FE  6ADA               	clrf	fsr2h,c
  2218  002600  50DF               	movf	indf2,w,c
  2219  002602  6E17               	movwf	PlaySound@playDuration,c
  2220  002604  6A18               	clrf	PlaySound@playDuration+1,c
  2221  002606  5020               	movf	CommandSetStatusLed@soundId,w,c
  2222  002608  EC51  F00F         	call	_PlaySound
  2223                           
  2224                           ; BSR set to: 0
  2225                           ;main.c: 1022: ModbusSetExceptionStatusBit(0, 1);
  2226  00260C  0E01               	movlw	1
  2227  00260E  6E07               	movwf	ModbusSetExceptionStatusBit@value,c
  2228  002610  0E00               	movlw	0
  2229  002612  EC34  F015         	call	_ModbusSetExceptionStatusBit
  2230  002616                     l475:
  2231  002616  FFFF               	dw	65535	; assembler added errata NOP
  2232  002618  0012               	return		;funcret
  2233  00261A  FFFF               	dw	65535	; errata NOP
  2234  00261C                     __end_of_CommandSetStatusLed:
  2235                           	opt stack 0
  2236                           tblptru	equ	0xFF8
  2237                           tblptrh	equ	0xFF7
  2238                           tblptrl	equ	0xFF6
  2239                           tablat	equ	0xFF5
  2240                           intcon	equ	0xFF2
  2241                           postinc0	equ	0xFEE
  2242                           wreg	equ	0xFE8
  2243                           postdec1	equ	0xFE5
  2244                           fsr1h	equ	0xFE2
  2245                           fsr1l	equ	0xFE1
  2246                           indf2	equ	0xFDF
  2247                           postinc2	equ	0xFDE
  2248                           postdec2	equ	0xFDD
  2249                           fsr2h	equ	0xFDA
  2250                           fsr2l	equ	0xFD9
  2251                           status	equ	0xFD8
  2252                           
  2253 ;; *************** function _CommandSetLed *****************
  2254 ;; Defined at:
  2255 ;;		line 967 in file "main.c"
  2256 ;; Parameters:    Size  Location     Type
  2257 ;;		None
  2258 ;; Auto vars:     Size  Location     Type
  2259 ;;  led             1   39[COMRAM] unsigned char 
  2260 ;;  commandData     1   38[COMRAM] unsigned char 
  2261 ;;  blinkSeconds    1   37[COMRAM] unsigned char 
  2262 ;;  ledColor        1   36[COMRAM] unsigned char 
  2263 ;;  soundId         1   35[COMRAM] unsigned char 
  2264 ;; Return value:  Size  Location     Type
  2265 ;;                  1    wreg      void 
  2266 ;; Registers used:
  2267 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2268 ;; Tracked objects:
  2269 ;;		On entry : 0/1
  2270 ;;		On exit  : 0/0
  2271 ;;		Unchanged: 0/0
  2272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2273 ;;      Params:         0       0       0       0       0       0       0
  2274 ;;      Locals:         5       0       0       0       0       0       0
  2275 ;;      Temps:          5       0       0       0       0       0       0
  2276 ;;      Totals:        10       0       0       0       0       0       0
  2277 ;;Total ram usage:       10 bytes
  2278 ;; Hardware stack levels used:    1
  2279 ;; Hardware stack levels required when called:    5
  2280 ;; This function calls:
  2281 ;;		_GetTime
  2282 ;;		_LightLed
  2283 ;;		_ModbusGetUserCommandAdditional1Hi
  2284 ;;		_ModbusGetUserCommandAdditional1Lo
  2285 ;;		_ModbusGetUserCommandAdditional2Hi
  2286 ;;		_ModbusGetUserCommandData
  2287 ;;		_ModbusSetExceptionStatusBit
  2288 ;;		_PlaySound
  2289 ;;		_StopPlaying
  2290 ;; This function is called by:
  2291 ;;		_ProcessUserCommands
  2292 ;; This function uses a non-reentrant model
  2293 ;;
  2294                           
  2295                           	psect	text6
  2296  001894                     __ptext6:
  2297                           	opt stack 0
  2298  001894                     _CommandSetLed:
  2299                           	opt stack 23
  2300                           
  2301                           ;incstack = 0
  2302  001894  FFFF               	dw	65535
  2303                           
  2304                           ;main.c: 974: uint8_t commandData = *ModbusGetUserCommandData();
  2305  001896  EC0C  F018         	call	_ModbusGetUserCommandData	;wreg free
  2306  00189A  6ED9               	movwf	fsr2l,c
  2307  00189C  6ADA               	clrf	fsr2h,c
  2308  00189E  50DF               	movf	indf2,w,c
  2309  0018A0  6E27               	movwf	CommandSetLed@commandData,c
  2310                           
  2311                           ;main.c: 975: uint8_t soundId = *ModbusGetUserCommandAdditional1Hi();
  2312  0018A2  EC18  F018         	call	_ModbusGetUserCommandAdditional1Hi	;wreg free
  2313  0018A6  6ED9               	movwf	fsr2l,c
  2314  0018A8  6ADA               	clrf	fsr2h,c
  2315  0018AA  50DF               	movf	indf2,w,c
  2316  0018AC  6E24               	movwf	CommandSetLed@soundId,c
  2317                           
  2318                           ;main.c: 976: uint8_t led = *ModbusGetUserCommandAdditional2Hi();
  2319  0018AE  EC10  F018         	call	_ModbusGetUserCommandAdditional2Hi	;wreg free
  2320  0018B2  6ED9               	movwf	fsr2l,c
  2321  0018B4  6ADA               	clrf	fsr2h,c
  2322  0018B6  50DF               	movf	indf2,w,c
  2323  0018B8  6E28               	movwf	CommandSetLed@led,c
  2324                           
  2325                           ;main.c: 977: if(led == 0 || led > 60 - _maxDiaryEvents)
  2326  0018BA  5028               	movf	CommandSetLed@led,w,c
  2327  0018BC  E075               	bz	l465
  2328  0018BE  5028               	movf	CommandSetLed@led,w,c
  2329  0018C0  6E1F               	movwf	??_CommandSetLed& (0+255),c
  2330  0018C2  6A20               	clrf	(??_CommandSetLed+1)& (0+255),c
  2331  0018C4  0E3C               	movlw	60
  2332  0018C6  6E21               	movwf	(??_CommandSetLed+2)& (0+255),c
  2333  0018C8  6A22               	clrf	(??_CommandSetLed+3)& (0+255),c
  2334  0018CA  506D               	movf	__maxDiaryEvents,w,c
  2335  0018CC  5E21               	subwf	??_CommandSetLed+2,f,c
  2336  0018CE  0E00               	movlw	0
  2337  0018D0  5A22               	subwfb	??_CommandSetLed+3,f,c
  2338  0018D2  501F               	movf	??_CommandSetLed,w,c
  2339  0018D4  5C21               	subwf	??_CommandSetLed+2,w,c
  2340  0018D6  5022               	movf	??_CommandSetLed+3,w,c
  2341  0018D8  0A80               	xorlw	128
  2342  0018DA  6E23               	movwf	(??_CommandSetLed+4)& (0+255),c
  2343  0018DC  5020               	movf	??_CommandSetLed+1,w,c
  2344  0018DE  0A80               	xorlw	128
  2345  0018E0  5823               	subwfb	(??_CommandSetLed+4)& (0+255),w,c
  2346  0018E2  E362               	bnc	l465
  2347                           
  2348                           ;main.c: 979: uint8_t ledColor = commandData & 0x03;
  2349  0018E4  5027               	movf	CommandSetLed@commandData,w,c
  2350  0018E6  0B03               	andlw	3
  2351  0018E8  6E25               	movwf	CommandSetLed@ledColor,c
  2352                           
  2353                           ;main.c: 980: if((((commandData) >> (7)) & 0x01) == 0 || ledColor == 0)
  2354  0018EA  6A1F               	clrf	??_CommandSetLed& (0+255),c
  2355  0018EC  AE27               	btfss	CommandSetLed@commandData,7,c
  2356  0018EE  D001               	bra	u5365
  2357  0018F0  2A1F               	incf	??_CommandSetLed& (0+255),f,c
  2358  0018F2                     u5365:
  2359  0018F2  A01F               	btfss	??_CommandSetLed,0,c
  2360  0018F4  D002               	goto	l6306
  2361  0018F6  5025               	movf	CommandSetLed@ledColor,w,c
  2362  0018F8  E10C               	bnz	l6314
  2363  0018FA                     l6306:
  2364  0018FA  FFFF               	dw	65535	; assembler added errata NOP
  2365                           
  2366                           ;main.c: 981: {
  2367                           ;main.c: 982: LightLed(led, LED_OFF, 0);
  2368  0018FC  0E00               	movlw	0
  2369  0018FE  6E07               	movwf	LightLed@ledState,c
  2370  001900  6E08               	movwf	LightLed@blink,c
  2371  001902  5028               	movf	CommandSetLed@led,w,c
  2372  001904  ECB5  F004         	call	_LightLed
  2373                           
  2374                           ;main.c: 983: if(soundId != 0xff)
  2375  001908  2824               	incf	CommandSetLed@soundId,w,c
  2376  00190A  E04E               	bz	l465
  2377                           
  2378                           ;main.c: 984: StopPlaying();
  2379  00190C  ECED  F017         	call	_StopPlaying	;wreg free
  2380  001910  D04B               	goto	l465
  2381  001912                     l6314:
  2382                           
  2383                           ;main.c: 986: }
  2384                           ;main.c: 988: uint8_t blinkSeconds = *ModbusGetUserCommandAdditional1Lo();
  2385  001912  EC14  F018         	call	_ModbusGetUserCommandAdditional1Lo	;wreg free
  2386  001916  6ED9               	movwf	fsr2l,c
  2387  001918  6ADA               	clrf	fsr2h,c
  2388  00191A  50DF               	movf	indf2,w,c
  2389  00191C  6E26               	movwf	CommandSetLed@blinkSeconds,c
  2390                           
  2391                           ;main.c: 989: if(blinkSeconds == 0)
  2392  00191E  5026               	movf	CommandSetLed@blinkSeconds,w,c
  2393  001920  E10B               	bnz	l470
  2394                           
  2395                           ;main.c: 990: {
  2396                           ;main.c: 991: LightLed(led, ledColor, (((commandData) >> (6)) & 0x01));
  2397  001922  C025  F007         	movff	CommandSetLed@ledColor,LightLed@ledState
  2398  001926  4427               	rlncf	CommandSetLed@commandData,w,c
  2399  001928  46E8               	rlncf	wreg,f,c
  2400  00192A  0B03               	andlw	3
  2401  00192C  0B01               	andlw	1
  2402  00192E  6E08               	movwf	LightLed@blink,c
  2403  001930  5028               	movf	CommandSetLed@led,w,c
  2404  001932  ECB5  F004         	call	_LightLed
  2405                           
  2406                           ;main.c: 992: }
  2407  001936  D028               	goto	l6326
  2408  001938                     l470:
  2409                           
  2410                           ;main.c: 993: else
  2411                           ;main.c: 994: {
  2412                           ;main.c: 995: _eventFromCommand.LedNum = led;
  2413  001938  C028  F0AA         	movff	CommandSetLed@led,__eventFromCommand+1
  2414                           
  2415                           ;main.c: 996: _eventFromCommand.IsFire = 1;
  2416  00193C  0E01               	movlw	1
  2417  00193E  0100               	movlb	0	; () banked
  2418  001940  6FA9               	movwf	__eventFromCommand& (0+255),b
  2419                           
  2420                           ; BSR set to: 0
  2421                           ;main.c: 997: _eventFromCommand.ResetSecond = *GetTime() + blinkSeconds;
  2422  001942  EC1C  F018         	call	_GetTime	;wreg free
  2423  001946  6ED9               	movwf	fsr2l,c
  2424  001948  6ADA               	clrf	fsr2h,c
  2425  00194A  CFDE F01F          	movff	postinc2,??_CommandSetLed
  2426  00194E  CFDE F020          	movff	postinc2,??_CommandSetLed+1
  2427  001952  CFDE F021          	movff	postinc2,??_CommandSetLed+2
  2428  001956  CFDE F022          	movff	postinc2,??_CommandSetLed+3
  2429  00195A  5026               	movf	CommandSetLed@blinkSeconds,w,c
  2430  00195C  241F               	addwf	??_CommandSetLed,w,c
  2431  00195E  0100               	movlb	0	; () banked
  2432  001960  6FAB               	movwf	(__eventFromCommand+2)& (0+255),b
  2433  001962  0E00               	movlw	0
  2434  001964  2020               	addwfc	??_CommandSetLed+1,w,c
  2435  001966  6FAC               	movwf	(__eventFromCommand+3)& (0+255),b
  2436  001968  0E00               	movlw	0
  2437  00196A  2021               	addwfc	??_CommandSetLed+2,w,c
  2438  00196C  6FAD               	movwf	(__eventFromCommand+4)& (0+255),b
  2439  00196E  0E00               	movlw	0
  2440  001970  2022               	addwfc	??_CommandSetLed+3,w,c
  2441  001972  6FAE               	movwf	(__eventFromCommand+5)& (0+255),b
  2442                           
  2443                           ; BSR set to: 0
  2444                           ;main.c: 998: LightLed(led, LED_ORANGE, (((commandData) >> (6)) & 0x01));
  2445  001974  0E03               	movlw	3
  2446  001976  6E07               	movwf	LightLed@ledState,c
  2447  001978  4427               	rlncf	CommandSetLed@commandData,w,c
  2448  00197A  46E8               	rlncf	wreg,f,c
  2449  00197C  0B03               	andlw	3
  2450  00197E  0B01               	andlw	1
  2451  001980  6E08               	movwf	LightLed@blink,c
  2452  001982  5028               	movf	CommandSetLed@led,w,c
  2453  001984  ECB5  F004         	call	_LightLed
  2454  001988                     l6326:
  2455  001988  FFFF               	dw	65535	; assembler added errata NOP
  2456                           
  2457                           ;main.c: 999: }
  2458                           ;main.c: 1000: PlaySound(soundId, *ModbusGetUserCommandAdditional1Lo());
  2459  00198A  EC14  F018         	call	_ModbusGetUserCommandAdditional1Lo	;wreg free
  2460  00198E  6ED9               	movwf	fsr2l,c
  2461  001990  6ADA               	clrf	fsr2h,c
  2462  001992  50DF               	movf	indf2,w,c
  2463  001994  6E17               	movwf	PlaySound@playDuration,c
  2464  001996  6A18               	clrf	PlaySound@playDuration+1,c
  2465  001998  5024               	movf	CommandSetLed@soundId,w,c
  2466  00199A  EC51  F00F         	call	_PlaySound
  2467                           
  2468                           ; BSR set to: 0
  2469                           ;main.c: 1001: ModbusSetExceptionStatusBit(0, 1);
  2470  00199E  0E01               	movlw	1
  2471  0019A0  6E07               	movwf	ModbusSetExceptionStatusBit@value,c
  2472  0019A2  0E00               	movlw	0
  2473  0019A4  EC34  F015         	call	_ModbusSetExceptionStatusBit
  2474  0019A8                     l465:
  2475  0019A8  FFFF               	dw	65535	; assembler added errata NOP
  2476  0019AA  0012               	return		;funcret
  2477  0019AC  FFFF               	dw	65535	; errata NOP
  2478  0019AE                     __end_of_CommandSetLed:
  2479                           	opt stack 0
  2480                           tblptru	equ	0xFF8
  2481                           tblptrh	equ	0xFF7
  2482                           tblptrl	equ	0xFF6
  2483                           tablat	equ	0xFF5
  2484                           intcon	equ	0xFF2
  2485                           postinc0	equ	0xFEE
  2486                           wreg	equ	0xFE8
  2487                           postdec1	equ	0xFE5
  2488                           fsr1h	equ	0xFE2
  2489                           fsr1l	equ	0xFE1
  2490                           indf2	equ	0xFDF
  2491                           postinc2	equ	0xFDE
  2492                           postdec2	equ	0xFDD
  2493                           fsr2h	equ	0xFDA
  2494                           fsr2l	equ	0xFD9
  2495                           status	equ	0xFD8
  2496                           
  2497 ;; *************** function _ModbusGetUserCommandData *****************
  2498 ;; Defined at:
  2499 ;;		line 193 in file "ModbusRtu.c"
  2500 ;; Parameters:    Size  Location     Type
  2501 ;;		None
  2502 ;; Auto vars:     Size  Location     Type
  2503 ;;		None
  2504 ;; Return value:  Size  Location     Type
  2505 ;;                  1    wreg      PTR unsigned char 
  2506 ;; Registers used:
  2507 ;;		wreg
  2508 ;; Tracked objects:
  2509 ;;		On entry : 0/1
  2510 ;;		On exit  : 0/0
  2511 ;;		Unchanged: 0/0
  2512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2513 ;;      Params:         2       0       0       0       0       0       0
  2514 ;;      Locals:         0       0       0       0       0       0       0
  2515 ;;      Temps:          0       0       0       0       0       0       0
  2516 ;;      Totals:         2       0       0       0       0       0       0
  2517 ;;Total ram usage:        2 bytes
  2518 ;; Hardware stack levels used:    1
  2519 ;; Hardware stack levels required when called:    2
  2520 ;; This function calls:
  2521 ;;		Nothing
  2522 ;; This function is called by:
  2523 ;;		_CommandSetLed
  2524 ;;		_CommandSetStatusLed
  2525 ;;		_ProcessUserCommands
  2526 ;; This function uses a non-reentrant model
  2527 ;;
  2528                           
  2529                           	psect	text7
  2530  003018                     __ptext7:
  2531                           	opt stack 0
  2532  003018                     _ModbusGetUserCommandData:
  2533                           	opt stack 26
  2534                           
  2535                           ;incstack = 0
  2536  003018  FFFF               	dw	65535
  2537  00301A  0EF0               	movlw	_ModbusUserCommandData& (0+255)
  2538  00301C  0012               	return		;funcret
  2539  00301E  FFFF               	dw	65535	; errata NOP
  2540  003020                     __end_of_ModbusGetUserCommandData:
  2541                           	opt stack 0
  2542                           tblptru	equ	0xFF8
  2543                           tblptrh	equ	0xFF7
  2544                           tblptrl	equ	0xFF6
  2545                           tablat	equ	0xFF5
  2546                           intcon	equ	0xFF2
  2547                           postinc0	equ	0xFEE
  2548                           wreg	equ	0xFE8
  2549                           postdec1	equ	0xFE5
  2550                           fsr1h	equ	0xFE2
  2551                           fsr1l	equ	0xFE1
  2552                           indf2	equ	0xFDF
  2553                           postinc2	equ	0xFDE
  2554                           postdec2	equ	0xFDD
  2555                           fsr2h	equ	0xFDA
  2556                           fsr2l	equ	0xFD9
  2557                           status	equ	0xFD8
  2558                           
  2559 ;; *************** function _ModbusGetUserCommandAdditional2Hi *****************
  2560 ;; Defined at:
  2561 ;;		line 204 in file "ModbusRtu.c"
  2562 ;; Parameters:    Size  Location     Type
  2563 ;;		None
  2564 ;; Auto vars:     Size  Location     Type
  2565 ;;		None
  2566 ;; Return value:  Size  Location     Type
  2567 ;;                  1    wreg      PTR unsigned char 
  2568 ;; Registers used:
  2569 ;;		wreg
  2570 ;; Tracked objects:
  2571 ;;		On entry : 0/1
  2572 ;;		On exit  : 0/0
  2573 ;;		Unchanged: 0/0
  2574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2575 ;;      Params:         2       0       0       0       0       0       0
  2576 ;;      Locals:         0       0       0       0       0       0       0
  2577 ;;      Temps:          0       0       0       0       0       0       0
  2578 ;;      Totals:         2       0       0       0       0       0       0
  2579 ;;Total ram usage:        2 bytes
  2580 ;; Hardware stack levels used:    1
  2581 ;; Hardware stack levels required when called:    2
  2582 ;; This function calls:
  2583 ;;		Nothing
  2584 ;; This function is called by:
  2585 ;;		_CommandSetLed
  2586 ;; This function uses a non-reentrant model
  2587 ;;
  2588                           
  2589                           	psect	text8
  2590  003020                     __ptext8:
  2591                           	opt stack 0
  2592  003020                     _ModbusGetUserCommandAdditional2Hi:
  2593                           	opt stack 25
  2594                           
  2595                           ;incstack = 0
  2596  003020  FFFF               	dw	65535
  2597  003022  0EEC               	movlw	_ModbusUserCommandAdditional2Hi& (0+255)
  2598  003024  0012               	return		;funcret
  2599  003026  FFFF               	dw	65535	; errata NOP
  2600  003028                     __end_of_ModbusGetUserCommandAdditional2Hi:
  2601                           	opt stack 0
  2602                           tblptru	equ	0xFF8
  2603                           tblptrh	equ	0xFF7
  2604                           tblptrl	equ	0xFF6
  2605                           tablat	equ	0xFF5
  2606                           intcon	equ	0xFF2
  2607                           postinc0	equ	0xFEE
  2608                           wreg	equ	0xFE8
  2609                           postdec1	equ	0xFE5
  2610                           fsr1h	equ	0xFE2
  2611                           fsr1l	equ	0xFE1
  2612                           indf2	equ	0xFDF
  2613                           postinc2	equ	0xFDE
  2614                           postdec2	equ	0xFDD
  2615                           fsr2h	equ	0xFDA
  2616                           fsr2l	equ	0xFD9
  2617                           status	equ	0xFD8
  2618                           
  2619 ;; *************** function _ModbusGetUserCommandAdditional1Lo *****************
  2620 ;; Defined at:
  2621 ;;		line 199 in file "ModbusRtu.c"
  2622 ;; Parameters:    Size  Location     Type
  2623 ;;		None
  2624 ;; Auto vars:     Size  Location     Type
  2625 ;;		None
  2626 ;; Return value:  Size  Location     Type
  2627 ;;                  1    wreg      PTR unsigned char 
  2628 ;; Registers used:
  2629 ;;		wreg
  2630 ;; Tracked objects:
  2631 ;;		On entry : 0/1
  2632 ;;		On exit  : 0/0
  2633 ;;		Unchanged: 0/0
  2634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2635 ;;      Params:         2       0       0       0       0       0       0
  2636 ;;      Locals:         0       0       0       0       0       0       0
  2637 ;;      Temps:          0       0       0       0       0       0       0
  2638 ;;      Totals:         2       0       0       0       0       0       0
  2639 ;;Total ram usage:        2 bytes
  2640 ;; Hardware stack levels used:    1
  2641 ;; Hardware stack levels required when called:    2
  2642 ;; This function calls:
  2643 ;;		Nothing
  2644 ;; This function is called by:
  2645 ;;		_CommandSetLed
  2646 ;;		_CommandSetStatusLed
  2647 ;;		_ProcessUserCommands
  2648 ;; This function uses a non-reentrant model
  2649 ;;
  2650                           
  2651                           	psect	text9
  2652  003028                     __ptext9:
  2653                           	opt stack 0
  2654  003028                     _ModbusGetUserCommandAdditional1Lo:
  2655                           	opt stack 26
  2656                           
  2657                           ;incstack = 0
  2658  003028  FFFF               	dw	65535
  2659  00302A  0EEB               	movlw	_ModbusUserCommandAdditional1Lo& (0+255)
  2660  00302C  0012               	return		;funcret
  2661  00302E  FFFF               	dw	65535	; errata NOP
  2662  003030                     __end_of_ModbusGetUserCommandAdditional1Lo:
  2663                           	opt stack 0
  2664                           tblptru	equ	0xFF8
  2665                           tblptrh	equ	0xFF7
  2666                           tblptrl	equ	0xFF6
  2667                           tablat	equ	0xFF5
  2668                           intcon	equ	0xFF2
  2669                           postinc0	equ	0xFEE
  2670                           wreg	equ	0xFE8
  2671                           postdec1	equ	0xFE5
  2672                           fsr1h	equ	0xFE2
  2673                           fsr1l	equ	0xFE1
  2674                           indf2	equ	0xFDF
  2675                           postinc2	equ	0xFDE
  2676                           postdec2	equ	0xFDD
  2677                           fsr2h	equ	0xFDA
  2678                           fsr2l	equ	0xFD9
  2679                           status	equ	0xFD8
  2680                           
  2681 ;; *************** function _ModbusGetUserCommandAdditional1Hi *****************
  2682 ;; Defined at:
  2683 ;;		line 198 in file "ModbusRtu.c"
  2684 ;; Parameters:    Size  Location     Type
  2685 ;;		None
  2686 ;; Auto vars:     Size  Location     Type
  2687 ;;		None
  2688 ;; Return value:  Size  Location     Type
  2689 ;;                  1    wreg      PTR unsigned char 
  2690 ;; Registers used:
  2691 ;;		wreg
  2692 ;; Tracked objects:
  2693 ;;		On entry : 0/1
  2694 ;;		On exit  : 0/0
  2695 ;;		Unchanged: 0/0
  2696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2697 ;;      Params:         2       0       0       0       0       0       0
  2698 ;;      Locals:         0       0       0       0       0       0       0
  2699 ;;      Temps:          0       0       0       0       0       0       0
  2700 ;;      Totals:         2       0       0       0       0       0       0
  2701 ;;Total ram usage:        2 bytes
  2702 ;; Hardware stack levels used:    1
  2703 ;; Hardware stack levels required when called:    2
  2704 ;; This function calls:
  2705 ;;		Nothing
  2706 ;; This function is called by:
  2707 ;;		_CommandSetLed
  2708 ;;		_CommandSetStatusLed
  2709 ;; This function uses a non-reentrant model
  2710 ;;
  2711                           
  2712                           	psect	text10
  2713  003030                     __ptext10:
  2714                           	opt stack 0
  2715  003030                     _ModbusGetUserCommandAdditional1Hi:
  2716                           	opt stack 25
  2717                           
  2718                           ;incstack = 0
  2719  003030  FFFF               	dw	65535
  2720  003032  0EEA               	movlw	_ModbusUserCommandAdditional1Hi& (0+255)
  2721  003034  0012               	return		;funcret
  2722  003036  FFFF               	dw	65535	; errata NOP
  2723  003038                     __end_of_ModbusGetUserCommandAdditional1Hi:
  2724                           	opt stack 0
  2725                           tblptru	equ	0xFF8
  2726                           tblptrh	equ	0xFF7
  2727                           tblptrl	equ	0xFF6
  2728                           tablat	equ	0xFF5
  2729                           intcon	equ	0xFF2
  2730                           postinc0	equ	0xFEE
  2731                           wreg	equ	0xFE8
  2732                           postdec1	equ	0xFE5
  2733                           fsr1h	equ	0xFE2
  2734                           fsr1l	equ	0xFE1
  2735                           indf2	equ	0xFDF
  2736                           postinc2	equ	0xFDE
  2737                           postdec2	equ	0xFDD
  2738                           fsr2h	equ	0xFDA
  2739                           fsr2l	equ	0xFD9
  2740                           status	equ	0xFD8
  2741                           
  2742 ;; *************** function _ModbusGetLastCommand *****************
  2743 ;; Defined at:
  2744 ;;		line 907 in file "ModbusRtu.c"
  2745 ;; Parameters:    Size  Location     Type
  2746 ;;  address         1    wreg     PTR unsigned short 
  2747 ;;		 -> io_poll@lastAddress(2), 
  2748 ;;  count           1    6[COMRAM] PTR unsigned short 
  2749 ;;		 -> io_poll@lastEndAddress(2), 
  2750 ;;  command         1    7[COMRAM] PTR unsigned char 
  2751 ;;		 -> io_poll@lastCommand(1), 
  2752 ;; Auto vars:     Size  Location     Type
  2753 ;;  address         1    8[COMRAM] PTR unsigned short 
  2754 ;;		 -> io_poll@lastAddress(2), 
  2755 ;; Return value:  Size  Location     Type
  2756 ;;                  1    wreg      PTR unsigned char 
  2757 ;; Registers used:
  2758 ;;		wreg, fsr2l, fsr2h, status,2
  2759 ;; Tracked objects:
  2760 ;;		On entry : 0/1
  2761 ;;		On exit  : 0/0
  2762 ;;		Unchanged: 0/0
  2763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2764 ;;      Params:         2       0       0       0       0       0       0
  2765 ;;      Locals:         1       0       0       0       0       0       0
  2766 ;;      Temps:          0       0       0       0       0       0       0
  2767 ;;      Totals:         3       0       0       0       0       0       0
  2768 ;;Total ram usage:        3 bytes
  2769 ;; Hardware stack levels used:    1
  2770 ;; Hardware stack levels required when called:    2
  2771 ;; This function calls:
  2772 ;;		Nothing
  2773 ;; This function is called by:
  2774 ;;		_io_poll
  2775 ;; This function uses a non-reentrant model
  2776 ;;
  2777                           
  2778                           	psect	text11
  2779  002CD8                     __ptext11:
  2780                           	opt stack 0
  2781  002CD8                     _ModbusGetLastCommand:
  2782                           	opt stack 27
  2783                           
  2784                           ;incstack = 0
  2785  002CD8  FFFF               	dw	65535
  2786                           
  2787                           ;ModbusGetLastCommand@address stored from wreg
  2788  002CDA  6E09               	movwf	ModbusGetLastCommand@address,c
  2789                           
  2790                           ;ModbusRtu.c: 909: if (address != (0))
  2791  002CDC  5009               	movf	ModbusGetLastCommand@address,w,c
  2792  002CDE  E007               	bz	l6548
  2793                           
  2794                           ;ModbusRtu.c: 910: *address = _lastAddress;
  2795  002CE0  5009               	movf	ModbusGetLastCommand@address,w,c
  2796  002CE2  6ED9               	movwf	fsr2l,c
  2797  002CE4  6ADA               	clrf	fsr2h,c
  2798  002CE6  C0C7  FFDE         	movff	__lastAddress,postinc2
  2799  002CEA  C0C8  FFDD         	movff	__lastAddress+1,postdec2
  2800  002CEE                     l6548:
  2801                           
  2802                           ;ModbusRtu.c: 911: if (count != (0))
  2803  002CEE  5007               	movf	ModbusGetLastCommand@count,w,c
  2804  002CF0  E007               	bz	l6552
  2805                           
  2806                           ;ModbusRtu.c: 912: *count = _lastCount;
  2807  002CF2  5007               	movf	ModbusGetLastCommand@count,w,c
  2808  002CF4  6ED9               	movwf	fsr2l,c
  2809  002CF6  6ADA               	clrf	fsr2h,c
  2810  002CF8  C0C9  FFDE         	movff	__lastCount,postinc2
  2811  002CFC  C0CA  FFDD         	movff	__lastCount+1,postdec2
  2812  002D00                     l6552:
  2813                           
  2814                           ;ModbusRtu.c: 913: if(command != (0))
  2815  002D00  5008               	movf	ModbusGetLastCommand@command,w,c
  2816  002D02  E005               	bz	l6556
  2817                           
  2818                           ;ModbusRtu.c: 914: *command = _lastCommand;
  2819  002D04  5008               	movf	ModbusGetLastCommand@command,w,c
  2820  002D06  6ED9               	movwf	fsr2l,c
  2821  002D08  6ADA               	clrf	fsr2h,c
  2822  002D0A  C0DA  FFDF         	movff	__lastCommand,indf2
  2823  002D0E                     l6556:
  2824                           
  2825                           ;ModbusRtu.c: 915: return &_lastFunction;
  2826  002D0E  0EF2               	movlw	__lastFunction& (0+255)
  2827  002D10  0012               	return		;funcret
  2828  002D12  FFFF               	dw	65535	; errata NOP
  2829  002D14                     __end_of_ModbusGetLastCommand:
  2830                           	opt stack 0
  2831                           tblptru	equ	0xFF8
  2832                           tblptrh	equ	0xFF7
  2833                           tblptrl	equ	0xFF6
  2834                           tablat	equ	0xFF5
  2835                           intcon	equ	0xFF2
  2836                           postinc0	equ	0xFEE
  2837                           wreg	equ	0xFE8
  2838                           postdec1	equ	0xFE5
  2839                           fsr1h	equ	0xFE2
  2840                           fsr1l	equ	0xFE1
  2841                           indf2	equ	0xFDF
  2842                           postinc2	equ	0xFDE
  2843                           postdec2	equ	0xFDD
  2844                           fsr2h	equ	0xFDA
  2845                           fsr2l	equ	0xFD9
  2846                           status	equ	0xFD8
  2847                           
  2848 ;; *************** function _InitFromEeprom *****************
  2849 ;; Defined at:
  2850 ;;		line 435 in file "main.c"
  2851 ;; Parameters:    Size  Location     Type
  2852 ;;		None
  2853 ;; Auto vars:     Size  Location     Type
  2854 ;;  tmpModbusId     1   18[COMRAM] unsigned char 
  2855 ;;  eeSoundCount    1   17[COMRAM] unsigned char 
  2856 ;; Return value:  Size  Location     Type
  2857 ;;                  1    wreg      void 
  2858 ;; Registers used:
  2859 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2860 ;; Tracked objects:
  2861 ;;		On entry : 0/0
  2862 ;;		On exit  : 0/0
  2863 ;;		Unchanged: 0/0
  2864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2865 ;;      Params:         0       0       0       0       0       0       0
  2866 ;;      Locals:         2       0       0       0       0       0       0
  2867 ;;      Temps:          2       0       0       0       0       0       0
  2868 ;;      Totals:         4       0       0       0       0       0       0
  2869 ;;Total ram usage:        4 bytes
  2870 ;; Hardware stack levels used:    1
  2871 ;; Hardware stack levels required when called:    4
  2872 ;; This function calls:
  2873 ;;		_LoadNextEvent
  2874 ;;		_Modbus
  2875 ;;		_ShowFailure
  2876 ;;		_SwitchOffAllLeds
  2877 ;; This function is called by:
  2878 ;;		_main
  2879 ;;		_io_poll
  2880 ;; This function uses a non-reentrant model
  2881 ;;
  2882                           
  2883                           	psect	text12
  2884  0020FA                     __ptext12:
  2885                           	opt stack 0
  2886  0020FA                     _InitFromEeprom:
  2887                           	opt stack 25
  2888                           
  2889                           ;incstack = 0
  2890  0020FA  FFFF               	dw	65535
  2891                           
  2892                           ;main.c: 437: SwitchOffAllLeds();
  2893  0020FC  EC37  F017         	call	_SwitchOffAllLeds	;wreg free
  2894                           
  2895                           ;main.c: 439: eventAcceptTime = ( EEADR = 2, (void)0, RD = 1, EEDATA);
  2896  002100  0E02               	movlw	2
  2897  002102  6EA9               	movwf	4009,c	;volatile
  2898  002104  80A6               	bsf	4006,0,c	;volatile
  2899  002106  CFA8 F0E3          	movff	4008,_eventAcceptTime	;volatile
  2900                           
  2901                           ;main.c: 443: uint8_t tmpModbusId = ( EEADR = 1, (void)0, RD = 1, EEDATA);
  2902  00210A  0E01               	movlw	1
  2903  00210C  6EA9               	movwf	4009,c	;volatile
  2904  00210E  80A6               	bsf	4006,0,c	;volatile
  2905  002110  CFA8 F013          	movff	4008,InitFromEeprom@tmpModbusId	;volatile
  2906                           
  2907                           ;main.c: 444: if(tmpModbusId == 0xff)
  2908  002114  2813               	incf	InitFromEeprom@tmpModbusId,w,c
  2909  002116  E102               	bnz	l7904
  2910                           
  2911                           ;main.c: 445: tmpModbusId = 0x7F;
  2912  002118  0E7F               	movlw	127
  2913  00211A  6E13               	movwf	InitFromEeprom@tmpModbusId,c
  2914  00211C                     l7904:
  2915                           
  2916                           ;main.c: 446: Modbus(tmpModbusId, 0, 0);
  2917  00211C  6A0C               	clrf	Modbus@u8serno,c
  2918  00211E  6A0D               	clrf	Modbus@u8txenpin,c
  2919  002120  5013               	movf	InitFromEeprom@tmpModbusId,w,c
  2920  002122  ECD1  F017         	call	_Modbus
  2921                           
  2922                           ; BSR set to: 0
  2923                           ;main.c: 449: _maxDiaryEvents = ( EEADR = 3, (void)0, RD = 1, EEDATA);
  2924  002126  0E03               	movlw	3
  2925  002128  6EA9               	movwf	4009,c	;volatile
  2926                           
  2927                           ; BSR set to: 0
  2928  00212A  80A6               	bsf	4006,0,c	;volatile
  2929                           
  2930                           ; BSR set to: 0
  2931  00212C  CFA8 F06D          	movff	4008,__maxDiaryEvents	;volatile
  2932                           
  2933                           ; BSR set to: 0
  2934                           ;main.c: 450: if(_maxDiaryEvents == 0xff)
  2935  002130  286D               	incf	__maxDiaryEvents,w,c
  2936  002132  E101               	bnz	l7916
  2937                           
  2938                           ; BSR set to: 0
  2939                           ;main.c: 451: _maxDiaryEvents = 0;
  2940  002134  6A6D               	clrf	__maxDiaryEvents,c
  2941  002136                     l7916:
  2942                           
  2943                           ; BSR set to: 0
  2944                           ;main.c: 452: if(_maxDiaryEvents > 60)
  2945  002136  0E3C               	movlw	60
  2946  002138  646D               	cpfsgt	__maxDiaryEvents,c
  2947  00213A  D004               	goto	l7922
  2948                           
  2949                           ; BSR set to: 0
  2950                           ;main.c: 453: {
  2951                           ;main.c: 454: ShowFailure(2);
  2952  00213C  0E02               	movlw	2
  2953  00213E  EC70  F017         	call	_ShowFailure
  2954  002142  D034               	goto	l316
  2955  002144                     l7922:
  2956  002144  FFFF               	dw	65535	; assembler added errata NOP
  2957                           
  2958                           ; BSR set to: 0
  2959                           ;main.c: 456: }
  2960                           ;main.c: 457: eventCount = ( EEADR = 10, (void)0, RD = 1, EEDATA);
  2961  002146  0E0A               	movlw	10
  2962  002148  6EA9               	movwf	4009,c	;volatile
  2963                           
  2964                           ; BSR set to: 0
  2965  00214A  80A6               	bsf	4006,0,c	;volatile
  2966                           
  2967                           ; BSR set to: 0
  2968  00214C  CFA8 F070          	movff	4008,_eventCount	;volatile
  2969                           
  2970                           ; BSR set to: 0
  2971                           ;main.c: 458: if(eventCount == 0xff)
  2972  002150  2870               	incf	_eventCount,w,c
  2973  002152  E101               	bnz	l7932
  2974                           
  2975                           ; BSR set to: 0
  2976                           ;main.c: 459: eventCount = 0;
  2977  002154  6A70               	clrf	_eventCount,c
  2978  002156                     l7932:
  2979                           
  2980                           ; BSR set to: 0
  2981                           ;main.c: 460: if(eventCount > _maxDiaryEvents)
  2982  002156  5070               	movf	_eventCount,w,c
  2983  002158  5C6D               	subwf	__maxDiaryEvents,w,c
  2984  00215A  E204               	bc	l7938
  2985                           
  2986                           ; BSR set to: 0
  2987                           ;main.c: 461: {
  2988                           ;main.c: 462: ShowFailure(3);
  2989  00215C  0E03               	movlw	3
  2990  00215E  EC70  F017         	call	_ShowFailure
  2991  002162  D024               	goto	l316
  2992  002164                     l7938:
  2993                           
  2994                           ; BSR set to: 0
  2995                           ;main.c: 464: }
  2996                           ;main.c: 469: uint8_t eeSoundCountAddress = 10 + 1 + eventCount * 2;
  2997  002164  5070               	movf	_eventCount,w,c
  2998  002166  0D02               	mullw	2
  2999  002168  50F3               	movf	prodl,w,c
  3000  00216A  0F0B               	addlw	11
  3001  00216C  6E12               	movwf	InitFromEeprom@eeSoundCountAddress,c
  3002                           
  3003                           ; BSR set to: 0
  3004                           ;main.c: 470: _soundCount = ( EEADR = eeSoundCountAddress, (void)0, RD = 1, EEDATA);
  3005  00216E  C012  FFA9         	movff	InitFromEeprom@eeSoundCountAddress,4009	;volatile
  3006                           
  3007                           ; BSR set to: 0
  3008  002172  80A6               	bsf	4006,0,c	;volatile
  3009                           
  3010                           ; BSR set to: 0
  3011  002174  CFA8 F0DF          	movff	4008,__soundCount	;volatile
  3012                           
  3013                           ; BSR set to: 0
  3014                           ;main.c: 471: if(_soundCount == 0xFF)
  3015  002178  29DF               	incf	__soundCount& (0+255),w,b
  3016  00217A  E102               	bnz	l7950
  3017                           
  3018                           ; BSR set to: 0
  3019                           ;main.c: 472: _soundCount = 0;
  3020  00217C  6BDF               	clrf	__soundCount& (0+255),b
  3021  00217E  D005               	goto	l7956
  3022  002180                     l7950:
  3023                           
  3024                           ; BSR set to: 0
  3025                           ;main.c: 473: else
  3026                           ;main.c: 474: {
  3027                           ;main.c: 475: _eeSoundAddressesList = eeSoundCountAddress + 1;
  3028  002180  2812               	incf	InitFromEeprom@eeSoundCountAddress,w,c
  3029  002182  6FD5               	movwf	__eeSoundAddressesList& (0+255),b
  3030                           
  3031                           ;main.c: 476: _eeFirstSoundAddress = _eeSoundAddressesList + _soundCount;
  3032  002184  51D5               	movf	__eeSoundAddressesList& (0+255),w,b
  3033  002186  25DF               	addwf	__soundCount& (0+255),w,b
  3034  002188  6FD4               	movwf	__eeFirstSoundAddress& (0+255),b
  3035  00218A                     l7956:
  3036  00218A  FFFF               	dw	65535	; assembler added errata NOP
  3037                           
  3038                           ; BSR set to: 0
  3039                           ;main.c: 481: }
  3040                           ;main.c: 482: }
  3041                           ;main.c: 483: _MODBUSInputRegs[6] = (((uint16_t)_soundCount<<8)|eventCount);
  3042  00218C  51DF               	movf	__soundCount& (0+255),w,b
  3043  00218E  6E10               	movwf	??_InitFromEeprom& (0+255),c
  3044  002190  5070               	movf	_eventCount,w,c
  3045  002192  0101               	movlb	1	; () banked
  3046  002194  6FB6               	movwf	(__MODBUSInputRegs+12)& (0+255),b
  3047  002196  C010  F1B7         	movff	??_InitFromEeprom,__MODBUSInputRegs+13
  3048                           
  3049                           ; BSR set to: 1
  3050                           ;main.c: 486: _eventFromCommand.IsFire = 0;
  3051  00219A  0100               	movlb	0	; () banked
  3052  00219C  6BA9               	clrf	__eventFromCommand& (0+255),b
  3053                           
  3054                           ; BSR set to: 0
  3055                           ;main.c: 489: _currenDiaryEvent.NextEventTotalMinutes = 0;
  3056  00219E  6BA2               	clrf	(__currenDiaryEvent+2)& (0+255),b
  3057  0021A0  6BA3               	clrf	(__currenDiaryEvent+3)& (0+255),b
  3058                           
  3059                           ; BSR set to: 0
  3060                           ;main.c: 490: _currenDiaryEvent.IsFire = 0;
  3061  0021A2  6BA0               	clrf	__currenDiaryEvent& (0+255),b
  3062                           
  3063                           ; BSR set to: 0
  3064                           ;main.c: 491: _currenDiaryEvent.FiredEventNum = 0xff;
  3065  0021A4  69A1               	setf	(__currenDiaryEvent+1)& (0+255),b
  3066                           
  3067                           ; BSR set to: 0
  3068                           ;main.c: 492: _currenDiaryEvent.NextEventNum = 0xff;
  3069  0021A6  69A8               	setf	(__currenDiaryEvent+8)& (0+255),b
  3070                           
  3071                           ; BSR set to: 0
  3072                           ;main.c: 494: LoadNextEvent();
  3073  0021A8  ECBA  F00B         	call	_LoadNextEvent	;wreg free
  3074  0021AC                     l316:
  3075  0021AC  FFFF               	dw	65535	; assembler added errata NOP
  3076  0021AE  0012               	return		;funcret
  3077  0021B0  FFFF               	dw	65535	; errata NOP
  3078  0021B2                     __end_of_InitFromEeprom:
  3079                           	opt stack 0
  3080                           tblptru	equ	0xFF8
  3081                           tblptrh	equ	0xFF7
  3082                           tblptrl	equ	0xFF6
  3083                           tablat	equ	0xFF5
  3084                           prodl	equ	0xFF3
  3085                           intcon	equ	0xFF2
  3086                           postinc0	equ	0xFEE
  3087                           wreg	equ	0xFE8
  3088                           postdec1	equ	0xFE5
  3089                           fsr1h	equ	0xFE2
  3090                           fsr1l	equ	0xFE1
  3091                           indf2	equ	0xFDF
  3092                           postinc2	equ	0xFDE
  3093                           postdec2	equ	0xFDD
  3094                           fsr2h	equ	0xFDA
  3095                           fsr2l	equ	0xFD9
  3096                           status	equ	0xFD8
  3097                           
  3098 ;; *************** function _SwitchOffAllLeds *****************
  3099 ;; Defined at:
  3100 ;;		line 312 in file "main.c"
  3101 ;; Parameters:    Size  Location     Type
  3102 ;;		None
  3103 ;; Auto vars:     Size  Location     Type
  3104 ;;  i               1    6[COMRAM] unsigned char 
  3105 ;; Return value:  Size  Location     Type
  3106 ;;                  1    wreg      void 
  3107 ;; Registers used:
  3108 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3109 ;; Tracked objects:
  3110 ;;		On entry : 0/0
  3111 ;;		On exit  : 0/0
  3112 ;;		Unchanged: 0/0
  3113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3114 ;;      Params:         0       0       0       0       0       0       0
  3115 ;;      Locals:         1       0       0       0       0       0       0
  3116 ;;      Temps:          0       0       0       0       0       0       0
  3117 ;;      Totals:         1       0       0       0       0       0       0
  3118 ;;Total ram usage:        1 bytes
  3119 ;; Hardware stack levels used:    1
  3120 ;; Hardware stack levels required when called:    2
  3121 ;; This function calls:
  3122 ;;		Nothing
  3123 ;; This function is called by:
  3124 ;;		_InitFromEeprom
  3125 ;; This function uses a non-reentrant model
  3126 ;;
  3127                           
  3128                           	psect	text13
  3129  002E6E                     __ptext13:
  3130                           	opt stack 0
  3131  002E6E                     _SwitchOffAllLeds:
  3132                           	opt stack 26
  3133                           
  3134                           ;incstack = 0
  3135  002E6E  FFFF               	dw	65535
  3136                           
  3137                           ;main.c: 314: for(uint8_t i = 0; i < 16 - 1; i++)
  3138  002E70  6A07               	clrf	SwitchOffAllLeds@i,c
  3139  002E72                     l6218:
  3140  002E72  FFFF               	dw	65535	; assembler added errata NOP
  3141                           
  3142                           ;main.c: 315: {
  3143                           ;main.c: 316: ledStatuses[i] = 0;
  3144  002E74  5007               	movf	SwitchOffAllLeds@i,w,c
  3145  002E76  0F90               	addlw	low _ledStatuses
  3146  002E78  6ED9               	movwf	fsr2l,c
  3147  002E7A  6ADA               	clrf	fsr2h,c
  3148  002E7C  6ADF               	clrf	indf2,c
  3149                           
  3150                           ;main.c: 317: ledBlink[i] = 0;
  3151  002E7E  5007               	movf	SwitchOffAllLeds@i,w,c
  3152  002E80  0F80               	addlw	low _ledBlink
  3153  002E82  6ED9               	movwf	fsr2l,c
  3154  002E84  6ADA               	clrf	fsr2h,c
  3155  002E86  6ADF               	clrf	indf2,c
  3156  002E88  2A07               	incf	SwitchOffAllLeds@i,f,c
  3157  002E8A  0E0E               	movlw	14
  3158  002E8C  6407               	cpfsgt	SwitchOffAllLeds@i,c
  3159  002E8E  D7F1               	goto	l6218
  3160  002E90  0C0E               	retlw	14	;funcret
  3161  002E92  FFFF               	dw	65535	; errata NOP
  3162  002E94                     __end_of_SwitchOffAllLeds:
  3163                           	opt stack 0
  3164                           tblptru	equ	0xFF8
  3165                           tblptrh	equ	0xFF7
  3166                           tblptrl	equ	0xFF6
  3167                           tablat	equ	0xFF5
  3168                           prodl	equ	0xFF3
  3169                           intcon	equ	0xFF2
  3170                           postinc0	equ	0xFEE
  3171                           wreg	equ	0xFE8
  3172                           postdec1	equ	0xFE5
  3173                           fsr1h	equ	0xFE2
  3174                           fsr1l	equ	0xFE1
  3175                           indf2	equ	0xFDF
  3176                           postinc2	equ	0xFDE
  3177                           postdec2	equ	0xFDD
  3178                           fsr2h	equ	0xFDA
  3179                           fsr2l	equ	0xFD9
  3180                           status	equ	0xFD8
  3181                           
  3182 ;; *************** function _ShowFailure *****************
  3183 ;; Defined at:
  3184 ;;		line 429 in file "main.c"
  3185 ;; Parameters:    Size  Location     Type
  3186 ;;  additionalLe    1    wreg     unsigned char 
  3187 ;; Auto vars:     Size  Location     Type
  3188 ;;  additionalLe    1   14[COMRAM] unsigned char 
  3189 ;; Return value:  Size  Location     Type
  3190 ;;                  1    wreg      void 
  3191 ;; Registers used:
  3192 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3193 ;; Tracked objects:
  3194 ;;		On entry : F/0
  3195 ;;		On exit  : 0/0
  3196 ;;		Unchanged: 0/0
  3197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3198 ;;      Params:         0       0       0       0       0       0       0
  3199 ;;      Locals:         1       0       0       0       0       0       0
  3200 ;;      Temps:          0       0       0       0       0       0       0
  3201 ;;      Totals:         1       0       0       0       0       0       0
  3202 ;;Total ram usage:        1 bytes
  3203 ;; Hardware stack levels used:    1
  3204 ;; Hardware stack levels required when called:    3
  3205 ;; This function calls:
  3206 ;;		_LightLed
  3207 ;;		_LightStatusLed
  3208 ;; This function is called by:
  3209 ;;		_InitFromEeprom
  3210 ;; This function uses a non-reentrant model
  3211 ;;
  3212                           
  3213                           	psect	text14
  3214  002EE0                     __ptext14:
  3215                           	opt stack 0
  3216  002EE0                     _ShowFailure:
  3217                           	opt stack 25
  3218                           
  3219                           ;incstack = 0
  3220  002EE0  FFFF               	dw	65535
  3221                           
  3222                           ;ShowFailure@additionalLed stored from wreg
  3223  002EE2  6E0F               	movwf	ShowFailure@additionalLed,c
  3224                           
  3225                           ;main.c: 431: LightStatusLed(0x06, 1, 1);
  3226  002EE4  0E01               	movlw	1
  3227  002EE6  6E07               	movwf	LightStatusLed@on,c
  3228  002EE8  6E08               	movwf	LightStatusLed@blink,c
  3229  002EEA  0E06               	movlw	6
  3230  002EEC  EC66  F00E         	call	_LightStatusLed
  3231                           
  3232                           ;main.c: 432: LightLed(additionalLed, LED_RED, 1);
  3233  002EF0  0E02               	movlw	2
  3234  002EF2  6E07               	movwf	LightLed@ledState,c
  3235  002EF4  0E01               	movlw	1
  3236  002EF6  6E08               	movwf	LightLed@blink,c
  3237  002EF8  500F               	movf	ShowFailure@additionalLed,w,c
  3238  002EFA  EFB5  F004         	goto	_LightLed
  3239  002EFE  FFFF               	dw	65535	; errata NOP
  3240  002F00                     __end_of_ShowFailure:
  3241                           	opt stack 0
  3242                           tblptru	equ	0xFF8
  3243                           tblptrh	equ	0xFF7
  3244                           tblptrl	equ	0xFF6
  3245                           tablat	equ	0xFF5
  3246                           prodl	equ	0xFF3
  3247                           intcon	equ	0xFF2
  3248                           postinc0	equ	0xFEE
  3249                           wreg	equ	0xFE8
  3250                           postdec1	equ	0xFE5
  3251                           fsr1h	equ	0xFE2
  3252                           fsr1l	equ	0xFE1
  3253                           indf2	equ	0xFDF
  3254                           postinc2	equ	0xFDE
  3255                           postdec2	equ	0xFDD
  3256                           fsr2h	equ	0xFDA
  3257                           fsr2l	equ	0xFD9
  3258                           status	equ	0xFD8
  3259                           
  3260 ;; *************** function _LightStatusLed *****************
  3261 ;; Defined at:
  3262 ;;		line 372 in file "main.c"
  3263 ;; Parameters:    Size  Location     Type
  3264 ;;  row             1    wreg     unsigned char 
  3265 ;;  on              1    6[COMRAM] unsigned char 
  3266 ;;  blink           1    7[COMRAM] unsigned char 
  3267 ;; Auto vars:     Size  Location     Type
  3268 ;;  row             1   13[COMRAM] unsigned char 
  3269 ;; Return value:  Size  Location     Type
  3270 ;;                  1    wreg      void 
  3271 ;; Registers used:
  3272 ;;		wreg, status,2, status,0
  3273 ;; Tracked objects:
  3274 ;;		On entry : 0/1
  3275 ;;		On exit  : 0/0
  3276 ;;		Unchanged: 0/0
  3277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3278 ;;      Params:         2       0       0       0       0       0       0
  3279 ;;      Locals:         1       0       0       0       0       0       0
  3280 ;;      Temps:          5       0       0       0       0       0       0
  3281 ;;      Totals:         8       0       0       0       0       0       0
  3282 ;;Total ram usage:        8 bytes
  3283 ;; Hardware stack levels used:    1
  3284 ;; Hardware stack levels required when called:    2
  3285 ;; This function calls:
  3286 ;;		Nothing
  3287 ;; This function is called by:
  3288 ;;		_ShowFailure
  3289 ;;		_main
  3290 ;;		_CommandSetStatusLed
  3291 ;;		_io_poll
  3292 ;; This function uses a non-reentrant model
  3293 ;;
  3294                           
  3295                           	psect	text15
  3296  001CCC                     __ptext15:
  3297                           	opt stack 0
  3298  001CCC                     _LightStatusLed:
  3299                           	opt stack 25
  3300                           
  3301                           ;incstack = 0
  3302  001CCC  FFFF               	dw	65535
  3303                           
  3304                           ;LightStatusLed@row stored from wreg
  3305  001CCE  6E0E               	movwf	LightStatusLed@row,c
  3306                           
  3307                           ;main.c: 374: if(row > 7)
  3308  001CD0  0E07               	movlw	7
  3309  001CD2  640E               	cpfsgt	LightStatusLed@row,c
  3310  001CD4  D001               	goto	l5982
  3311  001CD6  D072               	goto	l289
  3312  001CD8                     l5982:
  3313  001CD8  FFFF               	dw	65535	; assembler added errata NOP
  3314                           
  3315                           ;main.c: 376: (on ? ((ledStatuses[16-1]) |= ((unsigned short)1 << (row))) : ((ledStatuse
      +                          s[16-1]) &= ~((unsigned short)1 << (row))));
  3316  001CDA  5007               	movf	LightStatusLed@on,w,c
  3317  001CDC  E010               	bz	l5986
  3318  001CDE  C00E  F009         	movff	LightStatusLed@row,??_LightStatusLed
  3319  001CE2  0E01               	movlw	1
  3320  001CE4  6E0A               	movwf	(??_LightStatusLed+1)& (0+255),c
  3321  001CE6  2A09               	incf	??_LightStatusLed,f,c
  3322  001CE8  D003               	goto	u5004
  3323  001CEA                     u5005:
  3324  001CEA  FFFF               	dw	65535	; assembler added errata NOP
  3325  001CEC  90D8               	bcf	status,0,c
  3326  001CEE  360A               	rlcf	??_LightStatusLed+1,f,c
  3327  001CF0                     u5004:
  3328  001CF0  FFFF               	dw	65535	; assembler added errata NOP
  3329  001CF2  2E09               	decfsz	??_LightStatusLed,f,c
  3330  001CF4  D7FA               	goto	u5005
  3331  001CF6  500A               	movf	??_LightStatusLed+1,w,c
  3332  001CF8  0100               	movlb	0	; () banked
  3333  001CFA  139F               	iorwf	(_ledStatuses+15)& (0+255),f,b
  3334  001CFC  D00F               	goto	l5988
  3335  001CFE                     l5986:
  3336  001CFE  C00E  F009         	movff	LightStatusLed@row,??_LightStatusLed
  3337  001D02  0E01               	movlw	1
  3338  001D04  6E0A               	movwf	(??_LightStatusLed+1)& (0+255),c
  3339  001D06  2A09               	incf	??_LightStatusLed,f,c
  3340  001D08  D003               	goto	u5014
  3341  001D0A                     u5015:
  3342  001D0A  FFFF               	dw	65535	; assembler added errata NOP
  3343  001D0C  90D8               	bcf	status,0,c
  3344  001D0E  360A               	rlcf	??_LightStatusLed+1,f,c
  3345  001D10                     u5014:
  3346  001D10  FFFF               	dw	65535	; assembler added errata NOP
  3347  001D12  2E09               	decfsz	??_LightStatusLed,f,c
  3348  001D14  D7FA               	goto	u5015
  3349  001D16  1C0A               	comf	??_LightStatusLed+1,w,c
  3350  001D18  0100               	movlb	0	; () banked
  3351  001D1A  179F               	andwf	(_ledStatuses+15)& (0+255),f,b
  3352  001D1C                     l5988:
  3353  001D1C  FFFF               	dw	65535	; assembler added errata NOP
  3354                           
  3355                           ; BSR set to: 0
  3356                           ;main.c: 377: (blink ? ((ledBlink[16-1]) |= ((unsigned short)1 << (row))) : ((ledBlink[1
      +                          6-1]) &= ~((unsigned short)1 << (row))));
  3357  001D1E  5008               	movf	LightStatusLed@blink,w,c
  3358  001D20  E010               	bz	l5992
  3359                           
  3360                           ; BSR set to: 0
  3361  001D22  C00E  F009         	movff	LightStatusLed@row,??_LightStatusLed
  3362  001D26  0E01               	movlw	1
  3363  001D28  6E0A               	movwf	(??_LightStatusLed+1)& (0+255),c
  3364  001D2A  2A09               	incf	??_LightStatusLed,f,c
  3365  001D2C  D003               	goto	u5034
  3366  001D2E                     u5035:
  3367  001D2E  FFFF               	dw	65535	; assembler added errata NOP
  3368  001D30  90D8               	bcf	status,0,c
  3369  001D32  360A               	rlcf	??_LightStatusLed+1,f,c
  3370  001D34                     u5034:
  3371  001D34  FFFF               	dw	65535	; assembler added errata NOP
  3372  001D36  2E09               	decfsz	??_LightStatusLed,f,c
  3373  001D38  D7FA               	goto	u5035
  3374  001D3A  500A               	movf	??_LightStatusLed+1,w,c
  3375  001D3C  0100               	movlb	0	; () banked
  3376  001D3E  138F               	iorwf	(_ledBlink+15)& (0+255),f,b
  3377  001D40  D00F               	goto	l5994
  3378  001D42                     l5992:
  3379                           
  3380                           ; BSR set to: 0
  3381  001D42  C00E  F009         	movff	LightStatusLed@row,??_LightStatusLed
  3382  001D46  0E01               	movlw	1
  3383  001D48  6E0A               	movwf	(??_LightStatusLed+1)& (0+255),c
  3384  001D4A  2A09               	incf	??_LightStatusLed,f,c
  3385  001D4C  D003               	goto	u5044
  3386  001D4E                     u5045:
  3387  001D4E  FFFF               	dw	65535	; assembler added errata NOP
  3388  001D50  90D8               	bcf	status,0,c
  3389  001D52  360A               	rlcf	??_LightStatusLed+1,f,c
  3390  001D54                     u5044:
  3391  001D54  FFFF               	dw	65535	; assembler added errata NOP
  3392  001D56  2E09               	decfsz	??_LightStatusLed,f,c
  3393  001D58  D7FA               	goto	u5045
  3394  001D5A  1C0A               	comf	??_LightStatusLed+1,w,c
  3395  001D5C  0100               	movlb	0	; () banked
  3396  001D5E  178F               	andwf	(_ledBlink+15)& (0+255),f,b
  3397  001D60                     l5994:
  3398  001D60  FFFF               	dw	65535	; assembler added errata NOP
  3399                           
  3400                           ; BSR set to: 0
  3401                           ;main.c: 378: (on ? ((_MODBUSCoils) |= ((unsigned short)1 << (row))) : ((_MODBUSCoils) &
      +                          = ~((unsigned short)1 << (row))));
  3402  001D62  5007               	movf	LightStatusLed@on,w,c
  3403  001D64  E014               	bz	l5998
  3404                           
  3405                           ; BSR set to: 0
  3406  001D66  C00E  F009         	movff	LightStatusLed@row,??_LightStatusLed
  3407  001D6A  0E01               	movlw	1
  3408  001D6C  6E0A               	movwf	(??_LightStatusLed+1)& (0+255),c
  3409  001D6E  6A0B               	clrf	(??_LightStatusLed+2)& (0+255),c
  3410  001D70  2A09               	incf	??_LightStatusLed,f,c
  3411  001D72  D004               	goto	u5064
  3412  001D74                     u5065:
  3413  001D74  FFFF               	dw	65535	; assembler added errata NOP
  3414  001D76  90D8               	bcf	status,0,c
  3415  001D78  360A               	rlcf	??_LightStatusLed+1,f,c
  3416  001D7A  360B               	rlcf	??_LightStatusLed+2,f,c
  3417  001D7C                     u5064:
  3418  001D7C  FFFF               	dw	65535	; assembler added errata NOP
  3419  001D7E  2E09               	decfsz	??_LightStatusLed,f,c
  3420  001D80  D7F9               	goto	u5065
  3421  001D82  500A               	movf	??_LightStatusLed+1,w,c
  3422  001D84  0100               	movlb	0	; () banked
  3423  001D86  13E8               	iorwf	__MODBUSCoils& (0+255),f,b
  3424  001D88  500B               	movf	??_LightStatusLed+2,w,c
  3425  001D8A  13E9               	iorwf	(__MODBUSCoils+1)& (0+255),f,b
  3426  001D8C  D017               	goto	l289
  3427  001D8E                     l5998:
  3428                           
  3429                           ; BSR set to: 0
  3430  001D8E  C00E  F009         	movff	LightStatusLed@row,??_LightStatusLed
  3431  001D92  0E01               	movlw	1
  3432  001D94  6E0A               	movwf	(??_LightStatusLed+1)& (0+255),c
  3433  001D96  6A0B               	clrf	(??_LightStatusLed+2)& (0+255),c
  3434  001D98  2A09               	incf	??_LightStatusLed,f,c
  3435  001D9A  D004               	goto	u5074
  3436  001D9C                     u5075:
  3437  001D9C  FFFF               	dw	65535	; assembler added errata NOP
  3438  001D9E  90D8               	bcf	status,0,c
  3439  001DA0  360A               	rlcf	??_LightStatusLed+1,f,c
  3440  001DA2  360B               	rlcf	??_LightStatusLed+2,f,c
  3441  001DA4                     u5074:
  3442  001DA4  FFFF               	dw	65535	; assembler added errata NOP
  3443  001DA6  2E09               	decfsz	??_LightStatusLed,f,c
  3444  001DA8  D7F9               	goto	u5075
  3445  001DAA  1C0A               	comf	??_LightStatusLed+1,w,c
  3446  001DAC  6E0C               	movwf	(??_LightStatusLed+3)& (0+255),c
  3447  001DAE  1C0B               	comf	??_LightStatusLed+2,w,c
  3448  001DB0  6E0D               	movwf	(??_LightStatusLed+4)& (0+255),c
  3449  001DB2  500C               	movf	??_LightStatusLed+3,w,c
  3450  001DB4  0100               	movlb	0	; () banked
  3451  001DB6  17E8               	andwf	__MODBUSCoils& (0+255),f,b
  3452  001DB8  500D               	movf	??_LightStatusLed+4,w,c
  3453  001DBA  17E9               	andwf	(__MODBUSCoils+1)& (0+255),f,b
  3454  001DBC                     l289:
  3455  001DBC  FFFF               	dw	65535	; assembler added errata NOP
  3456  001DBE  0012               	return		;funcret
  3457  001DC0  FFFF               	dw	65535	; errata NOP
  3458  001DC2                     __end_of_LightStatusLed:
  3459                           	opt stack 0
  3460                           tblptru	equ	0xFF8
  3461                           tblptrh	equ	0xFF7
  3462                           tblptrl	equ	0xFF6
  3463                           tablat	equ	0xFF5
  3464                           prodl	equ	0xFF3
  3465                           intcon	equ	0xFF2
  3466                           postinc0	equ	0xFEE
  3467                           wreg	equ	0xFE8
  3468                           postdec1	equ	0xFE5
  3469                           fsr1h	equ	0xFE2
  3470                           fsr1l	equ	0xFE1
  3471                           indf2	equ	0xFDF
  3472                           postinc2	equ	0xFDE
  3473                           postdec2	equ	0xFDD
  3474                           fsr2h	equ	0xFDA
  3475                           fsr2l	equ	0xFD9
  3476                           status	equ	0xFD8
  3477                           
  3478 ;; *************** function _Modbus *****************
  3479 ;; Defined at:
  3480 ;;		line 227 in file "ModbusRtu.c"
  3481 ;; Parameters:    Size  Location     Type
  3482 ;;  u8id            1    wreg     unsigned char 
  3483 ;;  u8serno         1   11[COMRAM] unsigned char 
  3484 ;;  u8txenpin       1   12[COMRAM] unsigned char 
  3485 ;; Auto vars:     Size  Location     Type
  3486 ;;  u8id            1   13[COMRAM] unsigned char 
  3487 ;; Return value:  Size  Location     Type
  3488 ;;                  1    wreg      void 
  3489 ;; Registers used:
  3490 ;;		wreg, status,2, status,0, cstack
  3491 ;; Tracked objects:
  3492 ;;		On entry : 0/0
  3493 ;;		On exit  : F/0
  3494 ;;		Unchanged: 0/0
  3495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3496 ;;      Params:         2       0       0       0       0       0       0
  3497 ;;      Locals:         1       0       0       0       0       0       0
  3498 ;;      Temps:          0       0       0       0       0       0       0
  3499 ;;      Totals:         3       0       0       0       0       0       0
  3500 ;;Total ram usage:        3 bytes
  3501 ;; Hardware stack levels used:    1
  3502 ;; Hardware stack levels required when called:    3
  3503 ;; This function calls:
  3504 ;;		_ModbusInit
  3505 ;; This function is called by:
  3506 ;;		_InitFromEeprom
  3507 ;; This function uses a non-reentrant model
  3508 ;;
  3509                           
  3510                           	psect	text16
  3511  002FA2                     __ptext16:
  3512                           	opt stack 0
  3513  002FA2                     _Modbus:
  3514                           	opt stack 25
  3515                           
  3516                           ;incstack = 0
  3517  002FA2  FFFF               	dw	65535
  3518                           
  3519                           ;Modbus@u8id stored from wreg
  3520  002FA4  6E0E               	movwf	Modbus@u8id,c
  3521                           
  3522                           ;ModbusRtu.c: 229: ModbusInit(u8id, u8serno, u8txenpin);
  3523  002FA6  C00C  F007         	movff	Modbus@u8serno,ModbusInit@u8serno
  3524  002FAA  C00D  F008         	movff	Modbus@u8txenpin,ModbusInit@u8txenpin
  3525  002FAE  500E               	movf	Modbus@u8id,w,c
  3526  002FB0  EFB9  F017         	goto	_ModbusInit
  3527                           
  3528                           ; BSR set to: 0
  3529  002FB4  FFFF               	dw	65535	; errata NOP
  3530  002FB6                     __end_of_Modbus:
  3531                           	opt stack 0
  3532                           tblptru	equ	0xFF8
  3533                           tblptrh	equ	0xFF7
  3534                           tblptrl	equ	0xFF6
  3535                           tablat	equ	0xFF5
  3536                           prodl	equ	0xFF3
  3537                           intcon	equ	0xFF2
  3538                           postinc0	equ	0xFEE
  3539                           wreg	equ	0xFE8
  3540                           postdec1	equ	0xFE5
  3541                           fsr1h	equ	0xFE2
  3542                           fsr1l	equ	0xFE1
  3543                           indf2	equ	0xFDF
  3544                           postinc2	equ	0xFDE
  3545                           postdec2	equ	0xFDD
  3546                           fsr2h	equ	0xFDA
  3547                           fsr2l	equ	0xFD9
  3548                           status	equ	0xFD8
  3549                           
  3550 ;; *************** function _ModbusInit *****************
  3551 ;; Defined at:
  3552 ;;		line 567 in file "ModbusRtu.c"
  3553 ;; Parameters:    Size  Location     Type
  3554 ;;  u8id            1    wreg     unsigned char 
  3555 ;;  u8serno         1    6[COMRAM] unsigned char 
  3556 ;;  u8txenpin       1    7[COMRAM] unsigned char 
  3557 ;; Auto vars:     Size  Location     Type
  3558 ;;  u8id            1   10[COMRAM] unsigned char 
  3559 ;; Return value:  Size  Location     Type
  3560 ;;                  1    wreg      void 
  3561 ;; Registers used:
  3562 ;;		wreg, status,2, status,0
  3563 ;; Tracked objects:
  3564 ;;		On entry : 0/0
  3565 ;;		On exit  : F/0
  3566 ;;		Unchanged: 0/0
  3567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3568 ;;      Params:         2       0       0       0       0       0       0
  3569 ;;      Locals:         3       0       0       0       0       0       0
  3570 ;;      Temps:          0       0       0       0       0       0       0
  3571 ;;      Totals:         5       0       0       0       0       0       0
  3572 ;;Total ram usage:        5 bytes
  3573 ;; Hardware stack levels used:    1
  3574 ;; Hardware stack levels required when called:    2
  3575 ;; This function calls:
  3576 ;;		Nothing
  3577 ;; This function is called by:
  3578 ;;		_Modbus
  3579 ;; This function uses a non-reentrant model
  3580 ;;
  3581                           
  3582                           	psect	text17
  3583  002F72                     __ptext17:
  3584                           	opt stack 0
  3585  002F72                     _ModbusInit:
  3586                           	opt stack 25
  3587                           
  3588                           ; BSR set to: 0
  3589                           ;incstack = 0
  3590  002F72  FFFF               	dw	65535
  3591                           
  3592                           ;ModbusInit@u8id stored from wreg
  3593  002F74  6E0B               	movwf	ModbusInit@u8id,c
  3594                           
  3595                           ;ModbusRtu.c: 569: _deviceStatus = 0;
  3596  002F76  0100               	movlb	0	; () banked
  3597  002F78  6BD3               	clrf	__deviceStatus& (0+255),b
  3598                           
  3599                           ; BSR set to: 0
  3600                           ;ModbusRtu.c: 570: _u8id = u8id;
  3601  002F7A  C00B  F0E0         	movff	ModbusInit@u8id,__u8id
  3602                           
  3603                           ; BSR set to: 0
  3604                           ;ModbusRtu.c: 571: _u8serno = (u8serno > 3) ? 0 : u8serno;
  3605  002F7E  0E04               	movlw	4
  3606  002F80  6007               	cpfslt	ModbusInit@u8serno,c
  3607  002F82  D000               	goto	l798
  3608  002F84                     l798:
  3609  002F84  FFFF               	dw	65535	; assembler added errata NOP
  3610                           
  3611                           ; BSR set to: 0
  3612  002F86  0012               	return		;funcret
  3613  002F88  FFFF               	dw	65535	; errata NOP
  3614  002F8A                     __end_of_ModbusInit:
  3615                           	opt stack 0
  3616                           tblptru	equ	0xFF8
  3617                           tblptrh	equ	0xFF7
  3618                           tblptrl	equ	0xFF6
  3619                           tablat	equ	0xFF5
  3620                           prodl	equ	0xFF3
  3621                           intcon	equ	0xFF2
  3622                           postinc0	equ	0xFEE
  3623                           wreg	equ	0xFE8
  3624                           postdec1	equ	0xFE5
  3625                           fsr1h	equ	0xFE2
  3626                           fsr1l	equ	0xFE1
  3627                           indf2	equ	0xFDF
  3628                           postinc2	equ	0xFDE
  3629                           postdec2	equ	0xFDD
  3630                           fsr2h	equ	0xFDA
  3631                           fsr2l	equ	0xFD9
  3632                           status	equ	0xFD8
  3633                           
  3634 ;; *************** function _getHourMin *****************
  3635 ;; Defined at:
  3636 ;;		line 256 in file "interrupts.c"
  3637 ;; Parameters:    Size  Location     Type
  3638 ;;  hour            2    6[COMRAM] PTR unsigned char 
  3639 ;;		 -> main@hour(1), 
  3640 ;;  min             2    8[COMRAM] PTR unsigned char 
  3641 ;;		 -> main@minute(1), 
  3642 ;; Auto vars:     Size  Location     Type
  3643 ;;		None
  3644 ;; Return value:  Size  Location     Type
  3645 ;;                  1    wreg      unsigned char 
  3646 ;; Registers used:
  3647 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3648 ;; Tracked objects:
  3649 ;;		On entry : F/1
  3650 ;;		On exit  : F/1
  3651 ;;		Unchanged: F/0
  3652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3653 ;;      Params:         4       0       0       0       0       0       0
  3654 ;;      Locals:         0       0       0       0       0       0       0
  3655 ;;      Temps:          0       0       0       0       0       0       0
  3656 ;;      Totals:         4       0       0       0       0       0       0
  3657 ;;Total ram usage:        4 bytes
  3658 ;; Hardware stack levels used:    1
  3659 ;; Hardware stack levels required when called:    2
  3660 ;; This function calls:
  3661 ;;		Nothing
  3662 ;; This function is called by:
  3663 ;;		_main
  3664 ;; This function uses a non-reentrant model
  3665 ;;
  3666                           
  3667                           	psect	text18
  3668  002E94                     __ptext18:
  3669                           	opt stack 0
  3670  002E94                     _getHourMin:
  3671                           	opt stack 28
  3672                           
  3673                           ; BSR set to: 0
  3674                           ;incstack = 0
  3675  002E94  FFFF               	dw	65535
  3676                           
  3677                           ; BSR set to: 1
  3678                           ;interrupts.c: 258: if(globalHours == 0xFF)
  3679  002E96  2872               	incf	_globalHours,w,c	;volatile
  3680  002E98  E00E               	bz	l109
  3681                           
  3682                           ; BSR set to: 1
  3683                           ;interrupts.c: 260: (INTCONbits.GIE = 0);
  3684  002E9A  9EF2               	bcf	intcon,7,c	;volatile
  3685                           
  3686                           ; BSR set to: 1
  3687                           ;interrupts.c: 261: *hour = globalHours;
  3688  002E9C  C007  FFD9         	movff	getHourMin@hour,fsr2l
  3689  002EA0  C008  FFDA         	movff	getHourMin@hour+1,fsr2h
  3690  002EA4  C072  FFDF         	movff	_globalHours,indf2	;volatile
  3691                           
  3692                           ;interrupts.c: 262: *min = globalMinutes;
  3693  002EA8  C009  FFD9         	movff	getHourMin@min,fsr2l
  3694  002EAC  C00A  FFDA         	movff	getHourMin@min+1,fsr2h
  3695  002EB0  C071  FFDF         	movff	_globalMinutes,indf2	;volatile
  3696                           
  3697                           ; BSR set to: 1
  3698                           ;interrupts.c: 263: (INTCONbits.GIE = 1);
  3699  002EB4  8EF2               	bsf	intcon,7,c	;volatile
  3700  002EB6                     l109:
  3701                           
  3702                           ; BSR set to: 1
  3703  002EB6  0012               	return		;funcret
  3704  002EB8  FFFF               	dw	65535	; errata NOP
  3705  002EBA                     __end_of_getHourMin:
  3706                           	opt stack 0
  3707                           tblptru	equ	0xFF8
  3708                           tblptrh	equ	0xFF7
  3709                           tblptrl	equ	0xFF6
  3710                           tablat	equ	0xFF5
  3711                           prodl	equ	0xFF3
  3712                           intcon	equ	0xFF2
  3713                           postinc0	equ	0xFEE
  3714                           wreg	equ	0xFE8
  3715                           postdec1	equ	0xFE5
  3716                           fsr1h	equ	0xFE2
  3717                           fsr1l	equ	0xFE1
  3718                           indf2	equ	0xFDF
  3719                           postinc2	equ	0xFDE
  3720                           postdec2	equ	0xFDD
  3721                           fsr2h	equ	0xFDA
  3722                           fsr2l	equ	0xFD9
  3723                           status	equ	0xFD8
  3724                           
  3725 ;; *************** function _SwitchOffAllDiaryLeds *****************
  3726 ;; Defined at:
  3727 ;;		line 364 in file "main.c"
  3728 ;; Parameters:    Size  Location     Type
  3729 ;;		None
  3730 ;; Auto vars:     Size  Location     Type
  3731 ;;  i               1   14[COMRAM] unsigned char 
  3732 ;; Return value:  Size  Location     Type
  3733 ;;                  1    wreg      void 
  3734 ;; Registers used:
  3735 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3736 ;; Tracked objects:
  3737 ;;		On entry : F/1
  3738 ;;		On exit  : 0/0
  3739 ;;		Unchanged: 0/0
  3740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3741 ;;      Params:         0       0       0       0       0       0       0
  3742 ;;      Locals:         1       0       0       0       0       0       0
  3743 ;;      Temps:          0       0       0       0       0       0       0
  3744 ;;      Totals:         1       0       0       0       0       0       0
  3745 ;;Total ram usage:        1 bytes
  3746 ;; Hardware stack levels used:    1
  3747 ;; Hardware stack levels required when called:    3
  3748 ;; This function calls:
  3749 ;;		_LightLed
  3750 ;; This function is called by:
  3751 ;;		_main
  3752 ;; This function uses a non-reentrant model
  3753 ;;
  3754                           
  3755                           	psect	text19
  3756  002E1A                     __ptext19:
  3757                           	opt stack 0
  3758  002E1A                     _SwitchOffAllDiaryLeds:
  3759                           	opt stack 27
  3760                           
  3761                           ; BSR set to: 1
  3762                           ;incstack = 0
  3763  002E1A  FFFF               	dw	65535
  3764                           
  3765                           ; BSR set to: 1
  3766                           ;main.c: 366: for(uint8_t i = 60 - _maxDiaryEvents + 1; i <= 60; i++)
  3767  002E1C  506D               	movf	__maxDiaryEvents,w,c
  3768  002E1E  083D               	sublw	61
  3769  002E20  6E0F               	movwf	SwitchOffAllDiaryLeds@i,c
  3770  002E22  FFFF               	dw	65535	; assembler added errata NOP
  3771  002E24  0E3C               	movlw	60
  3772  002E26  640F               	cpfsgt	SwitchOffAllDiaryLeds@i,c
  3773  002E28  D001               	goto	l7238
  3774  002E2A  D009               	goto	l285
  3775  002E2C                     l7238:
  3776  002E2C  FFFF               	dw	65535	; assembler added errata NOP
  3777                           
  3778                           ;main.c: 367: {
  3779                           ;main.c: 368: LightLed(i, LED_OFF, 0);
  3780  002E2E  0E00               	movlw	0
  3781  002E30  6E07               	movwf	LightLed@ledState,c
  3782  002E32  6E08               	movwf	LightLed@blink,c
  3783  002E34  500F               	movf	SwitchOffAllDiaryLeds@i,w,c
  3784  002E36  ECB5  F004         	call	_LightLed
  3785  002E3A  2A0F               	incf	SwitchOffAllDiaryLeds@i,f,c
  3786  002E3C  D7F2               	goto	L1
  3787  002E3E                     l285:
  3788  002E3E  FFFF               	dw	65535	; assembler added errata NOP
  3789  002E40  0012               	return		;funcret
  3790  002E42  FFFF               	dw	65535	; errata NOP
  3791  002E44                     __end_of_SwitchOffAllDiaryLeds:
  3792                           	opt stack 0
  3793                           tblptru	equ	0xFF8
  3794                           tblptrh	equ	0xFF7
  3795                           tblptrl	equ	0xFF6
  3796                           tablat	equ	0xFF5
  3797                           prodl	equ	0xFF3
  3798                           intcon	equ	0xFF2
  3799                           postinc0	equ	0xFEE
  3800                           wreg	equ	0xFE8
  3801                           postdec1	equ	0xFE5
  3802                           fsr1h	equ	0xFE2
  3803                           fsr1l	equ	0xFE1
  3804                           indf2	equ	0xFDF
  3805                           postinc2	equ	0xFDE
  3806                           postdec2	equ	0xFDD
  3807                           fsr2h	equ	0xFDA
  3808                           fsr2l	equ	0xFD9
  3809                           status	equ	0xFD8
  3810                           
  3811 ;; *************** function _ResetEventFromCommand *****************
  3812 ;; Defined at:
  3813 ;;		line 688 in file "main.c"
  3814 ;; Parameters:    Size  Location     Type
  3815 ;;  state           1    wreg     unsigned char 
  3816 ;; Auto vars:     Size  Location     Type
  3817 ;;  state           1   14[COMRAM] unsigned char 
  3818 ;; Return value:  Size  Location     Type
  3819 ;;                  1    wreg      void 
  3820 ;; Registers used:
  3821 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3822 ;; Tracked objects:
  3823 ;;		On entry : F/0
  3824 ;;		On exit  : F/0
  3825 ;;		Unchanged: 0/0
  3826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3827 ;;      Params:         0       0       0       0       0       0       0
  3828 ;;      Locals:         3       0       0       0       0       0       0
  3829 ;;      Temps:          0       0       0       0       0       0       0
  3830 ;;      Totals:         3       0       0       0       0       0       0
  3831 ;;Total ram usage:        3 bytes
  3832 ;; Hardware stack levels used:    1
  3833 ;; Hardware stack levels required when called:    3
  3834 ;; This function calls:
  3835 ;;		_LightLed
  3836 ;;		_StopPlaying
  3837 ;; This function is called by:
  3838 ;;		_main
  3839 ;; This function uses a non-reentrant model
  3840 ;;
  3841                           
  3842                           	psect	text20
  3843  002C1A                     __ptext20:
  3844                           	opt stack 0
  3845  002C1A                     _ResetEventFromCommand:
  3846                           	opt stack 27
  3847                           
  3848                           ;incstack = 0
  3849  002C1A  FFFF               	dw	65535
  3850                           
  3851                           ;ResetEventFromCommand@state stored from wreg
  3852  002C1C  6E0F               	movwf	ResetEventFromCommand@state,c
  3853                           
  3854                           ;main.c: 690: if(!_eventFromCommand.IsFire)
  3855  002C1E  0100               	movlb	0	; () banked
  3856  002C20  51A9               	movf	__eventFromCommand& (0+255),w,b
  3857  002C22  E01A               	bz	l411
  3858                           
  3859                           ; BSR set to: 0
  3860                           ;main.c: 692: LightLed(_eventFromCommand.LedNum, state ? LED_GREEN : LED_RED, 0);
  3861  002C24  500F               	movf	ResetEventFromCommand@state,w,c
  3862  002C26  E104               	bnz	l7448
  3863                           
  3864                           ; BSR set to: 0
  3865  002C28  0E00               	movlw	0
  3866  002C2A  6E11               	movwf	_ResetEventFromCommand$912+1,c
  3867  002C2C  0E02               	movlw	2
  3868  002C2E  D003               	goto	L2
  3869  002C30                     l7448:
  3870                           
  3871                           ; BSR set to: 0
  3872  002C30  0E00               	movlw	0
  3873  002C32  6E11               	movwf	_ResetEventFromCommand$912+1,c
  3874  002C34  0E01               	movlw	1
  3875  002C36                     L2:
  3876  002C36  FFFF               	dw	65535	; assembler added errata NOP
  3877  002C38  6E10               	movwf	_ResetEventFromCommand$912,c
  3878                           
  3879                           ; BSR set to: 0
  3880  002C3A  C010  F007         	movff	_ResetEventFromCommand$912,LightLed@ledState
  3881  002C3E  0E00               	movlw	0
  3882  002C40  6E08               	movwf	LightLed@blink,c
  3883  002C42  51AA               	movf	(__eventFromCommand+1)& (0+255),w,b
  3884  002C44  ECB5  F004         	call	_LightLed
  3885                           
  3886                           ;main.c: 693: _eventFromCommand.IsFire = 0;
  3887  002C48  0100               	movlb	0	; () banked
  3888  002C4A  6BA9               	clrf	__eventFromCommand& (0+255),b
  3889                           
  3890                           ; BSR set to: 0
  3891                           ;main.c: 694: _eventFromCommand.ResetSecond = 0;
  3892  002C4C  6BAB               	clrf	(__eventFromCommand+2)& (0+255),b
  3893  002C4E  6BAC               	clrf	(__eventFromCommand+3)& (0+255),b
  3894  002C50  6BAD               	clrf	(__eventFromCommand+4)& (0+255),b
  3895  002C52  6BAE               	clrf	(__eventFromCommand+5)& (0+255),b
  3896                           
  3897                           ; BSR set to: 0
  3898                           ;main.c: 695: StopPlaying();
  3899  002C54  ECED  F017         	call	_StopPlaying	;wreg free
  3900  002C58                     l411:
  3901                           
  3902                           ; BSR set to: 0
  3903  002C58  0012               	return		;funcret
  3904  002C5A  FFFF               	dw	65535	; errata NOP
  3905  002C5C                     __end_of_ResetEventFromCommand:
  3906                           	opt stack 0
  3907                           tblptru	equ	0xFF8
  3908                           tblptrh	equ	0xFF7
  3909                           tblptrl	equ	0xFF6
  3910                           tablat	equ	0xFF5
  3911                           prodl	equ	0xFF3
  3912                           intcon	equ	0xFF2
  3913                           postinc0	equ	0xFEE
  3914                           wreg	equ	0xFE8
  3915                           postdec1	equ	0xFE5
  3916                           fsr1h	equ	0xFE2
  3917                           fsr1l	equ	0xFE1
  3918                           indf2	equ	0xFDF
  3919                           postinc2	equ	0xFDE
  3920                           postdec2	equ	0xFDD
  3921                           fsr2h	equ	0xFDA
  3922                           fsr2l	equ	0xFD9
  3923                           status	equ	0xFD8
  3924                           
  3925 ;; *************** function _ResetEvent *****************
  3926 ;; Defined at:
  3927 ;;		line 674 in file "main.c"
  3928 ;; Parameters:    Size  Location     Type
  3929 ;;  state           1    wreg     unsigned char 
  3930 ;; Auto vars:     Size  Location     Type
  3931 ;;  state           1   16[COMRAM] unsigned char 
  3932 ;; Return value:  Size  Location     Type
  3933 ;;                  1    wreg      void 
  3934 ;; Registers used:
  3935 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3936 ;; Tracked objects:
  3937 ;;		On entry : F/0
  3938 ;;		On exit  : E/0
  3939 ;;		Unchanged: 0/0
  3940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3941 ;;      Params:         0       0       0       0       0       0       0
  3942 ;;      Locals:         3       0       0       0       0       0       0
  3943 ;;      Temps:          2       0       0       0       0       0       0
  3944 ;;      Totals:         5       0       0       0       0       0       0
  3945 ;;Total ram usage:        5 bytes
  3946 ;; Hardware stack levels used:    1
  3947 ;; Hardware stack levels required when called:    3
  3948 ;; This function calls:
  3949 ;;		_GetCurrentEventDiodeNum
  3950 ;;		_LightLed
  3951 ;;		_StopPlaying
  3952 ;; This function is called by:
  3953 ;;		_main
  3954 ;; This function uses a non-reentrant model
  3955 ;;
  3956                           
  3957                           	psect	text21
  3958  0029CE                     __ptext21:
  3959                           	opt stack 0
  3960  0029CE                     _ResetEvent:
  3961                           	opt stack 27
  3962                           
  3963                           ; BSR set to: 0
  3964                           ;incstack = 0
  3965  0029CE  FFFF               	dw	65535
  3966                           
  3967                           ;ResetEvent@state stored from wreg
  3968  0029D0  6E11               	movwf	ResetEvent@state,c
  3969                           
  3970                           ;main.c: 676: if(!_currenDiaryEvent.IsFire)
  3971  0029D2  0100               	movlb	0	; () banked
  3972  0029D4  51A0               	movf	__currenDiaryEvent& (0+255),w,b
  3973  0029D6  E020               	bz	l403
  3974                           
  3975                           ; BSR set to: 0
  3976                           ;main.c: 678: LightLed(GetCurrentEventDiodeNum(), state ? LED_GREEN : LED_RED, 0);
  3977  0029D8  5011               	movf	ResetEvent@state,w,c
  3978  0029DA  E103               	bnz	l7426
  3979                           
  3980                           ; BSR set to: 0
  3981  0029DC  6A13               	clrf	_ResetEvent$909+1,c
  3982  0029DE  0E02               	movlw	2
  3983  0029E0  D002               	goto	L3
  3984  0029E2                     l7426:
  3985                           
  3986                           ; BSR set to: 0
  3987  0029E2  6A13               	clrf	_ResetEvent$909+1,c
  3988  0029E4  0E01               	movlw	1
  3989  0029E6                     L3:
  3990  0029E6  FFFF               	dw	65535	; assembler added errata NOP
  3991  0029E8  6E12               	movwf	_ResetEvent$909,c
  3992                           
  3993                           ; BSR set to: 0
  3994  0029EA  C012  F007         	movff	_ResetEvent$909,LightLed@ledState
  3995  0029EE  6A08               	clrf	LightLed@blink,c
  3996  0029F0  EC02  F018         	call	_GetCurrentEventDiodeNum	;wreg free
  3997  0029F4  ECB5  F004         	call	_LightLed
  3998                           
  3999                           ;main.c: 679: _currenDiaryEvent.IsFire = 0;
  4000  0029F8  0100               	movlb	0	; () banked
  4001  0029FA  6BA0               	clrf	__currenDiaryEvent& (0+255),b
  4002                           
  4003                           ; BSR set to: 0
  4004                           ;main.c: 680: _currenDiaryEvent.FiredEventNum = 0xff;
  4005  0029FC  69A1               	setf	(__currenDiaryEvent+1)& (0+255),b
  4006                           
  4007                           ; BSR set to: 0
  4008                           ;main.c: 681: _currenDiaryEvent.ResetSecond = 0;
  4009  0029FE  6BA4               	clrf	(__currenDiaryEvent+4)& (0+255),b
  4010  002A00  6BA5               	clrf	(__currenDiaryEvent+5)& (0+255),b
  4011  002A02  6BA6               	clrf	(__currenDiaryEvent+6)& (0+255),b
  4012  002A04  6BA7               	clrf	(__currenDiaryEvent+7)& (0+255),b
  4013                           
  4014                           ; BSR set to: 0
  4015                           ;main.c: 682: StopPlaying();
  4016  002A06  ECED  F017         	call	_StopPlaying	;wreg free
  4017                           
  4018                           ; BSR set to: 0
  4019                           ;main.c: 683: _MODBUSInputRegs[2] = (((uint16_t)_currenDiaryEvent.FiredEventNum<<8)|_cur
      +                          renDiaryEvent.NextEventNum);
  4020  002A0A  51A1               	movf	(__currenDiaryEvent+1)& (0+255),w,b
  4021  002A0C  6E0F               	movwf	??_ResetEvent& (0+255),c
  4022  002A0E  51A8               	movf	(__currenDiaryEvent+8)& (0+255),w,b
  4023  002A10  0101               	movlb	1	; () banked
  4024  002A12  6FAE               	movwf	(__MODBUSInputRegs+4)& (0+255),b
  4025  002A14  C00F  F1AF         	movff	??_ResetEvent,__MODBUSInputRegs+5
  4026  002A18                     l403:
  4027  002A18  0012               	return		;funcret
  4028  002A1A  FFFF               	dw	65535	; errata NOP
  4029  002A1C                     __end_of_ResetEvent:
  4030                           	opt stack 0
  4031                           tblptru	equ	0xFF8
  4032                           tblptrh	equ	0xFF7
  4033                           tblptrl	equ	0xFF6
  4034                           tablat	equ	0xFF5
  4035                           prodl	equ	0xFF3
  4036                           intcon	equ	0xFF2
  4037                           postinc0	equ	0xFEE
  4038                           wreg	equ	0xFE8
  4039                           postdec1	equ	0xFE5
  4040                           fsr1h	equ	0xFE2
  4041                           fsr1l	equ	0xFE1
  4042                           indf2	equ	0xFDF
  4043                           postinc2	equ	0xFDE
  4044                           postdec2	equ	0xFDD
  4045                           fsr2h	equ	0xFDA
  4046                           fsr2l	equ	0xFD9
  4047                           status	equ	0xFD8
  4048                           
  4049 ;; *************** function _ProcessLightBlock *****************
  4050 ;; Defined at:
  4051 ;;		line 519 in file "main.c"
  4052 ;; Parameters:    Size  Location     Type
  4053 ;;  curMs           2    7[COMRAM] PTR unsigned long 
  4054 ;;		 -> main@curMs(4), 
  4055 ;; Auto vars:     Size  Location     Type
  4056 ;;		None
  4057 ;; Return value:  Size  Location     Type
  4058 ;;                  1    wreg      void 
  4059 ;; Registers used:
  4060 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4061 ;; Tracked objects:
  4062 ;;		On entry : 0/1
  4063 ;;		On exit  : F/0
  4064 ;;		Unchanged: 0/0
  4065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4066 ;;      Params:         2       0       0       0       0       0       0
  4067 ;;      Locals:         0       0       0       0       0       0       0
  4068 ;;      Temps:          4       0       0       0       0       0       0
  4069 ;;      Totals:         6       0       0       0       0       0       0
  4070 ;;Total ram usage:        6 bytes
  4071 ;; Hardware stack levels used:    1
  4072 ;; Hardware stack levels required when called:    3
  4073 ;; This function calls:
  4074 ;;		_UpdateLedRegister
  4075 ;; This function is called by:
  4076 ;;		_main
  4077 ;; This function uses a non-reentrant model
  4078 ;;
  4079                           
  4080                           	psect	text22
  4081  000EDA                     __ptext22:
  4082                           	opt stack 0
  4083  000EDA                     _ProcessLightBlock:
  4084                           	opt stack 27
  4085                           
  4086                           ;incstack = 0
  4087  000EDA  FFFF               	dw	65535
  4088                           
  4089                           ;main.c: 521: diffTime = *curMs - oldBlinkOnTime;
  4090  000EDC  C008  FFD9         	movff	ProcessLightBlock@curMs,fsr2l
  4091  000EE0  C009  FFDA         	movff	ProcessLightBlock@curMs+1,fsr2h
  4092  000EE4  CFDE F00A          	movff	postinc2,??_ProcessLightBlock
  4093  000EE8  CFDE F00B          	movff	postinc2,??_ProcessLightBlock+1
  4094  000EEC  CFDE F00C          	movff	postinc2,??_ProcessLightBlock+2
  4095  000EF0  CFDE F00D          	movff	postinc2,??_ProcessLightBlock+3
  4096  000EF4  0100               	movlb	0	; () banked
  4097  000EF6  51BF               	movf	_oldBlinkOnTime& (0+255),w,b
  4098  000EF8  5C0A               	subwf	??_ProcessLightBlock,w,c
  4099  000EFA  6FB7               	movwf	_diffTime& (0+255),b
  4100  000EFC  51C0               	movf	(_oldBlinkOnTime+1)& (0+255),w,b
  4101  000EFE  580B               	subwfb	??_ProcessLightBlock+1,w,c
  4102  000F00  6FB8               	movwf	(_diffTime+1)& (0+255),b
  4103  000F02  51C1               	movf	(_oldBlinkOnTime+2)& (0+255),w,b
  4104  000F04  580C               	subwfb	??_ProcessLightBlock+2,w,c
  4105  000F06  6FB9               	movwf	(_diffTime+2)& (0+255),b
  4106  000F08  51C2               	movf	(_oldBlinkOnTime+3)& (0+255),w,b
  4107  000F0A  580D               	subwfb	??_ProcessLightBlock+3,w,c
  4108  000F0C  6FBA               	movwf	(_diffTime+3)& (0+255),b
  4109                           
  4110                           ; BSR set to: 0
  4111                           ;main.c: 522: if(diffTime > 576)
  4112  000F0E  51BA               	movf	(_diffTime+3)& (0+255),w,b
  4113  000F10  11B9               	iorwf	(_diffTime+2)& (0+255),w,b
  4114  000F12  E105               	bnz	u6870
  4115  000F14  0E41               	movlw	65
  4116  000F16  5DB7               	subwf	_diffTime& (0+255),w,b
  4117  000F18  0E02               	movlw	2
  4118  000F1A  59B8               	subwfb	(_diffTime+1)& (0+255),w,b
  4119  000F1C  E30F               	bnc	l7978
  4120  000F1E                     u6870:
  4121                           
  4122                           ; BSR set to: 0
  4123                           ;main.c: 523: {
  4124                           ;main.c: 524: blinkOn = 1;
  4125  000F1E  0E01               	movlw	1
  4126  000F20  6E6F               	movwf	_blinkOn,c
  4127                           
  4128                           ; BSR set to: 0
  4129                           ;main.c: 525: oldBlinkOnTime = *curMs;
  4130  000F22  C008  FFD9         	movff	ProcessLightBlock@curMs,fsr2l
  4131  000F26  C009  FFDA         	movff	ProcessLightBlock@curMs+1,fsr2h
  4132  000F2A  CFDE F0BF          	movff	postinc2,_oldBlinkOnTime
  4133  000F2E  CFDE F0C0          	movff	postinc2,_oldBlinkOnTime+1
  4134  000F32  CFDE F0C1          	movff	postinc2,_oldBlinkOnTime+2
  4135  000F36  CFDE F0C2          	movff	postinc2,_oldBlinkOnTime+3
  4136                           
  4137                           ;main.c: 526: }
  4138  000F3A  D0EA               	goto	l8130
  4139  000F3C                     l7978:
  4140                           
  4141                           ; BSR set to: 0
  4142                           ;main.c: 527: else if(blinkOn && diffTime > 384)
  4143  000F3C  506F               	movf	_blinkOn,w,c
  4144  000F3E  E101 D0E7          	bz	l8130
  4145                           
  4146                           ; BSR set to: 0
  4147  000F42  51BA               	movf	(_diffTime+3)& (0+255),w,b
  4148  000F44  11B9               	iorwf	(_diffTime+2)& (0+255),w,b
  4149  000F46  E106               	bnz	u6890
  4150  000F48  0E81               	movlw	129
  4151  000F4A  5DB7               	subwf	_diffTime& (0+255),w,b
  4152  000F4C  0E01               	movlw	1
  4153  000F4E  59B8               	subwfb	(_diffTime+1)& (0+255),w,b
  4154  000F50  E201 D0DE          	bnc	l8130
  4155  000F54                     u6890:
  4156                           
  4157                           ; BSR set to: 0
  4158                           ;main.c: 528: {
  4159                           ;main.c: 529: blinkOn = 0;
  4160  000F54  6A6F               	clrf	_blinkOn,c
  4161  000F56  D0DC               	goto	l8130
  4162  000F58                     l7984:
  4163                           
  4164                           ; BSR set to: 0
  4165                           ;main.c: 537: LATA &= 0xF0;
  4166  000F58  0EF0               	movlw	240
  4167  000F5A  1689               	andwf	3977,f,c	;volatile
  4168                           
  4169                           ; BSR set to: 0
  4170                           ;main.c: 538: if(blinkOn) LATB = ledStatuses[0]; else LATB = ledStatuses[0] ^ ledBlink[0
      +                          ]; UpdateLedRegister(0);
  4171  000F5C  506F               	movf	_blinkOn,w,c
  4172  000F5E  E003               	bz	l7990
  4173                           
  4174                           ; BSR set to: 0
  4175  000F60  C090  FF8A         	movff	_ledStatuses,3978	;volatile
  4176  000F64  D003               	goto	l7992
  4177  000F66                     l7990:
  4178                           
  4179                           ; BSR set to: 0
  4180  000F66  5190               	movf	_ledStatuses& (0+255),w,b
  4181  000F68  1980               	xorwf	_ledBlink& (0+255),w,b
  4182  000F6A  6E8A               	movwf	3978,c	;volatile
  4183  000F6C                     l7992:
  4184  000F6C  FFFF               	dw	65535	; assembler added errata NOP
  4185                           
  4186                           ; BSR set to: 0
  4187  000F6E  0E00               	movlw	0
  4188  000F70  ECA4  F015         	call	_UpdateLedRegister
  4189                           
  4190                           ;main.c: 539: if(blinkOn) LATB = ledStatuses[1]; else LATB = ledStatuses[1] ^ ledBlink[1
      +                          ]; UpdateLedRegister(1);
  4191  000F74  506F               	movf	_blinkOn,w,c
  4192  000F76  E003               	bz	l7998
  4193  000F78  C091  FF8A         	movff	_ledStatuses+1,3978	;volatile
  4194  000F7C  D004               	goto	l8000
  4195  000F7E                     l7998:
  4196  000F7E  0100               	movlb	0	; () banked
  4197  000F80  5191               	movf	(_ledStatuses+1)& (0+255),w,b
  4198  000F82  1981               	xorwf	(_ledBlink+1)& (0+255),w,b
  4199  000F84  6E8A               	movwf	3978,c	;volatile
  4200  000F86                     l8000:
  4201  000F86  FFFF               	dw	65535	; assembler added errata NOP
  4202  000F88  0E01               	movlw	1
  4203  000F8A  ECA4  F015         	call	_UpdateLedRegister
  4204                           
  4205                           ;main.c: 540: if(blinkOn) LATB = ledStatuses[2]; else LATB = ledStatuses[2] ^ ledBlink[2
      +                          ]; UpdateLedRegister(2);
  4206  000F8E  506F               	movf	_blinkOn,w,c
  4207  000F90  E003               	bz	l8006
  4208  000F92  C092  FF8A         	movff	_ledStatuses+2,3978	;volatile
  4209  000F96  D004               	goto	l8008
  4210  000F98                     l8006:
  4211  000F98  0100               	movlb	0	; () banked
  4212  000F9A  5192               	movf	(_ledStatuses+2)& (0+255),w,b
  4213  000F9C  1982               	xorwf	(_ledBlink+2)& (0+255),w,b
  4214  000F9E  6E8A               	movwf	3978,c	;volatile
  4215  000FA0                     l8008:
  4216  000FA0  FFFF               	dw	65535	; assembler added errata NOP
  4217  000FA2  0E02               	movlw	2
  4218  000FA4  ECA4  F015         	call	_UpdateLedRegister
  4219                           
  4220                           ;main.c: 541: if(blinkOn) LATB = ledStatuses[12]; else LATB = ledStatuses[12] ^ ledBlink
      +                          [12]; UpdateLedRegister(3);
  4221  000FA8  506F               	movf	_blinkOn,w,c
  4222  000FAA  E003               	bz	l8014
  4223  000FAC  C09C  FF8A         	movff	_ledStatuses+12,3978	;volatile
  4224  000FB0  D004               	goto	l8016
  4225  000FB2                     l8014:
  4226  000FB2  0100               	movlb	0	; () banked
  4227  000FB4  519C               	movf	(_ledStatuses+12)& (0+255),w,b
  4228  000FB6  198C               	xorwf	(_ledBlink+12)& (0+255),w,b
  4229  000FB8  6E8A               	movwf	3978,c	;volatile
  4230  000FBA                     l8016:
  4231  000FBA  FFFF               	dw	65535	; assembler added errata NOP
  4232  000FBC  0E03               	movlw	3
  4233  000FBE  ECA4  F015         	call	_UpdateLedRegister
  4234                           
  4235                           ;main.c: 542: LATAbits.LATA0 = 1;
  4236  000FC2  8089               	bsf	3977,0,c	;volatile
  4237                           
  4238                           ;main.c: 543: break;
  4239  000FC4  D0B0               	goto	l8132
  4240  000FC6                     l8020:
  4241                           
  4242                           ; BSR set to: 0
  4243                           ;main.c: 545: LATA &= 0xF0;
  4244  000FC6  0EF0               	movlw	240
  4245  000FC8  1689               	andwf	3977,f,c	;volatile
  4246                           
  4247                           ; BSR set to: 0
  4248                           ;main.c: 546: if(blinkOn) LATB = ledStatuses[3]; else LATB = ledStatuses[3] ^ ledBlink[3
      +                          ]; UpdateLedRegister(0);
  4249  000FCA  506F               	movf	_blinkOn,w,c
  4250  000FCC  E003               	bz	l8026
  4251                           
  4252                           ; BSR set to: 0
  4253  000FCE  C093  FF8A         	movff	_ledStatuses+3,3978	;volatile
  4254  000FD2  D003               	goto	l8028
  4255  000FD4                     l8026:
  4256                           
  4257                           ; BSR set to: 0
  4258  000FD4  5193               	movf	(_ledStatuses+3)& (0+255),w,b
  4259  000FD6  1983               	xorwf	(_ledBlink+3)& (0+255),w,b
  4260  000FD8  6E8A               	movwf	3978,c	;volatile
  4261  000FDA                     l8028:
  4262  000FDA  FFFF               	dw	65535	; assembler added errata NOP
  4263                           
  4264                           ; BSR set to: 0
  4265  000FDC  0E00               	movlw	0
  4266  000FDE  ECA4  F015         	call	_UpdateLedRegister
  4267                           
  4268                           ;main.c: 547: if(blinkOn) LATB = ledStatuses[4]; else LATB = ledStatuses[4] ^ ledBlink[4
      +                          ]; UpdateLedRegister(1);
  4269  000FE2  506F               	movf	_blinkOn,w,c
  4270  000FE4  E003               	bz	l8034
  4271  000FE6  C094  FF8A         	movff	_ledStatuses+4,3978	;volatile
  4272  000FEA  D004               	goto	l8036
  4273  000FEC                     l8034:
  4274  000FEC  0100               	movlb	0	; () banked
  4275  000FEE  5194               	movf	(_ledStatuses+4)& (0+255),w,b
  4276  000FF0  1984               	xorwf	(_ledBlink+4)& (0+255),w,b
  4277  000FF2  6E8A               	movwf	3978,c	;volatile
  4278  000FF4                     l8036:
  4279  000FF4  FFFF               	dw	65535	; assembler added errata NOP
  4280  000FF6  0E01               	movlw	1
  4281  000FF8  ECA4  F015         	call	_UpdateLedRegister
  4282                           
  4283                           ;main.c: 548: if(blinkOn) LATB = ledStatuses[5]; else LATB = ledStatuses[5] ^ ledBlink[5
      +                          ]; UpdateLedRegister(2);
  4284  000FFC  506F               	movf	_blinkOn,w,c
  4285  000FFE  E003               	bz	l8042
  4286  001000  C095  FF8A         	movff	_ledStatuses+5,3978	;volatile
  4287  001004  D004               	goto	l8044
  4288  001006                     l8042:
  4289  001006  0100               	movlb	0	; () banked
  4290  001008  5195               	movf	(_ledStatuses+5)& (0+255),w,b
  4291  00100A  1985               	xorwf	(_ledBlink+5)& (0+255),w,b
  4292  00100C  6E8A               	movwf	3978,c	;volatile
  4293  00100E                     l8044:
  4294  00100E  FFFF               	dw	65535	; assembler added errata NOP
  4295  001010  0E02               	movlw	2
  4296  001012  ECA4  F015         	call	_UpdateLedRegister
  4297                           
  4298                           ;main.c: 549: if(blinkOn) LATB = ledStatuses[13]; else LATB = ledStatuses[13] ^ ledBlink
      +                          [13]; UpdateLedRegister(3);
  4299  001016  506F               	movf	_blinkOn,w,c
  4300  001018  E003               	bz	l8050
  4301  00101A  C09D  FF8A         	movff	_ledStatuses+13,3978	;volatile
  4302  00101E  D004               	goto	l8052
  4303  001020                     l8050:
  4304  001020  0100               	movlb	0	; () banked
  4305  001022  519D               	movf	(_ledStatuses+13)& (0+255),w,b
  4306  001024  198D               	xorwf	(_ledBlink+13)& (0+255),w,b
  4307  001026  6E8A               	movwf	3978,c	;volatile
  4308  001028                     l8052:
  4309  001028  FFFF               	dw	65535	; assembler added errata NOP
  4310  00102A  0E03               	movlw	3
  4311  00102C  ECA4  F015         	call	_UpdateLedRegister
  4312                           
  4313                           ;main.c: 550: LATAbits.LATA1 = 1;
  4314  001030  8289               	bsf	3977,1,c	;volatile
  4315                           
  4316                           ;main.c: 551: break;
  4317  001032  D079               	goto	l8132
  4318  001034                     l8056:
  4319                           
  4320                           ; BSR set to: 0
  4321                           ;main.c: 553: LATA &= 0xF0;
  4322  001034  0EF0               	movlw	240
  4323  001036  1689               	andwf	3977,f,c	;volatile
  4324                           
  4325                           ; BSR set to: 0
  4326                           ;main.c: 554: if(blinkOn) LATB = ledStatuses[6]; else LATB = ledStatuses[6] ^ ledBlink[6
      +                          ]; UpdateLedRegister(0);
  4327  001038  506F               	movf	_blinkOn,w,c
  4328  00103A  E003               	bz	l8062
  4329                           
  4330                           ; BSR set to: 0
  4331  00103C  C096  FF8A         	movff	_ledStatuses+6,3978	;volatile
  4332  001040  D003               	goto	l8064
  4333  001042                     l8062:
  4334                           
  4335                           ; BSR set to: 0
  4336  001042  5196               	movf	(_ledStatuses+6)& (0+255),w,b
  4337  001044  1986               	xorwf	(_ledBlink+6)& (0+255),w,b
  4338  001046  6E8A               	movwf	3978,c	;volatile
  4339  001048                     l8064:
  4340  001048  FFFF               	dw	65535	; assembler added errata NOP
  4341                           
  4342                           ; BSR set to: 0
  4343  00104A  0E00               	movlw	0
  4344  00104C  ECA4  F015         	call	_UpdateLedRegister
  4345                           
  4346                           ;main.c: 555: if(blinkOn) LATB = ledStatuses[7]; else LATB = ledStatuses[7] ^ ledBlink[7
      +                          ]; UpdateLedRegister(1);
  4347  001050  506F               	movf	_blinkOn,w,c
  4348  001052  E003               	bz	l8070
  4349  001054  C097  FF8A         	movff	_ledStatuses+7,3978	;volatile
  4350  001058  D004               	goto	l8072
  4351  00105A                     l8070:
  4352  00105A  0100               	movlb	0	; () banked
  4353  00105C  5197               	movf	(_ledStatuses+7)& (0+255),w,b
  4354  00105E  1987               	xorwf	(_ledBlink+7)& (0+255),w,b
  4355  001060  6E8A               	movwf	3978,c	;volatile
  4356  001062                     l8072:
  4357  001062  FFFF               	dw	65535	; assembler added errata NOP
  4358  001064  0E01               	movlw	1
  4359  001066  ECA4  F015         	call	_UpdateLedRegister
  4360                           
  4361                           ;main.c: 556: if(blinkOn) LATB = ledStatuses[8]; else LATB = ledStatuses[8] ^ ledBlink[8
      +                          ]; UpdateLedRegister(2);
  4362  00106A  506F               	movf	_blinkOn,w,c
  4363  00106C  E003               	bz	l8078
  4364  00106E  C098  FF8A         	movff	_ledStatuses+8,3978	;volatile
  4365  001072  D004               	goto	l8080
  4366  001074                     l8078:
  4367  001074  0100               	movlb	0	; () banked
  4368  001076  5198               	movf	(_ledStatuses+8)& (0+255),w,b
  4369  001078  1988               	xorwf	(_ledBlink+8)& (0+255),w,b
  4370  00107A  6E8A               	movwf	3978,c	;volatile
  4371  00107C                     l8080:
  4372  00107C  FFFF               	dw	65535	; assembler added errata NOP
  4373  00107E  0E02               	movlw	2
  4374  001080  ECA4  F015         	call	_UpdateLedRegister
  4375                           
  4376                           ;main.c: 557: if(blinkOn) LATB = ledStatuses[14]; else LATB = ledStatuses[14] ^ ledBlink
      +                          [14]; UpdateLedRegister(3);
  4377  001084  506F               	movf	_blinkOn,w,c
  4378  001086  E003               	bz	l8086
  4379  001088  C09E  FF8A         	movff	_ledStatuses+14,3978	;volatile
  4380  00108C  D004               	goto	l8088
  4381  00108E                     l8086:
  4382  00108E  0100               	movlb	0	; () banked
  4383  001090  519E               	movf	(_ledStatuses+14)& (0+255),w,b
  4384  001092  198E               	xorwf	(_ledBlink+14)& (0+255),w,b
  4385  001094  6E8A               	movwf	3978,c	;volatile
  4386  001096                     l8088:
  4387  001096  FFFF               	dw	65535	; assembler added errata NOP
  4388  001098  0E03               	movlw	3
  4389  00109A  ECA4  F015         	call	_UpdateLedRegister
  4390                           
  4391                           ;main.c: 558: LATAbits.LATA2 = 1;
  4392  00109E  8489               	bsf	3977,2,c	;volatile
  4393                           
  4394                           ;main.c: 559: break;
  4395  0010A0  D042               	goto	l8132
  4396  0010A2                     l8092:
  4397                           
  4398                           ; BSR set to: 0
  4399                           ;main.c: 561: LATA &= 0xF0;
  4400  0010A2  0EF0               	movlw	240
  4401  0010A4  1689               	andwf	3977,f,c	;volatile
  4402                           
  4403                           ; BSR set to: 0
  4404                           ;main.c: 562: if(blinkOn) LATB = ledStatuses[9]; else LATB = ledStatuses[9] ^ ledBlink[9
      +                          ]; UpdateLedRegister(0);
  4405  0010A6  506F               	movf	_blinkOn,w,c
  4406  0010A8  E003               	bz	l8098
  4407                           
  4408                           ; BSR set to: 0
  4409  0010AA  C099  FF8A         	movff	_ledStatuses+9,3978	;volatile
  4410  0010AE  D003               	goto	l8100
  4411  0010B0                     l8098:
  4412                           
  4413                           ; BSR set to: 0
  4414  0010B0  5199               	movf	(_ledStatuses+9)& (0+255),w,b
  4415  0010B2  1989               	xorwf	(_ledBlink+9)& (0+255),w,b
  4416  0010B4  6E8A               	movwf	3978,c	;volatile
  4417  0010B6                     l8100:
  4418  0010B6  FFFF               	dw	65535	; assembler added errata NOP
  4419                           
  4420                           ; BSR set to: 0
  4421  0010B8  0E00               	movlw	0
  4422  0010BA  ECA4  F015         	call	_UpdateLedRegister
  4423                           
  4424                           ;main.c: 563: if(blinkOn) LATB = ledStatuses[10]; else LATB = ledStatuses[10] ^ ledBlink
      +                          [10]; UpdateLedRegister(1);
  4425  0010BE  506F               	movf	_blinkOn,w,c
  4426  0010C0  E003               	bz	l8106
  4427  0010C2  C09A  FF8A         	movff	_ledStatuses+10,3978	;volatile
  4428  0010C6  D004               	goto	l8108
  4429  0010C8                     l8106:
  4430  0010C8  0100               	movlb	0	; () banked
  4431  0010CA  519A               	movf	(_ledStatuses+10)& (0+255),w,b
  4432  0010CC  198A               	xorwf	(_ledBlink+10)& (0+255),w,b
  4433  0010CE  6E8A               	movwf	3978,c	;volatile
  4434  0010D0                     l8108:
  4435  0010D0  FFFF               	dw	65535	; assembler added errata NOP
  4436  0010D2  0E01               	movlw	1
  4437  0010D4  ECA4  F015         	call	_UpdateLedRegister
  4438                           
  4439                           ;main.c: 564: if(blinkOn) LATB = ledStatuses[11]; else LATB = ledStatuses[11] ^ ledBlink
      +                          [11]; UpdateLedRegister(2);
  4440  0010D8  506F               	movf	_blinkOn,w,c
  4441  0010DA  E003               	bz	l8114
  4442  0010DC  C09B  FF8A         	movff	_ledStatuses+11,3978	;volatile
  4443  0010E0  D004               	goto	l8116
  4444  0010E2                     l8114:
  4445  0010E2  0100               	movlb	0	; () banked
  4446  0010E4  519B               	movf	(_ledStatuses+11)& (0+255),w,b
  4447  0010E6  198B               	xorwf	(_ledBlink+11)& (0+255),w,b
  4448  0010E8  6E8A               	movwf	3978,c	;volatile
  4449  0010EA                     l8116:
  4450  0010EA  FFFF               	dw	65535	; assembler added errata NOP
  4451  0010EC  0E02               	movlw	2
  4452  0010EE  ECA4  F015         	call	_UpdateLedRegister
  4453                           
  4454                           ;main.c: 565: if(blinkOn) LATB = ledStatuses[15]; else LATB = ledStatuses[15] ^ ledBlink
      +                          [15]; UpdateLedRegister(3);
  4455  0010F2  506F               	movf	_blinkOn,w,c
  4456  0010F4  E003               	bz	l8122
  4457  0010F6  C09F  FF8A         	movff	_ledStatuses+15,3978	;volatile
  4458  0010FA  D004               	goto	l8124
  4459  0010FC                     l8122:
  4460  0010FC  0100               	movlb	0	; () banked
  4461  0010FE  519F               	movf	(_ledStatuses+15)& (0+255),w,b
  4462  001100  198F               	xorwf	(_ledBlink+15)& (0+255),w,b
  4463  001102  6E8A               	movwf	3978,c	;volatile
  4464  001104                     l8124:
  4465  001104  FFFF               	dw	65535	; assembler added errata NOP
  4466  001106  0E03               	movlw	3
  4467  001108  ECA4  F015         	call	_UpdateLedRegister
  4468                           
  4469                           ;main.c: 566: LATAbits.LATA3 = 1;
  4470  00110C  8689               	bsf	3977,3,c	;volatile
  4471                           
  4472                           ;main.c: 567: break;
  4473  00110E  D00B               	goto	l8132
  4474  001110                     l8130:
  4475  001110  FFFF               	dw	65535	; assembler added errata NOP
  4476                           
  4477                           ; BSR set to: 0
  4478  001112  51E2               	movf	_currentLedBlock& (0+255),w,b
  4479                           
  4480                           ; Switch size 1, requested type "speed"
  4481                           ; Number of cases is 4, Range of values is 0 to 3
  4482                           ; switch strategies available:
  4483                           ; Name         Instructions Cycles
  4484                           ; simple_byte           13     7 (average)
  4485                           ;	Chosen strategy is simple_byte
  4486  001114  E101 D720          	bz	l7984
  4487  001118  0A01               	xorlw	1	; case 1
  4488  00111A  E101 D754          	bz	l8020
  4489  00111E  0A03               	xorlw	3	; case 2
  4490  001120  E089               	bz	l8056
  4491  001122  0A01               	xorlw	1	; case 3
  4492  001124  E0BE               	bz	l8092
  4493  001126                     l8132:
  4494  001126  FFFF               	dw	65535	; assembler added errata NOP
  4495                           
  4496                           ;main.c: 570: currentLedBlock++;
  4497  001128  0100               	movlb	0	; () banked
  4498  00112A  2BE2               	incf	_currentLedBlock& (0+255),f,b
  4499                           
  4500                           ;main.c: 573: currentLedBlock &= 0xFB;
  4501  00112C  95E2               	bcf	_currentLedBlock& (0+255),2,b
  4502                           
  4503                           ; BSR set to: 0
  4504  00112E  0012               	return		;funcret
  4505  001130  FFFF               	dw	65535	; errata NOP
  4506  001132                     __end_of_ProcessLightBlock:
  4507                           	opt stack 0
  4508                           tblptru	equ	0xFF8
  4509                           tblptrh	equ	0xFF7
  4510                           tblptrl	equ	0xFF6
  4511                           tablat	equ	0xFF5
  4512                           prodl	equ	0xFF3
  4513                           intcon	equ	0xFF2
  4514                           postinc0	equ	0xFEE
  4515                           wreg	equ	0xFE8
  4516                           postdec1	equ	0xFE5
  4517                           fsr1h	equ	0xFE2
  4518                           fsr1l	equ	0xFE1
  4519                           indf2	equ	0xFDF
  4520                           postinc2	equ	0xFDE
  4521                           postdec2	equ	0xFDD
  4522                           fsr2h	equ	0xFDA
  4523                           fsr2l	equ	0xFD9
  4524                           status	equ	0xFD8
  4525                           
  4526 ;; *************** function _UpdateLedRegister *****************
  4527 ;; Defined at:
  4528 ;;		line 280 in file "main.c"
  4529 ;; Parameters:    Size  Location     Type
  4530 ;;  regIndex        1    wreg     unsigned char 
  4531 ;; Auto vars:     Size  Location     Type
  4532 ;;  regIndex        1    6[COMRAM] unsigned char 
  4533 ;; Return value:  Size  Location     Type
  4534 ;;                  1    wreg      void 
  4535 ;; Registers used:
  4536 ;;		wreg, status,2, status,0
  4537 ;; Tracked objects:
  4538 ;;		On entry : 0/0
  4539 ;;		On exit  : 0/0
  4540 ;;		Unchanged: 0/0
  4541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4542 ;;      Params:         0       0       0       0       0       0       0
  4543 ;;      Locals:         1       0       0       0       0       0       0
  4544 ;;      Temps:          0       0       0       0       0       0       0
  4545 ;;      Totals:         1       0       0       0       0       0       0
  4546 ;;Total ram usage:        1 bytes
  4547 ;; Hardware stack levels used:    1
  4548 ;; Hardware stack levels required when called:    2
  4549 ;; This function calls:
  4550 ;;		Nothing
  4551 ;; This function is called by:
  4552 ;;		_ProcessLightBlock
  4553 ;; This function uses a non-reentrant model
  4554 ;;
  4555                           
  4556                           	psect	text23
  4557  002B48                     __ptext23:
  4558                           	opt stack 0
  4559  002B48                     _UpdateLedRegister:
  4560                           	opt stack 27
  4561                           
  4562                           ; BSR set to: 0
  4563                           ;incstack = 0
  4564  002B48  FFFF               	dw	65535
  4565                           
  4566                           ;UpdateLedRegister@regIndex stored from wreg
  4567  002B4A  6E07               	movwf	UpdateLedRegister@regIndex,c
  4568                           
  4569                           ;main.c: 282: switch(regIndex)
  4570  002B4C  D014               	goto	l6420
  4571  002B4E                     l242:
  4572                           
  4573                           ;main.c: 285: LATAbits.LATA4 = 0;
  4574  002B4E  9889               	bcf	3977,4,c	;volatile
  4575                           
  4576                           ;main.c: 286: TRISAbits.RA4 = 0;
  4577  002B50  9892               	bcf	3986,4,c	;volatile
  4578                           
  4579                           ;main.c: 287: LATAbits.LATA4 = 1;
  4580  002B52  8889               	bsf	3977,4,c	;volatile
  4581                           
  4582                           ;main.c: 288: TRISAbits.RA4 = 1;
  4583  002B54  8892               	bsf	3986,4,c	;volatile
  4584                           
  4585                           ;main.c: 289: break;
  4586  002B56  D018               	goto	l247
  4587  002B58                     l244:
  4588                           
  4589                           ;main.c: 291: LATCbits.LATC3 = 0;
  4590  002B58  968B               	bcf	3979,3,c	;volatile
  4591                           
  4592                           ;main.c: 292: TRISCbits.RC3 = 0;
  4593  002B5A  9694               	bcf	3988,3,c	;volatile
  4594                           
  4595                           ;main.c: 293: LATCbits.LATC3 = 1;
  4596  002B5C  868B               	bsf	3979,3,c	;volatile
  4597                           
  4598                           ;main.c: 294: TRISCbits.RC3 = 1;
  4599  002B5E  8694               	bsf	3988,3,c	;volatile
  4600                           
  4601                           ;main.c: 295: break;
  4602  002B60  D013               	goto	l247
  4603  002B62                     l245:
  4604                           
  4605                           ;main.c: 297: LATCbits.LATC0 = 0;
  4606  002B62  908B               	bcf	3979,0,c	;volatile
  4607                           
  4608                           ;main.c: 298: TRISCbits.RC0 = 0;
  4609  002B64  9094               	bcf	3988,0,c	;volatile
  4610                           
  4611                           ;main.c: 299: LATCbits.LATC0 = 1;
  4612  002B66  808B               	bsf	3979,0,c	;volatile
  4613                           
  4614                           ;main.c: 300: TRISCbits.RC0 = 1;
  4615  002B68  8094               	bsf	3988,0,c	;volatile
  4616                           
  4617                           ;main.c: 301: break;
  4618  002B6A  D00E               	goto	l247
  4619  002B6C                     l246:
  4620                           
  4621                           ;main.c: 303: LATCbits.LATC1 = 0;
  4622  002B6C  928B               	bcf	3979,1,c	;volatile
  4623                           
  4624                           ;main.c: 304: TRISCbits.RC1 = 0;
  4625  002B6E  9294               	bcf	3988,1,c	;volatile
  4626                           
  4627                           ;main.c: 305: LATCbits.LATC1 = 1;
  4628  002B70  828B               	bsf	3979,1,c	;volatile
  4629                           
  4630                           ;main.c: 306: TRISCbits.RC1 = 1;
  4631  002B72  8294               	bsf	3988,1,c	;volatile
  4632                           
  4633                           ;main.c: 307: break;
  4634  002B74  D009               	goto	l247
  4635  002B76                     l6420:
  4636  002B76  FFFF               	dw	65535	; assembler added errata NOP
  4637  002B78  5007               	movf	UpdateLedRegister@regIndex,w,c
  4638                           
  4639                           ; Switch size 1, requested type "speed"
  4640                           ; Number of cases is 4, Range of values is 0 to 3
  4641                           ; switch strategies available:
  4642                           ; Name         Instructions Cycles
  4643                           ; simple_byte           13     7 (average)
  4644                           ;	Chosen strategy is simple_byte
  4645  002B7A  E0E9               	bz	l242
  4646  002B7C  0A01               	xorlw	1	; case 1
  4647  002B7E  E0EC               	bz	l244
  4648  002B80  0A03               	xorlw	3	; case 2
  4649  002B82  E0EF               	bz	l245
  4650  002B84  0A01               	xorlw	1	; case 3
  4651  002B86  E0F2               	bz	l246
  4652  002B88                     l247:
  4653  002B88  FFFF               	dw	65535	; assembler added errata NOP
  4654  002B8A  0012               	return		;funcret
  4655  002B8C  FFFF               	dw	65535	; errata NOP
  4656  002B8E                     __end_of_UpdateLedRegister:
  4657                           	opt stack 0
  4658                           tblptru	equ	0xFF8
  4659                           tblptrh	equ	0xFF7
  4660                           tblptrl	equ	0xFF6
  4661                           tablat	equ	0xFF5
  4662                           prodl	equ	0xFF3
  4663                           intcon	equ	0xFF2
  4664                           postinc0	equ	0xFEE
  4665                           wreg	equ	0xFE8
  4666                           postdec1	equ	0xFE5
  4667                           fsr1h	equ	0xFE2
  4668                           fsr1l	equ	0xFE1
  4669                           indf2	equ	0xFDF
  4670                           postinc2	equ	0xFDE
  4671                           postdec2	equ	0xFDD
  4672                           fsr2h	equ	0xFDA
  4673                           fsr2l	equ	0xFD9
  4674                           status	equ	0xFD8
  4675                           
  4676 ;; *************** function _ProcessDiary *****************
  4677 ;; Defined at:
  4678 ;;		line 768 in file "main.c"
  4679 ;; Parameters:    Size  Location     Type
  4680 ;;		None
  4681 ;; Auto vars:     Size  Location     Type
  4682 ;;  totalMinutes    2   34[COMRAM] unsigned int 
  4683 ;; Return value:  Size  Location     Type
  4684 ;;                  1    wreg      void 
  4685 ;; Registers used:
  4686 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4687 ;; Tracked objects:
  4688 ;;		On entry : F/1
  4689 ;;		On exit  : 0/0
  4690 ;;		Unchanged: 0/0
  4691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4692 ;;      Params:         0       0       0       0       0       0       0
  4693 ;;      Locals:         2       0       0       0       0       0       0
  4694 ;;      Temps:          4       0       0       0       0       0       0
  4695 ;;      Totals:         6       0       0       0       0       0       0
  4696 ;;Total ram usage:        6 bytes
  4697 ;; Hardware stack levels used:    1
  4698 ;; Hardware stack levels required when called:    5
  4699 ;; This function calls:
  4700 ;;		_GetCurrentEventDiodeNum
  4701 ;;		_GetTime
  4702 ;;		_LightLed
  4703 ;;		_LoadNextEvent
  4704 ;;		_PlaySound
  4705 ;;		_getTotalMinutes
  4706 ;; This function is called by:
  4707 ;;		_main
  4708 ;; This function uses a non-reentrant model
  4709 ;;
  4710                           
  4711                           	psect	text24
  4712  002268                     __ptext24:
  4713                           	opt stack 0
  4714  002268                     _ProcessDiary:
  4715                           	opt stack 25
  4716                           
  4717                           ;incstack = 0
  4718  002268  FFFF               	dw	65535
  4719                           
  4720                           ; BSR set to: 1
  4721                           ;main.c: 771: if(_currenDiaryEvent.NextEventNum == 0xff)
  4722  00226A  0100               	movlb	0	; () banked
  4723  00226C  29A8               	incf	(__currenDiaryEvent+8)& (0+255),w,b
  4724  00226E  E051               	bz	l438
  4725                           
  4726                           ; BSR set to: 0
  4727                           ;main.c: 773: uint16_t totalMinutes;
  4728                           ;main.c: 777: if(!getTotalMinutes(&totalMinutes))
  4729  002270  0E23               	movlw	low ProcessDiary@totalMinutes
  4730  002272  6E07               	movwf	getTotalMinutes@totalMinutes,c
  4731  002274  6A08               	clrf	getTotalMinutes@totalMinutes+1,c
  4732  002276  EC5D  F017         	call	_getTotalMinutes	;wreg free
  4733  00227A  0900               	iorlw	0
  4734  00227C  E04A               	bz	l438
  4735                           
  4736                           ;main.c: 781: if(_currenDiaryEvent.NextEventTotalMinutes == totalMinutes)
  4737  00227E  5023               	movf	ProcessDiary@totalMinutes,w,c
  4738  002280  0100               	movlb	0	; () banked
  4739  002282  19A2               	xorwf	(__currenDiaryEvent+2)& (0+255),w,b
  4740  002284  E146               	bnz	l438
  4741  002286  5024               	movf	ProcessDiary@totalMinutes+1,w,c
  4742  002288  19A3               	xorwf	(__currenDiaryEvent+3)& (0+255),w,b
  4743  00228A  E143               	bnz	l438
  4744                           
  4745                           ; BSR set to: 0
  4746                           ;main.c: 782: {
  4747                           ;main.c: 784: if(_currenDiaryEvent.IsFire)
  4748  00228C  51A0               	movf	__currenDiaryEvent& (0+255),w,b
  4749  00228E  E007               	bz	l8148
  4750                           
  4751                           ; BSR set to: 0
  4752                           ;main.c: 785: {
  4753                           ;main.c: 786: LightLed(GetCurrentEventDiodeNum(), LED_RED, 0);
  4754  002290  0E02               	movlw	2
  4755  002292  6E07               	movwf	LightLed@ledState,c
  4756  002294  6A08               	clrf	LightLed@blink,c
  4757  002296  EC02  F018         	call	_GetCurrentEventDiodeNum	;wreg free
  4758  00229A  ECB5  F004         	call	_LightLed
  4759  00229E                     l8148:
  4760                           
  4761                           ;main.c: 787: }
  4762                           ;main.c: 789: {
  4763                           ;main.c: 790: _currenDiaryEvent.FiredEventNum = _currenDiaryEvent.NextEventNum;
  4764  00229E  C0A8  F0A1         	movff	__currenDiaryEvent+8,__currenDiaryEvent+1
  4765                           
  4766                           ;main.c: 791: _currenDiaryEvent.IsFire = 1;
  4767  0022A2  0E01               	movlw	1
  4768  0022A4  0100               	movlb	0	; () banked
  4769  0022A6  6FA0               	movwf	__currenDiaryEvent& (0+255),b
  4770                           
  4771                           ; BSR set to: 0
  4772                           ;main.c: 793: LightLed(GetCurrentEventDiodeNum(), LED_ORANGE, 1);
  4773  0022A8  0E03               	movlw	3
  4774  0022AA  6E07               	movwf	LightLed@ledState,c
  4775  0022AC  0E01               	movlw	1
  4776  0022AE  6E08               	movwf	LightLed@blink,c
  4777  0022B0  EC02  F018         	call	_GetCurrentEventDiodeNum	;wreg free
  4778  0022B4  ECB5  F004         	call	_LightLed
  4779                           
  4780                           ;main.c: 794: if(_nextEventSoundId != 0)
  4781  0022B8  0100               	movlb	0	; () banked
  4782  0022BA  51DB               	movf	__nextEventSoundId& (0+255),w,b
  4783  0022BC  E007               	bz	l8156
  4784                           
  4785                           ; BSR set to: 0
  4786                           ;main.c: 795: {
  4787                           ;main.c: 796: PlaySound(_nextEventSoundId - 1, _nextEventPlayDuration);
  4788  0022BE  C0CB  F017         	movff	__nextEventPlayDuration,PlaySound@playDuration
  4789  0022C2  C0CC  F018         	movff	__nextEventPlayDuration+1,PlaySound@playDuration+1
  4790  0022C6  05DB               	decf	__nextEventSoundId& (0+255),w,b
  4791  0022C8  EC51  F00F         	call	_PlaySound
  4792  0022CC                     l8156:
  4793                           
  4794                           ; BSR set to: 0
  4795                           ;main.c: 797: }
  4796                           ;main.c: 806: _currenDiaryEvent.ResetSecond = *GetTime() + eventAcceptTime;
  4797  0022CC  EC1C  F018         	call	_GetTime	;wreg free
  4798  0022D0  6ED9               	movwf	fsr2l,c
  4799  0022D2  6ADA               	clrf	fsr2h,c
  4800  0022D4  CFDE F01F          	movff	postinc2,??_ProcessDiary
  4801  0022D8  CFDE F020          	movff	postinc2,??_ProcessDiary+1
  4802  0022DC  CFDE F021          	movff	postinc2,??_ProcessDiary+2
  4803  0022E0  CFDE F022          	movff	postinc2,??_ProcessDiary+3
  4804  0022E4  0100               	movlb	0	; () banked
  4805  0022E6  51E3               	movf	_eventAcceptTime& (0+255),w,b
  4806  0022E8  241F               	addwf	??_ProcessDiary,w,c
  4807  0022EA  6FA4               	movwf	(__currenDiaryEvent+4)& (0+255),b
  4808  0022EC  0E00               	movlw	0
  4809  0022EE  2020               	addwfc	??_ProcessDiary+1,w,c
  4810  0022F0  6FA5               	movwf	(__currenDiaryEvent+5)& (0+255),b
  4811  0022F2  0E00               	movlw	0
  4812  0022F4  2021               	addwfc	??_ProcessDiary+2,w,c
  4813  0022F6  6FA6               	movwf	(__currenDiaryEvent+6)& (0+255),b
  4814  0022F8  0E00               	movlw	0
  4815  0022FA  2022               	addwfc	??_ProcessDiary+3,w,c
  4816  0022FC  6FA7               	movwf	(__currenDiaryEvent+7)& (0+255),b
  4817                           
  4818                           ; BSR set to: 0
  4819                           ;main.c: 808: LoadNextEvent();
  4820  0022FE  ECBA  F00B         	call	_LoadNextEvent	;wreg free
  4821                           
  4822                           ;main.c: 809: }
  4823                           ;main.c: 810: _MODBUSInputRegs[2] = (((uint16_t)_currenDiaryEvent.FiredEventNum<<8)|_cur
      +                          renDiaryEvent.NextEventNum);
  4824  002302  0100               	movlb	0	; () banked
  4825  002304  51A1               	movf	(__currenDiaryEvent+1)& (0+255),w,b
  4826  002306  6E1F               	movwf	??_ProcessDiary& (0+255),c
  4827  002308  51A8               	movf	(__currenDiaryEvent+8)& (0+255),w,b
  4828  00230A  0101               	movlb	1	; () banked
  4829  00230C  6FAE               	movwf	(__MODBUSInputRegs+4)& (0+255),b
  4830  00230E  C01F  F1AF         	movff	??_ProcessDiary,__MODBUSInputRegs+5
  4831  002312                     l438:
  4832  002312  0012               	return		;funcret
  4833  002314  FFFF               	dw	65535	; errata NOP
  4834  002316                     __end_of_ProcessDiary:
  4835                           	opt stack 0
  4836                           tblptru	equ	0xFF8
  4837                           tblptrh	equ	0xFF7
  4838                           tblptrl	equ	0xFF6
  4839                           tablat	equ	0xFF5
  4840                           prodl	equ	0xFF3
  4841                           intcon	equ	0xFF2
  4842                           postinc0	equ	0xFEE
  4843                           wreg	equ	0xFE8
  4844                           postdec1	equ	0xFE5
  4845                           fsr1h	equ	0xFE2
  4846                           fsr1l	equ	0xFE1
  4847                           indf2	equ	0xFDF
  4848                           postinc2	equ	0xFDE
  4849                           postdec2	equ	0xFDD
  4850                           fsr2h	equ	0xFDA
  4851                           fsr2l	equ	0xFD9
  4852                           status	equ	0xFD8
  4853                           
  4854 ;; *************** function _PlaySound *****************
  4855 ;; Defined at:
  4856 ;;		line 639 in file "main.c"
  4857 ;; Parameters:    Size  Location     Type
  4858 ;;  soundId         1    wreg     unsigned char 
  4859 ;;  playDuration    2   22[COMRAM] unsigned int 
  4860 ;; Auto vars:     Size  Location     Type
  4861 ;;  soundId         1   28[COMRAM] unsigned char 
  4862 ;;  soundAddr       1   29[COMRAM] unsigned char 
  4863 ;; Return value:  Size  Location     Type
  4864 ;;                  1    wreg      unsigned char 
  4865 ;; Registers used:
  4866 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4867 ;; Tracked objects:
  4868 ;;		On entry : 0/1
  4869 ;;		On exit  : F/0
  4870 ;;		Unchanged: 0/0
  4871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4872 ;;      Params:         2       0       0       0       0       0       0
  4873 ;;      Locals:         2       0       0       0       0       0       0
  4874 ;;      Temps:          4       0       0       0       0       0       0
  4875 ;;      Totals:         8       0       0       0       0       0       0
  4876 ;;Total ram usage:        8 bytes
  4877 ;; Hardware stack levels used:    1
  4878 ;; Hardware stack levels required when called:    4
  4879 ;; This function calls:
  4880 ;;		_GetTime
  4881 ;;		_SoundPlayNextStep
  4882 ;; This function is called by:
  4883 ;;		_ProcessDiary
  4884 ;;		_CommandSetLed
  4885 ;;		_CommandSetStatusLed
  4886 ;;		_ProcessUserCommands
  4887 ;; This function uses a non-reentrant model
  4888 ;;
  4889                           
  4890                           	psect	text25
  4891  001EA2                     __ptext25:
  4892                           	opt stack 0
  4893  001EA2                     _PlaySound:
  4894                           	opt stack 24
  4895                           
  4896                           ;incstack = 0
  4897  001EA2  FFFF               	dw	65535
  4898                           
  4899                           ;PlaySound@soundId stored from wreg
  4900  001EA4  6E1D               	movwf	PlaySound@soundId,c
  4901                           
  4902                           ;main.c: 641: if(soundId >= _soundCount)
  4903  001EA6  0100               	movlb	0	; () banked
  4904  001EA8  51DF               	movf	__soundCount& (0+255),w,b
  4905  001EAA  5C1D               	subwf	PlaySound@soundId,w,c
  4906  001EAC  E260               	bc	l393
  4907                           
  4908                           ; BSR set to: 0
  4909                           ;main.c: 644: if(playDuration == 0)
  4910  001EAE  5017               	movf	PlaySound@playDuration,w,c
  4911  001EB0  1018               	iorwf	PlaySound@playDuration+1,w,c
  4912  001EB2  E105               	bnz	l6008
  4913                           
  4914                           ; BSR set to: 0
  4915                           ;main.c: 645: soundTestEnd = 0;
  4916  001EB4  6BC3               	clrf	_soundTestEnd& (0+255),b
  4917  001EB6  6BC4               	clrf	(_soundTestEnd+1)& (0+255),b
  4918  001EB8  6BC5               	clrf	(_soundTestEnd+2)& (0+255),b
  4919  001EBA  6BC6               	clrf	(_soundTestEnd+3)& (0+255),b
  4920  001EBC  D022               	goto	l6014
  4921  001EBE                     l6008:
  4922                           
  4923                           ; BSR set to: 0
  4924                           ;main.c: 646: else if(playDuration == 65535)
  4925  001EBE  2817               	incf	PlaySound@playDuration,w,c
  4926  001EC0  E107               	bnz	l6012
  4927  001EC2  2818               	incf	PlaySound@playDuration+1,w,c
  4928  001EC4  E105               	bnz	l6012
  4929                           
  4930                           ; BSR set to: 0
  4931                           ;main.c: 647: soundTestEnd = 4294967295;
  4932  001EC6  69C3               	setf	_soundTestEnd& (0+255),b
  4933  001EC8  69C4               	setf	(_soundTestEnd+1)& (0+255),b
  4934  001ECA  69C5               	setf	(_soundTestEnd+2)& (0+255),b
  4935  001ECC  69C6               	setf	(_soundTestEnd+3)& (0+255),b
  4936  001ECE  D019               	goto	l6014
  4937  001ED0                     l6012:
  4938                           
  4939                           ; BSR set to: 0
  4940                           ;main.c: 648: else
  4941                           ;main.c: 649: soundTestEnd = *GetTime() + playDuration;
  4942  001ED0  EC1C  F018         	call	_GetTime	;wreg free
  4943  001ED4  6ED9               	movwf	fsr2l,c
  4944  001ED6  6ADA               	clrf	fsr2h,c
  4945  001ED8  CFDE F019          	movff	postinc2,??_PlaySound
  4946  001EDC  CFDE F01A          	movff	postinc2,??_PlaySound+1
  4947  001EE0  CFDE F01B          	movff	postinc2,??_PlaySound+2
  4948  001EE4  CFDE F01C          	movff	postinc2,??_PlaySound+3
  4949  001EE8  5017               	movf	PlaySound@playDuration,w,c
  4950  001EEA  2419               	addwf	??_PlaySound,w,c
  4951  001EEC  0100               	movlb	0	; () banked
  4952  001EEE  6FC3               	movwf	_soundTestEnd& (0+255),b
  4953  001EF0  5018               	movf	PlaySound@playDuration+1,w,c
  4954  001EF2  201A               	addwfc	??_PlaySound+1,w,c
  4955  001EF4  6FC4               	movwf	(_soundTestEnd+1)& (0+255),b
  4956  001EF6  0E00               	movlw	0
  4957  001EF8  201B               	addwfc	??_PlaySound+2,w,c
  4958  001EFA  6FC5               	movwf	(_soundTestEnd+2)& (0+255),b
  4959  001EFC  0E00               	movlw	0
  4960  001EFE  201C               	addwfc	??_PlaySound+3,w,c
  4961  001F00  6FC6               	movwf	(_soundTestEnd+3)& (0+255),b
  4962  001F02                     l6014:
  4963  001F02  FFFF               	dw	65535	; assembler added errata NOP
  4964                           
  4965                           ; BSR set to: 0
  4966                           ;main.c: 651: uint8_t soundAddr = ( EEADR = _eeSoundAddressesList + soundId, (void)0, RD
      +                           = 1, EEDATA);
  4967  001F04  51D5               	movf	__eeSoundAddressesList& (0+255),w,b
  4968  001F06  241D               	addwf	PlaySound@soundId,w,c
  4969  001F08  6EA9               	movwf	4009,c	;volatile
  4970                           
  4971                           ; BSR set to: 0
  4972  001F0A  80A6               	bsf	4006,0,c	;volatile
  4973                           
  4974                           ; BSR set to: 0
  4975  001F0C  CFA8 F01E          	movff	4008,PlaySound@soundAddr	;volatile
  4976                           
  4977                           ; BSR set to: 0
  4978                           ;main.c: 652: if(_eeFirstSoundAddress + soundAddr >= 256)
  4979  001F10  501E               	movf	PlaySound@soundAddr,w,c
  4980  001F12  C0D4  F019         	movff	__eeFirstSoundAddress,??_PlaySound
  4981  001F16  6A1A               	clrf	(??_PlaySound+1)& (0+255),c
  4982  001F18  2619               	addwf	??_PlaySound,f,c
  4983  001F1A  0E00               	movlw	0
  4984  001F1C  221A               	addwfc	??_PlaySound+1,f,c
  4985  001F1E  BE1A               	btfsc	??_PlaySound+1,7,c
  4986  001F20  D002               	goto	l6024
  4987  001F22  041A               	decf	??_PlaySound+1,w,c
  4988  001F24  E224               	bc	l393
  4989  001F26                     l6024:
  4990  001F26  FFFF               	dw	65535	; assembler added errata NOP
  4991                           
  4992                           ; BSR set to: 0
  4993                           ;main.c: 655: _playingSoundSteps = ( EEADR = _eeFirstSoundAddress + soundAddr, (void)0, 
      +                          RD = 1, EEDATA);
  4994  001F28  51D4               	movf	__eeFirstSoundAddress& (0+255),w,b
  4995  001F2A  241E               	addwf	PlaySound@soundAddr,w,c
  4996  001F2C  6EA9               	movwf	4009,c	;volatile
  4997                           
  4998                           ; BSR set to: 0
  4999  001F2E  80A6               	bsf	4006,0,c	;volatile
  5000                           
  5001                           ; BSR set to: 0
  5002  001F30  CFA8 F0DE          	movff	4008,__playingSoundSteps	;volatile
  5003                           
  5004                           ;main.c: 657: _playingSoundStartPosInEe = _eeFirstSoundAddress + soundAddr + 1;
  5005  001F34  51D4               	movf	__eeFirstSoundAddress& (0+255),w,b
  5006  001F36  241E               	addwf	PlaySound@soundAddr,w,c
  5007  001F38  6E19               	movwf	??_PlaySound& (0+255),c
  5008  001F3A  2819               	incf	??_PlaySound,w,c
  5009  001F3C  6FDD               	movwf	__playingSoundStartPosInEe& (0+255),b
  5010                           
  5011                           ; BSR set to: 0
  5012                           ;main.c: 658: _MODBUSInputRegs[7] = (((uint16_t)_playingSoundSteps<<8)|_playingSoundStar
      +                          tPosInEe);
  5013  001F3E  51DE               	movf	__playingSoundSteps& (0+255),w,b
  5014  001F40  6E19               	movwf	??_PlaySound& (0+255),c
  5015  001F42  51DD               	movf	__playingSoundStartPosInEe& (0+255),w,b
  5016  001F44  0101               	movlb	1	; () banked
  5017  001F46  6FB8               	movwf	(__MODBUSInputRegs+14)& (0+255),b
  5018  001F48  C019  F1B9         	movff	??_PlaySound,__MODBUSInputRegs+15
  5019                           
  5020                           ; BSR set to: 1
  5021                           ;main.c: 659: if(_playingSoundStartPosInEe + _playingSoundSteps * 3 >= 256)
  5022  001F4C  0100               	movlb	0	; () banked
  5023  001F4E  51DE               	movf	__playingSoundSteps& (0+255),w,b
  5024  001F50  0D03               	mullw	3
  5025  001F52  51DD               	movf	__playingSoundStartPosInEe& (0+255),w,b
  5026  001F54  26F3               	addwf	prodl,f,c
  5027  001F56  0E00               	movlw	0
  5028  001F58  22F4               	addwfc	prodh,f,c
  5029  001F5A  BEF4               	btfsc	prodh,7,c
  5030  001F5C  D002               	goto	l399
  5031  001F5E  04F4               	decf	prodh,w,c
  5032  001F60  E206               	bc	l393
  5033  001F62                     l399:
  5034  001F62  FFFF               	dw	65535	; assembler added errata NOP
  5035                           
  5036                           ; BSR set to: 0
  5037                           ;main.c: 662: _playingSoundCurPos = 0;
  5038  001F64  6BDC               	clrf	__playingSoundCurPos& (0+255),b
  5039                           
  5040                           ; BSR set to: 0
  5041                           ;main.c: 663: _isSoundPlaying = 1;
  5042  001F66  0E01               	movlw	1
  5043  001F68  6FD9               	movwf	__isSoundPlaying& (0+255),b
  5044                           
  5045                           ; BSR set to: 0
  5046                           ;main.c: 664: SoundPlayNextStep();
  5047  001F6A  EC1E  F010         	call	_SoundPlayNextStep	;wreg free
  5048  001F6E                     l393:
  5049                           
  5050                           ; BSR set to: 0
  5051  001F6E  0012               	return		;funcret
  5052  001F70  FFFF               	dw	65535	; errata NOP
  5053  001F72                     __end_of_PlaySound:
  5054                           	opt stack 0
  5055                           tblptru	equ	0xFF8
  5056                           tblptrh	equ	0xFF7
  5057                           tblptrl	equ	0xFF6
  5058                           tablat	equ	0xFF5
  5059                           prodh	equ	0xFF4
  5060                           prodl	equ	0xFF3
  5061                           intcon	equ	0xFF2
  5062                           postinc0	equ	0xFEE
  5063                           wreg	equ	0xFE8
  5064                           postdec1	equ	0xFE5
  5065                           fsr1h	equ	0xFE2
  5066                           fsr1l	equ	0xFE1
  5067                           indf2	equ	0xFDF
  5068                           postinc2	equ	0xFDE
  5069                           postdec2	equ	0xFDD
  5070                           fsr2h	equ	0xFDA
  5071                           fsr2l	equ	0xFD9
  5072                           status	equ	0xFD8
  5073                           
  5074 ;; *************** function _SoundPlayNextStep *****************
  5075 ;; Defined at:
  5076 ;;		line 594 in file "main.c"
  5077 ;; Parameters:    Size  Location     Type
  5078 ;;		None
  5079 ;; Auto vars:     Size  Location     Type
  5080 ;;  stepDuty        2   19[COMRAM] unsigned int 
  5081 ;;  duration        1   21[COMRAM] unsigned char 
  5082 ;; Return value:  Size  Location     Type
  5083 ;;                  1    wreg      void 
  5084 ;; Registers used:
  5085 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5086 ;; Tracked objects:
  5087 ;;		On entry : E/1
  5088 ;;		On exit  : F/0
  5089 ;;		Unchanged: 0/0
  5090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5091 ;;      Params:         0       0       0       0       0       0       0
  5092 ;;      Locals:         3       0       0       0       0       0       0
  5093 ;;      Temps:          5       0       0       0       0       0       0
  5094 ;;      Totals:         8       0       0       0       0       0       0
  5095 ;;Total ram usage:        8 bytes
  5096 ;; Hardware stack levels used:    1
  5097 ;; Hardware stack levels required when called:    3
  5098 ;; This function calls:
  5099 ;;		_GetTime
  5100 ;;		_SetBuzzerDuty
  5101 ;;		_StopPlaying
  5102 ;;		_millis
  5103 ;; This function is called by:
  5104 ;;		_PlaySound
  5105 ;;		_main
  5106 ;; This function uses a non-reentrant model
  5107 ;;
  5108                           
  5109                           	psect	text26
  5110  00203C                     __ptext26:
  5111                           	opt stack 0
  5112  00203C                     _SoundPlayNextStep:
  5113                           	opt stack 24
  5114                           
  5115                           ; BSR set to: 0
  5116                           ;incstack = 0
  5117  00203C  FFFF               	dw	65535
  5118                           
  5119                           ;main.c: 596: if(_playingSoundCurPos >= _playingSoundSteps)
  5120  00203E  0100               	movlb	0	; () banked
  5121  002040  51DE               	movf	__playingSoundSteps& (0+255),w,b
  5122  002042  5DDC               	subwf	__playingSoundCurPos& (0+255),w,b
  5123  002044  E316               	bnc	l5850
  5124                           
  5125                           ; BSR set to: 0
  5126                           ;main.c: 597: {
  5127                           ;main.c: 598: _playingSoundCurPos = 0;
  5128  002046  6BDC               	clrf	__playingSoundCurPos& (0+255),b
  5129                           
  5130                           ; BSR set to: 0
  5131                           ;main.c: 599: if(*GetTime() >= soundTestEnd)
  5132  002048  EC1C  F018         	call	_GetTime	;wreg free
  5133  00204C  6ED9               	movwf	fsr2l,c
  5134  00204E  6ADA               	clrf	fsr2h,c
  5135  002050  0100               	movlb	0	; () banked
  5136  002052  51C3               	movf	_soundTestEnd& (0+255),w,b
  5137  002054  5CDE               	subwf	postinc2,w,c
  5138  002056  51C4               	movf	(_soundTestEnd+1)& (0+255),w,b
  5139  002058  58DE               	subwfb	postinc2,w,c
  5140  00205A  51C5               	movf	(_soundTestEnd+2)& (0+255),w,b
  5141  00205C  58DE               	subwfb	postinc2,w,c
  5142  00205E  50DE               	movf	postinc2,w,c
  5143  002060  0A80               	xorlw	128
  5144  002062  6E13               	movwf	(??_SoundPlayNextStep+4)& (0+255),c
  5145  002064  51C6               	movf	(_soundTestEnd+3)& (0+255),w,b
  5146  002066  0A80               	xorlw	128
  5147  002068  5813               	subwfb	(??_SoundPlayNextStep+4)& (0+255),w,c
  5148  00206A  E303               	bnc	l5850
  5149                           
  5150                           ; BSR set to: 0
  5151                           ;main.c: 600: {
  5152                           ;main.c: 601: StopPlaying();
  5153  00206C  ECED  F017         	call	_StopPlaying	;wreg free
  5154  002070  D041               	goto	l386
  5155  002072                     l5850:
  5156                           
  5157                           ; BSR set to: 0
  5158                           ;main.c: 603: }
  5159                           ;main.c: 604: }
  5160                           ;main.c: 605: uint16_t stepDuty = ( EEADR = _playingSoundStartPosInEe + _playingSoundCur
      +                          Pos * 3, (void)0, RD = 1, EEDATA);
  5161  002072  51DC               	movf	__playingSoundCurPos& (0+255),w,b
  5162  002074  0D03               	mullw	3
  5163  002076  50F3               	movf	prodl,w,c
  5164  002078  25DD               	addwf	__playingSoundStartPosInEe& (0+255),w,b
  5165  00207A  6EA9               	movwf	4009,c	;volatile
  5166                           
  5167                           ; BSR set to: 0
  5168  00207C  80A6               	bsf	4006,0,c	;volatile
  5169                           
  5170                           ; BSR set to: 0
  5171  00207E  CFA8 F014          	movff	4008,SoundPlayNextStep@stepDuty	;volatile
  5172  002082  6A15               	clrf	SoundPlayNextStep@stepDuty+1,c
  5173                           
  5174                           ; BSR set to: 0
  5175                           ;main.c: 606: stepDuty <<= 6;
  5176  002084  0E06               	movlw	6
  5177  002086                     u4655:
  5178  002086  FFFF               	dw	65535	; assembler added errata NOP
  5179  002088  90D8               	bcf	status,0,c
  5180  00208A  3614               	rlcf	SoundPlayNextStep@stepDuty,f,c
  5181  00208C  3615               	rlcf	SoundPlayNextStep@stepDuty+1,f,c
  5182  00208E  2EE8               	decfsz	wreg,f,c
  5183  002090  D7FA               	goto	u4655
  5184                           
  5185                           ; BSR set to: 0
  5186                           ;main.c: 607: _playingEndMs = millis() + stepDuty;
  5187  002092  EC22  F017         	call	_millis	;wreg free
  5188  002096  5014               	movf	SoundPlayNextStep@stepDuty,w,c
  5189  002098  2407               	addwf	?_millis,w,c
  5190  00209A  0100               	movlb	0	; () banked
  5191  00209C  6FAF               	movwf	__playingEndMs& (0+255),b
  5192  00209E  5015               	movf	SoundPlayNextStep@stepDuty+1,w,c
  5193  0020A0  2008               	addwfc	?_millis+1,w,c
  5194  0020A2  6FB0               	movwf	(__playingEndMs+1)& (0+255),b
  5195  0020A4  0E00               	movlw	0
  5196  0020A6  2009               	addwfc	?_millis+2,w,c
  5197  0020A8  6FB1               	movwf	(__playingEndMs+2)& (0+255),b
  5198  0020AA  0E00               	movlw	0
  5199  0020AC  200A               	addwfc	?_millis+3,w,c
  5200  0020AE  6FB2               	movwf	(__playingEndMs+3)& (0+255),b
  5201                           
  5202                           ; BSR set to: 0
  5203                           ;main.c: 608: PR2 = ( EEADR = _playingSoundStartPosInEe + _playingSoundCurPos * 3 + 1, (
      +                          void)0, RD = 1, EEDATA);
  5204  0020B0  51DC               	movf	__playingSoundCurPos& (0+255),w,b
  5205  0020B2  0D03               	mullw	3
  5206  0020B4  50F3               	movf	prodl,w,c
  5207  0020B6  25DD               	addwf	__playingSoundStartPosInEe& (0+255),w,b
  5208  0020B8  6E0F               	movwf	??_SoundPlayNextStep& (0+255),c
  5209  0020BA  280F               	incf	??_SoundPlayNextStep,w,c
  5210  0020BC  6EA9               	movwf	4009,c	;volatile
  5211                           
  5212                           ; BSR set to: 0
  5213  0020BE  80A6               	bsf	4006,0,c	;volatile
  5214                           
  5215                           ; BSR set to: 0
  5216  0020C0  CFA8 FFCB          	movff	4008,4043	;volatile
  5217                           
  5218                           ; BSR set to: 0
  5219                           ;main.c: 609: uint8_t duration = ( EEADR = _playingSoundStartPosInEe + _playingSoundCurP
      +                          os * 3 + 2, (void)0, RD = 1, EEDATA);
  5220  0020C4  51DC               	movf	__playingSoundCurPos& (0+255),w,b
  5221  0020C6  0D03               	mullw	3
  5222  0020C8  50F3               	movf	prodl,w,c
  5223  0020CA  25DD               	addwf	__playingSoundStartPosInEe& (0+255),w,b
  5224  0020CC  0F02               	addlw	2
  5225  0020CE  6EA9               	movwf	4009,c	;volatile
  5226                           
  5227                           ; BSR set to: 0
  5228  0020D0  80A6               	bsf	4006,0,c	;volatile
  5229                           
  5230                           ; BSR set to: 0
  5231  0020D2  CFA8 F016          	movff	4008,SoundPlayNextStep@duration	;volatile
  5232                           
  5233                           ; BSR set to: 0
  5234                           ;main.c: 610: _playingSoundCurPos++;
  5235  0020D6  2BDC               	incf	__playingSoundCurPos& (0+255),f,b
  5236                           
  5237                           ; BSR set to: 0
  5238                           ;main.c: 611: if(duration == 0 || PR2 == 0)
  5239  0020D8  5016               	movf	SoundPlayNextStep@duration,w,c
  5240  0020DA  E002               	bz	l389
  5241                           
  5242                           ; BSR set to: 0
  5243  0020DC  50CB               	movf	4043,w,c	;volatile
  5244  0020DE  E103               	bnz	l5878
  5245  0020E0                     l389:
  5246                           
  5247                           ; BSR set to: 0
  5248                           ;main.c: 612: {
  5249                           ;main.c: 613: T2CONbits.TMR2ON = 0; TRISCbits.TRISC2 = 1; IsBusserOn = 0;;
  5250  0020E0  94CA               	bcf	4042,2,c	;volatile
  5251  0020E2  8494               	bsf	3988,2,c	;volatile
  5252                           
  5253                           ;main.c: 614: return;
  5254  0020E4  D007               	goto	l386
  5255  0020E6                     l5878:
  5256                           
  5257                           ; BSR set to: 0
  5258                           ;main.c: 615: }
  5259                           ;main.c: 616: SetBuzzerDuty(duration);
  5260  0020E6  C016  F007         	movff	SoundPlayNextStep@duration,SetBuzzerDuty@dc
  5261  0020EA  6A08               	clrf	SetBuzzerDuty@dc+1,c
  5262  0020EC  ECDE  F016         	call	_SetBuzzerDuty	;wreg free
  5263                           
  5264                           ; BSR set to: 0
  5265                           ;main.c: 617: TRISCbits.TRISC2 = 0; T2CONbits.TMR2ON = 1; IsBusserOn = 1;;
  5266  0020F0  9494               	bcf	3988,2,c	;volatile
  5267                           
  5268                           ; BSR set to: 0
  5269  0020F2  84CA               	bsf	4042,2,c	;volatile
  5270  0020F4                     l386:
  5271  0020F4  FFFF               	dw	65535	; assembler added errata NOP
  5272                           
  5273                           ; BSR set to: 0
  5274  0020F6  0012               	return		;funcret
  5275  0020F8  FFFF               	dw	65535	; errata NOP
  5276  0020FA                     __end_of_SoundPlayNextStep:
  5277                           	opt stack 0
  5278                           tblptru	equ	0xFF8
  5279                           tblptrh	equ	0xFF7
  5280                           tblptrl	equ	0xFF6
  5281                           tablat	equ	0xFF5
  5282                           prodh	equ	0xFF4
  5283                           prodl	equ	0xFF3
  5284                           intcon	equ	0xFF2
  5285                           postinc0	equ	0xFEE
  5286                           wreg	equ	0xFE8
  5287                           postdec1	equ	0xFE5
  5288                           fsr1h	equ	0xFE2
  5289                           fsr1l	equ	0xFE1
  5290                           indf2	equ	0xFDF
  5291                           postinc2	equ	0xFDE
  5292                           postdec2	equ	0xFDD
  5293                           fsr2h	equ	0xFDA
  5294                           fsr2l	equ	0xFD9
  5295                           status	equ	0xFD8
  5296                           
  5297 ;; *************** function _StopPlaying *****************
  5298 ;; Defined at:
  5299 ;;		line 586 in file "main.c"
  5300 ;; Parameters:    Size  Location     Type
  5301 ;;		None
  5302 ;; Auto vars:     Size  Location     Type
  5303 ;;		None
  5304 ;; Return value:  Size  Location     Type
  5305 ;;                  1    wreg      void 
  5306 ;; Registers used:
  5307 ;;		None
  5308 ;; Tracked objects:
  5309 ;;		On entry : 0/0
  5310 ;;		On exit  : F/0
  5311 ;;		Unchanged: 0/0
  5312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5313 ;;      Params:         0       0       0       0       0       0       0
  5314 ;;      Locals:         0       0       0       0       0       0       0
  5315 ;;      Temps:          0       0       0       0       0       0       0
  5316 ;;      Totals:         0       0       0       0       0       0       0
  5317 ;;Total ram usage:        0 bytes
  5318 ;; Hardware stack levels used:    1
  5319 ;; Hardware stack levels required when called:    2
  5320 ;; This function calls:
  5321 ;;		Nothing
  5322 ;; This function is called by:
  5323 ;;		_SoundPlayNextStep
  5324 ;;		_ResetEvent
  5325 ;;		_ResetEventFromCommand
  5326 ;;		_main
  5327 ;;		_CommandSetLed
  5328 ;;		_CommandSetStatusLed
  5329 ;; This function uses a non-reentrant model
  5330 ;;
  5331                           
  5332                           	psect	text27
  5333  002FDA                     __ptext27:
  5334                           	opt stack 0
  5335  002FDA                     _StopPlaying:
  5336                           	opt stack 24
  5337                           
  5338                           ; BSR set to: 0
  5339                           ;incstack = 0
  5340  002FDA  FFFF               	dw	65535
  5341                           
  5342                           ;main.c: 588: _isSoundPlaying = 0;
  5343  002FDC  0100               	movlb	0	; () banked
  5344  002FDE  6BD9               	clrf	__isSoundPlaying& (0+255),b
  5345                           
  5346                           ;main.c: 589: T2CONbits.TMR2ON = 0; TRISCbits.TRISC2 = 1; IsBusserOn = 0;;
  5347  002FE0  94CA               	bcf	4042,2,c	;volatile
  5348  002FE2  8494               	bsf	3988,2,c	;volatile
  5349                           
  5350                           ; BSR set to: 0
  5351  002FE4  0012               	return		;funcret
  5352  002FE6  FFFF               	dw	65535	; errata NOP
  5353  002FE8                     __end_of_StopPlaying:
  5354                           	opt stack 0
  5355                           tblptru	equ	0xFF8
  5356                           tblptrh	equ	0xFF7
  5357                           tblptrl	equ	0xFF6
  5358                           tablat	equ	0xFF5
  5359                           prodh	equ	0xFF4
  5360                           prodl	equ	0xFF3
  5361                           intcon	equ	0xFF2
  5362                           postinc0	equ	0xFEE
  5363                           wreg	equ	0xFE8
  5364                           postdec1	equ	0xFE5
  5365                           fsr1h	equ	0xFE2
  5366                           fsr1l	equ	0xFE1
  5367                           indf2	equ	0xFDF
  5368                           postinc2	equ	0xFDE
  5369                           postdec2	equ	0xFDD
  5370                           fsr2h	equ	0xFDA
  5371                           fsr2l	equ	0xFD9
  5372                           status	equ	0xFD8
  5373                           
  5374 ;; *************** function _SetBuzzerDuty *****************
  5375 ;; Defined at:
  5376 ;;		line 420 in file "main.c"
  5377 ;; Parameters:    Size  Location     Type
  5378 ;;  dc              2    6[COMRAM] unsigned int 
  5379 ;; Auto vars:     Size  Location     Type
  5380 ;;		None
  5381 ;; Return value:  Size  Location     Type
  5382 ;;                  1    wreg      void 
  5383 ;; Registers used:
  5384 ;;		wreg, status,2, status,0
  5385 ;; Tracked objects:
  5386 ;;		On entry : F/0
  5387 ;;		On exit  : F/0
  5388 ;;		Unchanged: F/0
  5389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5390 ;;      Params:         2       0       0       0       0       0       0
  5391 ;;      Locals:         0       0       0       0       0       0       0
  5392 ;;      Temps:          2       0       0       0       0       0       0
  5393 ;;      Totals:         4       0       0       0       0       0       0
  5394 ;;Total ram usage:        4 bytes
  5395 ;; Hardware stack levels used:    1
  5396 ;; Hardware stack levels required when called:    2
  5397 ;; This function calls:
  5398 ;;		Nothing
  5399 ;; This function is called by:
  5400 ;;		_SoundPlayNextStep
  5401 ;; This function uses a non-reentrant model
  5402 ;;
  5403                           
  5404                           	psect	text28
  5405  002DBC                     __ptext28:
  5406                           	opt stack 0
  5407  002DBC                     _SetBuzzerDuty:
  5408                           	opt stack 24
  5409                           
  5410                           ; BSR set to: 0
  5411                           ;incstack = 0
  5412  002DBC  FFFF               	dw	65535
  5413                           
  5414                           ; BSR set to: 0
  5415                           ;main.c: 425: CCP1CONbits.DC1B = dc & 0x03;
  5416  002DBE  C007  F009         	movff	SetBuzzerDuty@dc,??_SetBuzzerDuty
  5417  002DC2  0E03               	movlw	3
  5418  002DC4  1609               	andwf	??_SetBuzzerDuty,f,c
  5419  002DC6  3A09               	swapf	??_SetBuzzerDuty,f,c
  5420  002DC8  50BD               	movf	4029,w,c	;volatile
  5421  002DCA  1809               	xorwf	??_SetBuzzerDuty,w,c
  5422  002DCC  0BCF               	andlw	-49
  5423  002DCE  1809               	xorwf	??_SetBuzzerDuty,w,c
  5424  002DD0  6EBD               	movwf	4029,c	;volatile
  5425                           
  5426                           ;main.c: 426: CCPR1L = (uint8_t)(dc >> 2);
  5427  002DD2  C007  F009         	movff	SetBuzzerDuty@dc,??_SetBuzzerDuty
  5428  002DD6  C008  F00A         	movff	SetBuzzerDuty@dc+1,??_SetBuzzerDuty+1
  5429  002DDA  90D8               	bcf	status,0,c
  5430  002DDC  320A               	rrcf	??_SetBuzzerDuty+1,f,c
  5431  002DDE  3209               	rrcf	??_SetBuzzerDuty,f,c
  5432  002DE0  90D8               	bcf	status,0,c
  5433  002DE2  320A               	rrcf	??_SetBuzzerDuty+1,f,c
  5434  002DE4  3209               	rrcf	??_SetBuzzerDuty,f,c
  5435  002DE6  5009               	movf	??_SetBuzzerDuty,w,c
  5436  002DE8  6EBE               	movwf	4030,c	;volatile
  5437                           
  5438                           ; BSR set to: 0
  5439  002DEA  0012               	return		;funcret
  5440  002DEC  FFFF               	dw	65535	; errata NOP
  5441  002DEE                     __end_of_SetBuzzerDuty:
  5442                           	opt stack 0
  5443                           tblptru	equ	0xFF8
  5444                           tblptrh	equ	0xFF7
  5445                           tblptrl	equ	0xFF6
  5446                           tablat	equ	0xFF5
  5447                           prodh	equ	0xFF4
  5448                           prodl	equ	0xFF3
  5449                           intcon	equ	0xFF2
  5450                           postinc0	equ	0xFEE
  5451                           wreg	equ	0xFE8
  5452                           postdec1	equ	0xFE5
  5453                           fsr1h	equ	0xFE2
  5454                           fsr1l	equ	0xFE1
  5455                           indf2	equ	0xFDF
  5456                           postinc2	equ	0xFDE
  5457                           postdec2	equ	0xFDD
  5458                           fsr2h	equ	0xFDA
  5459                           fsr2l	equ	0xFD9
  5460                           status	equ	0xFD8
  5461                           
  5462 ;; *************** function _GetTime *****************
  5463 ;; Defined at:
  5464 ;;		line 207 in file "user.c"
  5465 ;; Parameters:    Size  Location     Type
  5466 ;;		None
  5467 ;; Auto vars:     Size  Location     Type
  5468 ;;		None
  5469 ;; Return value:  Size  Location     Type
  5470 ;;                  1    wreg      PTR long 
  5471 ;; Registers used:
  5472 ;;		wreg
  5473 ;; Tracked objects:
  5474 ;;		On entry : E/0
  5475 ;;		On exit  : E/0
  5476 ;;		Unchanged: E/0
  5477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5478 ;;      Params:         2       0       0       0       0       0       0
  5479 ;;      Locals:         0       0       0       0       0       0       0
  5480 ;;      Temps:          0       0       0       0       0       0       0
  5481 ;;      Totals:         2       0       0       0       0       0       0
  5482 ;;Total ram usage:        2 bytes
  5483 ;; Hardware stack levels used:    1
  5484 ;; Hardware stack levels required when called:    2
  5485 ;; This function calls:
  5486 ;;		Nothing
  5487 ;; This function is called by:
  5488 ;;		_SoundPlayNextStep
  5489 ;;		_PlaySound
  5490 ;;		_ProcessDiary
  5491 ;;		_main
  5492 ;;		_CommandSetLed
  5493 ;; This function uses a non-reentrant model
  5494 ;;
  5495                           
  5496                           	psect	text29
  5497  003038                     __ptext29:
  5498                           	opt stack 0
  5499  003038                     _GetTime:
  5500                           	opt stack 24
  5501                           
  5502                           ; BSR set to: 0
  5503                           ;incstack = 0
  5504  003038  FFFF               	dw	65535
  5505                           
  5506                           ;user.c: 209: return &currentTime;
  5507  00303A  0EE4               	movlw	_currentTime& (0+255)
  5508  00303C  0012               	return		;funcret
  5509  00303E  FFFF               	dw	65535	; errata NOP
  5510  003040                     __end_of_GetTime:
  5511                           	opt stack 0
  5512                           tblptru	equ	0xFF8
  5513                           tblptrh	equ	0xFF7
  5514                           tblptrl	equ	0xFF6
  5515                           tablat	equ	0xFF5
  5516                           prodh	equ	0xFF4
  5517                           prodl	equ	0xFF3
  5518                           intcon	equ	0xFF2
  5519                           postinc0	equ	0xFEE
  5520                           wreg	equ	0xFE8
  5521                           postdec1	equ	0xFE5
  5522                           fsr1h	equ	0xFE2
  5523                           fsr1l	equ	0xFE1
  5524                           indf2	equ	0xFDF
  5525                           postinc2	equ	0xFDE
  5526                           postdec2	equ	0xFDD
  5527                           fsr2h	equ	0xFDA
  5528                           fsr2l	equ	0xFD9
  5529                           status	equ	0xFD8
  5530                           
  5531 ;; *************** function _LoadNextEvent *****************
  5532 ;; Defined at:
  5533 ;;		line 698 in file "main.c"
  5534 ;; Parameters:    Size  Location     Type
  5535 ;;		None
  5536 ;; Auto vars:     Size  Location     Type
  5537 ;;  v1              1   12[COMRAM] unsigned char 
  5538 ;;  totalMinutes    2   10[COMRAM] unsigned int 
  5539 ;; Return value:  Size  Location     Type
  5540 ;;                  1    wreg      void 
  5541 ;; Registers used:
  5542 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5543 ;; Tracked objects:
  5544 ;;		On entry : 0/0
  5545 ;;		On exit  : 0/0
  5546 ;;		Unchanged: 0/0
  5547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5548 ;;      Params:         0       0       0       0       0       0       0
  5549 ;;      Locals:         3       0       0       0       0       0       0
  5550 ;;      Temps:          2       0       0       0       0       0       0
  5551 ;;      Totals:         5       0       0       0       0       0       0
  5552 ;;Total ram usage:        5 bytes
  5553 ;; Hardware stack levels used:    1
  5554 ;; Hardware stack levels required when called:    3
  5555 ;; This function calls:
  5556 ;;		_getTotalMinutes
  5557 ;; This function is called by:
  5558 ;;		_InitFromEeprom
  5559 ;;		_ProcessDiary
  5560 ;;		_main
  5561 ;;		_io_poll
  5562 ;; This function uses a non-reentrant model
  5563 ;;
  5564                           
  5565                           	psect	text30
  5566  001774                     __ptext30:
  5567                           	opt stack 0
  5568  001774                     _LoadNextEvent:
  5569                           	opt stack 26
  5570                           
  5571                           ;incstack = 0
  5572  001774  FFFF               	dw	65535
  5573                           
  5574                           ;main.c: 700: if(eventCount == 0)
  5575  001776  5070               	movf	_eventCount,w,c
  5576  001778  E101 D089          	bz	l419
  5577                           
  5578                           ;main.c: 702: uint16_t totalMinutes;
  5579                           ;main.c: 703: if(!getTotalMinutes(&totalMinutes))
  5580  00177C  0E0B               	movlw	low LoadNextEvent@totalMinutes
  5581  00177E  6E07               	movwf	getTotalMinutes@totalMinutes,c
  5582  001780  6A08               	clrf	getTotalMinutes@totalMinutes+1,c
  5583  001782  EC5D  F017         	call	_getTotalMinutes	;wreg free
  5584  001786  0900               	iorlw	0
  5585  001788  E101 D081          	bz	l419
  5586  00178C                     l7830:
  5587                           
  5588                           ;main.c: 707: {
  5589                           ;main.c: 708: if(_currenDiaryEvent.NextEventNum == 0xff)
  5590  00178C  0100               	movlb	0	; () banked
  5591  00178E  29A8               	incf	(__currenDiaryEvent+8)& (0+255),w,b
  5592  001790  E102               	bnz	l7834
  5593                           
  5594                           ; BSR set to: 0
  5595                           ;main.c: 709: _currenDiaryEvent.NextEventNum = 0;
  5596  001792  6BA8               	clrf	(__currenDiaryEvent+8)& (0+255),b
  5597  001794  D001               	goto	l7836
  5598  001796                     l7834:
  5599                           
  5600                           ; BSR set to: 0
  5601                           ;main.c: 710: else
  5602                           ;main.c: 711: _currenDiaryEvent.NextEventNum++;
  5603  001796  2BA8               	incf	(__currenDiaryEvent+8)& (0+255),f,b
  5604  001798                     l7836:
  5605  001798  FFFF               	dw	65535	; assembler added errata NOP
  5606                           
  5607                           ; BSR set to: 0
  5608                           ;main.c: 712: _MODBUSInputRegs[2] = (((uint16_t)_currenDiaryEvent.FiredEventNum<<8)|_cur
      +                          renDiaryEvent.NextEventNum);
  5609  00179A  51A1               	movf	(__currenDiaryEvent+1)& (0+255),w,b
  5610  00179C  6E09               	movwf	??_LoadNextEvent& (0+255),c
  5611  00179E  51A8               	movf	(__currenDiaryEvent+8)& (0+255),w,b
  5612  0017A0  0101               	movlb	1	; () banked
  5613  0017A2  6FAE               	movwf	(__MODBUSInputRegs+4)& (0+255),b
  5614  0017A4  C009  F1AF         	movff	??_LoadNextEvent,__MODBUSInputRegs+5
  5615                           
  5616                           ; BSR set to: 1
  5617                           ;main.c: 713: if(_currenDiaryEvent.NextEventNum >= eventCount)
  5618  0017A8  5070               	movf	_eventCount,w,c
  5619  0017AA  0100               	movlb	0	; () banked
  5620  0017AC  5DA8               	subwf	(__currenDiaryEvent+8)& (0+255),w,b
  5621  0017AE  E30F               	bnc	l7846
  5622                           
  5623                           ; BSR set to: 0
  5624                           ;main.c: 714: {
  5625                           ;main.c: 715: _currenDiaryEvent.NextEventNum = 0xff;
  5626  0017B0  69A8               	setf	(__currenDiaryEvent+8)& (0+255),b
  5627                           
  5628                           ;main.c: 716: _currenDiaryEvent.NextEventTotalMinutes = 0;
  5629  0017B2  6BA2               	clrf	(__currenDiaryEvent+2)& (0+255),b
  5630  0017B4  6BA3               	clrf	(__currenDiaryEvent+3)& (0+255),b
  5631                           
  5632                           ;main.c: 717: _MODBUSInputRegs[3] = 0;
  5633  0017B6  0101               	movlb	1	; () banked
  5634  0017B8  6BB0               	clrf	(__MODBUSInputRegs+6)& (0+255),b
  5635  0017BA  6BB1               	clrf	(__MODBUSInputRegs+7)& (0+255),b
  5636                           
  5637                           ; BSR set to: 1
  5638                           ;main.c: 718: _MODBUSInputRegs[2] = (((uint16_t)_currenDiaryEvent.FiredEventNum<<8)|_cur
      +                          renDiaryEvent.NextEventNum);
  5639  0017BC  0100               	movlb	0	; () banked
  5640  0017BE  51A1               	movf	(__currenDiaryEvent+1)& (0+255),w,b
  5641  0017C0  6E09               	movwf	??_LoadNextEvent& (0+255),c
  5642  0017C2  51A8               	movf	(__currenDiaryEvent+8)& (0+255),w,b
  5643  0017C4  0101               	movlb	1	; () banked
  5644  0017C6  6FAE               	movwf	(__MODBUSInputRegs+4)& (0+255),b
  5645  0017C8  C009  F1AF         	movff	??_LoadNextEvent,__MODBUSInputRegs+5
  5646  0017CC  D060               	goto	l419
  5647  0017CE                     l7846:
  5648                           
  5649                           ; BSR set to: 0
  5650                           ;main.c: 720: }
  5651                           ;main.c: 731: uint8_t v1 = ( EEADR = 10 + 1 + _currenDiaryEvent.NextEventNum * 2, (void)
      +                          0, RD = 1, EEDATA);
  5652  0017CE  51A8               	movf	(__currenDiaryEvent+8)& (0+255),w,b
  5653  0017D0  0D02               	mullw	2
  5654  0017D2  50F3               	movf	prodl,w,c
  5655  0017D4  0F0B               	addlw	11
  5656  0017D6  6EA9               	movwf	4009,c	;volatile
  5657                           
  5658                           ; BSR set to: 0
  5659  0017D8  80A6               	bsf	4006,0,c	;volatile
  5660                           
  5661                           ; BSR set to: 0
  5662  0017DA  CFA8 F00D          	movff	4008,LoadNextEvent@v1	;volatile
  5663                           
  5664                           ;main.c: 732: _currenDiaryEvent.NextEventTotalMinutes = (v1 & 0x1F) * 60;
  5665  0017DE  500D               	movf	LoadNextEvent@v1,w,c
  5666  0017E0  0B1F               	andlw	31
  5667  0017E2  0D3C               	mullw	60
  5668  0017E4  CFF3 F0A2          	movff	prodl,__currenDiaryEvent+2
  5669  0017E8  CFF4 F0A3          	movff	prodh,__currenDiaryEvent+3
  5670                           
  5671                           ; BSR set to: 0
  5672                           ;main.c: 734: _nextEventPlayDuration = (v1 >> 5);
  5673  0017EC  380D               	swapf	LoadNextEvent@v1,w,c
  5674  0017EE  42E8               	rrncf	wreg,f,c
  5675  0017F0  0B07               	andlw	7
  5676  0017F2  6FCB               	movwf	__nextEventPlayDuration& (0+255),b
  5677  0017F4  6BCC               	clrf	(__nextEventPlayDuration+1)& (0+255),b
  5678                           
  5679                           ;main.c: 735: switch(_nextEventPlayDuration)
  5680  0017F6  D01A               	goto	l7868
  5681  0017F8                     l7854:
  5682                           
  5683                           ; BSR set to: 0
  5684                           ;main.c: 738: _nextEventPlayDuration = 10;
  5685  0017F8  6BCC               	clrf	(__nextEventPlayDuration+1)& (0+255),b
  5686  0017FA  0E0A               	movlw	10
  5687  0017FC  D011               	goto	L8
  5688  0017FE                     l7856:
  5689                           
  5690                           ; BSR set to: 0
  5691                           ;main.c: 741: _nextEventPlayDuration = 30;
  5692  0017FE  6BCC               	clrf	(__nextEventPlayDuration+1)& (0+255),b
  5693  001800  0E1E               	movlw	30
  5694  001802  D00E               	goto	L8
  5695  001804                     l7858:
  5696                           
  5697                           ; BSR set to: 0
  5698                           ;main.c: 744: _nextEventPlayDuration = 60;
  5699  001804  6BCC               	clrf	(__nextEventPlayDuration+1)& (0+255),b
  5700  001806  0E3C               	movlw	60
  5701  001808  D00B               	goto	L8
  5702  00180A                     l7860:
  5703                           
  5704                           ; BSR set to: 0
  5705                           ;main.c: 747: _nextEventPlayDuration = 60*5;
  5706  00180A  0E01               	movlw	1
  5707  00180C  6FCC               	movwf	(__nextEventPlayDuration+1)& (0+255),b
  5708  00180E  0E2C               	movlw	44
  5709  001810  D007               	goto	L8
  5710  001812                     l7862:
  5711                           
  5712                           ; BSR set to: 0
  5713                           ;main.c: 750: _nextEventPlayDuration = 60*12;
  5714  001812  0E02               	movlw	2
  5715  001814  6FCC               	movwf	(__nextEventPlayDuration+1)& (0+255),b
  5716  001816  0ED0               	movlw	208
  5717  001818  D003               	goto	L8
  5718  00181A                     l7864:
  5719                           
  5720                           ; BSR set to: 0
  5721                           ;main.c: 753: _nextEventPlayDuration = 60*30;
  5722  00181A  0E07               	movlw	7
  5723  00181C  6FCC               	movwf	(__nextEventPlayDuration+1)& (0+255),b
  5724  00181E  0E08               	movlw	8
  5725  001820                     L8:
  5726  001820  FFFF               	dw	65535	; assembler added errata NOP
  5727  001822  6FCB               	movwf	__nextEventPlayDuration& (0+255),b
  5728                           
  5729                           ;main.c: 754: break;
  5730  001824  D019               	goto	l7870
  5731  001826                     l433:
  5732                           
  5733                           ; BSR set to: 0
  5734                           ;main.c: 756: _nextEventPlayDuration = 65535;
  5735  001826  69CB               	setf	__nextEventPlayDuration& (0+255),b
  5736  001828  69CC               	setf	(__nextEventPlayDuration+1)& (0+255),b
  5737                           
  5738                           ;main.c: 757: break;
  5739  00182A  D016               	goto	l7870
  5740  00182C                     l7868:
  5741  00182C  FFFF               	dw	65535	; assembler added errata NOP
  5742                           
  5743                           ; BSR set to: 0
  5744  00182E  C0CB  F009         	movff	__nextEventPlayDuration,??_LoadNextEvent
  5745  001832  C0CC  F00A         	movff	__nextEventPlayDuration+1,??_LoadNextEvent+1
  5746                           
  5747                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5748                           ; Switch size 1, requested type "speed"
  5749                           ; Number of cases is 1, Range of values is 0 to 0
  5750                           ; switch strategies available:
  5751                           ; Name         Instructions Cycles
  5752                           ; simple_byte            4     3 (average)
  5753                           ;	Chosen strategy is simple_byte
  5754  001836  500A               	movf	??_LoadNextEvent+1,w,c
  5755  001838  E10F               	bnz	l7870
  5756                           
  5757                           ; BSR set to: 0
  5758                           ; Switch size 1, requested type "speed"
  5759                           ; Number of cases is 7, Range of values is 1 to 7
  5760                           ; switch strategies available:
  5761                           ; Name         Instructions Cycles
  5762                           ; simple_byte           22    12 (average)
  5763                           ;	Chosen strategy is simple_byte
  5764  00183A  5009               	movf	??_LoadNextEvent,w,c
  5765  00183C  0A01               	xorlw	1	; case 1
  5766  00183E  E0DC               	bz	l7854
  5767  001840  0A03               	xorlw	3	; case 2
  5768  001842  E0DD               	bz	l7856
  5769  001844  0A01               	xorlw	1	; case 3
  5770  001846  E0DE               	bz	l7858
  5771  001848  0A07               	xorlw	7	; case 4
  5772  00184A  E0DF               	bz	l7860
  5773  00184C  0A01               	xorlw	1	; case 5
  5774  00184E  E0E1               	bz	l7862
  5775  001850  0A03               	xorlw	3	; case 6
  5776  001852  E0E3               	bz	l7864
  5777  001854  0A01               	xorlw	1	; case 7
  5778  001856  E0E7               	bz	l433
  5779  001858                     l7870:
  5780  001858  FFFF               	dw	65535	; assembler added errata NOP
  5781                           
  5782                           ; BSR set to: 0
  5783                           ;main.c: 759: uint8_t v1 = ( EEADR = 10 + 1 + _currenDiaryEvent.NextEventNum * 2 + 1, (v
      +                          oid)0, RD = 1, EEDATA);
  5784  00185A  51A8               	movf	(__currenDiaryEvent+8)& (0+255),w,b
  5785  00185C  0D02               	mullw	2
  5786  00185E  50F3               	movf	prodl,w,c
  5787  001860  0F0C               	addlw	12
  5788  001862  6EA9               	movwf	4009,c	;volatile
  5789                           
  5790                           ; BSR set to: 0
  5791  001864  80A6               	bsf	4006,0,c	;volatile
  5792                           
  5793                           ; BSR set to: 0
  5794  001866  CFA8 F00D          	movff	4008,LoadNextEvent@v1	;volatile
  5795                           
  5796                           ; BSR set to: 0
  5797                           ;main.c: 760: _currenDiaryEvent.NextEventTotalMinutes += v1 & 0x3F;
  5798  00186A  500D               	movf	LoadNextEvent@v1,w,c
  5799  00186C  0B3F               	andlw	63
  5800  00186E  27A2               	addwf	(__currenDiaryEvent+2)& (0+255),f,b
  5801  001870  0E00               	movlw	0
  5802  001872  23A3               	addwfc	(__currenDiaryEvent+3)& (0+255),f,b
  5803                           
  5804                           ; BSR set to: 0
  5805                           ;main.c: 761: _nextEventSoundId = v1 >> 6;
  5806  001874  440D               	rlncf	LoadNextEvent@v1,w,c
  5807  001876  46E8               	rlncf	wreg,f,c
  5808  001878  0B03               	andlw	3
  5809  00187A  6FDB               	movwf	__nextEventSoundId& (0+255),b
  5810                           
  5811                           ; BSR set to: 0
  5812                           ;main.c: 763: }while(_currenDiaryEvent.NextEventTotalMinutes <= totalMinutes);
  5813  00187C  51A2               	movf	(__currenDiaryEvent+2)& (0+255),w,b
  5814  00187E  5C0B               	subwf	LoadNextEvent@totalMinutes,w,c
  5815  001880  51A3               	movf	(__currenDiaryEvent+3)& (0+255),w,b
  5816  001882  580C               	subwfb	LoadNextEvent@totalMinutes+1,w,c
  5817  001884  E283               	bc	l7830
  5818                           
  5819                           ; BSR set to: 0
  5820                           ;main.c: 764: _MODBUSInputRegs[3] = _currenDiaryEvent.NextEventTotalMinutes;
  5821  001886  C0A2  F1B0         	movff	__currenDiaryEvent+2,__MODBUSInputRegs+6
  5822  00188A  C0A3  F1B1         	movff	__currenDiaryEvent+3,__MODBUSInputRegs+7
  5823  00188E                     l419:
  5824  00188E  FFFF               	dw	65535	; assembler added errata NOP
  5825  001890  0012               	return		;funcret
  5826  001892  FFFF               	dw	65535	; errata NOP
  5827  001894                     __end_of_LoadNextEvent:
  5828                           	opt stack 0
  5829                           tblptru	equ	0xFF8
  5830                           tblptrh	equ	0xFF7
  5831                           tblptrl	equ	0xFF6
  5832                           tablat	equ	0xFF5
  5833                           prodh	equ	0xFF4
  5834                           prodl	equ	0xFF3
  5835                           intcon	equ	0xFF2
  5836                           postinc0	equ	0xFEE
  5837                           wreg	equ	0xFE8
  5838                           postdec1	equ	0xFE5
  5839                           fsr1h	equ	0xFE2
  5840                           fsr1l	equ	0xFE1
  5841                           indf2	equ	0xFDF
  5842                           postinc2	equ	0xFDE
  5843                           postdec2	equ	0xFDD
  5844                           fsr2h	equ	0xFDA
  5845                           fsr2l	equ	0xFD9
  5846                           status	equ	0xFD8
  5847                           
  5848 ;; *************** function _getTotalMinutes *****************
  5849 ;; Defined at:
  5850 ;;		line 267 in file "interrupts.c"
  5851 ;; Parameters:    Size  Location     Type
  5852 ;;  totalMinutes    2    6[COMRAM] PTR unsigned int 
  5853 ;;		 -> main@totalMinutes(2), ProcessDiary@totalMinutes(2), LoadNextEvent@totalMinutes(2), 
  5854 ;; Auto vars:     Size  Location     Type
  5855 ;;		None
  5856 ;; Return value:  Size  Location     Type
  5857 ;;                  1    wreg      unsigned char 
  5858 ;; Registers used:
  5859 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5860 ;; Tracked objects:
  5861 ;;		On entry : 0/0
  5862 ;;		On exit  : 0/0
  5863 ;;		Unchanged: 0/0
  5864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5865 ;;      Params:         2       0       0       0       0       0       0
  5866 ;;      Locals:         0       0       0       0       0       0       0
  5867 ;;      Temps:          0       0       0       0       0       0       0
  5868 ;;      Totals:         2       0       0       0       0       0       0
  5869 ;;Total ram usage:        2 bytes
  5870 ;; Hardware stack levels used:    1
  5871 ;; Hardware stack levels required when called:    2
  5872 ;; This function calls:
  5873 ;;		Nothing
  5874 ;; This function is called by:
  5875 ;;		_LoadNextEvent
  5876 ;;		_ProcessDiary
  5877 ;;		_main
  5878 ;; This function uses a non-reentrant model
  5879 ;;
  5880                           
  5881                           	psect	text31
  5882  002EBA                     __ptext31:
  5883                           	opt stack 0
  5884  002EBA                     _getTotalMinutes:
  5885                           	opt stack 26
  5886                           
  5887                           ;incstack = 0
  5888  002EBA  FFFF               	dw	65535
  5889                           
  5890                           ;interrupts.c: 269: if(globalHours == 0xFF)
  5891  002EBC  2872               	incf	_globalHours,w,c	;volatile
  5892  002EBE  E102               	bnz	l112
  5893                           
  5894                           ;interrupts.c: 270: return 0;
  5895  002EC0  0E00               	movlw	0
  5896  002EC2  D00B               	goto	l113
  5897  002EC4                     l112:
  5898                           
  5899                           ;interrupts.c: 271: (INTCONbits.GIE = 0);
  5900  002EC4  9EF2               	bcf	intcon,7,c	;volatile
  5901                           
  5902                           ;interrupts.c: 272: *totalMinutes = _totalMinutesFromDayStart;
  5903  002EC6  C007  FFD9         	movff	getTotalMinutes@totalMinutes,fsr2l
  5904  002ECA  C008  FFDA         	movff	getTotalMinutes@totalMinutes+1,fsr2h
  5905  002ECE  C0CD  FFDE         	movff	__totalMinutesFromDayStart,postinc2	;volatile
  5906  002ED2  C0CE  FFDD         	movff	__totalMinutesFromDayStart+1,postdec2	;volatile
  5907                           
  5908                           ;interrupts.c: 273: (INTCONbits.GIE = 1);
  5909  002ED6  8EF2               	bsf	intcon,7,c	;volatile
  5910                           
  5911                           ;interrupts.c: 274: return 1;
  5912  002ED8  0E01               	movlw	1
  5913  002EDA                     l113:
  5914  002EDA  FFFF               	dw	65535	; assembler added errata NOP
  5915  002EDC  0012               	return		;funcret
  5916  002EDE  FFFF               	dw	65535	; errata NOP
  5917  002EE0                     __end_of_getTotalMinutes:
  5918                           	opt stack 0
  5919                           tblptru	equ	0xFF8
  5920                           tblptrh	equ	0xFF7
  5921                           tblptrl	equ	0xFF6
  5922                           tablat	equ	0xFF5
  5923                           prodh	equ	0xFF4
  5924                           prodl	equ	0xFF3
  5925                           intcon	equ	0xFF2
  5926                           postinc0	equ	0xFEE
  5927                           wreg	equ	0xFE8
  5928                           postdec1	equ	0xFE5
  5929                           fsr1h	equ	0xFE2
  5930                           fsr1l	equ	0xFE1
  5931                           indf2	equ	0xFDF
  5932                           postinc2	equ	0xFDE
  5933                           postdec2	equ	0xFDD
  5934                           fsr2h	equ	0xFDA
  5935                           fsr2l	equ	0xFD9
  5936                           status	equ	0xFD8
  5937                           
  5938 ;; *************** function _LightLed *****************
  5939 ;; Defined at:
  5940 ;;		line 325 in file "main.c"
  5941 ;; Parameters:    Size  Location     Type
  5942 ;;  ledNum          1    wreg     unsigned char 
  5943 ;;  ledState        1    6[COMRAM] enum E2454
  5944 ;;  blink           1    7[COMRAM] unsigned char 
  5945 ;; Auto vars:     Size  Location     Type
  5946 ;;  ledNum          1   11[COMRAM] unsigned char 
  5947 ;;  statusShift     1   13[COMRAM] unsigned char 
  5948 ;;  ststusIndex     1   12[COMRAM] unsigned char 
  5949 ;; Return value:  Size  Location     Type
  5950 ;;                  1    wreg      void 
  5951 ;; Registers used:
  5952 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5953 ;; Tracked objects:
  5954 ;;		On entry : 0/1
  5955 ;;		On exit  : 0/0
  5956 ;;		Unchanged: 0/0
  5957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5958 ;;      Params:         2       0       0       0       0       0       0
  5959 ;;      Locals:         3       0       0       0       0       0       0
  5960 ;;      Temps:          3       0       0       0       0       0       0
  5961 ;;      Totals:         8       0       0       0       0       0       0
  5962 ;;Total ram usage:        8 bytes
  5963 ;; Hardware stack levels used:    1
  5964 ;; Hardware stack levels required when called:    2
  5965 ;; This function calls:
  5966 ;;		Nothing
  5967 ;; This function is called by:
  5968 ;;		_SwitchOffAllDiaryLeds
  5969 ;;		_ShowFailure
  5970 ;;		_ResetEvent
  5971 ;;		_ResetEventFromCommand
  5972 ;;		_ProcessDiary
  5973 ;;		_CommandSetLed
  5974 ;; This function uses a non-reentrant model
  5975 ;;
  5976                           
  5977                           	psect	text32
  5978  00096A                     __ptext32:
  5979                           	opt stack 0
  5980  00096A                     _LightLed:
  5981                           	opt stack 25
  5982                           
  5983                           ;incstack = 0
  5984  00096A  FFFF               	dw	65535
  5985                           
  5986                           ;LightLed@ledNum stored from wreg
  5987  00096C  6E0C               	movwf	LightLed@ledNum,c
  5988                           
  5989                           ;main.c: 327: if(ledNum < 1 || ledNum > 60)
  5990  00096E  500C               	movf	LightLed@ledNum,w,c
  5991  000970  E101 D171          	bz	l258
  5992  000974  0E3C               	movlw	60
  5993  000976  640C               	cpfsgt	LightLed@ledNum,c
  5994  000978  D001               	goto	l5936
  5995  00097A  D16D               	goto	l258
  5996  00097C                     l5936:
  5997  00097C  FFFF               	dw	65535	; assembler added errata NOP
  5998                           
  5999                           ;main.c: 329: ledNum--;
  6000  00097E  060C               	decf	LightLed@ledNum,f,c
  6001                           
  6002                           ;main.c: 331: uint8_t ststusIndex = ledNum >> 2;
  6003  000980  400C               	rrncf	LightLed@ledNum,w,c
  6004  000982  42E8               	rrncf	wreg,f,c
  6005  000984  0B3F               	andlw	63
  6006  000986  6E0D               	movwf	LightLed@ststusIndex,c
  6007                           
  6008                           ;main.c: 332: uint8_t statusShift = (ledNum & 0x03) << 1;
  6009  000988  C00C  F009         	movff	LightLed@ledNum,??_LightLed
  6010  00098C  0E03               	movlw	3
  6011  00098E  1609               	andwf	??_LightLed,f,c
  6012  000990  90D8               	bcf	status,0,c
  6013  000992  3409               	rlcf	??_LightLed,w,c
  6014  000994  6E0E               	movwf	LightLed@statusShift,c
  6015                           
  6016                           ;main.c: 334: switch(ledState)
  6017  000996  D153               	goto	l5976
  6018  000998                     l5942:
  6019                           
  6020                           ;main.c: 337: ((ledStatuses[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1)));
  6021  000998  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6022  00099C  2A09               	incf	??_LightLed,f,c
  6023  00099E  0E01               	movlw	1
  6024  0009A0  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6025  0009A2  2A09               	incf	??_LightLed,f,c
  6026  0009A4  D003               	goto	u4774
  6027  0009A6                     u4775:
  6028  0009A6  FFFF               	dw	65535	; assembler added errata NOP
  6029  0009A8  90D8               	bcf	status,0,c
  6030  0009AA  360A               	rlcf	??_LightLed+1,f,c
  6031  0009AC                     u4774:
  6032  0009AC  FFFF               	dw	65535	; assembler added errata NOP
  6033  0009AE  2E09               	decfsz	??_LightLed,f,c
  6034  0009B0  D7FA               	goto	u4775
  6035  0009B2  1C0A               	comf	??_LightLed+1,w,c
  6036  0009B4  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  6037  0009B6  500D               	movf	LightLed@ststusIndex,w,c
  6038  0009B8  0F90               	addlw	low _ledStatuses
  6039  0009BA  6ED9               	movwf	fsr2l,c
  6040  0009BC  6ADA               	clrf	fsr2h,c
  6041  0009BE  500B               	movf	??_LightLed+2,w,c
  6042  0009C0  16DF               	andwf	indf2,f,c
  6043                           
  6044                           ;main.c: 338: ((ledStatuses[ststusIndex]) &= ~((unsigned short)1 << (statusShift)));
  6045  0009C2  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6046  0009C6  0E01               	movlw	1
  6047  0009C8  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6048  0009CA  2A09               	incf	??_LightLed,f,c
  6049  0009CC  D003               	goto	u4784
  6050  0009CE                     u4785:
  6051  0009CE  FFFF               	dw	65535	; assembler added errata NOP
  6052  0009D0  90D8               	bcf	status,0,c
  6053  0009D2  360A               	rlcf	??_LightLed+1,f,c
  6054  0009D4                     u4784:
  6055  0009D4  FFFF               	dw	65535	; assembler added errata NOP
  6056  0009D6  2E09               	decfsz	??_LightLed,f,c
  6057  0009D8  D7FA               	goto	u4785
  6058  0009DA  1C0A               	comf	??_LightLed+1,w,c
  6059  0009DC  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  6060  0009DE  500D               	movf	LightLed@ststusIndex,w,c
  6061  0009E0  0F90               	addlw	low _ledStatuses
  6062  0009E2  6ED9               	movwf	fsr2l,c
  6063  0009E4  6ADA               	clrf	fsr2h,c
  6064  0009E6  500B               	movf	??_LightLed+2,w,c
  6065  0009E8  16DF               	andwf	indf2,f,c
  6066                           
  6067                           ;main.c: 339: ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1)));
  6068  0009EA  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6069  0009EE  2A09               	incf	??_LightLed,f,c
  6070  0009F0  0E01               	movlw	1
  6071  0009F2  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6072  0009F4  2A09               	incf	??_LightLed,f,c
  6073  0009F6  D003               	goto	u4794
  6074  0009F8                     u4795:
  6075  0009F8  FFFF               	dw	65535	; assembler added errata NOP
  6076  0009FA  90D8               	bcf	status,0,c
  6077  0009FC  360A               	rlcf	??_LightLed+1,f,c
  6078  0009FE                     u4794:
  6079  0009FE  FFFF               	dw	65535	; assembler added errata NOP
  6080  000A00  2E09               	decfsz	??_LightLed,f,c
  6081  000A02  D7FA               	goto	u4795
  6082  000A04  1C0A               	comf	??_LightLed+1,w,c
  6083  000A06  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  6084  000A08  500D               	movf	LightLed@ststusIndex,w,c
  6085  000A0A  0F80               	addlw	low _ledBlink
  6086  000A0C  6ED9               	movwf	fsr2l,c
  6087  000A0E  6ADA               	clrf	fsr2h,c
  6088  000A10  500B               	movf	??_LightLed+2,w,c
  6089  000A12  16DF               	andwf	indf2,f,c
  6090                           
  6091                           ;main.c: 340: ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift)));
  6092  000A14  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6093  000A18  0E01               	movlw	1
  6094  000A1A  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6095  000A1C  2A09               	incf	??_LightLed,f,c
  6096  000A1E  D003               	goto	u4804
  6097  000A20                     u4805:
  6098  000A20  FFFF               	dw	65535	; assembler added errata NOP
  6099  000A22  90D8               	bcf	status,0,c
  6100  000A24  360A               	rlcf	??_LightLed+1,f,c
  6101  000A26                     u4804:
  6102  000A26  FFFF               	dw	65535	; assembler added errata NOP
  6103  000A28  2E09               	decfsz	??_LightLed,f,c
  6104  000A2A  D7FA               	goto	u4805
  6105  000A2C  D05F               	goto	L9
  6106  000A2E                     l5944:
  6107                           
  6108                           ;main.c: 343: ((ledStatuses[ststusIndex]) |= ((unsigned short)1 << (statusShift + 1)));
  6109  000A2E  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6110  000A32  2A09               	incf	??_LightLed,f,c
  6111  000A34  0E01               	movlw	1
  6112  000A36  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6113  000A38  2A09               	incf	??_LightLed,f,c
  6114  000A3A  D003               	goto	u4814
  6115  000A3C                     u4815:
  6116  000A3C  FFFF               	dw	65535	; assembler added errata NOP
  6117  000A3E  90D8               	bcf	status,0,c
  6118  000A40  360A               	rlcf	??_LightLed+1,f,c
  6119  000A42                     u4814:
  6120  000A42  FFFF               	dw	65535	; assembler added errata NOP
  6121  000A44  2E09               	decfsz	??_LightLed,f,c
  6122  000A46  D7FA               	goto	u4815
  6123  000A48  500D               	movf	LightLed@ststusIndex,w,c
  6124  000A4A  0F90               	addlw	low _ledStatuses
  6125  000A4C  6ED9               	movwf	fsr2l,c
  6126  000A4E  6ADA               	clrf	fsr2h,c
  6127  000A50  500A               	movf	??_LightLed+1,w,c
  6128  000A52  12DF               	iorwf	indf2,f,c
  6129                           
  6130                           ;main.c: 344: ((ledStatuses[ststusIndex]) &= ~((unsigned short)1 << (statusShift)));
  6131  000A54  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6132  000A58  0E01               	movlw	1
  6133  000A5A  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6134  000A5C  2A09               	incf	??_LightLed,f,c
  6135  000A5E  D003               	goto	u4824
  6136  000A60                     u4825:
  6137  000A60  FFFF               	dw	65535	; assembler added errata NOP
  6138  000A62  90D8               	bcf	status,0,c
  6139  000A64  360A               	rlcf	??_LightLed+1,f,c
  6140  000A66                     u4824:
  6141  000A66  FFFF               	dw	65535	; assembler added errata NOP
  6142  000A68  2E09               	decfsz	??_LightLed,f,c
  6143  000A6A  D7FA               	goto	u4825
  6144  000A6C  1C0A               	comf	??_LightLed+1,w,c
  6145  000A6E  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  6146  000A70  500D               	movf	LightLed@ststusIndex,w,c
  6147  000A72  0F90               	addlw	low _ledStatuses
  6148  000A74  6ED9               	movwf	fsr2l,c
  6149  000A76  6ADA               	clrf	fsr2h,c
  6150  000A78  500B               	movf	??_LightLed+2,w,c
  6151  000A7A  16DF               	andwf	indf2,f,c
  6152                           
  6153                           ;main.c: 345: (blink ? ((ledBlink[ststusIndex]) |= ((unsigned short)1 << (statusShift + 
      +                          1))) : ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1))));
  6154  000A7C  5008               	movf	LightLed@blink,w,c
  6155  000A7E  E014               	bz	l5950
  6156  000A80  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6157  000A84  2A09               	incf	??_LightLed,f,c
  6158  000A86  0E01               	movlw	1
  6159  000A88  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6160  000A8A  2A09               	incf	??_LightLed,f,c
  6161  000A8C  D003               	goto	u4844
  6162  000A8E                     u4845:
  6163  000A8E  FFFF               	dw	65535	; assembler added errata NOP
  6164  000A90  90D8               	bcf	status,0,c
  6165  000A92  360A               	rlcf	??_LightLed+1,f,c
  6166  000A94                     u4844:
  6167  000A94  FFFF               	dw	65535	; assembler added errata NOP
  6168  000A96  2E09               	decfsz	??_LightLed,f,c
  6169  000A98  D7FA               	goto	u4845
  6170  000A9A  500D               	movf	LightLed@ststusIndex,w,c
  6171  000A9C  0F80               	addlw	low _ledBlink
  6172  000A9E  6ED9               	movwf	fsr2l,c
  6173  000AA0  6ADA               	clrf	fsr2h,c
  6174  000AA2  500A               	movf	??_LightLed+1,w,c
  6175  000AA4  12DF               	iorwf	indf2,f,c
  6176  000AA6  D015               	goto	l266
  6177  000AA8                     l5950:
  6178  000AA8  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6179  000AAC  2A09               	incf	??_LightLed,f,c
  6180  000AAE  0E01               	movlw	1
  6181  000AB0  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6182  000AB2  2A09               	incf	??_LightLed,f,c
  6183  000AB4  D003               	goto	u4854
  6184  000AB6                     u4855:
  6185  000AB6  FFFF               	dw	65535	; assembler added errata NOP
  6186  000AB8  90D8               	bcf	status,0,c
  6187  000ABA  360A               	rlcf	??_LightLed+1,f,c
  6188  000ABC                     u4854:
  6189  000ABC  FFFF               	dw	65535	; assembler added errata NOP
  6190  000ABE  2E09               	decfsz	??_LightLed,f,c
  6191  000AC0  D7FA               	goto	u4855
  6192  000AC2  1C0A               	comf	??_LightLed+1,w,c
  6193  000AC4  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  6194  000AC6  500D               	movf	LightLed@ststusIndex,w,c
  6195  000AC8  0F80               	addlw	low _ledBlink
  6196  000ACA  6ED9               	movwf	fsr2l,c
  6197  000ACC  6ADA               	clrf	fsr2h,c
  6198  000ACE  500B               	movf	??_LightLed+2,w,c
  6199  000AD0  16DF               	andwf	indf2,f,c
  6200  000AD2                     l266:
  6201  000AD2  FFFF               	dw	65535	; assembler added errata NOP
  6202                           
  6203                           ;main.c: 346: ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift)));
  6204  000AD4  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6205  000AD8  0E01               	movlw	1
  6206  000ADA  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6207  000ADC  2A09               	incf	??_LightLed,f,c
  6208  000ADE  D003               	goto	u4864
  6209  000AE0                     u4865:
  6210  000AE0  FFFF               	dw	65535	; assembler added errata NOP
  6211  000AE2  90D8               	bcf	status,0,c
  6212  000AE4  360A               	rlcf	??_LightLed+1,f,c
  6213  000AE6                     u4864:
  6214  000AE6  FFFF               	dw	65535	; assembler added errata NOP
  6215  000AE8  2E09               	decfsz	??_LightLed,f,c
  6216  000AEA  D7FA               	goto	u4865
  6217  000AEC                     L9:
  6218  000AEC  FFFF               	dw	65535	; assembler added errata NOP
  6219  000AEE  1C0A               	comf	??_LightLed+1,w,c
  6220  000AF0  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  6221  000AF2  500D               	movf	LightLed@ststusIndex,w,c
  6222  000AF4  0F80               	addlw	low _ledBlink
  6223  000AF6  6ED9               	movwf	fsr2l,c
  6224  000AF8  6ADA               	clrf	fsr2h,c
  6225  000AFA  500B               	movf	??_LightLed+2,w,c
  6226  000AFC  16DF               	andwf	indf2,f,c
  6227                           
  6228                           ;main.c: 347: break;
  6229  000AFE  D0AB               	goto	l258
  6230  000B00                     l5952:
  6231                           
  6232                           ;main.c: 349: ((ledStatuses[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1)));
  6233  000B00  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6234  000B04  2A09               	incf	??_LightLed,f,c
  6235  000B06  0E01               	movlw	1
  6236  000B08  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6237  000B0A  2A09               	incf	??_LightLed,f,c
  6238  000B0C  D003               	goto	u4874
  6239  000B0E                     u4875:
  6240  000B0E  FFFF               	dw	65535	; assembler added errata NOP
  6241  000B10  90D8               	bcf	status,0,c
  6242  000B12  360A               	rlcf	??_LightLed+1,f,c
  6243  000B14                     u4874:
  6244  000B14  FFFF               	dw	65535	; assembler added errata NOP
  6245  000B16  2E09               	decfsz	??_LightLed,f,c
  6246  000B18  D7FA               	goto	u4875
  6247  000B1A  1C0A               	comf	??_LightLed+1,w,c
  6248  000B1C  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  6249  000B1E  500D               	movf	LightLed@ststusIndex,w,c
  6250  000B20  0F90               	addlw	low _ledStatuses
  6251  000B22  6ED9               	movwf	fsr2l,c
  6252  000B24  6ADA               	clrf	fsr2h,c
  6253  000B26  500B               	movf	??_LightLed+2,w,c
  6254  000B28  16DF               	andwf	indf2,f,c
  6255                           
  6256                           ;main.c: 350: ((ledStatuses[ststusIndex]) |= ((unsigned short)1 << (statusShift)));
  6257  000B2A  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6258  000B2E  0E01               	movlw	1
  6259  000B30  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6260  000B32  2A09               	incf	??_LightLed,f,c
  6261  000B34  D003               	goto	u4884
  6262  000B36                     u4885:
  6263  000B36  FFFF               	dw	65535	; assembler added errata NOP
  6264  000B38  90D8               	bcf	status,0,c
  6265  000B3A  360A               	rlcf	??_LightLed+1,f,c
  6266  000B3C                     u4884:
  6267  000B3C  FFFF               	dw	65535	; assembler added errata NOP
  6268  000B3E  2E09               	decfsz	??_LightLed,f,c
  6269  000B40  D7FA               	goto	u4885
  6270  000B42  500D               	movf	LightLed@ststusIndex,w,c
  6271  000B44  0F90               	addlw	low _ledStatuses
  6272  000B46  6ED9               	movwf	fsr2l,c
  6273  000B48  6ADA               	clrf	fsr2h,c
  6274  000B4A  500A               	movf	??_LightLed+1,w,c
  6275  000B4C  12DF               	iorwf	indf2,f,c
  6276                           
  6277                           ;main.c: 351: ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1)));
  6278  000B4E  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6279  000B52  2A09               	incf	??_LightLed,f,c
  6280  000B54  0E01               	movlw	1
  6281  000B56  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6282  000B58  2A09               	incf	??_LightLed,f,c
  6283  000B5A  D003               	goto	u4894
  6284  000B5C                     u4895:
  6285  000B5C  FFFF               	dw	65535	; assembler added errata NOP
  6286  000B5E  90D8               	bcf	status,0,c
  6287  000B60  360A               	rlcf	??_LightLed+1,f,c
  6288  000B62                     u4894:
  6289  000B62  FFFF               	dw	65535	; assembler added errata NOP
  6290  000B64  2E09               	decfsz	??_LightLed,f,c
  6291  000B66  D7FA               	goto	u4895
  6292  000B68  FFFF               	dw	65535	; assembler added errata NOP
  6293  000B6A  1C0A               	comf	??_LightLed+1,w,c
  6294  000B6C  6E0B               	movwf	(??_LightLed+2)& (0+255),c
  6295  000B6E  500D               	movf	LightLed@ststusIndex,w,c
  6296  000B70  0F80               	addlw	low _ledBlink
  6297  000B72  6ED9               	movwf	fsr2l,c
  6298  000B74  6ADA               	clrf	fsr2h,c
  6299  000B76  500B               	movf	??_LightLed+2,w,c
  6300  000B78  16DF               	andwf	indf2,f,c
  6301                           
  6302                           ;main.c: 352: (blink ? ((ledBlink[ststusIndex]) |= ((unsigned short)1 << (statusShift)))
      +                           : ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift))));
  6303  000B7A  5008               	movf	LightLed@blink,w,c
  6304  000B7C  E0AA               	bz	l266
  6305  000B7E                     l5956:
  6306  000B7E  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6307  000B82  0E01               	movlw	1
  6308  000B84  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6309  000B86  2A09               	incf	??_LightLed,f,c
  6310  000B88  D003               	goto	u4914
  6311  000B8A                     u4915:
  6312  000B8A  FFFF               	dw	65535	; assembler added errata NOP
  6313  000B8C  90D8               	bcf	status,0,c
  6314  000B8E  360A               	rlcf	??_LightLed+1,f,c
  6315  000B90                     u4914:
  6316  000B90  FFFF               	dw	65535	; assembler added errata NOP
  6317  000B92  2E09               	decfsz	??_LightLed,f,c
  6318  000B94  D7FA               	goto	u4915
  6319  000B96  500D               	movf	LightLed@ststusIndex,w,c
  6320  000B98  0F80               	addlw	low _ledBlink
  6321  000B9A  6ED9               	movwf	fsr2l,c
  6322  000B9C  6ADA               	clrf	fsr2h,c
  6323  000B9E  500A               	movf	??_LightLed+1,w,c
  6324  000BA0  12DF               	iorwf	indf2,f,c
  6325  000BA2  D059               	goto	l258
  6326  000BA4                     l5960:
  6327                           
  6328                           ;main.c: 355: ((ledStatuses[ststusIndex]) |= ((unsigned short)1 << (statusShift + 1)));
  6329  000BA4  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6330  000BA8  2A09               	incf	??_LightLed,f,c
  6331  000BAA  0E01               	movlw	1
  6332  000BAC  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6333  000BAE  2A09               	incf	??_LightLed,f,c
  6334  000BB0  D003               	goto	u4924
  6335  000BB2                     u4925:
  6336  000BB2  FFFF               	dw	65535	; assembler added errata NOP
  6337  000BB4  90D8               	bcf	status,0,c
  6338  000BB6  360A               	rlcf	??_LightLed+1,f,c
  6339  000BB8                     u4924:
  6340  000BB8  FFFF               	dw	65535	; assembler added errata NOP
  6341  000BBA  2E09               	decfsz	??_LightLed,f,c
  6342  000BBC  D7FA               	goto	u4925
  6343  000BBE  500D               	movf	LightLed@ststusIndex,w,c
  6344  000BC0  0F90               	addlw	low _ledStatuses
  6345  000BC2  6ED9               	movwf	fsr2l,c
  6346  000BC4  6ADA               	clrf	fsr2h,c
  6347  000BC6  500A               	movf	??_LightLed+1,w,c
  6348  000BC8  12DF               	iorwf	indf2,f,c
  6349                           
  6350                           ;main.c: 356: ((ledStatuses[ststusIndex]) |= ((unsigned short)1 << (statusShift)));
  6351  000BCA  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6352  000BCE  0E01               	movlw	1
  6353  000BD0  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6354  000BD2  2A09               	incf	??_LightLed,f,c
  6355  000BD4  D003               	goto	u4934
  6356  000BD6                     u4935:
  6357  000BD6  FFFF               	dw	65535	; assembler added errata NOP
  6358  000BD8  90D8               	bcf	status,0,c
  6359  000BDA  360A               	rlcf	??_LightLed+1,f,c
  6360  000BDC                     u4934:
  6361  000BDC  FFFF               	dw	65535	; assembler added errata NOP
  6362  000BDE  2E09               	decfsz	??_LightLed,f,c
  6363  000BE0  D7FA               	goto	u4935
  6364  000BE2  500D               	movf	LightLed@ststusIndex,w,c
  6365  000BE4  0F90               	addlw	low _ledStatuses
  6366  000BE6  6ED9               	movwf	fsr2l,c
  6367  000BE8  6ADA               	clrf	fsr2h,c
  6368  000BEA  500A               	movf	??_LightLed+1,w,c
  6369  000BEC  12DF               	iorwf	indf2,f,c
  6370                           
  6371                           ;main.c: 357: (blink ? ((ledBlink[ststusIndex]) |= ((unsigned short)1 << (statusShift + 
      +                          1))) : ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift + 1))));
  6372  000BEE  5008               	movf	LightLed@blink,w,c
  6373  000BF0  E014               	bz	l5966
  6374  000BF2  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6375  000BF6  2A09               	incf	??_LightLed,f,c
  6376  000BF8  0E01               	movlw	1
  6377  000BFA  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6378  000BFC  2A09               	incf	??_LightLed,f,c
  6379  000BFE  D003               	goto	u4954
  6380  000C00                     u4955:
  6381  000C00  FFFF               	dw	65535	; assembler added errata NOP
  6382  000C02  90D8               	bcf	status,0,c
  6383  000C04  360A               	rlcf	??_LightLed+1,f,c
  6384  000C06                     u4954:
  6385  000C06  FFFF               	dw	65535	; assembler added errata NOP
  6386  000C08  2E09               	decfsz	??_LightLed,f,c
  6387  000C0A  D7FA               	goto	u4955
  6388  000C0C  500D               	movf	LightLed@ststusIndex,w,c
  6389  000C0E  0F80               	addlw	low _ledBlink
  6390  000C10  6ED9               	movwf	fsr2l,c
  6391  000C12  6ADA               	clrf	fsr2h,c
  6392  000C14  500A               	movf	??_LightLed+1,w,c
  6393  000C16  12DF               	iorwf	indf2,f,c
  6394  000C18  D00E               	goto	l5968
  6395  000C1A                     l5966:
  6396  000C1A  C00E  F009         	movff	LightLed@statusShift,??_LightLed
  6397  000C1E  2A09               	incf	??_LightLed,f,c
  6398  000C20  0E01               	movlw	1
  6399  000C22  6E0A               	movwf	(??_LightLed+1)& (0+255),c
  6400  000C24  2A09               	incf	??_LightLed,f,c
  6401  000C26  D003               	goto	u4964
  6402  000C28                     u4965:
  6403  000C28  FFFF               	dw	65535	; assembler added errata NOP
  6404  000C2A  90D8               	bcf	status,0,c
  6405  000C2C  360A               	rlcf	??_LightLed+1,f,c
  6406  000C2E                     u4964:
  6407  000C2E  FFFF               	dw	65535	; assembler added errata NOP
  6408  000C30  2E09               	decfsz	??_LightLed,f,c
  6409  000C32  D7FA               	goto	u4965
  6410  000C34  D799               	goto	L10
  6411  000C36                     l5968:
  6412  000C36  FFFF               	dw	65535	; assembler added errata NOP
  6413                           
  6414                           ;main.c: 358: (blink ? ((ledBlink[ststusIndex]) |= ((unsigned short)1 << (statusShift)))
      +                           : ((ledBlink[ststusIndex]) &= ~((unsigned short)1 << (statusShift))));
  6415  000C38  5008               	movf	LightLed@blink,w,c
  6416  000C3A  E1A1               	bnz	l5956
  6417  000C3C  D74A               	goto	l266
  6418  000C3E                     l5976:
  6419  000C3E  FFFF               	dw	65535	; assembler added errata NOP
  6420  000C40  5007               	movf	LightLed@ledState,w,c
  6421                           
  6422                           ; Switch size 1, requested type "speed"
  6423                           ; Number of cases is 4, Range of values is 0 to 3
  6424                           ; switch strategies available:
  6425                           ; Name         Instructions Cycles
  6426                           ; simple_byte           13     7 (average)
  6427                           ;	Chosen strategy is simple_byte
  6428  000C42  E101 D6A9          	bz	l5942
  6429  000C46  0A01               	xorlw	1	; case 1
  6430  000C48  E101 D6F1          	bz	l5944
  6431  000C4C  0A03               	xorlw	3	; case 2
  6432  000C4E  E101 D757          	bz	l5952
  6433  000C52  0A01               	xorlw	1	; case 3
  6434  000C54  E0A7               	bz	l5960
  6435  000C56                     l258:
  6436  000C56  FFFF               	dw	65535	; assembler added errata NOP
  6437  000C58  0012               	return		;funcret
  6438  000C5A  FFFF               	dw	65535	; errata NOP
  6439  000C5C                     __end_of_LightLed:
  6440                           	opt stack 0
  6441                           tblptru	equ	0xFF8
  6442                           tblptrh	equ	0xFF7
  6443                           tblptrl	equ	0xFF6
  6444                           tablat	equ	0xFF5
  6445                           prodh	equ	0xFF4
  6446                           prodl	equ	0xFF3
  6447                           intcon	equ	0xFF2
  6448                           postinc0	equ	0xFEE
  6449                           wreg	equ	0xFE8
  6450                           postdec1	equ	0xFE5
  6451                           fsr1h	equ	0xFE2
  6452                           fsr1l	equ	0xFE1
  6453                           indf2	equ	0xFDF
  6454                           postinc2	equ	0xFDE
  6455                           postdec2	equ	0xFDD
  6456                           fsr2h	equ	0xFDA
  6457                           fsr2l	equ	0xFD9
  6458                           status	equ	0xFD8
  6459                           
  6460 ;; *************** function _GetCurrentEventDiodeNum *****************
  6461 ;; Defined at:
  6462 ;;		line 501 in file "main.c"
  6463 ;; Parameters:    Size  Location     Type
  6464 ;;		None
  6465 ;; Auto vars:     Size  Location     Type
  6466 ;;		None
  6467 ;; Return value:  Size  Location     Type
  6468 ;;                  1    wreg      unsigned char 
  6469 ;; Registers used:
  6470 ;;		wreg, status,2, status,0
  6471 ;; Tracked objects:
  6472 ;;		On entry : F/0
  6473 ;;		On exit  : F/0
  6474 ;;		Unchanged: 0/0
  6475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6476 ;;      Params:         0       0       0       0       0       0       0
  6477 ;;      Locals:         0       0       0       0       0       0       0
  6478 ;;      Temps:          0       0       0       0       0       0       0
  6479 ;;      Totals:         0       0       0       0       0       0       0
  6480 ;;Total ram usage:        0 bytes
  6481 ;; Hardware stack levels used:    1
  6482 ;; Hardware stack levels required when called:    2
  6483 ;; This function calls:
  6484 ;;		Nothing
  6485 ;; This function is called by:
  6486 ;;		_ResetEvent
  6487 ;;		_ProcessDiary
  6488 ;; This function uses a non-reentrant model
  6489 ;;
  6490                           
  6491                           	psect	text33
  6492  003004                     __ptext33:
  6493                           	opt stack 0
  6494  003004                     _GetCurrentEventDiodeNum:
  6495                           	opt stack 27
  6496                           
  6497                           ;incstack = 0
  6498  003004  FFFF               	dw	65535
  6499                           
  6500                           ; BSR set to: 0
  6501                           ;main.c: 503: return 60 - _maxDiaryEvents + _currenDiaryEvent.FiredEventNum + 1;
  6502  003006  506D               	movf	__maxDiaryEvents,w,c
  6503  003008  5DA1               	subwf	(__currenDiaryEvent+1)& (0+255),w,b
  6504  00300A  0F3D               	addlw	61
  6505                           
  6506                           ; BSR set to: 0
  6507  00300C  0012               	return		;funcret
  6508  00300E  FFFF               	dw	65535	; errata NOP
  6509  003010                     __end_of_GetCurrentEventDiodeNum:
  6510                           	opt stack 0
  6511                           tblptru	equ	0xFF8
  6512                           tblptrh	equ	0xFF7
  6513                           tblptrl	equ	0xFF6
  6514                           tablat	equ	0xFF5
  6515                           prodh	equ	0xFF4
  6516                           prodl	equ	0xFF3
  6517                           intcon	equ	0xFF2
  6518                           postinc0	equ	0xFEE
  6519                           wreg	equ	0xFE8
  6520                           postdec1	equ	0xFE5
  6521                           fsr1h	equ	0xFE2
  6522                           fsr1l	equ	0xFE1
  6523                           indf2	equ	0xFDF
  6524                           postinc2	equ	0xFDE
  6525                           postdec2	equ	0xFDD
  6526                           fsr2h	equ	0xFDA
  6527                           fsr2l	equ	0xFD9
  6528                           status	equ	0xFD8
  6529                           
  6530 ;; *************** function _ModbusPoll *****************
  6531 ;; Defined at:
  6532 ;;		line 461 in file "ModbusRtu.c"
  6533 ;; Parameters:    Size  Location     Type
  6534 ;;  discreteInpu    2   91[COMRAM] unsigned short 
  6535 ;;  coils           1   93[COMRAM] PTR unsigned short 
  6536 ;;		 -> _MODBUSCoils(2), 
  6537 ;;  inputRegs       2   94[COMRAM] PTR unsigned short 
  6538 ;;		 -> _MODBUSInputRegs(30), 
  6539 ;;  inputRegsCou    1   96[COMRAM] const unsigned char 
  6540 ;;  holdingRegs     2   97[COMRAM] PTR unsigned short 
  6541 ;;		 -> _MODBUSHoldingRegs(30), 
  6542 ;;  holdingRegsC    1   99[COMRAM] const unsigned char 
  6543 ;; Auto vars:     Size  Location     Type
  6544 ;;  u8exception     1  102[COMRAM] unsigned char 
  6545 ;;  i8state         1  101[COMRAM] unsigned char 
  6546 ;;  u8current       1  100[COMRAM] unsigned char 
  6547 ;; Return value:  Size  Location     Type
  6548 ;;                  1    wreg      char 
  6549 ;; Registers used:
  6550 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6551 ;; Tracked objects:
  6552 ;;		On entry : 0/1
  6553 ;;		On exit  : 0/0
  6554 ;;		Unchanged: 0/0
  6555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6556 ;;      Params:         9       0       0       0       0       0       0
  6557 ;;      Locals:         3       0       0       0       0       0       0
  6558 ;;      Temps:          0       0       0       0       0       0       0
  6559 ;;      Totals:        12       0       0       0       0       0       0
  6560 ;;Total ram usage:       12 bytes
  6561 ;; Hardware stack levels used:    1
  6562 ;; Hardware stack levels required when called:    7
  6563 ;; This function calls:
  6564 ;;		_ModbusBuildException
  6565 ;;		_ModbusGetRxBuffer
  6566 ;;		_ModbusGetRxBufferHeader
  6567 ;;		_ModbusProcess_FC1
  6568 ;;		_ModbusProcess_FC100
  6569 ;;		_ModbusProcess_FC101
  6570 ;;		_ModbusProcess_FC102
  6571 ;;		_ModbusProcess_FC15
  6572 ;;		_ModbusProcess_FC16
  6573 ;;		_ModbusProcess_FC17
  6574 ;;		_ModbusProcess_FC21
  6575 ;;		_ModbusProcess_FC3
  6576 ;;		_ModbusProcess_FC43
  6577 ;;		_ModbusProcess_FC5
  6578 ;;		_ModbusProcess_FC6
  6579 ;;		_ModbusProcess_FC7
  6580 ;;		_ModbusSendTxBuffer
  6581 ;;		_ModbusSetExceptionStatusBit
  6582 ;;		_ModbusValidateRequest
  6583 ;;		_PortAvailable
  6584 ;;		_PortClearReadBuffer
  6585 ;;		_millis
  6586 ;; This function is called by:
  6587 ;;		_main
  6588 ;; This function uses a non-reentrant model
  6589 ;;
  6590                           
  6591                           	psect	text34
  6592  00133C                     __ptext34:
  6593                           	opt stack 0
  6594  00133C                     _ModbusPoll:
  6595                           	opt stack 23
  6596                           
  6597                           ; BSR set to: 0
  6598                           ;incstack = 0
  6599  00133C  FFFF               	dw	65535
  6600                           
  6601                           ;ModbusRtu.c: 464: _lastFunction = MB_FC_NONE;
  6602  00133E  0100               	movlb	0	; () banked
  6603  001340  6BF2               	clrf	__lastFunction& (0+255),b
  6604                           
  6605                           ;ModbusRtu.c: 468: _inputRegsCount = inputRegsCount;
  6606  001342  C061  F0D8         	movff	ModbusPoll@inputRegsCount,__inputRegsCount
  6607                           
  6608                           ;ModbusRtu.c: 469: _holdingRegsCount = holdingRegsCount;
  6609  001346  C064  F0D7         	movff	ModbusPoll@holdingRegsCount,__holdingRegsCount
  6610                           
  6611                           ; BSR set to: 0
  6612                           ;ModbusRtu.c: 474: uint8_t u8current = PortAvailable();
  6613  00134A  EC20  F018         	call	_PortAvailable	;wreg free
  6614  00134E  6E65               	movwf	ModbusPoll@u8current,c
  6615                           
  6616                           ; BSR set to: 0
  6617                           ;ModbusRtu.c: 476: if (u8current == 0) return 0;
  6618  001350  5065               	movf	ModbusPoll@u8current,w,c
  6619  001352  E103               	bnz	l7540
  6620  001354                     l7536:
  6621  001354  FFFF               	dw	65535	; assembler added errata NOP
  6622                           
  6623                           ; BSR set to: 0
  6624  001356  0E00               	movlw	0
  6625  001358  D0C3               	goto	l767
  6626  00135A                     l7540:
  6627                           
  6628                           ; BSR set to: 0
  6629                           ;ModbusRtu.c: 479: if (u8current != _u8lastRec)
  6630  00135A  51E1               	movf	__u8lastRec& (0+255),w,b
  6631  00135C  1865               	xorwf	ModbusPoll@u8current,w,c
  6632  00135E  E012               	bz	l7550
  6633                           
  6634                           ; BSR set to: 0
  6635                           ;ModbusRtu.c: 480: {
  6636                           ;ModbusRtu.c: 481: _u8lastRec = u8current;
  6637  001360  C065  F0E1         	movff	ModbusPoll@u8current,__u8lastRec
  6638                           
  6639                           ; BSR set to: 0
  6640                           ;ModbusRtu.c: 482: _u32time = millis() + 5;
  6641  001364  0E05               	movlw	5
  6642  001366  EC22  F017         	call	_millis	;wreg free
  6643  00136A  2407               	addwf	?_millis,w,c
  6644  00136C  0100               	movlb	0	; () banked
  6645  00136E  6FB3               	movwf	__u32time& (0+255),b
  6646  001370  0E00               	movlw	0
  6647  001372  2008               	addwfc	?_millis+1,w,c
  6648  001374  6FB4               	movwf	(__u32time+1)& (0+255),b
  6649  001376  0E00               	movlw	0
  6650  001378  2009               	addwfc	?_millis+2,w,c
  6651  00137A  6FB5               	movwf	(__u32time+2)& (0+255),b
  6652  00137C  0E00               	movlw	0
  6653  00137E  200A               	addwfc	?_millis+3,w,c
  6654  001380  6FB6               	movwf	(__u32time+3)& (0+255),b
  6655  001382  D7E8               	goto	l7536
  6656  001384                     l7550:
  6657                           
  6658                           ; BSR set to: 0
  6659                           ;ModbusRtu.c: 484: }
  6660                           ;ModbusRtu.c: 485: if (millis() < _u32time)
  6661  001384  EC22  F017         	call	_millis	;wreg free
  6662  001388  0100               	movlb	0	; () banked
  6663  00138A  51B3               	movf	__u32time& (0+255),w,b
  6664  00138C  5C07               	subwf	?_millis,w,c
  6665  00138E  51B4               	movf	(__u32time+1)& (0+255),w,b
  6666  001390  5808               	subwfb	?_millis+1,w,c
  6667  001392  51B5               	movf	(__u32time+2)& (0+255),w,b
  6668  001394  5809               	subwfb	?_millis+2,w,c
  6669  001396  51B6               	movf	(__u32time+3)& (0+255),w,b
  6670  001398  580A               	subwfb	?_millis+3,w,c
  6671  00139A  E3DC               	bnc	l7536
  6672                           
  6673                           ; BSR set to: 0
  6674                           ;ModbusRtu.c: 488: _u8lastRec = 0;
  6675  00139C  6BE1               	clrf	__u8lastRec& (0+255),b
  6676                           
  6677                           ; BSR set to: 0
  6678                           ;ModbusRtu.c: 490: _u8lastError = i8state;
  6679  00139E  EC8A  F016         	call	_ModbusGetRxBufferHeader	;wreg free
  6680  0013A2  6E66               	movwf	ModbusPoll@i8state,c
  6681                           
  6682                           ; BSR set to: 0
  6683                           ;ModbusRtu.c: 491: if (i8state < 4)
  6684  0013A4  0E04               	movlw	4
  6685  0013A6  6066               	cpfslt	ModbusPoll@i8state,c
  6686  0013A8  D005               	goto	l7566
  6687                           
  6688                           ; BSR set to: 0
  6689                           ;ModbusRtu.c: 492: {
  6690                           ;ModbusRtu.c: 493: PortClearReadBuffer();
  6691  0013AA  ECF4  F017         	call	_PortClearReadBuffer	;wreg free
  6692  0013AE                     l7562:
  6693  0013AE  FFFF               	dw	65535	; assembler added errata NOP
  6694                           
  6695                           ;ModbusRtu.c: 494: return i8state;
  6696  0013B0  5066               	movf	ModbusPoll@i8state,w,c
  6697  0013B2  D096               	goto	l767
  6698  0013B4                     l7566:
  6699  0013B4  FFFF               	dw	65535	; assembler added errata NOP
  6700                           
  6701                           ; BSR set to: 0
  6702                           ;ModbusRtu.c: 495: }
  6703                           ;ModbusRtu.c: 497: if (_au8Buffer[ ID ] != _u8id)
  6704  0013B6  51E0               	movf	__u8id& (0+255),w,b
  6705  0013B8  0101               	movlb	1	; () banked
  6706  0013BA  1900               	xorwf	__au8Buffer& (0+255),w,b
  6707  0013BC  E003               	bz	l7574
  6708                           
  6709                           ; BSR set to: 1
  6710                           ;ModbusRtu.c: 498: {
  6711                           ;ModbusRtu.c: 499: PortClearReadBuffer();
  6712  0013BE  ECF4  F017         	call	_PortClearReadBuffer	;wreg free
  6713  0013C2  D7C8               	goto	l7536
  6714  0013C4                     l7574:
  6715                           
  6716                           ; BSR set to: 1
  6717                           ;ModbusRtu.c: 501: }
  6718                           ;ModbusRtu.c: 502: ModbusSetExceptionStatusBit(0, 0);
  6719  0013C4  0E00               	movlw	0
  6720  0013C6  6E07               	movwf	ModbusSetExceptionStatusBit@value,c
  6721  0013C8  EC34  F015         	call	_ModbusSetExceptionStatusBit
  6722                           
  6723                           ; BSR set to: 0
  6724                           ;ModbusRtu.c: 503: i8state = ModbusGetRxBuffer();
  6725  0013CC  ECEA  F015         	call	_ModbusGetRxBuffer	;wreg free
  6726  0013D0  6E66               	movwf	ModbusPoll@i8state,c
  6727                           
  6728                           ; BSR set to: 0
  6729                           ;ModbusRtu.c: 505: _u8lastError = i8state;
  6730  0013D2  ECF4  F017         	call	_PortClearReadBuffer	;wreg free
  6731                           
  6732                           ; BSR set to: 0
  6733                           ;ModbusRtu.c: 510: uint8_t u8exception = ModbusValidateRequest();
  6734  0013D6  EC2E  F006         	call	_ModbusValidateRequest	;wreg free
  6735  0013DA  6E67               	movwf	ModbusPoll@u8exception,c
  6736                           
  6737                           ;ModbusRtu.c: 511: if (u8exception > 0)
  6738  0013DC  5067               	movf	ModbusPoll@u8exception,w,c
  6739  0013DE  E009               	bz	l7594
  6740                           
  6741                           ;ModbusRtu.c: 512: {
  6742                           ;ModbusRtu.c: 513: if (u8exception != NO_REPLY)
  6743  0013E0  2867               	incf	ModbusPoll@u8exception,w,c
  6744  0013E2  E005               	bz	l7590
  6745                           
  6746                           ;ModbusRtu.c: 514: {
  6747                           ;ModbusRtu.c: 515: ModbusBuildException(u8exception);
  6748  0013E4  5067               	movf	ModbusPoll@u8exception,w,c
  6749  0013E6  EC80  F017         	call	_ModbusBuildException
  6750                           
  6751                           ; BSR set to: 1
  6752                           ;ModbusRtu.c: 516: ModbusSendTxBuffer();
  6753  0013EA  EC5A  F015         	call	_ModbusSendTxBuffer	;wreg free
  6754  0013EE                     l7590:
  6755                           
  6756                           ;ModbusRtu.c: 519: return u8exception;
  6757  0013EE  5067               	movf	ModbusPoll@u8exception,w,c
  6758  0013F0  D077               	goto	l767
  6759  0013F2                     l7594:
  6760                           
  6761                           ;ModbusRtu.c: 523: _u8lastError = 0;
  6762  0013F2  EC22  F017         	call	_millis	;wreg free
  6763                           
  6764                           ;ModbusRtu.c: 526: switch (_au8Buffer[ FUNC ])
  6765  0013F6  D052               	goto	l7658
  6766  0013F8                     l7596:
  6767                           
  6768                           ; BSR set to: 1
  6769                           ;ModbusRtu.c: 529: return ModbusProcess_FC1(*coils);
  6770  0013F8  505E               	movf	ModbusPoll@coils,w,c
  6771  0013FA  6ED9               	movwf	fsr2l,c
  6772  0013FC  6ADA               	clrf	fsr2h,c
  6773  0013FE  CFDE F016          	movff	postinc2,ModbusProcess_FC1@regs
  6774  001402  CFDD F017          	movff	postdec2,ModbusProcess_FC1@regs+1
  6775  001406  EC24  F00B         	call	_ModbusProcess_FC1	;wreg free
  6776  00140A  D06A               	goto	l767
  6777  00140C                     l7600:
  6778                           
  6779                           ; BSR set to: 1
  6780                           ;ModbusRtu.c: 531: return ModbusProcess_FC1(discreteInputs);
  6781  00140C  C05C  F016         	movff	ModbusPoll@discreteInputs,ModbusProcess_FC1@regs
  6782  001410  C05D  F017         	movff	ModbusPoll@discreteInputs+1,ModbusProcess_FC1@regs+1
  6783  001414  EC24  F00B         	call	_ModbusProcess_FC1	;wreg free
  6784  001418  D063               	goto	l767
  6785  00141A                     l7604:
  6786                           
  6787                           ; BSR set to: 1
  6788                           ;ModbusRtu.c: 533: return ModbusProcess_FC3(holdingRegs, holdingRegsCount);
  6789  00141A  C062  F016         	movff	ModbusPoll@holdingRegs,ModbusProcess_FC3@regs
  6790  00141E  C063  F017         	movff	ModbusPoll@holdingRegs+1,ModbusProcess_FC3@regs+1
  6791  001422  C064  F018         	movff	ModbusPoll@holdingRegsCount,ModbusProcess_FC3@u8size
  6792  001426  ECD9  F010         	call	_ModbusProcess_FC3	;wreg free
  6793  00142A  D05A               	goto	l767
  6794  00142C                     l7608:
  6795                           
  6796                           ; BSR set to: 1
  6797                           ;ModbusRtu.c: 535: return ModbusProcess_FC3(inputRegs, inputRegsCount);
  6798  00142C  C05F  F016         	movff	ModbusPoll@inputRegs,ModbusProcess_FC3@regs
  6799  001430  C060  F017         	movff	ModbusPoll@inputRegs+1,ModbusProcess_FC3@regs+1
  6800  001434  C061  F018         	movff	ModbusPoll@inputRegsCount,ModbusProcess_FC3@u8size
  6801  001438  ECD9  F010         	call	_ModbusProcess_FC3	;wreg free
  6802  00143C  D051               	goto	l767
  6803  00143E                     l7612:
  6804                           
  6805                           ; BSR set to: 1
  6806                           ;ModbusRtu.c: 537: return ModbusProcess_FC5(coils);
  6807  00143E  505E               	movf	ModbusPoll@coils,w,c
  6808  001440  EC33  F012         	call	_ModbusProcess_FC5
  6809  001444  D04D               	goto	l767
  6810  001446                     l7616:
  6811                           
  6812                           ; BSR set to: 1
  6813                           ;ModbusRtu.c: 539: return ModbusProcess_FC6(holdingRegs, holdingRegsCount);
  6814  001446  C062  F016         	movff	ModbusPoll@holdingRegs,ModbusProcess_FC6@regs
  6815  00144A  C063  F017         	movff	ModbusPoll@holdingRegs+1,ModbusProcess_FC6@regs+1
  6816  00144E  C064  F018         	movff	ModbusPoll@holdingRegsCount,ModbusProcess_FC6@u8size
  6817  001452  EC64  F014         	call	_ModbusProcess_FC6	;wreg free
  6818  001456  D044               	goto	l767
  6819  001458                     l7620:
  6820                           
  6821                           ; BSR set to: 1
  6822                           ;ModbusRtu.c: 541: return ModbusProcess_FC7();
  6823  001458  ECC5  F017         	call	_ModbusProcess_FC7	;wreg free
  6824  00145C  D041               	goto	l767
  6825  00145E                     l7624:
  6826                           
  6827                           ; BSR set to: 1
  6828                           ;ModbusRtu.c: 543: return ModbusProcess_FC15(coils);
  6829  00145E  505E               	movf	ModbusPoll@coils,w,c
  6830  001460  EC60  F00D         	call	_ModbusProcess_FC15
  6831  001464  D03D               	goto	l767
  6832  001466                     l7628:
  6833                           
  6834                           ; BSR set to: 1
  6835                           ;ModbusRtu.c: 545: return ModbusProcess_FC16(holdingRegs, holdingRegsCount);
  6836  001466  C062  F016         	movff	ModbusPoll@holdingRegs,ModbusProcess_FC16@regs
  6837  00146A  C063  F017         	movff	ModbusPoll@holdingRegs+1,ModbusProcess_FC16@regs+1
  6838  00146E  C064  F018         	movff	ModbusPoll@holdingRegsCount,ModbusProcess_FC16@u8size
  6839  001472  ECB9  F00F         	call	_ModbusProcess_FC16	;wreg free
  6840  001476  D034               	goto	l767
  6841  001478                     l7632:
  6842                           
  6843                           ; BSR set to: 1
  6844                           ;ModbusRtu.c: 547: return ModbusProcess_FC17();
  6845  001478  ECCC  F013         	call	_ModbusProcess_FC17	;wreg free
  6846  00147C  D031               	goto	l767
  6847  00147E                     l7636:
  6848                           
  6849                           ; BSR set to: 1
  6850                           ;ModbusRtu.c: 549: return ModbusProcess_FC21();
  6851  00147E  EC8B  F011         	call	_ModbusProcess_FC21	;wreg free
  6852  001482  D02E               	goto	l767
  6853  001484                     l7640:
  6854                           
  6855                           ; BSR set to: 1
  6856                           ;ModbusRtu.c: 551: return ModbusProcess_FC43();
  6857  001484  EC73  F00A         	call	_ModbusProcess_FC43	;wreg free
  6858  001488  D02B               	goto	l767
  6859  00148A                     l7644:
  6860                           
  6861                           ; BSR set to: 1
  6862                           ;ModbusRtu.c: 553: return ModbusProcess_FC100();
  6863  00148A  ECE1  F00E         	call	_ModbusProcess_FC100	;wreg free
  6864  00148E  D028               	goto	l767
  6865  001490                     l7648:
  6866                           
  6867                           ; BSR set to: 1
  6868                           ;ModbusRtu.c: 555: return ModbusProcess_FC101();
  6869  001490  ECA8  F016         	call	_ModbusProcess_FC101	;wreg free
  6870  001494  D025               	goto	l767
  6871  001496                     l7652:
  6872                           
  6873                           ; BSR set to: 1
  6874                           ;ModbusRtu.c: 557: return ModbusProcess_FC102();
  6875  001496  EC9F  F017         	call	_ModbusProcess_FC102	;wreg free
  6876  00149A  D022               	goto	l767
  6877  00149C                     l7658:
  6878  00149C  FFFF               	dw	65535	; assembler added errata NOP
  6879  00149E  0101               	movlb	1	; () banked
  6880  0014A0  5101               	movf	(__au8Buffer+1)& (0+255),w,b
  6881                           
  6882                           ; Switch size 1, requested type "speed"
  6883                           ; Number of cases is 15, Range of values is 1 to 102
  6884                           ; switch strategies available:
  6885                           ; Name         Instructions Cycles
  6886                           ; simple_byte           46    24 (average)
  6887                           ;	Chosen strategy is simple_byte
  6888  0014A2  0A01               	xorlw	1	; case 1
  6889  0014A4  E0A9               	bz	l7596
  6890  0014A6  0A03               	xorlw	3	; case 2
  6891  0014A8  E0B1               	bz	l7600
  6892  0014AA  0A01               	xorlw	1	; case 3
  6893  0014AC  E0B6               	bz	l7604
  6894  0014AE  0A07               	xorlw	7	; case 4
  6895  0014B0  E0BD               	bz	l7608
  6896  0014B2  0A01               	xorlw	1	; case 5
  6897  0014B4  E0C4               	bz	l7612
  6898  0014B6  0A03               	xorlw	3	; case 6
  6899  0014B8  E0C6               	bz	l7616
  6900  0014BA  0A01               	xorlw	1	; case 7
  6901  0014BC  E0CD               	bz	l7620
  6902  0014BE  0A08               	xorlw	8	; case 15
  6903  0014C0  E0CE               	bz	l7624
  6904  0014C2  0A1F               	xorlw	31	; case 16
  6905  0014C4  E0D0               	bz	l7628
  6906  0014C6  0A01               	xorlw	1	; case 17
  6907  0014C8  E0D7               	bz	l7632
  6908  0014CA  0A04               	xorlw	4	; case 21
  6909  0014CC  E0D8               	bz	l7636
  6910  0014CE  0A3E               	xorlw	62	; case 43
  6911  0014D0  E0D9               	bz	l7640
  6912  0014D2  0A4F               	xorlw	79	; case 100
  6913  0014D4  E0DA               	bz	l7644
  6914  0014D6  0A01               	xorlw	1	; case 101
  6915  0014D8  E0DB               	bz	l7648
  6916  0014DA  0A03               	xorlw	3	; case 102
  6917  0014DC  E0DC               	bz	l7652
  6918  0014DE  D767               	goto	l7562
  6919  0014E0                     l767:
  6920  0014E0  FFFF               	dw	65535	; assembler added errata NOP
  6921  0014E2  0012               	return		;funcret
  6922  0014E4  FFFF               	dw	65535	; errata NOP
  6923  0014E6                     __end_of_ModbusPoll:
  6924                           	opt stack 0
  6925                           tblptru	equ	0xFF8
  6926                           tblptrh	equ	0xFF7
  6927                           tblptrl	equ	0xFF6
  6928                           tablat	equ	0xFF5
  6929                           prodh	equ	0xFF4
  6930                           prodl	equ	0xFF3
  6931                           intcon	equ	0xFF2
  6932                           postinc0	equ	0xFEE
  6933                           wreg	equ	0xFE8
  6934                           postdec1	equ	0xFE5
  6935                           fsr1h	equ	0xFE2
  6936                           fsr1l	equ	0xFE1
  6937                           indf2	equ	0xFDF
  6938                           postinc2	equ	0xFDE
  6939                           postdec2	equ	0xFDD
  6940                           fsr2h	equ	0xFDA
  6941                           fsr2l	equ	0xFD9
  6942                           status	equ	0xFD8
  6943                           
  6944 ;; *************** function _PortClearReadBuffer *****************
  6945 ;; Defined at:
  6946 ;;		line 77 in file "interrupts.c"
  6947 ;; Parameters:    Size  Location     Type
  6948 ;;		None
  6949 ;; Auto vars:     Size  Location     Type
  6950 ;;		None
  6951 ;; Return value:  Size  Location     Type
  6952 ;;                  1    wreg      void 
  6953 ;; Registers used:
  6954 ;;		cstack
  6955 ;; Tracked objects:
  6956 ;;		On entry : E/0
  6957 ;;		On exit  : F/0
  6958 ;;		Unchanged: 0/0
  6959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6960 ;;      Params:         0       0       0       0       0       0       0
  6961 ;;      Locals:         0       0       0       0       0       0       0
  6962 ;;      Temps:          0       0       0       0       0       0       0
  6963 ;;      Totals:         0       0       0       0       0       0       0
  6964 ;;Total ram usage:        0 bytes
  6965 ;; Hardware stack levels used:    1
  6966 ;; Hardware stack levels required when called:    3
  6967 ;; This function calls:
  6968 ;;		_InitUartBuffer
  6969 ;; This function is called by:
  6970 ;;		_ModbusPoll
  6971 ;; This function uses a non-reentrant model
  6972 ;;
  6973                           
  6974                           	psect	text35
  6975  002FE8                     __ptext35:
  6976                           	opt stack 0
  6977  002FE8                     _PortClearReadBuffer:
  6978                           	opt stack 26
  6979                           
  6980                           ;incstack = 0
  6981  002FE8  FFFF               	dw	65535
  6982                           
  6983                           ;interrupts.c: 79: (INTCONbits.GIE = 0);
  6984  002FEA  9EF2               	bcf	intcon,7,c	;volatile
  6985                           
  6986                           ;interrupts.c: 80: InitUartBuffer();
  6987  002FEC  ECFB  F017         	call	_InitUartBuffer	;wreg free
  6988                           
  6989                           ; BSR set to: 0
  6990                           ;interrupts.c: 81: (INTCONbits.GIE = 1);
  6991  002FF0  8EF2               	bsf	intcon,7,c	;volatile
  6992                           
  6993                           ; BSR set to: 0
  6994  002FF2  0012               	return		;funcret
  6995  002FF4  FFFF               	dw	65535	; errata NOP
  6996  002FF6                     __end_of_PortClearReadBuffer:
  6997                           	opt stack 0
  6998                           tblptru	equ	0xFF8
  6999                           tblptrh	equ	0xFF7
  7000                           tblptrl	equ	0xFF6
  7001                           tablat	equ	0xFF5
  7002                           prodh	equ	0xFF4
  7003                           prodl	equ	0xFF3
  7004                           intcon	equ	0xFF2
  7005                           postinc0	equ	0xFEE
  7006                           wreg	equ	0xFE8
  7007                           postdec1	equ	0xFE5
  7008                           fsr1h	equ	0xFE2
  7009                           fsr1l	equ	0xFE1
  7010                           indf2	equ	0xFDF
  7011                           postinc2	equ	0xFDE
  7012                           postdec2	equ	0xFDD
  7013                           fsr2h	equ	0xFDA
  7014                           fsr2l	equ	0xFD9
  7015                           status	equ	0xFD8
  7016                           
  7017 ;; *************** function _ModbusValidateRequest *****************
  7018 ;; Defined at:
  7019 ;;		line 776 in file "ModbusRtu.c"
  7020 ;; Parameters:    Size  Location     Type
  7021 ;;		None
  7022 ;; Auto vars:     Size  Location     Type
  7023 ;;  recLenBytes     4   27[COMRAM] unsigned long 
  7024 ;;  startAddrByt    4   23[COMRAM] unsigned long 
  7025 ;;  readDevId       1   37[COMRAM] unsigned char 
  7026 ;;  i               1   36[COMRAM] unsigned char 
  7027 ;;  u16regs         2   39[COMRAM] unsigned short 
  7028 ;;  u16count        2   34[COMRAM] unsigned short 
  7029 ;;  u16MsgCRC       2   31[COMRAM] unsigned short 
  7030 ;;  u8regs          1   38[COMRAM] unsigned char 
  7031 ;;  isSupported     1   33[COMRAM] unsigned char 
  7032 ;; Return value:  Size  Location     Type
  7033 ;;                  1    wreg      unsigned char 
  7034 ;; Registers used:
  7035 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7036 ;; Tracked objects:
  7037 ;;		On entry : F/0
  7038 ;;		On exit  : 0/0
  7039 ;;		Unchanged: 0/0
  7040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7041 ;;      Params:         0       0       0       0       0       0       0
  7042 ;;      Locals:        18       0       0       0       0       0       0
  7043 ;;      Temps:          4       0       0       0       0       0       0
  7044 ;;      Totals:        22       0       0       0       0       0       0
  7045 ;;Total ram usage:       22 bytes
  7046 ;; Hardware stack levels used:    1
  7047 ;; Hardware stack levels required when called:    3
  7048 ;; This function calls:
  7049 ;;		_ModbusCalcCRC
  7050 ;; This function is called by:
  7051 ;;		_ModbusPoll
  7052 ;; This function uses a non-reentrant model
  7053 ;;
  7054                           
  7055                           	psect	text36
  7056  000C5C                     __ptext36:
  7057                           	opt stack 0
  7058  000C5C                     _ModbusValidateRequest:
  7059                           	opt stack 26
  7060                           
  7061                           ; BSR set to: 0
  7062                           ;incstack = 0
  7063  000C5C  FFFF               	dw	65535
  7064                           
  7065                           ; BSR set to: 0
  7066                           ;ModbusRtu.c: 779: uint16_t u16MsgCRC =
  7067                           ;ModbusRtu.c: 780: ((_au8Buffer[_u8BufferSize - 2] << 8)
  7068                           ;ModbusRtu.c: 781: | _au8Buffer[_u8BufferSize - 1]);
  7069  000C5E  0EFE               	movlw	low (__au8Buffer+65534)
  7070  000C60  246E               	addwf	__u8BufferSize,w,c
  7071  000C62  6ED9               	movwf	fsr2l,c
  7072  000C64  6ADA               	clrf	fsr2h,c
  7073  000C66  0E00               	movlw	high (__au8Buffer+65534)
  7074  000C68  22DA               	addwfc	fsr2h,f,c
  7075  000C6A  50DF               	movf	indf2,w,c
  7076  000C6C  6E15               	movwf	(??_ModbusValidateRequest+1)& (0+255),c
  7077  000C6E  6A14               	clrf	??_ModbusValidateRequest& (0+255),c
  7078  000C70  0EFF               	movlw	low (__au8Buffer+65535)
  7079  000C72  246E               	addwf	__u8BufferSize,w,c
  7080  000C74  6ED9               	movwf	fsr2l,c
  7081  000C76  6ADA               	clrf	fsr2h,c
  7082  000C78  0E00               	movlw	high (__au8Buffer+65535)
  7083  000C7A  22DA               	addwfc	fsr2h,f,c
  7084  000C7C  50DF               	movf	indf2,w,c
  7085  000C7E  1014               	iorwf	??_ModbusValidateRequest,w,c
  7086  000C80  6E20               	movwf	ModbusValidateRequest@u16MsgCRC,c
  7087  000C82  5015               	movf	??_ModbusValidateRequest+1,w,c
  7088  000C84  6E21               	movwf	ModbusValidateRequest@u16MsgCRC+1,c
  7089                           
  7090                           ; BSR set to: 0
  7091                           ;ModbusRtu.c: 783: {
  7092                           ;ModbusRtu.c: 784: _u16errCnt++;
  7093  000C86  506E               	movf	__u8BufferSize,w,c
  7094  000C88  0FFE               	addlw	254
  7095  000C8A  EC92  F013         	call	_ModbusCalcCRC
  7096  000C8E  5020               	movf	ModbusValidateRequest@u16MsgCRC,w,c
  7097  000C90  1807               	xorwf	?_ModbusCalcCRC,w,c
  7098  000C92  E103               	bnz	u5650
  7099  000C94  5021               	movf	ModbusValidateRequest@u16MsgCRC+1,w,c
  7100  000C96  1808               	xorwf	?_ModbusCalcCRC+1,w,c
  7101  000C98  E002               	bz	l827
  7102  000C9A                     u5650:
  7103                           
  7104                           ;ModbusRtu.c: 785: return NO_REPLY;
  7105  000C9A  0EFF               	movlw	255
  7106  000C9C  D11B               	goto	l828
  7107  000C9E                     l827:
  7108                           
  7109                           ;ModbusRtu.c: 786: }
  7110                           ;ModbusRtu.c: 789: bool isSupported = 0;
  7111  000C9E  6A22               	clrf	ModbusValidateRequest@isSupported,c
  7112                           
  7113                           ;ModbusRtu.c: 790: for (uint8_t i = 0; i< sizeof ( fctsupported); i++)
  7114  000CA0  6A25               	clrf	ModbusValidateRequest@i,c
  7115  000CA2                     l6634:
  7116  000CA2  FFFF               	dw	65535	; assembler added errata NOP
  7117                           
  7118                           ;ModbusRtu.c: 791: {
  7119                           ;ModbusRtu.c: 792: if (fctsupported[i] == _au8Buffer[FUNC])
  7120  000CA4  5025               	movf	ModbusValidateRequest@i,w,c
  7121  000CA6  0F01               	addlw	low _fctsupported
  7122  000CA8  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  7123  000CAA  C014  FFF6         	movff	??_ModbusValidateRequest,tblptrl
  7124  000CAE                     	if	1	;There is more than 1 active tblptr byte
  7125  000CAE  0E06               	movlw	high __smallconst
  7126  000CB0  6EF7               	movwf	tblptrh,c
  7127  000CB2                     	endif
  7128  000CB2                     	if	0	;tblptru may be non-zero
  7129  000CB2                     	endif
  7130  000CB2                     	if	0	;tblptru may be non-zero
  7131  000CB2                     	endif
  7132  000CB2  0008               	tblrd		*
  7133  000CB4  FFFF               	dw	65535	; errata NOP
  7134  000CB6  50F5               	movf	tablat,w,c
  7135  000CB8  0101               	movlb	1	; () banked
  7136  000CBA  1901               	xorwf	(__au8Buffer+1)& (0+255),w,b
  7137  000CBC  E103               	bnz	l6638
  7138                           
  7139                           ; BSR set to: 1
  7140                           ;ModbusRtu.c: 793: {
  7141                           ;ModbusRtu.c: 794: isSupported = 1;
  7142  000CBE  0E01               	movlw	1
  7143  000CC0  6E22               	movwf	ModbusValidateRequest@isSupported,c
  7144                           
  7145                           ;ModbusRtu.c: 795: break;
  7146  000CC2  D004               	goto	l6642
  7147  000CC4                     l6638:
  7148                           
  7149                           ; BSR set to: 1
  7150  000CC4  2A25               	incf	ModbusValidateRequest@i,f,c
  7151                           
  7152                           ; BSR set to: 1
  7153  000CC6  0E0E               	movlw	14
  7154  000CC8  6425               	cpfsgt	ModbusValidateRequest@i,c
  7155  000CCA  D7EB               	goto	l6634
  7156  000CCC                     l6642:
  7157  000CCC  FFFF               	dw	65535	; assembler added errata NOP
  7158                           
  7159                           ; BSR set to: 1
  7160                           ;ModbusRtu.c: 799: {
  7161                           ;ModbusRtu.c: 800: _u16errCnt++;
  7162  000CCE  5022               	movf	ModbusValidateRequest@isSupported,w,c
  7163  000CD0  E102               	bnz	l832
  7164  000CD2                     l6644:
  7165                           
  7166                           ; BSR set to: 1
  7167                           ;ModbusRtu.c: 801: return EXC_FUNC_CODE;
  7168  000CD2  0E01               	movlw	1
  7169  000CD4  D0FF               	goto	l828
  7170  000CD6                     l832:
  7171                           
  7172                           ; BSR set to: 1
  7173                           ;ModbusRtu.c: 806: uint16_t u16count = 0;
  7174  000CD6  6A23               	clrf	ModbusValidateRequest@u16count,c
  7175  000CD8  6A24               	clrf	ModbusValidateRequest@u16count+1,c
  7176                           
  7177                           ;ModbusRtu.c: 807: uint8_t u8regs;
  7178                           ;ModbusRtu.c: 808: switch (_au8Buffer[ FUNC ])
  7179  000CDA  D0D4               	goto	l6770
  7180  000CDC                     l6648:
  7181                           
  7182                           ; BSR set to: 1
  7183                           ;ModbusRtu.c: 811: case MB_FC_READ_DISCRETE_INPUT:
  7184                           ;ModbusRtu.c: 812: case MB_FC_WRITE_MULTIPLE_COILS:
  7185                           ;ModbusRtu.c: 814: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  7186  000CDC  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  7187  000CDE  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  7188  000CE0  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  7189  000CE2  6E28               	movwf	ModbusValidateRequest@u16regs,c
  7190  000CE4  C014  F029         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  7191                           
  7192                           ;ModbusRtu.c: 815: u16count = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ NB_LO ]);
  7193  000CE8  5104               	movf	(__au8Buffer+4)& (0+255),w,b
  7194  000CEA  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  7195  000CEC  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  7196  000CEE  6E23               	movwf	ModbusValidateRequest@u16count,c
  7197  000CF0  C014  F024         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16count+1
  7198                           
  7199                           ; BSR set to: 1
  7200                           ;ModbusRtu.c: 816: if (u16count > 16)
  7201  000CF4  5024               	movf	ModbusValidateRequest@u16count+1,w,c
  7202  000CF6  E103               	bnz	u5690
  7203  000CF8  0E11               	movlw	17
  7204  000CFA  5C23               	subwf	ModbusValidateRequest@u16count,w,c
  7205  000CFC  E302               	bnc	l6656
  7206  000CFE                     u5690:
  7207  000CFE                     l6652:
  7208                           
  7209                           ; BSR set to: 1
  7210                           ;ModbusRtu.c: 817: return EXC_REGS_QUANT;
  7211  000CFE  0E03               	movlw	3
  7212  000D00  D0E9               	goto	l828
  7213  000D02                     l6656:
  7214                           
  7215                           ; BSR set to: 1
  7216                           ;ModbusRtu.c: 818: if (u16regs > 15 || u16regs + u16count > 16)
  7217  000D02  5029               	movf	ModbusValidateRequest@u16regs+1,w,c
  7218  000D04  E110               	bnz	l6660
  7219  000D06  0E10               	movlw	16
  7220  000D08  5C28               	subwf	ModbusValidateRequest@u16regs,w,c
  7221  000D0A  E20D               	bc	l6660
  7222                           
  7223                           ; BSR set to: 1
  7224  000D0C  5023               	movf	ModbusValidateRequest@u16count,w,c
  7225  000D0E  2428               	addwf	ModbusValidateRequest@u16regs,w,c
  7226  000D10  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  7227  000D12  5024               	movf	ModbusValidateRequest@u16count+1,w,c
  7228  000D14  2029               	addwfc	ModbusValidateRequest@u16regs+1,w,c
  7229  000D16  6E15               	movwf	(??_ModbusValidateRequest+1)& (0+255),c
  7230  000D18  5015               	movf	??_ModbusValidateRequest+1,w,c
  7231  000D1A  E105               	bnz	u5710
  7232  000D1C  0E11               	movlw	17
  7233  000D1E  5C14               	subwf	??_ModbusValidateRequest,w,c
  7234  000D20                     L11:
  7235  000D20  FFFF               	dw	65535	; assembler added errata NOP
  7236  000D22  E201 D0D3          	bnc	l841
  7237  000D26                     u5710:
  7238  000D26                     l6660:
  7239  000D26  FFFF               	dw	65535	; assembler added errata NOP
  7240                           
  7241                           ;ModbusRtu.c: 819: return EXC_ADDR_RANGE;
  7242  000D28  0E02               	movlw	2
  7243  000D2A  D0D4               	goto	l828
  7244  000D2C                     l6664:
  7245                           
  7246                           ; BSR set to: 1
  7247                           ;ModbusRtu.c: 822: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  7248  000D2C  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  7249  000D2E  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  7250  000D30  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  7251  000D32  6E28               	movwf	ModbusValidateRequest@u16regs,c
  7252  000D34  C014  F029         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  7253                           
  7254                           ; BSR set to: 1
  7255                           ;ModbusRtu.c: 823: u8regs = _au8Buffer[ NB_HI ];
  7256  000D38  C104  F027         	movff	__au8Buffer+4,ModbusValidateRequest@u8regs
  7257                           
  7258                           ;ModbusRtu.c: 824: if (u8regs != 0x00 && u8regs != 0xFF)
  7259  000D3C  5027               	movf	ModbusValidateRequest@u8regs,w,c
  7260  000D3E  E002               	bz	l6674
  7261                           
  7262                           ; BSR set to: 1
  7263  000D40  2827               	incf	ModbusValidateRequest@u8regs,w,c
  7264  000D42  E1DD               	bnz	l6652
  7265  000D44                     l6674:
  7266                           
  7267                           ; BSR set to: 1
  7268                           ;ModbusRtu.c: 826: if (u16regs > 15)
  7269  000D44  5029               	movf	ModbusValidateRequest@u16regs+1,w,c
  7270  000D46  E1EF               	bnz	l6660
  7271  000D48  0E10               	movlw	16
  7272  000D4A  5C28               	subwf	ModbusValidateRequest@u16regs,w,c
  7273  000D4C  D7E9               	goto	L11
  7274  000D4E                     l6680:
  7275                           
  7276                           ; BSR set to: 1
  7277                           ;ModbusRtu.c: 830: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  7278  000D4E  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  7279  000D50  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  7280  000D52  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  7281  000D54  6E28               	movwf	ModbusValidateRequest@u16regs,c
  7282  000D56  C014  F029         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  7283  000D5A                     l6682:
  7284  000D5A  FFFF               	dw	65535	; assembler added errata NOP
  7285                           
  7286                           ; BSR set to: 1
  7287                           ;ModbusRtu.c: 831: u8regs = (uint8_t) u16regs;
  7288  000D5C  C028  F027         	movff	ModbusValidateRequest@u16regs,ModbusValidateRequest@u8regs
  7289                           
  7290                           ; BSR set to: 1
  7291                           ;ModbusRtu.c: 832: if (u8regs > _holdingRegsCount) return EXC_ADDR_RANGE;
  7292  000D60  5027               	movf	ModbusValidateRequest@u8regs,w,c
  7293  000D62  0100               	movlb	0	; () banked
  7294  000D64  5DD7               	subwf	__holdingRegsCount& (0+255),w,b
  7295  000D66  FFFF               	dw	65535	; assembler added errata NOP
  7296  000D68  E3DE               	bnc	l6660
  7297  000D6A  D0B0               	goto	l841
  7298  000D6C                     l6690:
  7299                           
  7300                           ; BSR set to: 1
  7301                           ;ModbusRtu.c: 835: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  7302  000D6C  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  7303  000D6E  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  7304  000D70  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  7305  000D72  6E28               	movwf	ModbusValidateRequest@u16regs,c
  7306  000D74  C014  F029         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  7307                           
  7308                           ; BSR set to: 1
  7309                           ;ModbusRtu.c: 836: u16regs += (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ NB_LO ]);
  7310  000D78  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  7311  000D7A  C104  F014         	movff	__au8Buffer+4,??_ModbusValidateRequest
  7312  000D7E  6A15               	clrf	(??_ModbusValidateRequest+1)& (0+255),c
  7313  000D80  C014  F015         	movff	??_ModbusValidateRequest,??_ModbusValidateRequest+1
  7314  000D84  6A14               	clrf	??_ModbusValidateRequest,c
  7315  000D86  1214               	iorwf	??_ModbusValidateRequest,f,c
  7316  000D88  5014               	movf	??_ModbusValidateRequest,w,c
  7317  000D8A  2628               	addwf	ModbusValidateRequest@u16regs,f,c
  7318  000D8C  5015               	movf	??_ModbusValidateRequest+1,w,c
  7319  000D8E  2229               	addwfc	ModbusValidateRequest@u16regs+1,f,c
  7320                           
  7321                           ; BSR set to: 1
  7322                           ;ModbusRtu.c: 837: u8regs = (uint8_t) u16regs;
  7323  000D90  C028  F027         	movff	ModbusValidateRequest@u16regs,ModbusValidateRequest@u8regs
  7324                           
  7325                           ; BSR set to: 1
  7326                           ;ModbusRtu.c: 838: if (u8regs > _inputRegsCount)
  7327  000D94  5027               	movf	ModbusValidateRequest@u8regs,w,c
  7328  000D96  0100               	movlb	0	; () banked
  7329  000D98  5DD8               	subwf	__inputRegsCount& (0+255),w,b
  7330  000D9A  D7E5               	goto	L12
  7331  000D9C                     l6702:
  7332                           
  7333                           ; BSR set to: 1
  7334                           ;ModbusRtu.c: 842: case MB_FC_WRITE_MULTIPLE_REGISTERS:
  7335                           ;ModbusRtu.c: 843: u16regs = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ ADD_LO ]);
  7336  000D9C  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  7337  000D9E  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  7338  000DA0  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  7339  000DA2  6E28               	movwf	ModbusValidateRequest@u16regs,c
  7340  000DA4  C014  F029         	movff	??_ModbusValidateRequest,ModbusValidateRequest@u16regs+1
  7341                           
  7342                           ; BSR set to: 1
  7343                           ;ModbusRtu.c: 844: u16regs += (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ NB_LO ]);
  7344  000DA8  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  7345  000DAA  C104  F014         	movff	__au8Buffer+4,??_ModbusValidateRequest
  7346  000DAE  6A15               	clrf	(??_ModbusValidateRequest+1)& (0+255),c
  7347  000DB0  C014  F015         	movff	??_ModbusValidateRequest,??_ModbusValidateRequest+1
  7348  000DB4  6A14               	clrf	??_ModbusValidateRequest,c
  7349  000DB6  1214               	iorwf	??_ModbusValidateRequest,f,c
  7350  000DB8  5014               	movf	??_ModbusValidateRequest,w,c
  7351  000DBA  2628               	addwf	ModbusValidateRequest@u16regs,f,c
  7352  000DBC  5015               	movf	??_ModbusValidateRequest+1,w,c
  7353  000DBE  2229               	addwfc	ModbusValidateRequest@u16regs+1,f,c
  7354  000DC0  D7CC               	goto	l6682
  7355  000DC2                     l6714:
  7356                           
  7357                           ; BSR set to: 1
  7358                           ;ModbusRtu.c: 853: if (_au8Buffer[ FILE_REF_TYPE ] != 6)
  7359  000DC2  0E06               	movlw	6
  7360  000DC4  1903               	xorwf	(__au8Buffer+3)& (0+255),w,b
  7361  000DC6  E1AF               	bnz	l6660
  7362                           
  7363                           ; BSR set to: 1
  7364                           ;ModbusRtu.c: 856: if (_au8Buffer[ FILE_NUM_HI ] != 0x00 || _au8Buffer[ FILE_NUM_LO ] !=
      +                           0x01)
  7365  000DC8  5104               	movf	(__au8Buffer+4)& (0+255),w,b
  7366  000DCA  E1AD               	bnz	l6660
  7367                           
  7368                           ; BSR set to: 1
  7369  000DCC  0505               	decf	(__au8Buffer+5)& (0+255),w,b
  7370  000DCE  E1AB               	bnz	l6660
  7371                           
  7372                           ; BSR set to: 1
  7373                           ;ModbusRtu.c: 859: unsigned long startAddrBytes = ((_au8Buffer[ FILE_REC_HI ] << 8) | _a
      +                          u8Buffer[ FILE_REC_LO ]) << 1;
  7374  000DD0  5107               	movf	(__au8Buffer+7)& (0+255),w,b
  7375  000DD2  C106  F014         	movff	__au8Buffer+6,??_ModbusValidateRequest
  7376  000DD6  6A15               	clrf	(??_ModbusValidateRequest+1)& (0+255),c
  7377  000DD8  C014  F015         	movff	??_ModbusValidateRequest,??_ModbusValidateRequest+1
  7378  000DDC  6A14               	clrf	??_ModbusValidateRequest,c
  7379  000DDE  1214               	iorwf	??_ModbusValidateRequest,f,c
  7380  000DE0  0E00               	movlw	0
  7381  000DE2  90D8               	bcf	status,0,c
  7382  000DE4  3614               	rlcf	??_ModbusValidateRequest,f,c
  7383  000DE6  3615               	rlcf	??_ModbusValidateRequest+1,f,c
  7384  000DE8  C014  F018         	movff	??_ModbusValidateRequest,ModbusValidateRequest@startAddrBytes
  7385  000DEC  C015  F019         	movff	??_ModbusValidateRequest+1,ModbusValidateRequest@startAddrBytes+1
  7386  000DF0  BE19               	btfsc	ModbusValidateRequest@startAddrBytes+1,7,c
  7387  000DF2  0EFF               	movlw	-1
  7388  000DF4  6E1A               	movwf	ModbusValidateRequest@startAddrBytes+2,c
  7389  000DF6  6E1B               	movwf	ModbusValidateRequest@startAddrBytes+3,c
  7390                           
  7391                           ;ModbusRtu.c: 860: unsigned long recLenBytes = ((_au8Buffer[ FILE_REC_LEN_HI ] << 8) | _
      +                          au8Buffer[ FILE_REC_LEN_LO ]) << 1;
  7392  000DF8  5109               	movf	(__au8Buffer+9)& (0+255),w,b
  7393  000DFA  C108  F014         	movff	__au8Buffer+8,??_ModbusValidateRequest
  7394  000DFE  6A15               	clrf	(??_ModbusValidateRequest+1)& (0+255),c
  7395  000E00  C014  F015         	movff	??_ModbusValidateRequest,??_ModbusValidateRequest+1
  7396  000E04  6A14               	clrf	??_ModbusValidateRequest,c
  7397  000E06  1214               	iorwf	??_ModbusValidateRequest,f,c
  7398  000E08  0E00               	movlw	0
  7399  000E0A  90D8               	bcf	status,0,c
  7400  000E0C  3614               	rlcf	??_ModbusValidateRequest,f,c
  7401  000E0E  3615               	rlcf	??_ModbusValidateRequest+1,f,c
  7402  000E10  C014  F01C         	movff	??_ModbusValidateRequest,ModbusValidateRequest@recLenBytes
  7403  000E14  C015  F01D         	movff	??_ModbusValidateRequest+1,ModbusValidateRequest@recLenBytes+1
  7404  000E18  BE1D               	btfsc	ModbusValidateRequest@recLenBytes+1,7,c
  7405  000E1A  0EFF               	movlw	-1
  7406  000E1C  6E1E               	movwf	ModbusValidateRequest@recLenBytes+2,c
  7407  000E1E  6E1F               	movwf	ModbusValidateRequest@recLenBytes+3,c
  7408                           
  7409                           ;ModbusRtu.c: 862: if (startAddrBytes + recLenBytes >= 256)
  7410  000E20  501C               	movf	ModbusValidateRequest@recLenBytes,w,c
  7411  000E22  2418               	addwf	ModbusValidateRequest@startAddrBytes,w,c
  7412  000E24  6E14               	movwf	??_ModbusValidateRequest& (0+255),c
  7413  000E26  501D               	movf	ModbusValidateRequest@recLenBytes+1,w,c
  7414  000E28  2019               	addwfc	ModbusValidateRequest@startAddrBytes+1,w,c
  7415  000E2A  6E15               	movwf	(??_ModbusValidateRequest+1)& (0+255),c
  7416  000E2C  501E               	movf	ModbusValidateRequest@recLenBytes+2,w,c
  7417  000E2E  201A               	addwfc	ModbusValidateRequest@startAddrBytes+2,w,c
  7418  000E30  6E16               	movwf	(??_ModbusValidateRequest+2)& (0+255),c
  7419  000E32  501F               	movf	ModbusValidateRequest@recLenBytes+3,w,c
  7420  000E34  201B               	addwfc	ModbusValidateRequest@startAddrBytes+3,w,c
  7421  000E36  6E17               	movwf	(??_ModbusValidateRequest+3)& (0+255),c
  7422  000E38  5017               	movf	??_ModbusValidateRequest+3,w,c
  7423  000E3A  1016               	iorwf	??_ModbusValidateRequest+2,w,c
  7424  000E3C  E102               	bnz	u5810
  7425  000E3E  0415               	decf	??_ModbusValidateRequest+1,w,c
  7426  000E40  D76F               	goto	L11
  7427  000E42                     u5810:
  7428  000E42  D771               	goto	l6660
  7429  000E44                     l6734:
  7430                           
  7431                           ; BSR set to: 1
  7432                           ;ModbusRtu.c: 866: if(_au8Buffer[ MEI_TYPE ] != 0x0E)
  7433  000E44  0E0E               	movlw	14
  7434  000E46  1902               	xorwf	(__au8Buffer+2)& (0+255),w,b
  7435  000E48  E001 D743          	bnz	l6644
  7436                           
  7437                           ; BSR set to: 1
  7438                           ;ModbusRtu.c: 868: uint8_t readDevId = _au8Buffer[ MEI_READ_DEV_ID ];
  7439  000E4C  C103  F026         	movff	__au8Buffer+3,ModbusValidateRequest@readDevId
  7440                           
  7441                           ; BSR set to: 1
  7442                           ;ModbusRtu.c: 869: if(readDevId != 0x01 && readDevId != 0x02 && readDevId != 0x04)
  7443  000E50  0426               	decf	ModbusValidateRequest@readDevId,w,c
  7444  000E52  E007               	bz	l6750
  7445                           
  7446                           ; BSR set to: 1
  7447  000E54  0E02               	movlw	2
  7448  000E56  1826               	xorwf	ModbusValidateRequest@readDevId,w,c
  7449  000E58  E004               	bz	l6750
  7450                           
  7451                           ; BSR set to: 1
  7452  000E5A  0E04               	movlw	4
  7453  000E5C  1826               	xorwf	ModbusValidateRequest@readDevId,w,c
  7454  000E5E  E001 D74E          	bnz	l6652
  7455  000E62                     l6750:
  7456                           
  7457                           ; BSR set to: 1
  7458                           ;ModbusRtu.c: 871: if(readDevId == 0x04 && _au8Buffer[ MEI_OBJ_ID ] > 0x06)
  7459  000E62  0E04               	movlw	4
  7460  000E64  1826               	xorwf	ModbusValidateRequest@readDevId,w,c
  7461  000E66  E132               	bnz	l841
  7462                           
  7463                           ; BSR set to: 1
  7464  000E68  0E06               	movlw	6
  7465  000E6A  6504               	cpfsgt	(__au8Buffer+4)& (0+255),b
  7466  000E6C  D02F               	goto	l841
  7467  000E6E  D75B               	goto	l6660
  7468  000E70                     l6758:
  7469                           
  7470                           ; BSR set to: 1
  7471                           ;ModbusRtu.c: 876: if(_au8Buffer[COM_COM_ID] != 0x7F
  7472                           ;ModbusRtu.c: 877: && _au8Buffer[COM_COM_ID] != 0x01
  7473                           ;ModbusRtu.c: 878: && _au8Buffer[COM_COM_ID] != 0x10)
  7474  000E70  0E7F               	movlw	127
  7475  000E72  1902               	xorwf	(__au8Buffer+2)& (0+255),w,b
  7476  000E74  E02B               	bz	l841
  7477                           
  7478                           ; BSR set to: 1
  7479  000E76  0502               	decf	(__au8Buffer+2)& (0+255),w,b
  7480  000E78  E029               	bz	l841
  7481                           
  7482                           ; BSR set to: 1
  7483  000E7A  0E10               	movlw	16
  7484  000E7C  1902               	xorwf	(__au8Buffer+2)& (0+255),w,b
  7485  000E7E  E001 D73E          	bnz	l6652
  7486  000E82  D024               	goto	l841
  7487  000E84                     l6770:
  7488  000E84  FFFF               	dw	65535	; assembler added errata NOP
  7489                           
  7490                           ; BSR set to: 1
  7491  000E86  5101               	movf	(__au8Buffer+1)& (0+255),w,b
  7492                           
  7493                           ; Switch size 1, requested type "speed"
  7494                           ; Number of cases is 14, Range of values is 1 to 102
  7495                           ; switch strategies available:
  7496                           ; Name         Instructions Cycles
  7497                           ; simple_byte           43    22 (average)
  7498                           ;	Chosen strategy is simple_byte
  7499  000E88  0A01               	xorlw	1	; case 1
  7500  000E8A  E101 D727          	bz	l6648
  7501  000E8E  0A03               	xorlw	3	; case 2
  7502  000E90  E101 D724          	bz	l6648
  7503  000E94  0A01               	xorlw	1	; case 3
  7504  000E96  E082               	bz	l6702
  7505  000E98  0A07               	xorlw	7	; case 4
  7506  000E9A  E101 D767          	bz	l6690
  7507  000E9E  0A01               	xorlw	1	; case 5
  7508  000EA0  E101 D744          	bz	l6664
  7509  000EA4  0A03               	xorlw	3	; case 6
  7510  000EA6  E101 D752          	bz	l6680
  7511  000EAA  0A09               	xorlw	9	; case 15
  7512  000EAC  E101 D716          	bz	l6648
  7513  000EB0  0A1F               	xorlw	31	; case 16
  7514  000EB2  E101 D773          	bz	l6702
  7515  000EB6  0A01               	xorlw	1	; case 17
  7516  000EB8  E009               	bz	l841
  7517  000EBA  0A04               	xorlw	4	; case 21
  7518  000EBC  E082               	bz	l6714
  7519  000EBE  0A3E               	xorlw	62	; case 43
  7520  000EC0  E0C1               	bz	l6734
  7521  000EC2  0A4F               	xorlw	79	; case 100
  7522  000EC4  E0D5               	bz	l6758
  7523  000EC6  0A01               	xorlw	1	; case 101
  7524  000EC8  A4D8               	btfss	status,2,c
  7525  000ECA  0A03               	xorlw	3	; case 102
  7526  000ECC                     l841:
  7527  000ECC  FFFF               	dw	65535	; assembler added errata NOP
  7528                           
  7529                           ;ModbusRtu.c: 886: _lastFunction = _au8Buffer[ FUNC ];
  7530  000ECE  C101  F0F2         	movff	__au8Buffer+1,__lastFunction
  7531                           
  7532                           ;ModbusRtu.c: 887: return 0;
  7533  000ED2  0E00               	movlw	0
  7534  000ED4                     l828:
  7535  000ED4  FFFF               	dw	65535	; assembler added errata NOP
  7536  000ED6  0012               	return		;funcret
  7537  000ED8  FFFF               	dw	65535	; errata NOP
  7538  000EDA                     __end_of_ModbusValidateRequest:
  7539                           	opt stack 0
  7540                           tblptru	equ	0xFF8
  7541                           tblptrh	equ	0xFF7
  7542                           tblptrl	equ	0xFF6
  7543                           tablat	equ	0xFF5
  7544                           prodh	equ	0xFF4
  7545                           prodl	equ	0xFF3
  7546                           intcon	equ	0xFF2
  7547                           postinc0	equ	0xFEE
  7548                           wreg	equ	0xFE8
  7549                           postdec1	equ	0xFE5
  7550                           fsr1h	equ	0xFE2
  7551                           fsr1l	equ	0xFE1
  7552                           indf2	equ	0xFDF
  7553                           postinc2	equ	0xFDE
  7554                           postdec2	equ	0xFDD
  7555                           fsr2h	equ	0xFDA
  7556                           fsr2l	equ	0xFD9
  7557                           status	equ	0xFD8
  7558                           
  7559 ;; *************** function _ModbusProcess_FC7 *****************
  7560 ;; Defined at:
  7561 ;;		line 1071 in file "ModbusRtu.c"
  7562 ;; Parameters:    Size  Location     Type
  7563 ;;		None
  7564 ;; Auto vars:     Size  Location     Type
  7565 ;;  u8CopyBuffer    1   21[COMRAM] unsigned char 
  7566 ;; Return value:  Size  Location     Type
  7567 ;;                  1    wreg      unsigned char 
  7568 ;; Registers used:
  7569 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7570 ;; Tracked objects:
  7571 ;;		On entry : 0/1
  7572 ;;		On exit  : 0/0
  7573 ;;		Unchanged: 0/0
  7574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7575 ;;      Params:         0       0       0       0       0       0       0
  7576 ;;      Locals:         1       0       0       0       0       0       0
  7577 ;;      Temps:          0       0       0       0       0       0       0
  7578 ;;      Totals:         1       0       0       0       0       0       0
  7579 ;;Total ram usage:        1 bytes
  7580 ;; Hardware stack levels used:    1
  7581 ;; Hardware stack levels required when called:    4
  7582 ;; This function calls:
  7583 ;;		_ModbusSendTxBuffer
  7584 ;; This function is called by:
  7585 ;;		_ModbusPoll
  7586 ;; This function uses a non-reentrant model
  7587 ;;
  7588                           
  7589                           	psect	text37
  7590  002F8A                     __ptext37:
  7591                           	opt stack 0
  7592  002F8A                     _ModbusProcess_FC7:
  7593                           	opt stack 25
  7594                           
  7595                           ;incstack = 0
  7596  002F8A  FFFF               	dw	65535
  7597                           
  7598                           ;ModbusRtu.c: 1073: _au8Buffer[ 2 ] = _exceptionStatus;
  7599  002F8C  C0D6  F102         	movff	__exceptionStatus,__au8Buffer+2
  7600                           
  7601                           ;ModbusRtu.c: 1074: _u8BufferSize = 3;
  7602  002F90  0E03               	movlw	3
  7603  002F92  6E6E               	movwf	__u8BufferSize,c
  7604                           
  7605                           ;ModbusRtu.c: 1075: uint8_t u8CopyBufferSize = _u8BufferSize;
  7606  002F94  C06E  F016         	movff	__u8BufferSize,ModbusProcess_FC7@u8CopyBufferSize
  7607                           
  7608                           ;ModbusRtu.c: 1076: ModbusSendTxBuffer();
  7609  002F98  EC5A  F015         	call	_ModbusSendTxBuffer	;wreg free
  7610                           
  7611                           ;ModbusRtu.c: 1077: return u8CopyBufferSize;
  7612  002F9C  5016               	movf	ModbusProcess_FC7@u8CopyBufferSize,w,c
  7613  002F9E  0012               	return		;funcret
  7614  002FA0  FFFF               	dw	65535	; errata NOP
  7615  002FA2                     __end_of_ModbusProcess_FC7:
  7616                           	opt stack 0
  7617                           tblptru	equ	0xFF8
  7618                           tblptrh	equ	0xFF7
  7619                           tblptrl	equ	0xFF6
  7620                           tablat	equ	0xFF5
  7621                           prodh	equ	0xFF4
  7622                           prodl	equ	0xFF3
  7623                           intcon	equ	0xFF2
  7624                           postinc0	equ	0xFEE
  7625                           wreg	equ	0xFE8
  7626                           postdec1	equ	0xFE5
  7627                           fsr1h	equ	0xFE2
  7628                           fsr1l	equ	0xFE1
  7629                           indf2	equ	0xFDF
  7630                           postinc2	equ	0xFDE
  7631                           postdec2	equ	0xFDD
  7632                           fsr2h	equ	0xFDA
  7633                           fsr2l	equ	0xFD9
  7634                           status	equ	0xFD8
  7635                           
  7636 ;; *************** function _ModbusProcess_FC6 *****************
  7637 ;; Defined at:
  7638 ;;		line 1051 in file "ModbusRtu.c"
  7639 ;; Parameters:    Size  Location     Type
  7640 ;;  regs            2   21[COMRAM] PTR unsigned short 
  7641 ;;		 -> _MODBUSHoldingRegs(30), 
  7642 ;;  u8size          1   23[COMRAM] unsigned char 
  7643 ;; Auto vars:     Size  Location     Type
  7644 ;;  u16add          2   29[COMRAM] unsigned short 
  7645 ;;  u16val          2   26[COMRAM] unsigned short 
  7646 ;;  u8CopyBuffer    1   28[COMRAM] unsigned char 
  7647 ;; Return value:  Size  Location     Type
  7648 ;;                  1    wreg      unsigned char 
  7649 ;; Registers used:
  7650 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7651 ;; Tracked objects:
  7652 ;;		On entry : 0/1
  7653 ;;		On exit  : 0/0
  7654 ;;		Unchanged: 0/0
  7655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7656 ;;      Params:         3       0       0       0       0       0       0
  7657 ;;      Locals:         5       0       0       0       0       0       0
  7658 ;;      Temps:          2       0       0       0       0       0       0
  7659 ;;      Totals:        10       0       0       0       0       0       0
  7660 ;;Total ram usage:       10 bytes
  7661 ;; Hardware stack levels used:    1
  7662 ;; Hardware stack levels required when called:    4
  7663 ;; This function calls:
  7664 ;;		_ModbusSendTxBuffer
  7665 ;; This function is called by:
  7666 ;;		_ModbusPoll
  7667 ;; This function uses a non-reentrant model
  7668 ;;
  7669                           
  7670                           	psect	text38
  7671  0028C8                     __ptext38:
  7672                           	opt stack 0
  7673  0028C8                     _ModbusProcess_FC6:
  7674                           	opt stack 25
  7675                           
  7676                           ;incstack = 0
  7677  0028C8  FFFF               	dw	65535
  7678                           
  7679                           ;ModbusRtu.c: 1053: uint16_t u16add = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ A
      +                          DD_LO ]);
  7680  0028CA  0101               	movlb	1	; () banked
  7681  0028CC  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  7682  0028CE  6E19               	movwf	??_ModbusProcess_FC6& (0+255),c
  7683  0028D0  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  7684  0028D2  6E1E               	movwf	ModbusProcess_FC6@u16add,c
  7685  0028D4  C019  F01F         	movff	??_ModbusProcess_FC6,ModbusProcess_FC6@u16add+1
  7686                           
  7687                           ; BSR set to: 1
  7688                           ;ModbusRtu.c: 1054: _lastAddress = u16add;
  7689  0028D8  C01E  F0C7         	movff	ModbusProcess_FC6@u16add,__lastAddress
  7690  0028DC  C01F  F0C8         	movff	ModbusProcess_FC6@u16add+1,__lastAddress+1
  7691                           
  7692                           ;ModbusRtu.c: 1055: _lastCount = 1;
  7693  0028E0  0100               	movlb	0	; () banked
  7694  0028E2  6BCA               	clrf	(__lastCount+1)& (0+255),b
  7695  0028E4  0E01               	movlw	1
  7696  0028E6  6FC9               	movwf	__lastCount& (0+255),b
  7697                           
  7698                           ;ModbusRtu.c: 1056: uint8_t u8CopyBufferSize;
  7699                           ;ModbusRtu.c: 1057: uint16_t u16val = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ NB
      +                          _LO ]);
  7700  0028E8  0101               	movlb	1	; () banked
  7701  0028EA  5104               	movf	(__au8Buffer+4)& (0+255),w,b
  7702  0028EC  6E19               	movwf	??_ModbusProcess_FC6& (0+255),c
  7703  0028EE  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  7704  0028F0  6E1B               	movwf	ModbusProcess_FC6@u16val,c
  7705  0028F2  C019  F01C         	movff	??_ModbusProcess_FC6,ModbusProcess_FC6@u16val+1
  7706                           
  7707                           ; BSR set to: 1
  7708                           ;ModbusRtu.c: 1059: regs[ u16add ] = u16val;
  7709  0028F6  90D8               	bcf	status,0,c
  7710  0028F8  341E               	rlcf	ModbusProcess_FC6@u16add,w,c
  7711  0028FA  6ED9               	movwf	fsr2l,c
  7712  0028FC  341F               	rlcf	ModbusProcess_FC6@u16add+1,w,c
  7713  0028FE  6EDA               	movwf	fsr2h,c
  7714  002900  5016               	movf	ModbusProcess_FC6@regs,w,c
  7715  002902  26D9               	addwf	fsr2l,f,c
  7716  002904  5017               	movf	ModbusProcess_FC6@regs+1,w,c
  7717  002906  22DA               	addwfc	fsr2h,f,c
  7718  002908  C01B  FFDE         	movff	ModbusProcess_FC6@u16val,postinc2
  7719  00290C  C01C  FFDD         	movff	ModbusProcess_FC6@u16val+1,postdec2
  7720                           
  7721                           ; BSR set to: 1
  7722                           ;ModbusRtu.c: 1062: _u8BufferSize = RESPONSE_SIZE;
  7723  002910  0E06               	movlw	6
  7724  002912  6E6E               	movwf	__u8BufferSize,c
  7725                           
  7726                           ; BSR set to: 1
  7727                           ;ModbusRtu.c: 1064: u8CopyBufferSize = _u8BufferSize + 2;
  7728  002914  506E               	movf	__u8BufferSize,w,c
  7729  002916  0F02               	addlw	2
  7730  002918  6E1D               	movwf	ModbusProcess_FC6@u8CopyBufferSize,c
  7731                           
  7732                           ; BSR set to: 1
  7733                           ;ModbusRtu.c: 1065: ModbusSendTxBuffer();
  7734  00291A  EC5A  F015         	call	_ModbusSendTxBuffer	;wreg free
  7735                           
  7736                           ;ModbusRtu.c: 1067: return u8CopyBufferSize;
  7737  00291E  501D               	movf	ModbusProcess_FC6@u8CopyBufferSize,w,c
  7738  002920  0012               	return		;funcret
  7739  002922  FFFF               	dw	65535	; errata NOP
  7740  002924                     __end_of_ModbusProcess_FC6:
  7741                           	opt stack 0
  7742                           tblptru	equ	0xFF8
  7743                           tblptrh	equ	0xFF7
  7744                           tblptrl	equ	0xFF6
  7745                           tablat	equ	0xFF5
  7746                           prodh	equ	0xFF4
  7747                           prodl	equ	0xFF3
  7748                           intcon	equ	0xFF2
  7749                           postinc0	equ	0xFEE
  7750                           wreg	equ	0xFE8
  7751                           postdec1	equ	0xFE5
  7752                           fsr1h	equ	0xFE2
  7753                           fsr1l	equ	0xFE1
  7754                           indf2	equ	0xFDF
  7755                           postinc2	equ	0xFDE
  7756                           postdec2	equ	0xFDD
  7757                           fsr2h	equ	0xFDA
  7758                           fsr2l	equ	0xFD9
  7759                           status	equ	0xFD8
  7760                           
  7761 ;; *************** function _ModbusProcess_FC5 *****************
  7762 ;; Defined at:
  7763 ;;		line 1016 in file "ModbusRtu.c"
  7764 ;; Parameters:    Size  Location     Type
  7765 ;;  regs            1    wreg     PTR unsigned short 
  7766 ;;		 -> _MODBUSCoils(2), 
  7767 ;; Auto vars:     Size  Location     Type
  7768 ;;  regs            1   29[COMRAM] PTR unsigned short 
  7769 ;;		 -> _MODBUSCoils(2), 
  7770 ;;  u16coil         2   27[COMRAM] unsigned short 
  7771 ;;  u8currentBit    1   30[COMRAM] unsigned char 
  7772 ;;  u8CopyBuffer    1   26[COMRAM] unsigned char 
  7773 ;; Return value:  Size  Location     Type
  7774 ;;                  1    wreg      unsigned char 
  7775 ;; Registers used:
  7776 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7777 ;; Tracked objects:
  7778 ;;		On entry : 0/1
  7779 ;;		On exit  : 0/0
  7780 ;;		Unchanged: 0/0
  7781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7782 ;;      Params:         0       0       0       0       0       0       0
  7783 ;;      Locals:         5       0       0       0       0       0       0
  7784 ;;      Temps:          5       0       0       0       0       0       0
  7785 ;;      Totals:        10       0       0       0       0       0       0
  7786 ;;Total ram usage:       10 bytes
  7787 ;; Hardware stack levels used:    1
  7788 ;; Hardware stack levels required when called:    4
  7789 ;; This function calls:
  7790 ;;		_ModbusSendTxBuffer
  7791 ;; This function is called by:
  7792 ;;		_ModbusPoll
  7793 ;; This function uses a non-reentrant model
  7794 ;;
  7795                           
  7796                           	psect	text39
  7797  002466                     __ptext39:
  7798                           	opt stack 0
  7799  002466                     _ModbusProcess_FC5:
  7800                           	opt stack 25
  7801                           
  7802                           ;incstack = 0
  7803  002466  FFFF               	dw	65535
  7804                           
  7805                           ;ModbusProcess_FC5@regs stored from wreg
  7806  002468  6E1E               	movwf	ModbusProcess_FC5@regs,c
  7807                           
  7808                           ;ModbusRtu.c: 1019: uint8_t u8currentBit;
  7809                           ;ModbusRtu.c: 1020: uint8_t u8CopyBufferSize;
  7810                           ;ModbusRtu.c: 1021: uint16_t u16coil = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[ 
      +                          ADD_LO ]);
  7811  00246A  0101               	movlb	1	; () banked
  7812  00246C  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  7813  00246E  6E16               	movwf	??_ModbusProcess_FC5& (0+255),c
  7814  002470  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  7815  002472  6E1C               	movwf	ModbusProcess_FC5@u16coil,c
  7816  002474  C016  F01D         	movff	??_ModbusProcess_FC5,ModbusProcess_FC5@u16coil+1
  7817                           
  7818                           ; BSR set to: 1
  7819                           ;ModbusRtu.c: 1022: _lastAddress = u16coil;
  7820  002478  C01C  F0C7         	movff	ModbusProcess_FC5@u16coil,__lastAddress
  7821  00247C  C01D  F0C8         	movff	ModbusProcess_FC5@u16coil+1,__lastAddress+1
  7822                           
  7823                           ;ModbusRtu.c: 1023: _lastCount = 1;
  7824  002480  0100               	movlb	0	; () banked
  7825  002482  6BCA               	clrf	(__lastCount+1)& (0+255),b
  7826  002484  0E01               	movlw	1
  7827  002486  6FC9               	movwf	__lastCount& (0+255),b
  7828                           
  7829                           ; BSR set to: 0
  7830                           ;ModbusRtu.c: 1026: u8currentBit = (uint8_t) (u16coil % 16);
  7831  002488  501C               	movf	ModbusProcess_FC5@u16coil,w,c
  7832  00248A  0B0F               	andlw	15
  7833  00248C  6E1F               	movwf	ModbusProcess_FC5@u8currentBit,c
  7834                           
  7835                           ; BSR set to: 0
  7836                           ;ModbusRtu.c: 1029: (_au8Buffer[ NB_HI ] == 0xff ? ((*regs) |= ((unsigned short)1 << (u8
      +                          currentBit))) : ((*regs) &= ~((unsigned short)1 << (u8currentBit))));
  7837  00248E  0101               	movlb	1	; () banked
  7838  002490  2904               	incf	(__au8Buffer+4)& (0+255),w,b
  7839  002492  E116               	bnz	l6874
  7840                           
  7841                           ; BSR set to: 1
  7842  002494  C01F  F016         	movff	ModbusProcess_FC5@u8currentBit,??_ModbusProcess_FC5
  7843  002498  0E01               	movlw	1
  7844  00249A  6E17               	movwf	(??_ModbusProcess_FC5+1)& (0+255),c
  7845  00249C  6A18               	clrf	(??_ModbusProcess_FC5+2)& (0+255),c
  7846  00249E  2A16               	incf	??_ModbusProcess_FC5,f,c
  7847  0024A0  D004               	goto	u6014
  7848  0024A2                     u6015:
  7849  0024A2  FFFF               	dw	65535	; assembler added errata NOP
  7850  0024A4  90D8               	bcf	status,0,c
  7851  0024A6  3617               	rlcf	??_ModbusProcess_FC5+1,f,c
  7852  0024A8  3618               	rlcf	??_ModbusProcess_FC5+2,f,c
  7853  0024AA                     u6014:
  7854  0024AA  FFFF               	dw	65535	; assembler added errata NOP
  7855  0024AC  2E16               	decfsz	??_ModbusProcess_FC5,f,c
  7856  0024AE  D7F9               	goto	u6015
  7857  0024B0  501E               	movf	ModbusProcess_FC5@regs,w,c
  7858  0024B2  6ED9               	movwf	fsr2l,c
  7859  0024B4  6ADA               	clrf	fsr2h,c
  7860  0024B6  5017               	movf	??_ModbusProcess_FC5+1,w,c
  7861  0024B8  12DE               	iorwf	postinc2,f,c
  7862  0024BA  5018               	movf	??_ModbusProcess_FC5+2,w,c
  7863  0024BC  12DD               	iorwf	postdec2,f,c
  7864  0024BE  D019               	goto	l6876
  7865  0024C0                     l6874:
  7866                           
  7867                           ; BSR set to: 1
  7868  0024C0  C01F  F016         	movff	ModbusProcess_FC5@u8currentBit,??_ModbusProcess_FC5
  7869  0024C4  0E01               	movlw	1
  7870  0024C6  6E17               	movwf	(??_ModbusProcess_FC5+1)& (0+255),c
  7871  0024C8  6A18               	clrf	(??_ModbusProcess_FC5+2)& (0+255),c
  7872  0024CA  2A16               	incf	??_ModbusProcess_FC5,f,c
  7873  0024CC  D004               	goto	u6024
  7874  0024CE                     u6025:
  7875  0024CE  FFFF               	dw	65535	; assembler added errata NOP
  7876  0024D0  90D8               	bcf	status,0,c
  7877  0024D2  3617               	rlcf	??_ModbusProcess_FC5+1,f,c
  7878  0024D4  3618               	rlcf	??_ModbusProcess_FC5+2,f,c
  7879  0024D6                     u6024:
  7880  0024D6  FFFF               	dw	65535	; assembler added errata NOP
  7881  0024D8  2E16               	decfsz	??_ModbusProcess_FC5,f,c
  7882  0024DA  D7F9               	goto	u6025
  7883  0024DC  1C17               	comf	??_ModbusProcess_FC5+1,w,c
  7884  0024DE  6E19               	movwf	(??_ModbusProcess_FC5+3)& (0+255),c
  7885  0024E0  1C18               	comf	??_ModbusProcess_FC5+2,w,c
  7886  0024E2  6E1A               	movwf	(??_ModbusProcess_FC5+4)& (0+255),c
  7887  0024E4  501E               	movf	ModbusProcess_FC5@regs,w,c
  7888  0024E6  6ED9               	movwf	fsr2l,c
  7889  0024E8  6ADA               	clrf	fsr2h,c
  7890  0024EA  5019               	movf	??_ModbusProcess_FC5+3,w,c
  7891  0024EC  16DE               	andwf	postinc2,f,c
  7892  0024EE  501A               	movf	??_ModbusProcess_FC5+4,w,c
  7893  0024F0  16DD               	andwf	postdec2,f,c
  7894  0024F2                     l6876:
  7895  0024F2  FFFF               	dw	65535	; assembler added errata NOP
  7896                           
  7897                           ;ModbusRtu.c: 1036: _u8BufferSize = 6;
  7898  0024F4  0E06               	movlw	6
  7899  0024F6  6E6E               	movwf	__u8BufferSize,c
  7900                           
  7901                           ;ModbusRtu.c: 1037: u8CopyBufferSize = _u8BufferSize + 2;
  7902  0024F8  506E               	movf	__u8BufferSize,w,c
  7903  0024FA  0F02               	addlw	2
  7904  0024FC  6E1B               	movwf	ModbusProcess_FC5@u8CopyBufferSize,c
  7905                           
  7906                           ;ModbusRtu.c: 1038: ModbusSendTxBuffer();
  7907  0024FE  EC5A  F015         	call	_ModbusSendTxBuffer	;wreg free
  7908                           
  7909                           ;ModbusRtu.c: 1040: return u8CopyBufferSize;
  7910  002502  501B               	movf	ModbusProcess_FC5@u8CopyBufferSize,w,c
  7911  002504  0012               	return		;funcret
  7912  002506  FFFF               	dw	65535	; errata NOP
  7913  002508                     __end_of_ModbusProcess_FC5:
  7914                           	opt stack 0
  7915                           tblptru	equ	0xFF8
  7916                           tblptrh	equ	0xFF7
  7917                           tblptrl	equ	0xFF6
  7918                           tablat	equ	0xFF5
  7919                           prodh	equ	0xFF4
  7920                           prodl	equ	0xFF3
  7921                           intcon	equ	0xFF2
  7922                           postinc0	equ	0xFEE
  7923                           wreg	equ	0xFE8
  7924                           postdec1	equ	0xFE5
  7925                           fsr1h	equ	0xFE2
  7926                           fsr1l	equ	0xFE1
  7927                           indf2	equ	0xFDF
  7928                           postinc2	equ	0xFDE
  7929                           postdec2	equ	0xFDD
  7930                           fsr2h	equ	0xFDA
  7931                           fsr2l	equ	0xFD9
  7932                           status	equ	0xFD8
  7933                           
  7934 ;; *************** function _ModbusProcess_FC43 *****************
  7935 ;; Defined at:
  7936 ;;		line 1250 in file "ModbusRtu.c"
  7937 ;; Parameters:    Size  Location     Type
  7938 ;;		None
  7939 ;; Auto vars:     Size  Location     Type
  7940 ;;  objId           1   23[COMRAM] unsigned char 
  7941 ;;  u8CopyBuffer    1   22[COMRAM] unsigned char 
  7942 ;;  devIdCode       1   21[COMRAM] unsigned char 
  7943 ;; Return value:  Size  Location     Type
  7944 ;;                  1    wreg      unsigned char 
  7945 ;; Registers used:
  7946 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7947 ;; Tracked objects:
  7948 ;;		On entry : 0/1
  7949 ;;		On exit  : 0/0
  7950 ;;		Unchanged: 0/0
  7951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7952 ;;      Params:         0       0       0       0       0       0       0
  7953 ;;      Locals:         3       0       0       0       0       0       0
  7954 ;;      Temps:          0       0       0       0       0       0       0
  7955 ;;      Totals:         3       0       0       0       0       0       0
  7956 ;;Total ram usage:        3 bytes
  7957 ;; Hardware stack levels used:    1
  7958 ;; Hardware stack levels required when called:    4
  7959 ;; This function calls:
  7960 ;;		_CopyStringToBuffer
  7961 ;;		_ModbusSendTxBuffer
  7962 ;; This function is called by:
  7963 ;;		_ModbusPoll
  7964 ;; This function uses a non-reentrant model
  7965 ;;
  7966                           
  7967                           	psect	text40
  7968  0014E6                     __ptext40:
  7969                           	opt stack 0
  7970  0014E6                     _ModbusProcess_FC43:
  7971                           	opt stack 25
  7972                           
  7973                           ;incstack = 0
  7974  0014E6  FFFF               	dw	65535
  7975                           
  7976                           ;ModbusRtu.c: 1252: uint8_t devIdCode = _au8Buffer[ 3 ];
  7977  0014E8  C103  F016         	movff	__au8Buffer+3,ModbusProcess_FC43@devIdCode
  7978                           
  7979                           ;ModbusRtu.c: 1260: uint8_t objId = _au8Buffer[ 4 ];
  7980  0014EC  C104  F018         	movff	__au8Buffer+4,ModbusProcess_FC43@objId
  7981                           
  7982                           ;ModbusRtu.c: 1271: _au8Buffer[ 5 ] = 0x00;
  7983  0014F0  0101               	movlb	1	; () banked
  7984  0014F2  6B05               	clrf	(__au8Buffer+5)& (0+255),b
  7985                           
  7986                           ;ModbusRtu.c: 1272: _au8Buffer[ 6 ] = 0x00;
  7987  0014F4  6B06               	clrf	(__au8Buffer+6)& (0+255),b
  7988                           
  7989                           ; BSR set to: 1
  7990                           ;ModbusRtu.c: 1274: _u8BufferSize = 8;
  7991  0014F6  0E08               	movlw	8
  7992  0014F8  6E6E               	movwf	__u8BufferSize,c
  7993                           
  7994                           ;ModbusRtu.c: 1275: switch(devIdCode)
  7995  0014FA  D094               	goto	l7118
  7996  0014FC                     l7064:
  7997                           
  7998                           ; BSR set to: 1
  7999                           ;ModbusRtu.c: 1278: _au8Buffer[ 4 ] = 0x81;
  8000  0014FC  0E81               	movlw	129
  8001  0014FE  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  8002                           
  8003                           ;ModbusRtu.c: 1279: _au8Buffer[ 7 ] = 3;
  8004  001500  0E03               	movlw	3
  8005  001502  6F07               	movwf	(__au8Buffer+7)& (0+255),b
  8006                           
  8007                           ; BSR set to: 1
  8008                           ;ModbusRtu.c: 1280: CopyStringToBuffer(0x00, "BOLID", sizeof("BOLID"));
  8009  001504  0E48               	movlw	low STR_1
  8010  001506  6E07               	movwf	CopyStringToBuffer@src,c
  8011  001508  0E06               	movlw	6
  8012  00150A  6E08               	movwf	CopyStringToBuffer@len,c
  8013  00150C  0E00               	movlw	0
  8014  00150E  EC04  F014         	call	_CopyStringToBuffer
  8015                           
  8016                           ;ModbusRtu.c: 1281: CopyStringToBuffer(0x01, "C2000-BI", sizeof("C2000-BI"));
  8017  001512  0E3F               	movlw	low STR_3
  8018  001514  6E07               	movwf	CopyStringToBuffer@src,c
  8019  001516  0E09               	movlw	9
  8020  001518  6E08               	movwf	CopyStringToBuffer@len,c
  8021  00151A  0E01               	movlw	1
  8022  00151C  EC04  F014         	call	_CopyStringToBuffer
  8023                           
  8024                           ;ModbusRtu.c: 1282: CopyStringToBuffer(0x02, "1.01", sizeof("1.01"));
  8025  001520  0E4E               	movlw	low STR_5
  8026  001522  6E07               	movwf	CopyStringToBuffer@src,c
  8027  001524  0E05               	movlw	5
  8028  001526  6E08               	movwf	CopyStringToBuffer@len,c
  8029  001528  0E02               	movlw	2
  8030  00152A  EC04  F014         	call	_CopyStringToBuffer
  8031                           
  8032                           ;ModbusRtu.c: 1283: break;
  8033  00152E  D084               	goto	l953
  8034  001530                     l7072:
  8035                           
  8036                           ; BSR set to: 1
  8037                           ;ModbusRtu.c: 1285: _au8Buffer[ 4 ] = 0x82;
  8038  001530  0E82               	movlw	130
  8039  001532  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  8040                           
  8041                           ;ModbusRtu.c: 1286: _au8Buffer[ 7 ] = 4;
  8042  001534  0E04               	movlw	4
  8043  001536  6F07               	movwf	(__au8Buffer+7)& (0+255),b
  8044                           
  8045                           ; BSR set to: 1
  8046                           ;ModbusRtu.c: 1287: CopyStringToBuffer(0x03, "http://bolid.ru", sizeof("http://bolid.ru"
      +                          ));
  8047  001538  0E24               	movlw	low STR_7
  8048  00153A  6E07               	movwf	CopyStringToBuffer@src,c
  8049  00153C  0E10               	movlw	16
  8050  00153E  6E08               	movwf	CopyStringToBuffer@len,c
  8051  001540  0E03               	movlw	3
  8052  001542  EC04  F014         	call	_CopyStringToBuffer
  8053                           
  8054                           ;ModbusRtu.c: 1288: CopyStringToBuffer(0x04, "Tablo s raspisaniem", sizeof("Tablo s rasp
      +                          isaniem"));
  8055  001546  0E10               	movlw	low STR_9
  8056  001548  6E07               	movwf	CopyStringToBuffer@src,c
  8057  00154A  0E14               	movlw	20
  8058  00154C  6E08               	movwf	CopyStringToBuffer@len,c
  8059  00154E  0E04               	movlw	4
  8060  001550  EC04  F014         	call	_CopyStringToBuffer
  8061                           
  8062                           ;ModbusRtu.c: 1289: CopyStringToBuffer(0x05, "MMM", sizeof("MMM"));
  8063  001554  0E53               	movlw	low STR_11
  8064  001556  6E07               	movwf	CopyStringToBuffer@src,c
  8065  001558  0E04               	movlw	4
  8066  00155A  6E08               	movwf	CopyStringToBuffer@len,c
  8067  00155C  0E05               	movlw	5
  8068  00155E  EC04  F014         	call	_CopyStringToBuffer
  8069                           
  8070                           ;ModbusRtu.c: 1290: CopyStringToBuffer(0x06, "Raspisanie", sizeof("Raspisanie"));
  8071  001562  0E34               	movlw	low STR_13
  8072  001564  6E07               	movwf	CopyStringToBuffer@src,c
  8073  001566  0E0B               	movlw	11
  8074  001568  6E08               	movwf	CopyStringToBuffer@len,c
  8075  00156A  0E06               	movlw	6
  8076  00156C  EC04  F014         	call	_CopyStringToBuffer
  8077                           
  8078                           ;ModbusRtu.c: 1291: break;
  8079  001570  D063               	goto	l953
  8080  001572                     l7082:
  8081                           
  8082                           ; BSR set to: 1
  8083                           ;ModbusRtu.c: 1293: _au8Buffer[ 7 ] = 1;
  8084  001572  0E01               	movlw	1
  8085  001574  6F07               	movwf	(__au8Buffer+7)& (0+255),b
  8086                           
  8087                           ;ModbusRtu.c: 1294: switch(objId)
  8088  001576  D046               	goto	l7114
  8089  001578                     l7084:
  8090                           
  8091                           ; BSR set to: 1
  8092                           ;ModbusRtu.c: 1297: _au8Buffer[ 4 ] = 0x81;
  8093  001578  0E81               	movlw	129
  8094  00157A  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  8095                           
  8096                           ; BSR set to: 1
  8097                           ;ModbusRtu.c: 1298: CopyStringToBuffer(objId, "BOLID", sizeof("BOLID"));
  8098  00157C  0E48               	movlw	low STR_1
  8099  00157E  6E07               	movwf	CopyStringToBuffer@src,c
  8100  001580  0E06               	movlw	6
  8101  001582  6E08               	movwf	CopyStringToBuffer@len,c
  8102  001584  5018               	movf	ModbusProcess_FC43@objId,w,c
  8103  001586  EC04  F014         	call	_CopyStringToBuffer
  8104                           
  8105                           ;ModbusRtu.c: 1299: break;
  8106  00158A  D056               	goto	l953
  8107  00158C                     l7088:
  8108                           
  8109                           ; BSR set to: 1
  8110                           ;ModbusRtu.c: 1301: _au8Buffer[ 4 ] = 0x81;
  8111  00158C  0E81               	movlw	129
  8112  00158E  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  8113                           
  8114                           ; BSR set to: 1
  8115                           ;ModbusRtu.c: 1302: CopyStringToBuffer(objId, "C2000-BI", sizeof("C2000-BI"));
  8116  001590  0E3F               	movlw	low STR_3
  8117  001592  6E07               	movwf	CopyStringToBuffer@src,c
  8118  001594  0E09               	movlw	9
  8119  001596  6E08               	movwf	CopyStringToBuffer@len,c
  8120  001598  5018               	movf	ModbusProcess_FC43@objId,w,c
  8121  00159A  EC04  F014         	call	_CopyStringToBuffer
  8122                           
  8123                           ;ModbusRtu.c: 1303: break;
  8124  00159E  D04C               	goto	l953
  8125  0015A0                     l7092:
  8126                           
  8127                           ; BSR set to: 1
  8128                           ;ModbusRtu.c: 1305: _au8Buffer[ 4 ] = 0x81;
  8129  0015A0  0E81               	movlw	129
  8130  0015A2  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  8131                           
  8132                           ; BSR set to: 1
  8133                           ;ModbusRtu.c: 1306: CopyStringToBuffer(objId, "1.01", sizeof("1.01"));
  8134  0015A4  0E4E               	movlw	low STR_5
  8135  0015A6  6E07               	movwf	CopyStringToBuffer@src,c
  8136  0015A8  0E05               	movlw	5
  8137  0015AA  6E08               	movwf	CopyStringToBuffer@len,c
  8138  0015AC  5018               	movf	ModbusProcess_FC43@objId,w,c
  8139  0015AE  EC04  F014         	call	_CopyStringToBuffer
  8140                           
  8141                           ;ModbusRtu.c: 1307: break;
  8142  0015B2  D042               	goto	l953
  8143  0015B4                     l7096:
  8144                           
  8145                           ; BSR set to: 1
  8146                           ;ModbusRtu.c: 1309: _au8Buffer[ 4 ] = 0x82;
  8147  0015B4  0E82               	movlw	130
  8148  0015B6  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  8149                           
  8150                           ; BSR set to: 1
  8151                           ;ModbusRtu.c: 1310: CopyStringToBuffer(objId, "http://bolid.ru", sizeof("http://bolid.ru
      +                          "));
  8152  0015B8  0E24               	movlw	low STR_7
  8153  0015BA  6E07               	movwf	CopyStringToBuffer@src,c
  8154  0015BC  0E10               	movlw	16
  8155  0015BE  6E08               	movwf	CopyStringToBuffer@len,c
  8156  0015C0  5018               	movf	ModbusProcess_FC43@objId,w,c
  8157  0015C2  EC04  F014         	call	_CopyStringToBuffer
  8158                           
  8159                           ;ModbusRtu.c: 1311: break;
  8160  0015C6  D038               	goto	l953
  8161  0015C8                     l7100:
  8162                           
  8163                           ; BSR set to: 1
  8164                           ;ModbusRtu.c: 1313: _au8Buffer[ 4 ] = 0x82;
  8165  0015C8  0E82               	movlw	130
  8166  0015CA  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  8167                           
  8168                           ; BSR set to: 1
  8169                           ;ModbusRtu.c: 1314: CopyStringToBuffer(objId, "Tablo s raspisaniem", sizeof("Tablo s ras
      +                          pisaniem"));
  8170  0015CC  0E10               	movlw	low STR_9
  8171  0015CE  6E07               	movwf	CopyStringToBuffer@src,c
  8172  0015D0  0E14               	movlw	20
  8173  0015D2  6E08               	movwf	CopyStringToBuffer@len,c
  8174  0015D4  5018               	movf	ModbusProcess_FC43@objId,w,c
  8175  0015D6  EC04  F014         	call	_CopyStringToBuffer
  8176                           
  8177                           ;ModbusRtu.c: 1315: break;
  8178  0015DA  D02E               	goto	l953
  8179  0015DC                     l7104:
  8180                           
  8181                           ; BSR set to: 1
  8182                           ;ModbusRtu.c: 1317: _au8Buffer[ 4 ] = 0x82;
  8183  0015DC  0E82               	movlw	130
  8184  0015DE  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  8185                           
  8186                           ; BSR set to: 1
  8187                           ;ModbusRtu.c: 1318: CopyStringToBuffer(objId, "MMM", sizeof("MMM"));
  8188  0015E0  0E53               	movlw	low STR_11
  8189  0015E2  6E07               	movwf	CopyStringToBuffer@src,c
  8190  0015E4  0E04               	movlw	4
  8191  0015E6  6E08               	movwf	CopyStringToBuffer@len,c
  8192  0015E8  5018               	movf	ModbusProcess_FC43@objId,w,c
  8193  0015EA  EC04  F014         	call	_CopyStringToBuffer
  8194                           
  8195                           ;ModbusRtu.c: 1319: break;
  8196  0015EE  D024               	goto	l953
  8197  0015F0                     l7108:
  8198                           
  8199                           ; BSR set to: 1
  8200                           ;ModbusRtu.c: 1321: _au8Buffer[ 4 ] = 0x82;
  8201  0015F0  0E82               	movlw	130
  8202  0015F2  6F04               	movwf	(__au8Buffer+4)& (0+255),b
  8203                           
  8204                           ; BSR set to: 1
  8205                           ;ModbusRtu.c: 1322: CopyStringToBuffer(objId, "Raspisanie", sizeof("Raspisanie"));
  8206  0015F4  0E34               	movlw	low STR_13
  8207  0015F6  6E07               	movwf	CopyStringToBuffer@src,c
  8208  0015F8  0E0B               	movlw	11
  8209  0015FA  6E08               	movwf	CopyStringToBuffer@len,c
  8210  0015FC  5018               	movf	ModbusProcess_FC43@objId,w,c
  8211  0015FE  EC04  F014         	call	_CopyStringToBuffer
  8212                           
  8213                           ;ModbusRtu.c: 1323: break;
  8214  001602  D01A               	goto	l953
  8215  001604                     l7114:
  8216  001604  FFFF               	dw	65535	; assembler added errata NOP
  8217                           
  8218                           ; BSR set to: 1
  8219  001606  5018               	movf	ModbusProcess_FC43@objId,w,c
  8220                           
  8221                           ; Switch size 1, requested type "speed"
  8222                           ; Number of cases is 7, Range of values is 0 to 6
  8223                           ; switch strategies available:
  8224                           ; Name         Instructions Cycles
  8225                           ; simple_byte           22    12 (average)
  8226                           ;	Chosen strategy is simple_byte
  8227  001608  E0B7               	bz	l7084
  8228  00160A  0A01               	xorlw	1	; case 1
  8229  00160C  E0BF               	bz	l7088
  8230  00160E  0A03               	xorlw	3	; case 2
  8231  001610  E0C7               	bz	l7092
  8232  001612  0A01               	xorlw	1	; case 3
  8233  001614  E0CF               	bz	l7096
  8234  001616  0A07               	xorlw	7	; case 4
  8235  001618  E0D7               	bz	l7100
  8236  00161A  0A01               	xorlw	1	; case 5
  8237  00161C  E0DF               	bz	l7104
  8238  00161E  0A03               	xorlw	3	; case 6
  8239  001620  E0E7               	bz	l7108
  8240  001622  D00A               	goto	l953
  8241  001624                     l7118:
  8242  001624  FFFF               	dw	65535	; assembler added errata NOP
  8243                           
  8244                           ; BSR set to: 1
  8245  001626  5016               	movf	ModbusProcess_FC43@devIdCode,w,c
  8246                           
  8247                           ; Switch size 1, requested type "speed"
  8248                           ; Number of cases is 3, Range of values is 1 to 4
  8249                           ; switch strategies available:
  8250                           ; Name         Instructions Cycles
  8251                           ; simple_byte           10     6 (average)
  8252                           ;	Chosen strategy is simple_byte
  8253  001628  0A01               	xorlw	1	; case 1
  8254  00162A  E101 D767          	bz	l7064
  8255  00162E  0A03               	xorlw	3	; case 2
  8256  001630  E101 D77E          	bz	l7072
  8257  001634  0A06               	xorlw	6	; case 4
  8258  001636  E09D               	bz	l7082
  8259  001638                     l953:
  8260  001638  FFFF               	dw	65535	; assembler added errata NOP
  8261                           
  8262                           ;ModbusRtu.c: 1327: uint8_t u8CopyBufferSize = _u8BufferSize;
  8263  00163A  C06E  F017         	movff	__u8BufferSize,ModbusProcess_FC43@u8CopyBufferSize
  8264                           
  8265                           ;ModbusRtu.c: 1328: ModbusSendTxBuffer();
  8266  00163E  EC5A  F015         	call	_ModbusSendTxBuffer	;wreg free
  8267                           
  8268                           ;ModbusRtu.c: 1330: return u8CopyBufferSize;
  8269  001642  5017               	movf	ModbusProcess_FC43@u8CopyBufferSize,w,c
  8270  001644  0012               	return		;funcret
  8271  001646  FFFF               	dw	65535	; errata NOP
  8272  001648                     __end_of_ModbusProcess_FC43:
  8273                           	opt stack 0
  8274                           tblptru	equ	0xFF8
  8275                           tblptrh	equ	0xFF7
  8276                           tblptrl	equ	0xFF6
  8277                           tablat	equ	0xFF5
  8278                           prodh	equ	0xFF4
  8279                           prodl	equ	0xFF3
  8280                           intcon	equ	0xFF2
  8281                           postinc0	equ	0xFEE
  8282                           wreg	equ	0xFE8
  8283                           postdec1	equ	0xFE5
  8284                           fsr1h	equ	0xFE2
  8285                           fsr1l	equ	0xFE1
  8286                           indf2	equ	0xFDF
  8287                           postinc2	equ	0xFDE
  8288                           postdec2	equ	0xFDD
  8289                           fsr2h	equ	0xFDA
  8290                           fsr2l	equ	0xFD9
  8291                           status	equ	0xFD8
  8292                           
  8293 ;; *************** function _CopyStringToBuffer *****************
  8294 ;; Defined at:
  8295 ;;		line 1241 in file "ModbusRtu.c"
  8296 ;; Parameters:    Size  Location     Type
  8297 ;;  objId           1    wreg     unsigned char 
  8298 ;;  src             1    6[COMRAM] PTR const unsigned char 
  8299 ;;		 -> STR_27(11), STR_25(4), STR_23(20), STR_21(16), 
  8300 ;;		 -> STR_19(5), STR_17(9), STR_15(6), STR_13(11), 
  8301 ;;		 -> STR_11(4), STR_9(20), STR_7(16), STR_5(5), 
  8302 ;;		 -> STR_3(9), STR_1(6), 
  8303 ;;  len             1    7[COMRAM] unsigned char 
  8304 ;; Auto vars:     Size  Location     Type
  8305 ;;  objId           1    9[COMRAM] unsigned char 
  8306 ;;  i               1   10[COMRAM] unsigned char 
  8307 ;; Return value:  Size  Location     Type
  8308 ;;                  1    wreg      void 
  8309 ;; Registers used:
  8310 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  8311 ;; Tracked objects:
  8312 ;;		On entry : 0/1
  8313 ;;		On exit  : 0/0
  8314 ;;		Unchanged: 0/0
  8315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8316 ;;      Params:         2       0       0       0       0       0       0
  8317 ;;      Locals:         2       0       0       0       0       0       0
  8318 ;;      Temps:          1       0       0       0       0       0       0
  8319 ;;      Totals:         5       0       0       0       0       0       0
  8320 ;;Total ram usage:        5 bytes
  8321 ;; Hardware stack levels used:    1
  8322 ;; Hardware stack levels required when called:    2
  8323 ;; This function calls:
  8324 ;;		Nothing
  8325 ;; This function is called by:
  8326 ;;		_ModbusProcess_FC43
  8327 ;; This function uses a non-reentrant model
  8328 ;;
  8329                           
  8330                           	psect	text41
  8331  002808                     __ptext41:
  8332                           	opt stack 0
  8333  002808                     _CopyStringToBuffer:
  8334                           	opt stack 26
  8335                           
  8336                           ;incstack = 0
  8337  002808  FFFF               	dw	65535
  8338                           
  8339                           ;CopyStringToBuffer@objId stored from wreg
  8340  00280A  6E0A               	movwf	CopyStringToBuffer@objId,c
  8341                           
  8342                           ;ModbusRtu.c: 1243: len--;
  8343  00280C  0608               	decf	CopyStringToBuffer@len,f,c
  8344                           
  8345                           ;ModbusRtu.c: 1244: _au8Buffer[_u8BufferSize++] = objId;
  8346  00280E  0E00               	movlw	low __au8Buffer
  8347  002810  246E               	addwf	__u8BufferSize,w,c
  8348  002812  6ED9               	movwf	fsr2l,c
  8349  002814  6ADA               	clrf	fsr2h,c
  8350  002816  0E01               	movlw	high __au8Buffer
  8351  002818  22DA               	addwfc	fsr2h,f,c
  8352  00281A  C00A  FFDF         	movff	CopyStringToBuffer@objId,indf2
  8353  00281E  2A6E               	incf	__u8BufferSize,f,c
  8354                           
  8355                           ;ModbusRtu.c: 1245: _au8Buffer[_u8BufferSize++] = len;
  8356  002820  0E00               	movlw	low __au8Buffer
  8357  002822  246E               	addwf	__u8BufferSize,w,c
  8358  002824  6ED9               	movwf	fsr2l,c
  8359  002826  6ADA               	clrf	fsr2h,c
  8360  002828  0E01               	movlw	high __au8Buffer
  8361  00282A  22DA               	addwfc	fsr2h,f,c
  8362  00282C  C008  FFDF         	movff	CopyStringToBuffer@len,indf2
  8363  002830  2A6E               	incf	__u8BufferSize,f,c
  8364                           
  8365                           ;ModbusRtu.c: 1246: for(uint8_t i = 0; i < len; i++, _u8BufferSize++)
  8366  002832  6A0B               	clrf	CopyStringToBuffer@i,c
  8367  002834  D013               	goto	l6390
  8368  002836                     l6384:
  8369                           
  8370                           ;ModbusRtu.c: 1247: _au8Buffer[_u8BufferSize] = src[i];
  8371  002836  5007               	movf	CopyStringToBuffer@src,w,c
  8372  002838  240B               	addwf	CopyStringToBuffer@i,w,c
  8373  00283A  6E09               	movwf	??_CopyStringToBuffer& (0+255),c
  8374  00283C  C009  FFF6         	movff	??_CopyStringToBuffer,tblptrl
  8375  002840                     	if	1	;There is more than 1 active tblptr byte
  8376  002840  0E06               	movlw	high __smallconst
  8377  002842  6EF7               	movwf	tblptrh,c
  8378  002844                     	endif
  8379  002844                     	if	0	;tblptru may be non-zero
  8380  002844                     	endif
  8381  002844                     	if	0	;tblptru may be non-zero
  8382  002844                     	endif
  8383  002844  0E00               	movlw	low __au8Buffer
  8384  002846  246E               	addwf	__u8BufferSize,w,c
  8385  002848  6ED9               	movwf	fsr2l,c
  8386  00284A  6ADA               	clrf	fsr2h,c
  8387  00284C  0E01               	movlw	high __au8Buffer
  8388  00284E  22DA               	addwfc	fsr2h,f,c
  8389  002850  0008               	tblrd		*
  8390  002852  FFFF               	dw	65535	; errata NOP
  8391  002854  CFF5 FFDF          	movff	tablat,indf2
  8392  002858  2A0B               	incf	CopyStringToBuffer@i,f,c
  8393  00285A  2A6E               	incf	__u8BufferSize,f,c
  8394  00285C                     l6390:
  8395  00285C  FFFF               	dw	65535	; assembler added errata NOP
  8396  00285E  5008               	movf	CopyStringToBuffer@len,w,c
  8397  002860  5C0B               	subwf	CopyStringToBuffer@i,w,c
  8398  002862  E3E9               	bnc	l6384
  8399  002864  0012               	return		;funcret
  8400  002866  FFFF               	dw	65535	; errata NOP
  8401  002868                     __end_of_CopyStringToBuffer:
  8402                           	opt stack 0
  8403                           tblptru	equ	0xFF8
  8404                           tblptrh	equ	0xFF7
  8405                           tblptrl	equ	0xFF6
  8406                           tablat	equ	0xFF5
  8407                           prodh	equ	0xFF4
  8408                           prodl	equ	0xFF3
  8409                           intcon	equ	0xFF2
  8410                           postinc0	equ	0xFEE
  8411                           wreg	equ	0xFE8
  8412                           postdec1	equ	0xFE5
  8413                           fsr1h	equ	0xFE2
  8414                           fsr1l	equ	0xFE1
  8415                           indf2	equ	0xFDF
  8416                           postinc2	equ	0xFDE
  8417                           postdec2	equ	0xFDD
  8418                           fsr2h	equ	0xFDA
  8419                           fsr2l	equ	0xFD9
  8420                           status	equ	0xFD8
  8421                           
  8422 ;; *************** function _ModbusProcess_FC3 *****************
  8423 ;; Defined at:
  8424 ;;		line 983 in file "ModbusRtu.c"
  8425 ;; Parameters:    Size  Location     Type
  8426 ;;  regs            2   21[COMRAM] PTR unsigned short 
  8427 ;;		 -> _MODBUSHoldingRegs(30), _MODBUSInputRegs(30), 
  8428 ;;  u8size          1   23[COMRAM] unsigned char 
  8429 ;; Auto vars:     Size  Location     Type
  8430 ;;  u16regsno       2   29[COMRAM] unsigned short 
  8431 ;;  i               1   32[COMRAM] unsigned char 
  8432 ;;  u8StartAdd      1   31[COMRAM] unsigned char 
  8433 ;;  u8CopyBuffer    1   28[COMRAM] unsigned char 
  8434 ;; Return value:  Size  Location     Type
  8435 ;;                  1    wreg      unsigned char 
  8436 ;; Registers used:
  8437 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8438 ;; Tracked objects:
  8439 ;;		On entry : 0/1
  8440 ;;		On exit  : 0/0
  8441 ;;		Unchanged: 0/0
  8442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8443 ;;      Params:         3       0       0       0       0       0       0
  8444 ;;      Locals:         5       0       0       0       0       0       0
  8445 ;;      Temps:          4       0       0       0       0       0       0
  8446 ;;      Totals:        12       0       0       0       0       0       0
  8447 ;;Total ram usage:       12 bytes
  8448 ;; Hardware stack levels used:    1
  8449 ;; Hardware stack levels required when called:    4
  8450 ;; This function calls:
  8451 ;;		_ModbusSendTxBuffer
  8452 ;; This function is called by:
  8453 ;;		_ModbusPoll
  8454 ;; This function uses a non-reentrant model
  8455 ;;
  8456                           
  8457                           	psect	text42
  8458  0021B2                     __ptext42:
  8459                           	opt stack 0
  8460  0021B2                     _ModbusProcess_FC3:
  8461                           	opt stack 25
  8462                           
  8463                           ;incstack = 0
  8464  0021B2  FFFF               	dw	65535
  8465                           
  8466                           ;ModbusRtu.c: 985: uint8_t u8StartAdd = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buffer[
      +                           ADD_LO ]);
  8467  0021B4  C103  F020         	movff	__au8Buffer+3,ModbusProcess_FC3@u8StartAdd
  8468                           
  8469                           ;ModbusRtu.c: 986: _lastAddress = u8StartAdd;
  8470  0021B8  C020  F0C7         	movff	ModbusProcess_FC3@u8StartAdd,__lastAddress
  8471  0021BC  0100               	movlb	0	; () banked
  8472  0021BE  6BC8               	clrf	(__lastAddress+1)& (0+255),b
  8473                           
  8474                           ; BSR set to: 0
  8475                           ;ModbusRtu.c: 987: uint16_t u16regsno = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ 
      +                          NB_LO ]);
  8476  0021C0  0101               	movlb	1	; () banked
  8477  0021C2  5104               	movf	(__au8Buffer+4)& (0+255),w,b
  8478  0021C4  6E19               	movwf	??_ModbusProcess_FC3& (0+255),c
  8479  0021C6  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  8480  0021C8  6E1E               	movwf	ModbusProcess_FC3@u16regsno,c
  8481  0021CA  C019  F01F         	movff	??_ModbusProcess_FC3,ModbusProcess_FC3@u16regsno+1
  8482                           
  8483                           ; BSR set to: 1
  8484                           ;ModbusRtu.c: 988: _lastCount = u16regsno;
  8485  0021CE  C01E  F0C9         	movff	ModbusProcess_FC3@u16regsno,__lastCount
  8486  0021D2  C01F  F0CA         	movff	ModbusProcess_FC3@u16regsno+1,__lastCount+1
  8487                           
  8488                           ; BSR set to: 1
  8489                           ;ModbusRtu.c: 989: uint8_t u8CopyBufferSize;
  8490                           ;ModbusRtu.c: 990: uint8_t i;
  8491                           ;ModbusRtu.c: 992: _au8Buffer[ 2 ] = u16regsno * 2;
  8492  0021D6  501E               	movf	ModbusProcess_FC3@u16regsno,w,c
  8493  0021D8  241E               	addwf	ModbusProcess_FC3@u16regsno,w,c
  8494  0021DA  6F02               	movwf	(__au8Buffer+2)& (0+255),b
  8495                           
  8496                           ; BSR set to: 1
  8497                           ;ModbusRtu.c: 993: _u8BufferSize = 3;
  8498  0021DC  0E03               	movlw	3
  8499  0021DE  6E6E               	movwf	__u8BufferSize,c
  8500                           
  8501                           ; BSR set to: 1
  8502                           ;ModbusRtu.c: 995: for (i = u8StartAdd; i < u8StartAdd + u16regsno; i++)
  8503  0021E0  C020  F021         	movff	ModbusProcess_FC3@u8StartAdd,ModbusProcess_FC3@i
  8504  0021E4  D02A               	goto	l6854
  8505  0021E6                     l6848:
  8506                           
  8507                           ; BSR set to: 1
  8508                           ;ModbusRtu.c: 996: {
  8509                           ;ModbusRtu.c: 997: _au8Buffer[ _u8BufferSize ] = ((unsigned char)(((regs[i])>>8)&0xFF));
  8510  0021E6  0E00               	movlw	low __au8Buffer
  8511  0021E8  246E               	addwf	__u8BufferSize,w,c
  8512  0021EA  6ED9               	movwf	fsr2l,c
  8513  0021EC  6ADA               	clrf	fsr2h,c
  8514  0021EE  0E01               	movlw	high __au8Buffer
  8515  0021F0  22DA               	addwfc	fsr2h,f,c
  8516  0021F2  5021               	movf	ModbusProcess_FC3@i,w,c
  8517  0021F4  0D02               	mullw	2
  8518  0021F6  50F3               	movf	prodl,w,c
  8519  0021F8  2416               	addwf	ModbusProcess_FC3@regs,w,c
  8520  0021FA  6EE1               	movwf	fsr1l,c
  8521  0021FC  50F4               	movf	prodh,w,c
  8522  0021FE  2017               	addwfc	ModbusProcess_FC3@regs+1,w,c
  8523  002200  6EE2               	movwf	fsr1h,c
  8524  002202  CFE6 F019          	movff	postinc1,??_ModbusProcess_FC3
  8525  002206  CFE5 F01A          	movff	postdec1,??_ModbusProcess_FC3+1
  8526  00220A  C01A  F019         	movff	??_ModbusProcess_FC3+1,??_ModbusProcess_FC3
  8527  00220E  6A1A               	clrf	??_ModbusProcess_FC3+1,c
  8528  002210  5019               	movf	??_ModbusProcess_FC3,w,c
  8529  002212  6EDF               	movwf	indf2,c
  8530                           
  8531                           ; BSR set to: 1
  8532                           ;ModbusRtu.c: 998: _u8BufferSize++;
  8533  002214  2A6E               	incf	__u8BufferSize,f,c
  8534                           
  8535                           ; BSR set to: 1
  8536                           ;ModbusRtu.c: 999: _au8Buffer[ _u8BufferSize ] = ((unsigned char)((regs[i])&0xFF));
  8537  002216  5021               	movf	ModbusProcess_FC3@i,w,c
  8538  002218  0D02               	mullw	2
  8539  00221A  50F3               	movf	prodl,w,c
  8540  00221C  2416               	addwf	ModbusProcess_FC3@regs,w,c
  8541  00221E  6ED9               	movwf	fsr2l,c
  8542  002220  50F4               	movf	prodh,w,c
  8543  002222  2017               	addwfc	ModbusProcess_FC3@regs+1,w,c
  8544  002224  6EDA               	movwf	fsr2h,c
  8545  002226  0E00               	movlw	low __au8Buffer
  8546  002228  246E               	addwf	__u8BufferSize,w,c
  8547  00222A  6EE1               	movwf	fsr1l,c
  8548  00222C  6AE2               	clrf	fsr1h,c
  8549  00222E  0E01               	movlw	high __au8Buffer
  8550  002230  22E2               	addwfc	fsr1h,f,c
  8551  002232  CFDF FFE7          	movff	indf2,indf1
  8552                           
  8553                           ;ModbusRtu.c: 1000: _u8BufferSize++;
  8554  002236  2A6E               	incf	__u8BufferSize,f,c
  8555  002238  2A21               	incf	ModbusProcess_FC3@i,f,c
  8556  00223A                     l6854:
  8557  00223A  FFFF               	dw	65535	; assembler added errata NOP
  8558                           
  8559                           ; BSR set to: 1
  8560  00223C  5020               	movf	ModbusProcess_FC3@u8StartAdd,w,c
  8561  00223E  241E               	addwf	ModbusProcess_FC3@u16regsno,w,c
  8562  002240  6E19               	movwf	??_ModbusProcess_FC3& (0+255),c
  8563  002242  0E00               	movlw	0
  8564  002244  201F               	addwfc	ModbusProcess_FC3@u16regsno+1,w,c
  8565  002246  6E1A               	movwf	(??_ModbusProcess_FC3+1)& (0+255),c
  8566  002248  5021               	movf	ModbusProcess_FC3@i,w,c
  8567  00224A  6E1B               	movwf	(??_ModbusProcess_FC3+2)& (0+255),c
  8568  00224C  6A1C               	clrf	(??_ModbusProcess_FC3+3)& (0+255),c
  8569  00224E  5019               	movf	??_ModbusProcess_FC3,w,c
  8570  002250  5C1B               	subwf	??_ModbusProcess_FC3+2,w,c
  8571  002252  501A               	movf	??_ModbusProcess_FC3+1,w,c
  8572  002254  581C               	subwfb	??_ModbusProcess_FC3+3,w,c
  8573  002256  E3C7               	bnc	l6848
  8574                           
  8575                           ; BSR set to: 1
  8576                           ;ModbusRtu.c: 1001: }
  8577                           ;ModbusRtu.c: 1002: u8CopyBufferSize = _u8BufferSize + 2;
  8578  002258  506E               	movf	__u8BufferSize,w,c
  8579  00225A  0F02               	addlw	2
  8580  00225C  6E1D               	movwf	ModbusProcess_FC3@u8CopyBufferSize,c
  8581                           
  8582                           ; BSR set to: 1
  8583                           ;ModbusRtu.c: 1003: ModbusSendTxBuffer();
  8584  00225E  EC5A  F015         	call	_ModbusSendTxBuffer	;wreg free
  8585                           
  8586                           ;ModbusRtu.c: 1005: return u8CopyBufferSize;
  8587  002262  501D               	movf	ModbusProcess_FC3@u8CopyBufferSize,w,c
  8588  002264  0012               	return		;funcret
  8589  002266  FFFF               	dw	65535	; errata NOP
  8590  002268                     __end_of_ModbusProcess_FC3:
  8591                           	opt stack 0
  8592                           tblptru	equ	0xFF8
  8593                           tblptrh	equ	0xFF7
  8594                           tblptrl	equ	0xFF6
  8595                           tablat	equ	0xFF5
  8596                           prodh	equ	0xFF4
  8597                           prodl	equ	0xFF3
  8598                           intcon	equ	0xFF2
  8599                           postinc0	equ	0xFEE
  8600                           wreg	equ	0xFE8
  8601                           indf1	equ	0xFE7
  8602                           postinc1	equ	0xFE6
  8603                           postdec1	equ	0xFE5
  8604                           fsr1h	equ	0xFE2
  8605                           fsr1l	equ	0xFE1
  8606                           indf2	equ	0xFDF
  8607                           postinc2	equ	0xFDE
  8608                           postdec2	equ	0xFDD
  8609                           fsr2h	equ	0xFDA
  8610                           fsr2l	equ	0xFD9
  8611                           status	equ	0xFD8
  8612                           
  8613 ;; *************** function _ModbusProcess_FC21 *****************
  8614 ;; Defined at:
  8615 ;;		line 1209 in file "ModbusRtu.c"
  8616 ;; Parameters:    Size  Location     Type
  8617 ;;		None
  8618 ;; Auto vars:     Size  Location     Type
  8619 ;;  recLenBytes     2   27[COMRAM] unsigned short 
  8620 ;;  startAddrsBy    2   25[COMRAM] unsigned short 
  8621 ;;  i               1   29[COMRAM] unsigned char 
  8622 ;;  u8CopyBuffer    1   24[COMRAM] unsigned char 
  8623 ;;  requestDataL    1   23[COMRAM] unsigned char 
  8624 ;; Return value:  Size  Location     Type
  8625 ;;                  1    wreg      unsigned char 
  8626 ;; Registers used:
  8627 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8628 ;; Tracked objects:
  8629 ;;		On entry : 0/1
  8630 ;;		On exit  : 0/0
  8631 ;;		Unchanged: 0/0
  8632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8633 ;;      Params:         0       0       0       0       0       0       0
  8634 ;;      Locals:         7       0       0       0       0       0       0
  8635 ;;      Temps:          2       0       0       0       0       0       0
  8636 ;;      Totals:         9       0       0       0       0       0       0
  8637 ;;Total ram usage:        9 bytes
  8638 ;; Hardware stack levels used:    1
  8639 ;; Hardware stack levels required when called:    4
  8640 ;; This function calls:
  8641 ;;		_ModbusSendTxBuffer
  8642 ;; This function is called by:
  8643 ;;		_ModbusPoll
  8644 ;; This function uses a non-reentrant model
  8645 ;;
  8646                           
  8647                           	psect	text43
  8648  002316                     __ptext43:
  8649                           	opt stack 0
  8650  002316                     _ModbusProcess_FC21:
  8651                           	opt stack 25
  8652                           
  8653                           ;incstack = 0
  8654  002316  FFFF               	dw	65535
  8655                           
  8656                           ;ModbusRtu.c: 1213: int8_t requestDataLen = _au8Buffer[ FILE_DATA_LEN ];
  8657  002318  C102  F018         	movff	__au8Buffer+2,ModbusProcess_FC21@requestDataLen
  8658                           
  8659                           ;ModbusRtu.c: 1215: uint16_t startAddrsBytes = ((((uint16_t)_au8Buffer[ FILE_REC_HI ]<<8
      +                          )|_au8Buffer[ FILE_REC_LO ])) << 1;
  8660  00231C  0101               	movlb	1	; () banked
  8661  00231E  5107               	movf	(__au8Buffer+7)& (0+255),w,b
  8662  002320  C106  F016         	movff	__au8Buffer+6,??_ModbusProcess_FC21
  8663  002324  6A17               	clrf	(??_ModbusProcess_FC21+1)& (0+255),c
  8664  002326  C016  F017         	movff	??_ModbusProcess_FC21,??_ModbusProcess_FC21+1
  8665  00232A  6A16               	clrf	??_ModbusProcess_FC21,c
  8666  00232C  1216               	iorwf	??_ModbusProcess_FC21,f,c
  8667  00232E  90D8               	bcf	status,0,c
  8668  002330  3416               	rlcf	??_ModbusProcess_FC21,w,c
  8669  002332  6E1A               	movwf	ModbusProcess_FC21@startAddrsBytes,c
  8670  002334  3417               	rlcf	??_ModbusProcess_FC21+1,w,c
  8671  002336  6E1B               	movwf	ModbusProcess_FC21@startAddrsBytes+1,c
  8672                           
  8673                           ; BSR set to: 1
  8674                           ;ModbusRtu.c: 1216: _lastAddress = startAddrsBytes;
  8675  002338  C01A  F0C7         	movff	ModbusProcess_FC21@startAddrsBytes,__lastAddress
  8676  00233C  C01B  F0C8         	movff	ModbusProcess_FC21@startAddrsBytes+1,__lastAddress+1
  8677                           
  8678                           ;ModbusRtu.c: 1217: uint16_t recLenBytes = ((((uint16_t)_au8Buffer[ FILE_REC_LEN_HI ]<<8
      +                          )|_au8Buffer[ FILE_REC_LEN_LO ])) << 1;
  8679  002340  5109               	movf	(__au8Buffer+9)& (0+255),w,b
  8680  002342  C108  F016         	movff	__au8Buffer+8,??_ModbusProcess_FC21
  8681  002346  6A17               	clrf	(??_ModbusProcess_FC21+1)& (0+255),c
  8682  002348  C016  F017         	movff	??_ModbusProcess_FC21,??_ModbusProcess_FC21+1
  8683  00234C  6A16               	clrf	??_ModbusProcess_FC21,c
  8684  00234E  1216               	iorwf	??_ModbusProcess_FC21,f,c
  8685  002350  90D8               	bcf	status,0,c
  8686  002352  3416               	rlcf	??_ModbusProcess_FC21,w,c
  8687  002354  6E1C               	movwf	ModbusProcess_FC21@recLenBytes,c
  8688  002356  3417               	rlcf	??_ModbusProcess_FC21+1,w,c
  8689  002358  6E1D               	movwf	ModbusProcess_FC21@recLenBytes+1,c
  8690                           
  8691                           ; BSR set to: 1
  8692                           ;ModbusRtu.c: 1218: _lastCount = recLenBytes;
  8693  00235A  C01C  F0C9         	movff	ModbusProcess_FC21@recLenBytes,__lastCount
  8694  00235E  C01D  F0CA         	movff	ModbusProcess_FC21@recLenBytes+1,__lastCount+1
  8695                           
  8696                           ;ModbusRtu.c: 1219: uint8_t u8CopyBufferSize;
  8697                           ;ModbusRtu.c: 1220: uint8_t i;
  8698                           ;ModbusRtu.c: 1226: _u8BufferSize = requestDataLen + 1;
  8699  002362  2818               	incf	ModbusProcess_FC21@requestDataLen,w,c
  8700  002364  6E6E               	movwf	__u8BufferSize,c
  8701                           
  8702                           ; BSR set to: 1
  8703                           ;ModbusRtu.c: 1230: for (i = 0; i < recLenBytes; i++)
  8704  002366  6A1E               	clrf	ModbusProcess_FC21@i,c
  8705  002368  D01C               	goto	l7052
  8706  00236A                     l935:
  8707  00236A  FFFF               	dw	65535	; assembler added errata NOP
  8708                           
  8709                           ; BSR set to: 1
  8710  00236C  B2A6               	btfsc	4006,1,c	;volatile
  8711  00236E  D7FD               	goto	l935
  8712                           
  8713                           ; BSR set to: 1
  8714  002370  501E               	movf	ModbusProcess_FC21@i,w,c
  8715  002372  241A               	addwf	ModbusProcess_FC21@startAddrsBytes,w,c
  8716  002374  6EA9               	movwf	4009,c	;volatile
  8717                           
  8718                           ; BSR set to: 1
  8719  002376  0E0A               	movlw	low (__au8Buffer+10)
  8720  002378  241E               	addwf	ModbusProcess_FC21@i,w,c
  8721  00237A  6ED9               	movwf	fsr2l,c
  8722  00237C  6ADA               	clrf	fsr2h,c
  8723  00237E  0E01               	movlw	high (__au8Buffer+10)
  8724  002380  22DA               	addwfc	fsr2h,f,c
  8725  002382  50DF               	movf	indf2,w,c
  8726  002384  6EA8               	movwf	4008,c	;volatile
  8727                           
  8728                           ; BSR set to: 1
  8729  002386  90D8               	bcf	status,0,c	;volatile
  8730                           
  8731                           ; BSR set to: 1
  8732  002388  BEF2               	btfsc	intcon,7,c	;volatile
  8733                           
  8734                           ; BSR set to: 1
  8735  00238A  80D8               	bsf	status,0,c	;volatile
  8736                           
  8737                           ; BSR set to: 1
  8738  00238C  9EF2               	bcf	intcon,7,c	;volatile
  8739  00238E  84A6               	bsf	4006,2,c	;volatile
  8740                           
  8741                           ; BSR set to: 1
  8742  002390  0E55               	movlw	85
  8743  002392  6EA7               	movwf	4007,c	;volatile
  8744  002394  0EAA               	movlw	170
  8745  002396  6EA7               	movwf	4007,c	;volatile
  8746                           
  8747                           ; BSR set to: 1
  8748  002398  82A6               	bsf	4006,1,c	;volatile
  8749                           
  8750                           ; BSR set to: 1
  8751  00239A  94A6               	bcf	4006,2,c	;volatile
  8752                           
  8753                           ; BSR set to: 1
  8754  00239C  E301               	bnc	l7050
  8755                           
  8756                           ; BSR set to: 1
  8757  00239E  8EF2               	bsf	intcon,7,c	;volatile
  8758  0023A0                     l7050:
  8759                           
  8760                           ; BSR set to: 1
  8761  0023A0  2A1E               	incf	ModbusProcess_FC21@i,f,c
  8762  0023A2                     l7052:
  8763  0023A2  FFFF               	dw	65535	; assembler added errata NOP
  8764                           
  8765                           ; BSR set to: 1
  8766  0023A4  501E               	movf	ModbusProcess_FC21@i,w,c
  8767  0023A6  6E16               	movwf	??_ModbusProcess_FC21& (0+255),c
  8768  0023A8  6A17               	clrf	(??_ModbusProcess_FC21+1)& (0+255),c
  8769  0023AA  501C               	movf	ModbusProcess_FC21@recLenBytes,w,c
  8770  0023AC  5C16               	subwf	??_ModbusProcess_FC21,w,c
  8771  0023AE  501D               	movf	ModbusProcess_FC21@recLenBytes+1,w,c
  8772  0023B0  5817               	subwfb	??_ModbusProcess_FC21+1,w,c
  8773  0023B2  E3DB               	bnc	l935
  8774                           
  8775                           ; BSR set to: 1
  8776                           ;ModbusRtu.c: 1233: }
  8777                           ;ModbusRtu.c: 1235: u8CopyBufferSize = _u8BufferSize;
  8778  0023B4  C06E  F019         	movff	__u8BufferSize,ModbusProcess_FC21@u8CopyBufferSize
  8779                           
  8780                           ; BSR set to: 1
  8781                           ;ModbusRtu.c: 1236: ModbusSendTxBuffer();
  8782  0023B8  EC5A  F015         	call	_ModbusSendTxBuffer	;wreg free
  8783                           
  8784                           ;ModbusRtu.c: 1238: return u8CopyBufferSize;
  8785  0023BC  5019               	movf	ModbusProcess_FC21@u8CopyBufferSize,w,c
  8786  0023BE  0012               	return		;funcret
  8787  0023C0  FFFF               	dw	65535	; errata NOP
  8788  0023C2                     __end_of_ModbusProcess_FC21:
  8789                           	opt stack 0
  8790                           tblptru	equ	0xFF8
  8791                           tblptrh	equ	0xFF7
  8792                           tblptrl	equ	0xFF6
  8793                           tablat	equ	0xFF5
  8794                           prodh	equ	0xFF4
  8795                           prodl	equ	0xFF3
  8796                           intcon	equ	0xFF2
  8797                           postinc0	equ	0xFEE
  8798                           wreg	equ	0xFE8
  8799                           indf1	equ	0xFE7
  8800                           postinc1	equ	0xFE6
  8801                           postdec1	equ	0xFE5
  8802                           fsr1h	equ	0xFE2
  8803                           fsr1l	equ	0xFE1
  8804                           indf2	equ	0xFDF
  8805                           postinc2	equ	0xFDE
  8806                           postdec2	equ	0xFDD
  8807                           fsr2h	equ	0xFDA
  8808                           fsr2l	equ	0xFD9
  8809                           status	equ	0xFD8
  8810                           
  8811 ;; *************** function _ModbusProcess_FC17 *****************
  8812 ;; Defined at:
  8813 ;;		line 1184 in file "ModbusRtu.c"
  8814 ;; Parameters:    Size  Location     Type
  8815 ;;		None
  8816 ;; Auto vars:     Size  Location     Type
  8817 ;;  u8CopyBuffer    1   21[COMRAM] unsigned char 
  8818 ;; Return value:  Size  Location     Type
  8819 ;;                  1    wreg      unsigned char 
  8820 ;; Registers used:
  8821 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8822 ;; Tracked objects:
  8823 ;;		On entry : 0/1
  8824 ;;		On exit  : 0/0
  8825 ;;		Unchanged: 0/0
  8826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8827 ;;      Params:         0       0       0       0       0       0       0
  8828 ;;      Locals:         1       0       0       0       0       0       0
  8829 ;;      Temps:          0       0       0       0       0       0       0
  8830 ;;      Totals:         1       0       0       0       0       0       0
  8831 ;;Total ram usage:        1 bytes
  8832 ;; Hardware stack levels used:    1
  8833 ;; Hardware stack levels required when called:    4
  8834 ;; This function calls:
  8835 ;;		_ModbusSendTxBuffer
  8836 ;; This function is called by:
  8837 ;;		_ModbusPoll
  8838 ;; This function uses a non-reentrant model
  8839 ;;
  8840                           
  8841                           	psect	text44
  8842  002798                     __ptext44:
  8843                           	opt stack 0
  8844  002798                     _ModbusProcess_FC17:
  8845                           	opt stack 25
  8846                           
  8847                           ;incstack = 0
  8848  002798  FFFF               	dw	65535
  8849                           
  8850                           ;ModbusRtu.c: 1186: _au8Buffer[ 2 ] = 4;
  8851  00279A  0E04               	movlw	4
  8852  00279C  0101               	movlb	1	; () banked
  8853  00279E  6F02               	movwf	(__au8Buffer+2)& (0+255),b
  8854                           
  8855                           ;ModbusRtu.c: 1188: _u8BufferSize = 3;
  8856  0027A0  0E03               	movlw	3
  8857  0027A2  6E6E               	movwf	__u8BufferSize,c
  8858                           
  8859                           ; BSR set to: 1
  8860                           ;ModbusRtu.c: 1189: _au8Buffer[_u8BufferSize++] = 0x01;
  8861  0027A4  0E00               	movlw	low __au8Buffer
  8862  0027A6  246E               	addwf	__u8BufferSize,w,c
  8863  0027A8  6ED9               	movwf	fsr2l,c
  8864  0027AA  6ADA               	clrf	fsr2h,c
  8865  0027AC  0E01               	movlw	high __au8Buffer
  8866  0027AE  22DA               	addwfc	fsr2h,f,c
  8867  0027B0  0E01               	movlw	1
  8868  0027B2  6EDF               	movwf	indf2,c
  8869                           
  8870                           ; BSR set to: 1
  8871  0027B4  2A6E               	incf	__u8BufferSize,f,c
  8872                           
  8873                           ; BSR set to: 1
  8874                           ;ModbusRtu.c: 1190: _au8Buffer[_u8BufferSize++] = 0x01;
  8875  0027B6  0E00               	movlw	low __au8Buffer
  8876  0027B8  246E               	addwf	__u8BufferSize,w,c
  8877  0027BA  6ED9               	movwf	fsr2l,c
  8878  0027BC  6ADA               	clrf	fsr2h,c
  8879  0027BE  0E01               	movlw	high __au8Buffer
  8880  0027C0  22DA               	addwfc	fsr2h,f,c
  8881  0027C2  0E01               	movlw	1
  8882  0027C4  6EDF               	movwf	indf2,c
  8883                           
  8884                           ; BSR set to: 1
  8885  0027C6  2A6E               	incf	__u8BufferSize,f,c
  8886                           
  8887                           ; BSR set to: 1
  8888                           ;ModbusRtu.c: 1191: _au8Buffer[_u8BufferSize++] = 0x01;
  8889  0027C8  0E00               	movlw	low __au8Buffer
  8890  0027CA  246E               	addwf	__u8BufferSize,w,c
  8891  0027CC  6ED9               	movwf	fsr2l,c
  8892  0027CE  6ADA               	clrf	fsr2h,c
  8893  0027D0  0E01               	movlw	high __au8Buffer
  8894  0027D2  22DA               	addwfc	fsr2h,f,c
  8895  0027D4  0E01               	movlw	1
  8896  0027D6  6EDF               	movwf	indf2,c
  8897                           
  8898                           ; BSR set to: 1
  8899  0027D8  2A6E               	incf	__u8BufferSize,f,c
  8900                           
  8901                           ; BSR set to: 1
  8902                           ;ModbusRtu.c: 1192: _au8Buffer[_u8BufferSize++] = 0x00;
  8903  0027DA  0E00               	movlw	low __au8Buffer
  8904  0027DC  246E               	addwf	__u8BufferSize,w,c
  8905  0027DE  6ED9               	movwf	fsr2l,c
  8906  0027E0  6ADA               	clrf	fsr2h,c
  8907  0027E2  0E01               	movlw	high __au8Buffer
  8908  0027E4  22DA               	addwfc	fsr2h,f,c
  8909  0027E6  6ADF               	clrf	indf2,c
  8910                           
  8911                           ; BSR set to: 1
  8912  0027E8  2A6E               	incf	__u8BufferSize,f,c
  8913                           
  8914                           ; BSR set to: 1
  8915                           ;ModbusRtu.c: 1194: _au8Buffer[_u8BufferSize++] = 0xff;
  8916  0027EA  0E00               	movlw	low __au8Buffer
  8917  0027EC  246E               	addwf	__u8BufferSize,w,c
  8918  0027EE  6ED9               	movwf	fsr2l,c
  8919  0027F0  6ADA               	clrf	fsr2h,c
  8920  0027F2  0E01               	movlw	high __au8Buffer
  8921  0027F4  22DA               	addwfc	fsr2h,f,c
  8922  0027F6  68DF               	setf	indf2,c
  8923                           
  8924                           ; BSR set to: 1
  8925  0027F8  2A6E               	incf	__u8BufferSize,f,c
  8926                           
  8927                           ; BSR set to: 1
  8928                           ;ModbusRtu.c: 1195: uint8_t u8CopyBufferSize = _u8BufferSize;
  8929  0027FA  C06E  F016         	movff	__u8BufferSize,ModbusProcess_FC17@u8CopyBufferSize
  8930                           
  8931                           ; BSR set to: 1
  8932                           ;ModbusRtu.c: 1196: ModbusSendTxBuffer();
  8933  0027FE  EC5A  F015         	call	_ModbusSendTxBuffer	;wreg free
  8934                           
  8935                           ;ModbusRtu.c: 1198: return u8CopyBufferSize;
  8936  002802  5016               	movf	ModbusProcess_FC17@u8CopyBufferSize,w,c
  8937  002804  0012               	return		;funcret
  8938  002806  FFFF               	dw	65535	; errata NOP
  8939  002808                     __end_of_ModbusProcess_FC17:
  8940                           	opt stack 0
  8941                           tblptru	equ	0xFF8
  8942                           tblptrh	equ	0xFF7
  8943                           tblptrl	equ	0xFF6
  8944                           tablat	equ	0xFF5
  8945                           prodh	equ	0xFF4
  8946                           prodl	equ	0xFF3
  8947                           intcon	equ	0xFF2
  8948                           postinc0	equ	0xFEE
  8949                           wreg	equ	0xFE8
  8950                           indf1	equ	0xFE7
  8951                           postinc1	equ	0xFE6
  8952                           postdec1	equ	0xFE5
  8953                           fsr1h	equ	0xFE2
  8954                           fsr1l	equ	0xFE1
  8955                           indf2	equ	0xFDF
  8956                           postinc2	equ	0xFDE
  8957                           postdec2	equ	0xFDD
  8958                           fsr2h	equ	0xFDA
  8959                           fsr2l	equ	0xFD9
  8960                           status	equ	0xFD8
  8961                           
  8962 ;; *************** function _ModbusProcess_FC16 *****************
  8963 ;; Defined at:
  8964 ;;		line 1145 in file "ModbusRtu.c"
  8965 ;; Parameters:    Size  Location     Type
  8966 ;;  regs            2   21[COMRAM] PTR unsigned short 
  8967 ;;		 -> _MODBUSHoldingRegs(30), 
  8968 ;;  u8size          1   23[COMRAM] unsigned char 
  8969 ;; Auto vars:     Size  Location     Type
  8970 ;;  u16StartAdd     2   31[COMRAM] unsigned short 
  8971 ;;  temp            2   28[COMRAM] unsigned short 
  8972 ;;  i               1   34[COMRAM] unsigned char 
  8973 ;;  u8regsno        1   33[COMRAM] unsigned char 
  8974 ;;  u8CopyBuffer    1   30[COMRAM] unsigned char 
  8975 ;; Return value:  Size  Location     Type
  8976 ;;                  1    wreg      unsigned char 
  8977 ;; Registers used:
  8978 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8979 ;; Tracked objects:
  8980 ;;		On entry : 0/1
  8981 ;;		On exit  : 0/0
  8982 ;;		Unchanged: 0/0
  8983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8984 ;;      Params:         3       0       0       0       0       0       0
  8985 ;;      Locals:         7       0       0       0       0       0       0
  8986 ;;      Temps:          4       0       0       0       0       0       0
  8987 ;;      Totals:        14       0       0       0       0       0       0
  8988 ;;Total ram usage:       14 bytes
  8989 ;; Hardware stack levels used:    1
  8990 ;; Hardware stack levels required when called:    4
  8991 ;; This function calls:
  8992 ;;		_ModbusSendTxBuffer
  8993 ;; This function is called by:
  8994 ;;		_ModbusPoll
  8995 ;; This function uses a non-reentrant model
  8996 ;;
  8997                           
  8998                           	psect	text45
  8999  001F72                     __ptext45:
  9000                           	opt stack 0
  9001  001F72                     _ModbusProcess_FC16:
  9002                           	opt stack 25
  9003                           
  9004                           ;incstack = 0
  9005  001F72  FFFF               	dw	65535
  9006                           
  9007                           ;ModbusRtu.c: 1148: uint16_t u16StartAdd = _au8Buffer[ ADD_HI ] << 8 | _au8Buffer[ ADD_L
      +                          O ];
  9008  001F74  0101               	movlb	1	; () banked
  9009  001F76  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  9010  001F78  C102  F019         	movff	__au8Buffer+2,??_ModbusProcess_FC16
  9011  001F7C  6A1A               	clrf	(??_ModbusProcess_FC16+1)& (0+255),c
  9012  001F7E  C019  F01A         	movff	??_ModbusProcess_FC16,??_ModbusProcess_FC16+1
  9013  001F82  6A19               	clrf	??_ModbusProcess_FC16,c
  9014  001F84  1019               	iorwf	??_ModbusProcess_FC16,w,c
  9015  001F86  6E20               	movwf	ModbusProcess_FC16@u16StartAdd,c
  9016  001F88  501A               	movf	??_ModbusProcess_FC16+1,w,c
  9017  001F8A  6E21               	movwf	ModbusProcess_FC16@u16StartAdd+1,c
  9018                           
  9019                           ; BSR set to: 1
  9020                           ;ModbusRtu.c: 1149: _lastAddress = u16StartAdd;
  9021  001F8C  C020  F0C7         	movff	ModbusProcess_FC16@u16StartAdd,__lastAddress
  9022  001F90  C021  F0C8         	movff	ModbusProcess_FC16@u16StartAdd+1,__lastAddress+1
  9023                           
  9024                           ; BSR set to: 1
  9025                           ;ModbusRtu.c: 1150: int8_t u8regsno = _au8Buffer[ NB_HI ] << 8 | _au8Buffer[ NB_LO ];
  9026  001F94  C105  F022         	movff	__au8Buffer+5,ModbusProcess_FC16@u8regsno
  9027                           
  9028                           ; BSR set to: 1
  9029                           ;ModbusRtu.c: 1151: _lastCount = u8regsno;
  9030  001F98  C022  F0C9         	movff	ModbusProcess_FC16@u8regsno,__lastCount
  9031  001F9C  0100               	movlb	0	; () banked
  9032  001F9E  6BCA               	clrf	(__lastCount+1)& (0+255),b
  9033                           
  9034                           ; BSR set to: 0
  9035                           ;ModbusRtu.c: 1152: uint8_t u8CopyBufferSize;
  9036                           ;ModbusRtu.c: 1153: uint8_t i;
  9037                           ;ModbusRtu.c: 1154: uint16_t temp;
  9038                           ;ModbusRtu.c: 1157: _au8Buffer[ NB_HI ] = 0;
  9039  001FA0  0101               	movlb	1	; () banked
  9040  001FA2  6B04               	clrf	(__au8Buffer+4)& (0+255),b
  9041                           
  9042                           ; BSR set to: 1
  9043                           ;ModbusRtu.c: 1158: _au8Buffer[ NB_LO ] = u8regsno;
  9044  001FA4  C022  F105         	movff	ModbusProcess_FC16@u8regsno,__au8Buffer+5
  9045                           
  9046                           ; BSR set to: 1
  9047                           ;ModbusRtu.c: 1159: _u8BufferSize = RESPONSE_SIZE;
  9048  001FA8  0E06               	movlw	6
  9049  001FAA  6E6E               	movwf	__u8BufferSize,c
  9050                           
  9051                           ; BSR set to: 1
  9052                           ;ModbusRtu.c: 1162: for (i = 0; i < u8regsno && (u16StartAdd + i) < u8size; i++)
  9053  001FAC  6A23               	clrf	ModbusProcess_FC16@i,c
  9054  001FAE  D02C               	goto	l6978
  9055  001FB0                     l6972:
  9056                           
  9057                           ; BSR set to: 1
  9058                           ;ModbusRtu.c: 1163: {
  9059                           ;ModbusRtu.c: 1164: temp = (((uint16_t)_au8Buffer[ (BYTE_CNT + 1) + i * 2 ]<<8)|_au8Buff
      +                          er[ (BYTE_CNT + 2) + i * 2 ]);
  9060  001FB0  5023               	movf	ModbusProcess_FC16@i,w,c
  9061  001FB2  0D02               	mullw	2
  9062  001FB4  0E08               	movlw	low (__au8Buffer+8)
  9063  001FB6  24F3               	addwf	prodl,w,c
  9064  001FB8  6ED9               	movwf	fsr2l,c
  9065  001FBA  0E01               	movlw	high (__au8Buffer+8)
  9066  001FBC  20F4               	addwfc	prodh,w,c
  9067  001FBE  6EDA               	movwf	fsr2h,c
  9068  001FC0  50DF               	movf	indf2,w,c
  9069  001FC2  6E19               	movwf	??_ModbusProcess_FC16& (0+255),c
  9070  001FC4  5023               	movf	ModbusProcess_FC16@i,w,c
  9071  001FC6  0D02               	mullw	2
  9072  001FC8  0E07               	movlw	low (__au8Buffer+7)
  9073  001FCA  24F3               	addwf	prodl,w,c
  9074  001FCC  6ED9               	movwf	fsr2l,c
  9075  001FCE  0E01               	movlw	high (__au8Buffer+7)
  9076  001FD0  20F4               	addwfc	prodh,w,c
  9077  001FD2  6EDA               	movwf	fsr2h,c
  9078  001FD4  50DF               	movf	indf2,w,c
  9079  001FD6  6E1A               	movwf	(??_ModbusProcess_FC16+1)& (0+255),c
  9080  001FD8  5019               	movf	??_ModbusProcess_FC16,w,c
  9081  001FDA  6E1D               	movwf	ModbusProcess_FC16@temp,c
  9082  001FDC  C01A  F01E         	movff	??_ModbusProcess_FC16+1,ModbusProcess_FC16@temp+1
  9083                           
  9084                           ; BSR set to: 1
  9085                           ;ModbusRtu.c: 1168: regs[ u16StartAdd + i ] = temp;
  9086  001FE0  5023               	movf	ModbusProcess_FC16@i,w,c
  9087  001FE2  2420               	addwf	ModbusProcess_FC16@u16StartAdd,w,c
  9088  001FE4  6E19               	movwf	??_ModbusProcess_FC16& (0+255),c
  9089  001FE6  0E00               	movlw	0
  9090  001FE8  2021               	addwfc	ModbusProcess_FC16@u16StartAdd+1,w,c
  9091  001FEA  6E1A               	movwf	(??_ModbusProcess_FC16+1)& (0+255),c
  9092  001FEC  90D8               	bcf	status,0,c
  9093  001FEE  3619               	rlcf	??_ModbusProcess_FC16,f,c
  9094  001FF0  361A               	rlcf	??_ModbusProcess_FC16+1,f,c
  9095  001FF2  5019               	movf	??_ModbusProcess_FC16,w,c
  9096  001FF4  2416               	addwf	ModbusProcess_FC16@regs,w,c
  9097  001FF6  6ED9               	movwf	fsr2l,c
  9098  001FF8  501A               	movf	??_ModbusProcess_FC16+1,w,c
  9099  001FFA  2017               	addwfc	ModbusProcess_FC16@regs+1,w,c
  9100  001FFC  6EDA               	movwf	fsr2h,c
  9101  001FFE  C01D  FFDE         	movff	ModbusProcess_FC16@temp,postinc2
  9102  002002  C01E  FFDD         	movff	ModbusProcess_FC16@temp+1,postdec2
  9103                           
  9104                           ; BSR set to: 1
  9105  002006  2A23               	incf	ModbusProcess_FC16@i,f,c
  9106  002008                     l6978:
  9107  002008  FFFF               	dw	65535	; assembler added errata NOP
  9108                           
  9109                           ; BSR set to: 1
  9110  00200A  5022               	movf	ModbusProcess_FC16@u8regsno,w,c
  9111  00200C  5C23               	subwf	ModbusProcess_FC16@i,w,c
  9112  00200E  E20E               	bc	l6982
  9113                           
  9114                           ; BSR set to: 1
  9115  002010  5018               	movf	ModbusProcess_FC16@u8size,w,c
  9116  002012  6E19               	movwf	??_ModbusProcess_FC16& (0+255),c
  9117  002014  6A1A               	clrf	(??_ModbusProcess_FC16+1)& (0+255),c
  9118  002016  5023               	movf	ModbusProcess_FC16@i,w,c
  9119  002018  2420               	addwf	ModbusProcess_FC16@u16StartAdd,w,c
  9120  00201A  6E1B               	movwf	(??_ModbusProcess_FC16+2)& (0+255),c
  9121  00201C  0E00               	movlw	0
  9122  00201E  2021               	addwfc	ModbusProcess_FC16@u16StartAdd+1,w,c
  9123  002020  6E1C               	movwf	(??_ModbusProcess_FC16+3)& (0+255),c
  9124  002022  5019               	movf	??_ModbusProcess_FC16,w,c
  9125  002024  5C1B               	subwf	??_ModbusProcess_FC16+2,w,c
  9126  002026  501A               	movf	??_ModbusProcess_FC16+1,w,c
  9127  002028  581C               	subwfb	??_ModbusProcess_FC16+3,w,c
  9128  00202A  E3C2               	bnc	l6972
  9129  00202C                     l6982:
  9130                           
  9131                           ; BSR set to: 1
  9132                           ;ModbusRtu.c: 1169: }
  9133                           ;ModbusRtu.c: 1170: u8CopyBufferSize = _u8BufferSize + 2;
  9134  00202C  506E               	movf	__u8BufferSize,w,c
  9135  00202E  0F02               	addlw	2
  9136  002030  6E1F               	movwf	ModbusProcess_FC16@u8CopyBufferSize,c
  9137                           
  9138                           ; BSR set to: 1
  9139                           ;ModbusRtu.c: 1171: ModbusSendTxBuffer();
  9140  002032  EC5A  F015         	call	_ModbusSendTxBuffer	;wreg free
  9141                           
  9142                           ;ModbusRtu.c: 1173: return u8CopyBufferSize;
  9143  002036  501F               	movf	ModbusProcess_FC16@u8CopyBufferSize,w,c
  9144  002038  0012               	return		;funcret
  9145  00203A  FFFF               	dw	65535	; errata NOP
  9146  00203C                     __end_of_ModbusProcess_FC16:
  9147                           	opt stack 0
  9148                           tblptru	equ	0xFF8
  9149                           tblptrh	equ	0xFF7
  9150                           tblptrl	equ	0xFF6
  9151                           tablat	equ	0xFF5
  9152                           prodh	equ	0xFF4
  9153                           prodl	equ	0xFF3
  9154                           intcon	equ	0xFF2
  9155                           postinc0	equ	0xFEE
  9156                           wreg	equ	0xFE8
  9157                           indf1	equ	0xFE7
  9158                           postinc1	equ	0xFE6
  9159                           postdec1	equ	0xFE5
  9160                           fsr1h	equ	0xFE2
  9161                           fsr1l	equ	0xFE1
  9162                           indf2	equ	0xFDF
  9163                           postinc2	equ	0xFDE
  9164                           postdec2	equ	0xFDD
  9165                           fsr2h	equ	0xFDA
  9166                           fsr2l	equ	0xFD9
  9167                           status	equ	0xFD8
  9168                           
  9169 ;; *************** function _ModbusProcess_FC15 *****************
  9170 ;; Defined at:
  9171 ;;		line 1087 in file "ModbusRtu.c"
  9172 ;; Parameters:    Size  Location     Type
  9173 ;;  regs            1    wreg     PTR unsigned short 
  9174 ;;		 -> _MODBUSCoils(2), 
  9175 ;; Auto vars:     Size  Location     Type
  9176 ;;  regs            1   35[COMRAM] PTR unsigned short 
  9177 ;;		 -> _MODBUSCoils(2), 
  9178 ;;  u16currentCo    2   37[COMRAM] unsigned short 
  9179 ;;  u16Coilno       2   33[COMRAM] unsigned short 
  9180 ;;  u16StartCoil    2   31[COMRAM] unsigned short 
  9181 ;;  u16coil         2   26[COMRAM] unsigned short 
  9182 ;;  u8bitsno        1   39[COMRAM] unsigned char 
  9183 ;;  u8currentBit    1   36[COMRAM] unsigned char 
  9184 ;;  u8frameByte     1   30[COMRAM] unsigned char 
  9185 ;;  bTemp           1   29[COMRAM] unsigned char 
  9186 ;;  u8CopyBuffer    1   28[COMRAM] unsigned char 
  9187 ;; Return value:  Size  Location     Type
  9188 ;;                  1    wreg      unsigned char 
  9189 ;; Registers used:
  9190 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9191 ;; Tracked objects:
  9192 ;;		On entry : 0/1
  9193 ;;		On exit  : 0/0
  9194 ;;		Unchanged: 0/0
  9195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9196 ;;      Params:         0       0       0       0       0       0       0
  9197 ;;      Locals:        14       0       0       0       0       0       0
  9198 ;;      Temps:          5       0       0       0       0       0       0
  9199 ;;      Totals:        19       0       0       0       0       0       0
  9200 ;;Total ram usage:       19 bytes
  9201 ;; Hardware stack levels used:    1
  9202 ;; Hardware stack levels required when called:    4
  9203 ;; This function calls:
  9204 ;;		_ModbusSendTxBuffer
  9205 ;; This function is called by:
  9206 ;;		_ModbusPoll
  9207 ;; This function uses a non-reentrant model
  9208 ;;
  9209                           
  9210                           	psect	text46
  9211  001AC0                     __ptext46:
  9212                           	opt stack 0
  9213  001AC0                     _ModbusProcess_FC15:
  9214                           	opt stack 25
  9215                           
  9216                           ;incstack = 0
  9217  001AC0  FFFF               	dw	65535
  9218                           
  9219                           ;ModbusProcess_FC15@regs stored from wreg
  9220  001AC2  6E24               	movwf	ModbusProcess_FC15@regs,c
  9221                           
  9222                           ;ModbusRtu.c: 1090: uint8_t u8currentBit, u8frameByte, u8bitsno;
  9223                           ;ModbusRtu.c: 1091: uint8_t u8CopyBufferSize;
  9224                           ;ModbusRtu.c: 1092: uint16_t u16currentCoil, u16coil;
  9225                           ;ModbusRtu.c: 1093: boolean bTemp;
  9226                           ;ModbusRtu.c: 1096: uint16_t u16StartCoil = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buf
      +                          fer[ ADD_LO ]);
  9227  001AC4  0101               	movlb	1	; () banked
  9228  001AC6  5102               	movf	(__au8Buffer+2)& (0+255),w,b
  9229  001AC8  6E16               	movwf	??_ModbusProcess_FC15& (0+255),c
  9230  001ACA  5103               	movf	(__au8Buffer+3)& (0+255),w,b
  9231  001ACC  6E20               	movwf	ModbusProcess_FC15@u16StartCoil,c
  9232  001ACE  C016  F021         	movff	??_ModbusProcess_FC15,ModbusProcess_FC15@u16StartCoil+1
  9233                           
  9234                           ; BSR set to: 1
  9235                           ;ModbusRtu.c: 1097: _lastAddress = u16StartCoil;
  9236  001AD2  C020  F0C7         	movff	ModbusProcess_FC15@u16StartCoil,__lastAddress
  9237  001AD6  C021  F0C8         	movff	ModbusProcess_FC15@u16StartCoil+1,__lastAddress+1
  9238                           
  9239                           ;ModbusRtu.c: 1098: uint16_t u16Coilno = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[
      +                           NB_LO ]);
  9240  001ADA  5104               	movf	(__au8Buffer+4)& (0+255),w,b
  9241  001ADC  6E16               	movwf	??_ModbusProcess_FC15& (0+255),c
  9242  001ADE  5105               	movf	(__au8Buffer+5)& (0+255),w,b
  9243  001AE0  6E22               	movwf	ModbusProcess_FC15@u16Coilno,c
  9244  001AE2  C016  F023         	movff	??_ModbusProcess_FC15,ModbusProcess_FC15@u16Coilno+1
  9245                           
  9246                           ; BSR set to: 1
  9247                           ;ModbusRtu.c: 1099: _lastCount = u16Coilno;
  9248  001AE6  C022  F0C9         	movff	ModbusProcess_FC15@u16Coilno,__lastCount
  9249  001AEA  C023  F0CA         	movff	ModbusProcess_FC15@u16Coilno+1,__lastCount+1
  9250                           
  9251                           ; BSR set to: 1
  9252                           ;ModbusRtu.c: 1102: u8bitsno = 0;
  9253  001AEE  6A28               	clrf	ModbusProcess_FC15@u8bitsno,c
  9254                           
  9255                           ;ModbusRtu.c: 1103: u8frameByte = 7;
  9256  001AF0  0E07               	movlw	7
  9257  001AF2  6E1F               	movwf	ModbusProcess_FC15@u8frameByte,c
  9258                           
  9259                           ; BSR set to: 1
  9260                           ;ModbusRtu.c: 1104: for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil+
      +                          +)
  9261  001AF4  6A26               	clrf	ModbusProcess_FC15@u16currentCoil,c
  9262  001AF6  6A27               	clrf	ModbusProcess_FC15@u16currentCoil+1,c
  9263  001AF8  D058               	goto	l6944
  9264  001AFA                     l6924:
  9265                           
  9266                           ;ModbusRtu.c: 1105: {
  9267                           ;ModbusRtu.c: 1107: u16coil = u16StartCoil + u16currentCoil;
  9268  001AFA  5026               	movf	ModbusProcess_FC15@u16currentCoil,w,c
  9269  001AFC  2420               	addwf	ModbusProcess_FC15@u16StartCoil,w,c
  9270  001AFE  6E1B               	movwf	ModbusProcess_FC15@u16coil,c
  9271  001B00  5027               	movf	ModbusProcess_FC15@u16currentCoil+1,w,c
  9272  001B02  2021               	addwfc	ModbusProcess_FC15@u16StartCoil+1,w,c
  9273  001B04  6E1C               	movwf	ModbusProcess_FC15@u16coil+1,c
  9274                           
  9275                           ;ModbusRtu.c: 1109: u8currentBit = (uint8_t) u16coil;
  9276  001B06  C01B  F025         	movff	ModbusProcess_FC15@u16coil,ModbusProcess_FC15@u8currentBit
  9277                           
  9278                           ;ModbusRtu.c: 1111: bTemp = (((_au8Buffer[ u8frameByte ]) >> (u8bitsno)) & 0x01);
  9279  001B0A  C028  F016         	movff	ModbusProcess_FC15@u8bitsno,??_ModbusProcess_FC15
  9280  001B0E  0E00               	movlw	low __au8Buffer
  9281  001B10  241F               	addwf	ModbusProcess_FC15@u8frameByte,w,c
  9282  001B12  6ED9               	movwf	fsr2l,c
  9283  001B14  6ADA               	clrf	fsr2h,c
  9284  001B16  0E01               	movlw	high __au8Buffer
  9285  001B18  22DA               	addwfc	fsr2h,f,c
  9286  001B1A  50DF               	movf	indf2,w,c
  9287  001B1C  6E17               	movwf	(??_ModbusProcess_FC15+1)& (0+255),c
  9288  001B1E  2A16               	incf	??_ModbusProcess_FC15,f,c
  9289  001B20  D003               	goto	u6034
  9290  001B22                     u6035:
  9291  001B22  FFFF               	dw	65535	; assembler added errata NOP
  9292  001B24  90D8               	bcf	status,0,c
  9293  001B26  3217               	rrcf	??_ModbusProcess_FC15+1,f,c
  9294  001B28                     u6034:
  9295  001B28  FFFF               	dw	65535	; assembler added errata NOP
  9296  001B2A  2E16               	decfsz	??_ModbusProcess_FC15,f,c
  9297  001B2C  D7FA               	goto	u6035
  9298  001B2E  5017               	movf	??_ModbusProcess_FC15+1,w,c
  9299  001B30  0B01               	andlw	1
  9300  001B32  6E1E               	movwf	ModbusProcess_FC15@bTemp,c
  9301                           
  9302                           ;ModbusRtu.c: 1115: (bTemp ? ((*regs) |= ((unsigned short)1 << (u8currentBit))) : ((*reg
      +                          s) &= ~((unsigned short)1 << (u8currentBit))));
  9303  001B34  501E               	movf	ModbusProcess_FC15@bTemp,w,c
  9304  001B36  E016               	bz	l6934
  9305  001B38  C025  F016         	movff	ModbusProcess_FC15@u8currentBit,??_ModbusProcess_FC15
  9306  001B3C  0E01               	movlw	1
  9307  001B3E  6E17               	movwf	(??_ModbusProcess_FC15+1)& (0+255),c
  9308  001B40  6A18               	clrf	(??_ModbusProcess_FC15+2)& (0+255),c
  9309  001B42  2A16               	incf	??_ModbusProcess_FC15,f,c
  9310  001B44  D004               	goto	u6054
  9311  001B46                     u6055:
  9312  001B46  FFFF               	dw	65535	; assembler added errata NOP
  9313  001B48  90D8               	bcf	status,0,c
  9314  001B4A  3617               	rlcf	??_ModbusProcess_FC15+1,f,c
  9315  001B4C  3618               	rlcf	??_ModbusProcess_FC15+2,f,c
  9316  001B4E                     u6054:
  9317  001B4E  FFFF               	dw	65535	; assembler added errata NOP
  9318  001B50  2E16               	decfsz	??_ModbusProcess_FC15,f,c
  9319  001B52  D7F9               	goto	u6055
  9320  001B54  5024               	movf	ModbusProcess_FC15@regs,w,c
  9321  001B56  6ED9               	movwf	fsr2l,c
  9322  001B58  6ADA               	clrf	fsr2h,c
  9323  001B5A  5017               	movf	??_ModbusProcess_FC15+1,w,c
  9324  001B5C  12DE               	iorwf	postinc2,f,c
  9325  001B5E  5018               	movf	??_ModbusProcess_FC15+2,w,c
  9326  001B60  12DD               	iorwf	postdec2,f,c
  9327  001B62  D019               	goto	l6936
  9328  001B64                     l6934:
  9329  001B64  C025  F016         	movff	ModbusProcess_FC15@u8currentBit,??_ModbusProcess_FC15
  9330  001B68  0E01               	movlw	1
  9331  001B6A  6E17               	movwf	(??_ModbusProcess_FC15+1)& (0+255),c
  9332  001B6C  6A18               	clrf	(??_ModbusProcess_FC15+2)& (0+255),c
  9333  001B6E  2A16               	incf	??_ModbusProcess_FC15,f,c
  9334  001B70  D004               	goto	u6064
  9335  001B72                     u6065:
  9336  001B72  FFFF               	dw	65535	; assembler added errata NOP
  9337  001B74  90D8               	bcf	status,0,c
  9338  001B76  3617               	rlcf	??_ModbusProcess_FC15+1,f,c
  9339  001B78  3618               	rlcf	??_ModbusProcess_FC15+2,f,c
  9340  001B7A                     u6064:
  9341  001B7A  FFFF               	dw	65535	; assembler added errata NOP
  9342  001B7C  2E16               	decfsz	??_ModbusProcess_FC15,f,c
  9343  001B7E  D7F9               	goto	u6065
  9344  001B80  1C17               	comf	??_ModbusProcess_FC15+1,w,c
  9345  001B82  6E19               	movwf	(??_ModbusProcess_FC15+3)& (0+255),c
  9346  001B84  1C18               	comf	??_ModbusProcess_FC15+2,w,c
  9347  001B86  6E1A               	movwf	(??_ModbusProcess_FC15+4)& (0+255),c
  9348  001B88  5024               	movf	ModbusProcess_FC15@regs,w,c
  9349  001B8A  6ED9               	movwf	fsr2l,c
  9350  001B8C  6ADA               	clrf	fsr2h,c
  9351  001B8E  5019               	movf	??_ModbusProcess_FC15+3,w,c
  9352  001B90  16DE               	andwf	postinc2,f,c
  9353  001B92  501A               	movf	??_ModbusProcess_FC15+4,w,c
  9354  001B94  16DD               	andwf	postdec2,f,c
  9355  001B96                     l6936:
  9356  001B96  FFFF               	dw	65535	; assembler added errata NOP
  9357                           
  9358                           ;ModbusRtu.c: 1120: u8bitsno++;
  9359  001B98  2A28               	incf	ModbusProcess_FC15@u8bitsno,f,c
  9360                           
  9361                           ;ModbusRtu.c: 1122: if (u8bitsno > 7)
  9362  001B9A  0E07               	movlw	7
  9363  001B9C  6428               	cpfsgt	ModbusProcess_FC15@u8bitsno,c
  9364  001B9E  D002               	goto	l916
  9365                           
  9366                           ;ModbusRtu.c: 1123: {
  9367                           ;ModbusRtu.c: 1124: u8bitsno = 0;
  9368  001BA0  6A28               	clrf	ModbusProcess_FC15@u8bitsno,c
  9369                           
  9370                           ;ModbusRtu.c: 1125: u8frameByte++;
  9371  001BA2  2A1F               	incf	ModbusProcess_FC15@u8frameByte,f,c
  9372  001BA4                     l916:
  9373  001BA4  FFFF               	dw	65535	; assembler added errata NOP
  9374  001BA6  4A26               	infsnz	ModbusProcess_FC15@u16currentCoil,f,c
  9375  001BA8  2A27               	incf	ModbusProcess_FC15@u16currentCoil+1,f,c
  9376  001BAA                     l6944:
  9377  001BAA  FFFF               	dw	65535	; assembler added errata NOP
  9378  001BAC  5022               	movf	ModbusProcess_FC15@u16Coilno,w,c
  9379  001BAE  5C26               	subwf	ModbusProcess_FC15@u16currentCoil,w,c
  9380  001BB0  5023               	movf	ModbusProcess_FC15@u16Coilno+1,w,c
  9381  001BB2  5827               	subwfb	ModbusProcess_FC15@u16currentCoil+1,w,c
  9382  001BB4  E3A2               	bnc	l6924
  9383                           
  9384                           ;ModbusRtu.c: 1126: }
  9385                           ;ModbusRtu.c: 1127: }
  9386                           ;ModbusRtu.c: 1131: _u8BufferSize = 6;
  9387  001BB6  0E06               	movlw	6
  9388  001BB8  6E6E               	movwf	__u8BufferSize,c
  9389                           
  9390                           ;ModbusRtu.c: 1132: u8CopyBufferSize = _u8BufferSize + 2;
  9391  001BBA  506E               	movf	__u8BufferSize,w,c
  9392  001BBC  0F02               	addlw	2
  9393  001BBE  6E1D               	movwf	ModbusProcess_FC15@u8CopyBufferSize,c
  9394                           
  9395                           ;ModbusRtu.c: 1133: ModbusSendTxBuffer();
  9396  001BC0  EC5A  F015         	call	_ModbusSendTxBuffer	;wreg free
  9397                           
  9398                           ;ModbusRtu.c: 1134: return u8CopyBufferSize;
  9399  001BC4  501D               	movf	ModbusProcess_FC15@u8CopyBufferSize,w,c
  9400  001BC6  0012               	return		;funcret
  9401  001BC8  FFFF               	dw	65535	; errata NOP
  9402  001BCA                     __end_of_ModbusProcess_FC15:
  9403                           	opt stack 0
  9404                           tblptru	equ	0xFF8
  9405                           tblptrh	equ	0xFF7
  9406                           tblptrl	equ	0xFF6
  9407                           tablat	equ	0xFF5
  9408                           prodh	equ	0xFF4
  9409                           prodl	equ	0xFF3
  9410                           intcon	equ	0xFF2
  9411                           postinc0	equ	0xFEE
  9412                           wreg	equ	0xFE8
  9413                           indf1	equ	0xFE7
  9414                           postinc1	equ	0xFE6
  9415                           postdec1	equ	0xFE5
  9416                           fsr1h	equ	0xFE2
  9417                           fsr1l	equ	0xFE1
  9418                           indf2	equ	0xFDF
  9419                           postinc2	equ	0xFDE
  9420                           postdec2	equ	0xFDD
  9421                           fsr2h	equ	0xFDA
  9422                           fsr2l	equ	0xFD9
  9423                           status	equ	0xFD8
  9424                           
  9425 ;; *************** function _ModbusProcess_FC102 *****************
  9426 ;; Defined at:
  9427 ;;		line 1392 in file "ModbusRtu.c"
  9428 ;; Parameters:    Size  Location     Type
  9429 ;;		None
  9430 ;; Auto vars:     Size  Location     Type
  9431 ;;  u8CopyBuffer    1   21[COMRAM] unsigned char 
  9432 ;; Return value:  Size  Location     Type
  9433 ;;                  1    wreg      unsigned char 
  9434 ;; Registers used:
  9435 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9436 ;; Tracked objects:
  9437 ;;		On entry : 0/1
  9438 ;;		On exit  : 0/0
  9439 ;;		Unchanged: 0/0
  9440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9441 ;;      Params:         0       0       0       0       0       0       0
  9442 ;;      Locals:         1       0       0       0       0       0       0
  9443 ;;      Temps:          0       0       0       0       0       0       0
  9444 ;;      Totals:         1       0       0       0       0       0       0
  9445 ;;Total ram usage:        1 bytes
  9446 ;; Hardware stack levels used:    1
  9447 ;; Hardware stack levels required when called:    4
  9448 ;; This function calls:
  9449 ;;		_ModbusSendTxBuffer
  9450 ;; This function is called by:
  9451 ;;		_ModbusPoll
  9452 ;; This function uses a non-reentrant model
  9453 ;;
  9454                           
  9455                           	psect	text47
  9456  002F3E                     __ptext47:
  9457                           	opt stack 0
  9458  002F3E                     _ModbusProcess_FC102:
  9459                           	opt stack 25
  9460                           
  9461                           ;incstack = 0
  9462  002F3E  FFFF               	dw	65535
  9463                           
  9464                           ;ModbusRtu.c: 1394: _au8Buffer[FUNC + 1] = _deviceStatus;
  9465  002F40  C0D3  F102         	movff	__deviceStatus,__au8Buffer+2
  9466                           
  9467                           ;ModbusRtu.c: 1395: _u8BufferSize = 3;
  9468  002F44  0E03               	movlw	3
  9469  002F46  6E6E               	movwf	__u8BufferSize,c
  9470                           
  9471                           ;ModbusRtu.c: 1396: uint8_t u8CopyBufferSize = _u8BufferSize + 2;
  9472  002F48  506E               	movf	__u8BufferSize,w,c
  9473  002F4A  0F02               	addlw	2
  9474  002F4C  6E16               	movwf	ModbusProcess_FC102@u8CopyBufferSize,c
  9475                           
  9476                           ;ModbusRtu.c: 1397: ModbusSendTxBuffer();
  9477  002F4E  EC5A  F015         	call	_ModbusSendTxBuffer	;wreg free
  9478                           
  9479                           ;ModbusRtu.c: 1399: return u8CopyBufferSize;
  9480  002F52  5016               	movf	ModbusProcess_FC102@u8CopyBufferSize,w,c
  9481  002F54  0012               	return		;funcret
  9482  002F56  FFFF               	dw	65535	; errata NOP
  9483  002F58                     __end_of_ModbusProcess_FC102:
  9484                           	opt stack 0
  9485                           tblptru	equ	0xFF8
  9486                           tblptrh	equ	0xFF7
  9487                           tblptrl	equ	0xFF6
  9488                           tablat	equ	0xFF5
  9489                           prodh	equ	0xFF4
  9490                           prodl	equ	0xFF3
  9491                           intcon	equ	0xFF2
  9492                           postinc0	equ	0xFEE
  9493                           wreg	equ	0xFE8
  9494                           indf1	equ	0xFE7
  9495                           postinc1	equ	0xFE6
  9496                           postdec1	equ	0xFE5
  9497                           fsr1h	equ	0xFE2
  9498                           fsr1l	equ	0xFE1
  9499                           indf2	equ	0xFDF
  9500                           postinc2	equ	0xFDE
  9501                           postdec2	equ	0xFDD
  9502                           fsr2h	equ	0xFDA
  9503                           fsr2l	equ	0xFD9
  9504                           status	equ	0xFD8
  9505                           
  9506 ;; *************** function _ModbusProcess_FC101 *****************
  9507 ;; Defined at:
  9508 ;;		line 1374 in file "ModbusRtu.c"
  9509 ;; Parameters:    Size  Location     Type
  9510 ;;		None
  9511 ;; Auto vars:     Size  Location     Type
  9512 ;;  u8CopyBuffer    1   21[COMRAM] unsigned char 
  9513 ;; Return value:  Size  Location     Type
  9514 ;;                  1    wreg      unsigned char 
  9515 ;; Registers used:
  9516 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9517 ;; Tracked objects:
  9518 ;;		On entry : 0/1
  9519 ;;		On exit  : 0/0
  9520 ;;		Unchanged: 0/0
  9521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9522 ;;      Params:         0       0       0       0       0       0       0
  9523 ;;      Locals:         1       0       0       0       0       0       0
  9524 ;;      Temps:          0       0       0       0       0       0       0
  9525 ;;      Totals:         1       0       0       0       0       0       0
  9526 ;;Total ram usage:        1 bytes
  9527 ;; Hardware stack levels used:    1
  9528 ;; Hardware stack levels required when called:    4
  9529 ;; This function calls:
  9530 ;;		_ModbusSendTxBuffer
  9531 ;; This function is called by:
  9532 ;;		_ModbusPoll
  9533 ;; This function uses a non-reentrant model
  9534 ;;
  9535                           
  9536                           	psect	text48
  9537  002D50                     __ptext48:
  9538                           	opt stack 0
  9539  002D50                     _ModbusProcess_FC101:
  9540                           	opt stack 25
  9541                           
  9542                           ;incstack = 0
  9543  002D50  FFFF               	dw	65535
  9544                           
  9545                           ;ModbusRtu.c: 1376: _u8BufferSize = 10;
  9546  002D52  0E0A               	movlw	10
  9547  002D54  6E6E               	movwf	__u8BufferSize,c
  9548                           
  9549                           ;ModbusRtu.c: 1377: ModbusUserCommandId = _au8Buffer[COM_COM_ID];
  9550  002D56  C102  F0F1         	movff	__au8Buffer+2,_ModbusUserCommandId
  9551                           
  9552                           ;ModbusRtu.c: 1378: ModbusUserCommandData = _au8Buffer[COM_DATA];
  9553  002D5A  C103  F0F0         	movff	__au8Buffer+3,_ModbusUserCommandData
  9554                           
  9555                           ;ModbusRtu.c: 1379: ModbusUserCommandAdditional1Hi = _au8Buffer[COM_ADD1_HI];
  9556  002D5E  C104  F0EA         	movff	__au8Buffer+4,_ModbusUserCommandAdditional1Hi
  9557                           
  9558                           ;ModbusRtu.c: 1380: ModbusUserCommandAdditional1Lo = _au8Buffer[COM_ADD1_LO];
  9559  002D62  C105  F0EB         	movff	__au8Buffer+5,_ModbusUserCommandAdditional1Lo
  9560                           
  9561                           ;ModbusRtu.c: 1381: ModbusUserCommandAdditional2Hi = _au8Buffer[COM_ADD2_HI];
  9562  002D66  C106  F0EC         	movff	__au8Buffer+6,_ModbusUserCommandAdditional2Hi
  9563                           
  9564                           ;ModbusRtu.c: 1382: ModbusUserCommandAdditional2Lo = _au8Buffer[COM_ADD2_LO];
  9565  002D6A  C107  F0ED         	movff	__au8Buffer+7,_ModbusUserCommandAdditional2Lo
  9566                           
  9567                           ;ModbusRtu.c: 1383: ModbusUserCommandAdditional3Hi = _au8Buffer[COM_ADD3_HI];
  9568  002D6E  C108  F0EE         	movff	__au8Buffer+8,_ModbusUserCommandAdditional3Hi
  9569                           
  9570                           ;ModbusRtu.c: 1384: ModbusUserCommandAdditional3Lo = _au8Buffer[COM_ADD3_LO];
  9571  002D72  C109  F0EF         	movff	__au8Buffer+9,_ModbusUserCommandAdditional3Lo
  9572                           
  9573                           ;ModbusRtu.c: 1386: uint8_t u8CopyBufferSize = _u8BufferSize + 2;
  9574  002D76  506E               	movf	__u8BufferSize,w,c
  9575  002D78  0F02               	addlw	2
  9576  002D7A  6E16               	movwf	ModbusProcess_FC101@u8CopyBufferSize,c
  9577                           
  9578                           ;ModbusRtu.c: 1387: ModbusSendTxBuffer();
  9579  002D7C  EC5A  F015         	call	_ModbusSendTxBuffer	;wreg free
  9580                           
  9581                           ;ModbusRtu.c: 1389: return u8CopyBufferSize;
  9582  002D80  5016               	movf	ModbusProcess_FC101@u8CopyBufferSize,w,c
  9583  002D82  0012               	return		;funcret
  9584  002D84  FFFF               	dw	65535	; errata NOP
  9585  002D86                     __end_of_ModbusProcess_FC101:
  9586                           	opt stack 0
  9587                           tblptru	equ	0xFF8
  9588                           tblptrh	equ	0xFF7
  9589                           tblptrl	equ	0xFF6
  9590                           tablat	equ	0xFF5
  9591                           prodh	equ	0xFF4
  9592                           prodl	equ	0xFF3
  9593                           intcon	equ	0xFF2
  9594                           postinc0	equ	0xFEE
  9595                           wreg	equ	0xFE8
  9596                           indf1	equ	0xFE7
  9597                           postinc1	equ	0xFE6
  9598                           postdec1	equ	0xFE5
  9599                           fsr1h	equ	0xFE2
  9600                           fsr1l	equ	0xFE1
  9601                           indf2	equ	0xFDF
  9602                           postinc2	equ	0xFDE
  9603                           postdec2	equ	0xFDD
  9604                           fsr2h	equ	0xFDA
  9605                           fsr2l	equ	0xFD9
  9606                           status	equ	0xFD8
  9607                           
  9608 ;; *************** function _ModbusProcess_FC100 *****************
  9609 ;; Defined at:
  9610 ;;		line 1334 in file "ModbusRtu.c"
  9611 ;; Parameters:    Size  Location     Type
  9612 ;;		None
  9613 ;; Auto vars:     Size  Location     Type
  9614 ;;  newTime        18   73[COMRAM] struct tm
  9615 ;;  newRawTime      4   68[COMRAM] long 
  9616 ;;  u8CopyBuffer    1   72[COMRAM] unsigned char 
  9617 ;; Return value:  Size  Location     Type
  9618 ;;                  1    wreg      unsigned char 
  9619 ;; Registers used:
  9620 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9621 ;; Tracked objects:
  9622 ;;		On entry : 0/1
  9623 ;;		On exit  : 0/0
  9624 ;;		Unchanged: 0/0
  9625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9626 ;;      Params:         0       0       0       0       0       0       0
  9627 ;;      Locals:        23       0       0       0       0       0       0
  9628 ;;      Temps:          0       0       0       0       0       0       0
  9629 ;;      Totals:        23       0       0       0       0       0       0
  9630 ;;Total ram usage:       23 bytes
  9631 ;; Hardware stack levels used:    1
  9632 ;; Hardware stack levels required when called:    6
  9633 ;; This function calls:
  9634 ;;		_ModbusSendTxBuffer
  9635 ;;		_ModbusSetExceptionStatusBit
  9636 ;;		_SetHourMin
  9637 ;;		_SetTime
  9638 ;;		_mktime
  9639 ;; This function is called by:
  9640 ;;		_ModbusPoll
  9641 ;; This function uses a non-reentrant model
  9642 ;;
  9643                           
  9644                           	psect	text49
  9645  001DC2                     __ptext49:
  9646                           	opt stack 0
  9647  001DC2                     _ModbusProcess_FC100:
  9648                           	opt stack 23
  9649                           
  9650                           ;incstack = 0
  9651  001DC2  FFFF               	dw	65535
  9652                           
  9653                           ;ModbusRtu.c: 1336: _u8BufferSize = 10;
  9654  001DC4  0E0A               	movlw	10
  9655  001DC6  6E6E               	movwf	__u8BufferSize,c
  9656                           
  9657                           ;ModbusRtu.c: 1337: _lastCommand = _au8Buffer[COM_COM_ID];
  9658  001DC8  C102  F0DA         	movff	__au8Buffer+2,__lastCommand
  9659                           
  9660                           ;ModbusRtu.c: 1338: switch(_lastCommand)
  9661  001DCC  D058               	goto	l7176
  9662  001DCE                     l969:
  9663                           
  9664                           ; BSR set to: 0
  9665  001DCE  00FF               	reset		; ;# 
  9666                           
  9667                           ;ModbusRtu.c: 1344: break;
  9668  001DD0  D05F               	goto	l7178
  9669  001DD2                     l971:
  9670                           
  9671                           ; BSR set to: 0
  9672                           ;ModbusRtu.c: 1346: _u8id = _au8Buffer[COM_DATA];
  9673  001DD2  C103  F0E0         	movff	__au8Buffer+3,__u8id
  9674  001DD6                     l973:
  9675  001DD6  FFFF               	dw	65535	; assembler added errata NOP
  9676  001DD8  B2A6               	btfsc	4006,1,c	;volatile
  9677  001DDA  D7FD               	goto	l973
  9678  001DDC  0E01               	movlw	1
  9679  001DDE  6EA9               	movwf	4009,c	;volatile
  9680  001DE0  C0E0  FFA8         	movff	__u8id,4008	;volatile
  9681  001DE4  90D8               	bcf	status,0,c	;volatile
  9682  001DE6  BEF2               	btfsc	intcon,7,c	;volatile
  9683  001DE8  80D8               	bsf	status,0,c	;volatile
  9684  001DEA  9EF2               	bcf	intcon,7,c	;volatile
  9685  001DEC  84A6               	bsf	4006,2,c	;volatile
  9686  001DEE  0E55               	movlw	85
  9687  001DF0  6EA7               	movwf	4007,c	;volatile
  9688  001DF2  0EAA               	movlw	170
  9689  001DF4  6EA7               	movwf	4007,c	;volatile
  9690  001DF6  82A6               	bsf	4006,1,c	;volatile
  9691  001DF8  94A6               	bcf	4006,2,c	;volatile
  9692  001DFA  E301               	bnc	l7150
  9693  001DFC  8EF2               	bsf	intcon,7,c	;volatile
  9694  001DFE                     l7150:
  9695                           
  9696                           ;ModbusRtu.c: 1348: ModbusSetExceptionStatusBit(0, 1);
  9697  001DFE  0E01               	movlw	1
  9698  001E00  6E07               	movwf	ModbusSetExceptionStatusBit@value,c
  9699  001E02  0E00               	movlw	0
  9700  001E04  EC34  F015         	call	_ModbusSetExceptionStatusBit
  9701                           
  9702                           ;ModbusRtu.c: 1349: break;
  9703  001E08  D043               	goto	l7178
  9704  001E0A                     l7152:
  9705                           
  9706                           ; BSR set to: 0
  9707                           ;ModbusRtu.c: 1351: SetHourMin(&(_au8Buffer[COM_ADD1_HI]), &(_au8Buffer[COM_ADD1_LO]), &
      +                          (_au8Buffer[COM_ADD2_LO]));
  9708  001E0A  0E04               	movlw	low (__au8Buffer+4)
  9709  001E0C  6E0B               	movwf	SetHourMin@newHour,c
  9710  001E0E  0E01               	movlw	high (__au8Buffer+4)
  9711  001E10  6E0C               	movwf	SetHourMin@newHour+1,c
  9712  001E12  0E05               	movlw	low (__au8Buffer+5)
  9713  001E14  6E0D               	movwf	SetHourMin@newMin,c
  9714  001E16  0E01               	movlw	high (__au8Buffer+5)
  9715  001E18  6E0E               	movwf	SetHourMin@newMin+1,c
  9716  001E1A  0E07               	movlw	low (__au8Buffer+7)
  9717  001E1C  6E0F               	movwf	SetHourMin@sec,c
  9718  001E1E  0E01               	movlw	high (__au8Buffer+7)
  9719  001E20  6E10               	movwf	SetHourMin@sec+1,c
  9720  001E22  ECD7  F00C         	call	_SetHourMin	;wreg free
  9721                           
  9722                           ;ModbusRtu.c: 1354: struct tm newTime;
  9723                           ;ModbusRtu.c: 1355: newTime.tm_year = _au8Buffer[COM_ADD3_LO] + 100;
  9724  001E26  0E64               	movlw	100
  9725  001E28  0101               	movlb	1	; () banked
  9726  001E2A  2509               	addwf	(__au8Buffer+9)& (0+255),w,b
  9727  001E2C  6E54               	movwf	ModbusProcess_FC100@newTime+10,c
  9728  001E2E  6A55               	clrf	ModbusProcess_FC100@newTime+11,c
  9729  001E30  0E00               	movlw	0
  9730  001E32  2255               	addwfc	ModbusProcess_FC100@newTime+11,f,c
  9731                           
  9732                           ; BSR set to: 1
  9733                           ;ModbusRtu.c: 1356: newTime.tm_mon = _au8Buffer[COM_ADD3_HI];
  9734  001E34  C108  F052         	movff	__au8Buffer+8,ModbusProcess_FC100@newTime+8
  9735  001E38  6A53               	clrf	ModbusProcess_FC100@newTime+9,c
  9736                           
  9737                           ; BSR set to: 1
  9738                           ;ModbusRtu.c: 1357: newTime.tm_mday = _au8Buffer[COM_ADD2_HI];
  9739  001E3A  C106  F050         	movff	__au8Buffer+6,ModbusProcess_FC100@newTime+6
  9740  001E3E  6A51               	clrf	ModbusProcess_FC100@newTime+7,c
  9741                           
  9742                           ; BSR set to: 1
  9743                           ;ModbusRtu.c: 1358: newTime.tm_hour = _au8Buffer[COM_ADD1_HI];
  9744  001E40  C104  F04E         	movff	__au8Buffer+4,ModbusProcess_FC100@newTime+4
  9745  001E44  6A4F               	clrf	ModbusProcess_FC100@newTime+5,c
  9746                           
  9747                           ; BSR set to: 1
  9748                           ;ModbusRtu.c: 1359: newTime.tm_min = _au8Buffer[COM_ADD1_LO];
  9749  001E46  C105  F04C         	movff	__au8Buffer+5,ModbusProcess_FC100@newTime+2
  9750  001E4A  6A4D               	clrf	ModbusProcess_FC100@newTime+3,c
  9751                           
  9752                           ; BSR set to: 1
  9753                           ;ModbusRtu.c: 1360: newTime.tm_sec = _au8Buffer[COM_ADD2_LO];
  9754  001E4C  C107  F04A         	movff	__au8Buffer+7,ModbusProcess_FC100@newTime
  9755  001E50  6A4B               	clrf	ModbusProcess_FC100@newTime+1,c
  9756                           
  9757                           ; BSR set to: 1
  9758                           ;ModbusRtu.c: 1361: time_t newRawTime = mktime(&newTime);
  9759  001E52  0E4A               	movlw	ModbusProcess_FC100@newTime& (0+255)
  9760  001E54  EC2C  F003         	call	_mktime
  9761  001E58  C02E  F045         	movff	?_mktime,ModbusProcess_FC100@newRawTime
  9762  001E5C  C02F  F046         	movff	?_mktime+1,ModbusProcess_FC100@newRawTime+1
  9763  001E60  C030  F047         	movff	?_mktime+2,ModbusProcess_FC100@newRawTime+2
  9764  001E64  C031  F048         	movff	?_mktime+3,ModbusProcess_FC100@newRawTime+3
  9765                           
  9766                           ;ModbusRtu.c: 1362: SetTime(&newRawTime);
  9767  001E68  0E45               	movlw	ModbusProcess_FC100@newRawTime& (0+255)
  9768  001E6A  EC90  F017         	call	_SetTime
  9769                           
  9770                           ;ModbusRtu.c: 1364: ((_deviceStatus) |= ((unsigned short)1 << (0x00)));
  9771  001E6E  0100               	movlb	0	; () banked
  9772  001E70  81D3               	bsf	__deviceStatus& (0+255),0,b
  9773                           
  9774                           ; BSR set to: 0
  9775                           ;ModbusRtu.c: 1365: ModbusSetExceptionStatusBit(0, 1);
  9776  001E72  0E01               	movlw	1
  9777  001E74  6E07               	movwf	ModbusSetExceptionStatusBit@value,c
  9778  001E76  0E00               	movlw	0
  9779  001E78  EC34  F015         	call	_ModbusSetExceptionStatusBit
  9780                           
  9781                           ;ModbusRtu.c: 1366: break;
  9782  001E7C  D009               	goto	l7178
  9783  001E7E                     l7176:
  9784  001E7E  FFFF               	dw	65535	; assembler added errata NOP
  9785  001E80  0100               	movlb	0	; () banked
  9786  001E82  51DA               	movf	__lastCommand& (0+255),w,b
  9787                           
  9788                           ; Switch size 1, requested type "speed"
  9789                           ; Number of cases is 3, Range of values is 1 to 127
  9790                           ; switch strategies available:
  9791                           ; Name         Instructions Cycles
  9792                           ; simple_byte           10     6 (average)
  9793                           ;	Chosen strategy is simple_byte
  9794  001E84  0A01               	xorlw	1	; case 1
  9795  001E86  E0A5               	bz	l971
  9796  001E88  0A11               	xorlw	17	; case 16
  9797  001E8A  E0BF               	bz	l7152
  9798  001E8C  0A6F               	xorlw	111	; case 127
  9799  001E8E  E09F               	bz	l969
  9800  001E90                     l7178:
  9801  001E90  FFFF               	dw	65535	; assembler added errata NOP
  9802                           
  9803                           ;ModbusRtu.c: 1368: uint8_t u8CopyBufferSize = _u8BufferSize + 2;
  9804  001E92  506E               	movf	__u8BufferSize,w,c
  9805  001E94  0F02               	addlw	2
  9806  001E96  6E49               	movwf	ModbusProcess_FC100@u8CopyBufferSize,c
  9807                           
  9808                           ;ModbusRtu.c: 1369: ModbusSendTxBuffer();
  9809  001E98  EC5A  F015         	call	_ModbusSendTxBuffer	;wreg free
  9810                           
  9811                           ;ModbusRtu.c: 1371: return u8CopyBufferSize;
  9812  001E9C  5049               	movf	ModbusProcess_FC100@u8CopyBufferSize,w,c
  9813  001E9E  0012               	return		;funcret
  9814  001EA0  FFFF               	dw	65535	; errata NOP
  9815  001EA2                     __end_of_ModbusProcess_FC100:
  9816                           	opt stack 0
  9817                           tblptru	equ	0xFF8
  9818                           tblptrh	equ	0xFF7
  9819                           tblptrl	equ	0xFF6
  9820                           tablat	equ	0xFF5
  9821                           prodh	equ	0xFF4
  9822                           prodl	equ	0xFF3
  9823                           intcon	equ	0xFF2
  9824                           postinc0	equ	0xFEE
  9825                           wreg	equ	0xFE8
  9826                           indf1	equ	0xFE7
  9827                           postinc1	equ	0xFE6
  9828                           postdec1	equ	0xFE5
  9829                           fsr1h	equ	0xFE2
  9830                           fsr1l	equ	0xFE1
  9831                           indf2	equ	0xFDF
  9832                           postinc2	equ	0xFDE
  9833                           postdec2	equ	0xFDD
  9834                           fsr2h	equ	0xFDA
  9835                           fsr2l	equ	0xFD9
  9836                           status	equ	0xFD8
  9837                           
  9838 ;; *************** function _mktime *****************
  9839 ;; Defined at:
  9840 ;;		line 52 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
  9841 ;; Parameters:    Size  Location     Type
  9842 ;;  timeptr         1    wreg     PTR struct tm
  9843 ;;		 -> ModbusProcess_FC100@newTime(18), 
  9844 ;; Auto vars:     Size  Location     Type
  9845 ;;  timeptr         1   67[COMRAM] PTR struct tm
  9846 ;;		 -> ModbusProcess_FC100@newTime(18), 
  9847 ;;  tt              4   63[COMRAM] long 
  9848 ;; Return value:  Size  Location     Type
  9849 ;;                  4   45[COMRAM] long 
  9850 ;; Registers used:
  9851 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9852 ;; Tracked objects:
  9853 ;;		On entry : F/1
  9854 ;;		On exit  : 0/0
  9855 ;;		Unchanged: 0/0
  9856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9857 ;;      Params:         4       0       0       0       0       0       0
  9858 ;;      Locals:         5       0       0       0       0       0       0
  9859 ;;      Temps:         14       0       0       0       0       0       0
  9860 ;;      Totals:        23       0       0       0       0       0       0
  9861 ;;Total ram usage:       23 bytes
  9862 ;; Hardware stack levels used:    1
  9863 ;; Hardware stack levels required when called:    5
  9864 ;; This function calls:
  9865 ;;		_ymd_to_scalar
  9866 ;; This function is called by:
  9867 ;;		_ModbusProcess_FC100
  9868 ;; This function uses a non-reentrant model
  9869 ;;
  9870                           
  9871                           	psect	text50
  9872  000658                     __ptext50:
  9873                           	opt stack 0
  9874  000658                     _mktime:
  9875                           	opt stack 23
  9876                           
  9877                           ;incstack = 0
  9878  000658  FFFF               	dw	65535
  9879                           
  9880                           ;mktime@timeptr stored from wreg
  9881  00065A  6E44               	movwf	mktime@timeptr,c
  9882  00065C  5044               	movf	mktime@timeptr,w,c
  9883  00065E  6ED9               	movwf	fsr2l,c
  9884  000660  6ADA               	clrf	fsr2h,c
  9885  000662  0E0A               	movlw	10
  9886  000664  26D9               	addwf	fsr2l,f,c
  9887  000666  0E01               	movlw	1
  9888  000668  BEDB               	btfsc	plusw2,7,c
  9889  00066A  D012               	goto	l1429
  9890  00066C  50DB               	movf	plusw2,w,c
  9891  00066E  E103               	bnz	u5460
  9892  000670  0E46               	movlw	70
  9893  000672  5CDE               	subwf	postinc2,w,c
  9894  000674  E30D               	bnc	l1429
  9895  000676                     u5460:
  9896  000676  5044               	movf	mktime@timeptr,w,c
  9897  000678  6ED9               	movwf	fsr2l,c
  9898  00067A  6ADA               	clrf	fsr2h,c
  9899  00067C  0E0A               	movlw	10
  9900  00067E  26D9               	addwf	fsr2l,f,c
  9901  000680  0E01               	movlw	1
  9902  000682  BEDB               	btfsc	plusw2,7,c
  9903  000684  D00B               	goto	l6396
  9904  000686  50DB               	movf	plusw2,w,c
  9905  000688  E103               	bnz	u5470
  9906  00068A  0E8B               	movlw	139
  9907  00068C  5CDE               	subwf	postinc2,w,c
  9908  00068E  E306               	bnc	l6396
  9909  000690                     u5470:
  9910  000690                     l1429:
  9911  000690  FFFF               	dw	65535	; assembler added errata NOP
  9912  000692  6840               	setf	mktime@tt,c
  9913  000694  6841               	setf	mktime@tt+1,c
  9914  000696  6842               	setf	mktime@tt+2,c
  9915  000698  6843               	setf	mktime@tt+3,c
  9916  00069A  D15C               	goto	l6406
  9917  00069C                     l6396:
  9918  00069C  FFFF               	dw	65535	; assembler added errata NOP
  9919  00069E  5044               	movf	mktime@timeptr,w,c
  9920  0006A0  6ED9               	movwf	fsr2l,c
  9921  0006A2  6ADA               	clrf	fsr2h,c
  9922  0006A4  0E0A               	movlw	10
  9923  0006A6  26D9               	addwf	fsr2l,f,c
  9924  0006A8  CFDE F032          	movff	postinc2,??_mktime
  9925  0006AC  CFDD F033          	movff	postdec2,??_mktime+1
  9926  0006B0  0E6C               	movlw	108
  9927  0006B2  2432               	addwf	??_mktime,w,c
  9928  0006B4  6E1E               	movwf	ymd_to_scalar@yr,c
  9929  0006B6  0E07               	movlw	7
  9930  0006B8  2033               	addwfc	??_mktime+1,w,c
  9931  0006BA  6E1F               	movwf	ymd_to_scalar@yr+1,c
  9932  0006BC  5044               	movf	mktime@timeptr,w,c
  9933  0006BE  6ED9               	movwf	fsr2l,c
  9934  0006C0  6ADA               	clrf	fsr2h,c
  9935  0006C2  0E08               	movlw	8
  9936  0006C4  26D9               	addwf	fsr2l,f,c
  9937  0006C6  CFDE F034          	movff	postinc2,??_mktime+2
  9938  0006CA  CFDD F035          	movff	postdec2,??_mktime+3
  9939  0006CE  2834               	incf	??_mktime+2,w,c
  9940  0006D0  6E20               	movwf	ymd_to_scalar@mo,c
  9941  0006D2  0E00               	movlw	0
  9942  0006D4  2035               	addwfc	??_mktime+3,w,c
  9943  0006D6  6E21               	movwf	ymd_to_scalar@mo+1,c
  9944  0006D8  5044               	movf	mktime@timeptr,w,c
  9945  0006DA  6ED9               	movwf	fsr2l,c
  9946  0006DC  6ADA               	clrf	fsr2h,c
  9947  0006DE  0E06               	movlw	6
  9948  0006E0  26D9               	addwf	fsr2l,f,c
  9949  0006E2  CFDE F022          	movff	postinc2,ymd_to_scalar@day
  9950  0006E6  CFDD F023          	movff	postdec2,ymd_to_scalar@day+1
  9951  0006EA  ECE1  F011         	call	_ymd_to_scalar	;wreg free
  9952  0006EE  C01E  F040         	movff	?_ymd_to_scalar,mktime@tt
  9953  0006F2  C01F  F041         	movff	?_ymd_to_scalar+1,mktime@tt+1
  9954  0006F6  C020  F042         	movff	?_ymd_to_scalar+2,mktime@tt+2
  9955  0006FA  C021  F043         	movff	?_ymd_to_scalar+3,mktime@tt+3
  9956  0006FE  0E07               	movlw	7
  9957  000700  6E1F               	movwf	ymd_to_scalar@yr+1,c
  9958  000702  0EB2               	movlw	178
  9959  000704  6E1E               	movwf	ymd_to_scalar@yr,c
  9960  000706  6A21               	clrf	ymd_to_scalar@mo+1,c
  9961  000708  0E01               	movlw	1
  9962  00070A  6E20               	movwf	ymd_to_scalar@mo,c
  9963  00070C  6A23               	clrf	ymd_to_scalar@day+1,c
  9964  00070E  6E22               	movwf	ymd_to_scalar@day,c
  9965  000710  ECE1  F011         	call	_ymd_to_scalar	;wreg free
  9966  000714  501E               	movf	?_ymd_to_scalar,w,c
  9967  000716  5E40               	subwf	mktime@tt,f,c
  9968  000718  501F               	movf	?_ymd_to_scalar+1,w,c
  9969  00071A  5A41               	subwfb	mktime@tt+1,f,c
  9970  00071C  5020               	movf	?_ymd_to_scalar+2,w,c
  9971  00071E  5A42               	subwfb	mktime@tt+2,f,c
  9972  000720  5021               	movf	?_ymd_to_scalar+3,w,c
  9973  000722  5A43               	subwfb	mktime@tt+3,f,c
  9974  000724  5044               	movf	mktime@timeptr,w,c
  9975  000726  6ED9               	movwf	fsr2l,c
  9976  000728  6ADA               	clrf	fsr2h,c
  9977  00072A  0E04               	movlw	4
  9978  00072C  26D9               	addwf	fsr2l,f,c
  9979  00072E  CFDE F032          	movff	postinc2,??_mktime
  9980  000732  CFDD F033          	movff	postdec2,??_mktime+1
  9981  000736  C032  F034         	movff	??_mktime,??_mktime+2
  9982  00073A  C033  F035         	movff	??_mktime+1,??_mktime+3
  9983  00073E  0E00               	movlw	0
  9984  000740  BE35               	btfsc	(??_mktime+3)& (0+255),7,c
  9985  000742  0EFF               	movlw	255
  9986  000744  6E36               	movwf	(??_mktime+4)& (0+255),c
  9987  000746  6E37               	movwf	(??_mktime+5)& (0+255),c
  9988  000748  C040  F038         	movff	mktime@tt,??_mktime+6
  9989  00074C  C041  F039         	movff	mktime@tt+1,??_mktime+7
  9990  000750  C042  F03A         	movff	mktime@tt+2,??_mktime+8
  9991  000754  C043  F03B         	movff	mktime@tt+3,??_mktime+9
  9992  000758  0E18               	movlw	24
  9993  00075A  0238               	mulwf	(??_mktime+6)& (0+255),c
  9994  00075C  CFF3 F03C          	movff	prodl,??_mktime+10
  9995  000760  CFF4 F03D          	movff	prodh,??_mktime+11
  9996  000764  6A3E               	clrf	(??_mktime+12)& (0+255),c
  9997  000766  6A3F               	clrf	(??_mktime+13)& (0+255),c
  9998  000768  0239               	mulwf	(??_mktime+7)& (0+255),c
  9999  00076A  50F3               	movf	prodl,w,c
 10000  00076C  263D               	addwf	(??_mktime+11)& (0+255),f,c
 10001  00076E  50F4               	movf	prodh,w,c
 10002  000770  223E               	addwfc	(??_mktime+12)& (0+255),f,c
 10003  000772  0E00               	movlw	0
 10004  000774  223F               	addwfc	(??_mktime+13)& (0+255),f,c
 10005  000776  0238               	mulwf	(??_mktime+6)& (0+255),c
 10006  000778  50F3               	movf	prodl,w,c
 10007  00077A  263D               	addwf	(??_mktime+11)& (0+255),f,c
 10008  00077C  50F4               	movf	prodh,w,c
 10009  00077E  223E               	addwfc	(??_mktime+12)& (0+255),f,c
 10010  000780  0E00               	movlw	0
 10011  000782  223F               	addwfc	(??_mktime+13)& (0+255),f,c
 10012  000784  0E18               	movlw	24
 10013  000786  023A               	mulwf	(??_mktime+8)& (0+255),c
 10014  000788  50F3               	movf	prodl,w,c
 10015  00078A  263E               	addwf	(??_mktime+12)& (0+255),f,c
 10016  00078C  50F4               	movf	prodh,w,c
 10017  00078E  223F               	addwfc	(??_mktime+13)& (0+255),f,c
 10018  000790  0E00               	movlw	0
 10019  000792  0239               	mulwf	(??_mktime+7)& (0+255),c
 10020  000794  50F3               	movf	prodl,w,c
 10021  000796  263E               	addwf	(??_mktime+12)& (0+255),f,c
 10022  000798  50F4               	movf	prodh,w,c
 10023  00079A  223F               	addwfc	(??_mktime+13)& (0+255),f,c
 10024  00079C  0E00               	movlw	0
 10025  00079E  0238               	mulwf	(??_mktime+6)& (0+255),c
 10026  0007A0  50F3               	movf	prodl,w,c
 10027  0007A2  263E               	addwf	(??_mktime+12)& (0+255),f,c
 10028  0007A4  50F4               	movf	prodh,w,c
 10029  0007A6  223F               	addwfc	(??_mktime+13)& (0+255),f,c
 10030  0007A8  0E18               	movlw	24
 10031  0007AA  023B               	mulwf	(??_mktime+9)& (0+255),c
 10032  0007AC  50F3               	movf	prodl,w,c
 10033  0007AE  263F               	addwf	(??_mktime+13)& (0+255),f,c
 10034  0007B0  0E00               	movlw	0
 10035  0007B2  023A               	mulwf	(??_mktime+8)& (0+255),c
 10036  0007B4  50F3               	movf	prodl,w,c
 10037  0007B6  263F               	addwf	(??_mktime+13)& (0+255),f,c
 10038  0007B8  0E00               	movlw	0
 10039  0007BA  0239               	mulwf	(??_mktime+7)& (0+255),c
 10040  0007BC  50F3               	movf	prodl,w,c
 10041  0007BE  263F               	addwf	(??_mktime+13)& (0+255),f,c
 10042  0007C0  0E00               	movlw	0
 10043  0007C2  0238               	mulwf	(??_mktime+6)& (0+255),c
 10044  0007C4  50F3               	movf	prodl,w,c
 10045  0007C6  263F               	addwf	(??_mktime+13)& (0+255),f,c
 10046  0007C8  5034               	movf	??_mktime+2,w,c
 10047  0007CA  243C               	addwf	??_mktime+10,w,c
 10048  0007CC  6E40               	movwf	mktime@tt,c
 10049  0007CE  5035               	movf	??_mktime+3,w,c
 10050  0007D0  203D               	addwfc	??_mktime+11,w,c
 10051  0007D2  6E41               	movwf	mktime@tt+1,c
 10052  0007D4  5036               	movf	??_mktime+4,w,c
 10053  0007D6  203E               	addwfc	??_mktime+12,w,c
 10054  0007D8  6E42               	movwf	mktime@tt+2,c
 10055  0007DA  5037               	movf	??_mktime+5,w,c
 10056  0007DC  203F               	addwfc	??_mktime+13,w,c
 10057  0007DE  6E43               	movwf	mktime@tt+3,c
 10058  0007E0  5044               	movf	mktime@timeptr,w,c
 10059  0007E2  6ED9               	movwf	fsr2l,c
 10060  0007E4  6ADA               	clrf	fsr2h,c
 10061  0007E6  0E02               	movlw	2
 10062  0007E8  26D9               	addwf	fsr2l,f,c
 10063  0007EA  CFDE F032          	movff	postinc2,??_mktime
 10064  0007EE  CFDD F033          	movff	postdec2,??_mktime+1
 10065  0007F2  C032  F034         	movff	??_mktime,??_mktime+2
 10066  0007F6  C033  F035         	movff	??_mktime+1,??_mktime+3
 10067  0007FA  0E00               	movlw	0
 10068  0007FC  BE35               	btfsc	(??_mktime+3)& (0+255),7,c
 10069  0007FE  0EFF               	movlw	255
 10070  000800  6E36               	movwf	(??_mktime+4)& (0+255),c
 10071  000802  6E37               	movwf	(??_mktime+5)& (0+255),c
 10072  000804  C040  F038         	movff	mktime@tt,??_mktime+6
 10073  000808  C041  F039         	movff	mktime@tt+1,??_mktime+7
 10074  00080C  C042  F03A         	movff	mktime@tt+2,??_mktime+8
 10075  000810  C043  F03B         	movff	mktime@tt+3,??_mktime+9
 10076  000814  0E3C               	movlw	60
 10077  000816  0238               	mulwf	(??_mktime+6)& (0+255),c
 10078  000818  CFF3 F03C          	movff	prodl,??_mktime+10
 10079  00081C  CFF4 F03D          	movff	prodh,??_mktime+11
 10080  000820  6A3E               	clrf	(??_mktime+12)& (0+255),c
 10081  000822  6A3F               	clrf	(??_mktime+13)& (0+255),c
 10082  000824  0239               	mulwf	(??_mktime+7)& (0+255),c
 10083  000826  50F3               	movf	prodl,w,c
 10084  000828  263D               	addwf	(??_mktime+11)& (0+255),f,c
 10085  00082A  50F4               	movf	prodh,w,c
 10086  00082C  223E               	addwfc	(??_mktime+12)& (0+255),f,c
 10087  00082E  0E00               	movlw	0
 10088  000830  223F               	addwfc	(??_mktime+13)& (0+255),f,c
 10089  000832  0238               	mulwf	(??_mktime+6)& (0+255),c
 10090  000834  50F3               	movf	prodl,w,c
 10091  000836  263D               	addwf	(??_mktime+11)& (0+255),f,c
 10092  000838  50F4               	movf	prodh,w,c
 10093  00083A  223E               	addwfc	(??_mktime+12)& (0+255),f,c
 10094  00083C  0E00               	movlw	0
 10095  00083E  223F               	addwfc	(??_mktime+13)& (0+255),f,c
 10096  000840  0E3C               	movlw	60
 10097  000842  023A               	mulwf	(??_mktime+8)& (0+255),c
 10098  000844  50F3               	movf	prodl,w,c
 10099  000846  263E               	addwf	(??_mktime+12)& (0+255),f,c
 10100  000848  50F4               	movf	prodh,w,c
 10101  00084A  223F               	addwfc	(??_mktime+13)& (0+255),f,c
 10102  00084C  0E00               	movlw	0
 10103  00084E  0239               	mulwf	(??_mktime+7)& (0+255),c
 10104  000850  50F3               	movf	prodl,w,c
 10105  000852  263E               	addwf	(??_mktime+12)& (0+255),f,c
 10106  000854  50F4               	movf	prodh,w,c
 10107  000856  223F               	addwfc	(??_mktime+13)& (0+255),f,c
 10108  000858  0E00               	movlw	0
 10109  00085A  0238               	mulwf	(??_mktime+6)& (0+255),c
 10110  00085C  50F3               	movf	prodl,w,c
 10111  00085E  263E               	addwf	(??_mktime+12)& (0+255),f,c
 10112  000860  50F4               	movf	prodh,w,c
 10113  000862  223F               	addwfc	(??_mktime+13)& (0+255),f,c
 10114  000864  0E3C               	movlw	60
 10115  000866  023B               	mulwf	(??_mktime+9)& (0+255),c
 10116  000868  50F3               	movf	prodl,w,c
 10117  00086A  263F               	addwf	(??_mktime+13)& (0+255),f,c
 10118  00086C  0E00               	movlw	0
 10119  00086E  023A               	mulwf	(??_mktime+8)& (0+255),c
 10120  000870  50F3               	movf	prodl,w,c
 10121  000872  263F               	addwf	(??_mktime+13)& (0+255),f,c
 10122  000874  0E00               	movlw	0
 10123  000876  0239               	mulwf	(??_mktime+7)& (0+255),c
 10124  000878  50F3               	movf	prodl,w,c
 10125  00087A  263F               	addwf	(??_mktime+13)& (0+255),f,c
 10126  00087C  0E00               	movlw	0
 10127  00087E  0238               	mulwf	(??_mktime+6)& (0+255),c
 10128  000880  50F3               	movf	prodl,w,c
 10129  000882  263F               	addwf	(??_mktime+13)& (0+255),f,c
 10130  000884  5034               	movf	??_mktime+2,w,c
 10131  000886  243C               	addwf	??_mktime+10,w,c
 10132  000888  6E40               	movwf	mktime@tt,c
 10133  00088A  5035               	movf	??_mktime+3,w,c
 10134  00088C  203D               	addwfc	??_mktime+11,w,c
 10135  00088E  6E41               	movwf	mktime@tt+1,c
 10136  000890  5036               	movf	??_mktime+4,w,c
 10137  000892  203E               	addwfc	??_mktime+12,w,c
 10138  000894  6E42               	movwf	mktime@tt+2,c
 10139  000896  5037               	movf	??_mktime+5,w,c
 10140  000898  203F               	addwfc	??_mktime+13,w,c
 10141  00089A  6E43               	movwf	mktime@tt+3,c
 10142  00089C  5044               	movf	mktime@timeptr,w,c
 10143  00089E  6ED9               	movwf	fsr2l,c
 10144  0008A0  6ADA               	clrf	fsr2h,c
 10145  0008A2  CFDE F032          	movff	postinc2,??_mktime
 10146  0008A6  CFDD F033          	movff	postdec2,??_mktime+1
 10147  0008AA  C032  F034         	movff	??_mktime,??_mktime+2
 10148  0008AE  C033  F035         	movff	??_mktime+1,??_mktime+3
 10149  0008B2  0E00               	movlw	0
 10150  0008B4  BE35               	btfsc	(??_mktime+3)& (0+255),7,c
 10151  0008B6  0EFF               	movlw	255
 10152  0008B8  6E36               	movwf	(??_mktime+4)& (0+255),c
 10153  0008BA  6E37               	movwf	(??_mktime+5)& (0+255),c
 10154  0008BC  C040  F038         	movff	mktime@tt,??_mktime+6
 10155  0008C0  C041  F039         	movff	mktime@tt+1,??_mktime+7
 10156  0008C4  C042  F03A         	movff	mktime@tt+2,??_mktime+8
 10157  0008C8  C043  F03B         	movff	mktime@tt+3,??_mktime+9
 10158  0008CC  0E3C               	movlw	60
 10159  0008CE  0238               	mulwf	(??_mktime+6)& (0+255),c
 10160  0008D0  CFF3 F03C          	movff	prodl,??_mktime+10
 10161  0008D4  CFF4 F03D          	movff	prodh,??_mktime+11
 10162  0008D8  6A3E               	clrf	(??_mktime+12)& (0+255),c
 10163  0008DA  6A3F               	clrf	(??_mktime+13)& (0+255),c
 10164  0008DC  0239               	mulwf	(??_mktime+7)& (0+255),c
 10165  0008DE  50F3               	movf	prodl,w,c
 10166  0008E0  263D               	addwf	(??_mktime+11)& (0+255),f,c
 10167  0008E2  50F4               	movf	prodh,w,c
 10168  0008E4  223E               	addwfc	(??_mktime+12)& (0+255),f,c
 10169  0008E6  0E00               	movlw	0
 10170  0008E8  223F               	addwfc	(??_mktime+13)& (0+255),f,c
 10171  0008EA  0238               	mulwf	(??_mktime+6)& (0+255),c
 10172  0008EC  50F3               	movf	prodl,w,c
 10173  0008EE  263D               	addwf	(??_mktime+11)& (0+255),f,c
 10174  0008F0  50F4               	movf	prodh,w,c
 10175  0008F2  223E               	addwfc	(??_mktime+12)& (0+255),f,c
 10176  0008F4  0E00               	movlw	0
 10177  0008F6  223F               	addwfc	(??_mktime+13)& (0+255),f,c
 10178  0008F8  0E3C               	movlw	60
 10179  0008FA  023A               	mulwf	(??_mktime+8)& (0+255),c
 10180  0008FC  50F3               	movf	prodl,w,c
 10181  0008FE  263E               	addwf	(??_mktime+12)& (0+255),f,c
 10182  000900  50F4               	movf	prodh,w,c
 10183  000902  223F               	addwfc	(??_mktime+13)& (0+255),f,c
 10184  000904  0E00               	movlw	0
 10185  000906  0239               	mulwf	(??_mktime+7)& (0+255),c
 10186  000908  50F3               	movf	prodl,w,c
 10187  00090A  263E               	addwf	(??_mktime+12)& (0+255),f,c
 10188  00090C  50F4               	movf	prodh,w,c
 10189  00090E  223F               	addwfc	(??_mktime+13)& (0+255),f,c
 10190  000910  0E00               	movlw	0
 10191  000912  0238               	mulwf	(??_mktime+6)& (0+255),c
 10192  000914  50F3               	movf	prodl,w,c
 10193  000916  263E               	addwf	(??_mktime+12)& (0+255),f,c
 10194  000918  50F4               	movf	prodh,w,c
 10195  00091A  223F               	addwfc	(??_mktime+13)& (0+255),f,c
 10196  00091C  0E3C               	movlw	60
 10197  00091E  023B               	mulwf	(??_mktime+9)& (0+255),c
 10198  000920  50F3               	movf	prodl,w,c
 10199  000922  263F               	addwf	(??_mktime+13)& (0+255),f,c
 10200  000924  0E00               	movlw	0
 10201  000926  023A               	mulwf	(??_mktime+8)& (0+255),c
 10202  000928  50F3               	movf	prodl,w,c
 10203  00092A  263F               	addwf	(??_mktime+13)& (0+255),f,c
 10204  00092C  0E00               	movlw	0
 10205  00092E  0239               	mulwf	(??_mktime+7)& (0+255),c
 10206  000930  50F3               	movf	prodl,w,c
 10207  000932  263F               	addwf	(??_mktime+13)& (0+255),f,c
 10208  000934  0E00               	movlw	0
 10209  000936  0238               	mulwf	(??_mktime+6)& (0+255),c
 10210  000938  50F3               	movf	prodl,w,c
 10211  00093A  263F               	addwf	(??_mktime+13)& (0+255),f,c
 10212  00093C  5034               	movf	??_mktime+2,w,c
 10213  00093E  243C               	addwf	??_mktime+10,w,c
 10214  000940  6E40               	movwf	mktime@tt,c
 10215  000942  5035               	movf	??_mktime+3,w,c
 10216  000944  203D               	addwfc	??_mktime+11,w,c
 10217  000946  6E41               	movwf	mktime@tt+1,c
 10218  000948  5036               	movf	??_mktime+4,w,c
 10219  00094A  203E               	addwfc	??_mktime+12,w,c
 10220  00094C  6E42               	movwf	mktime@tt+2,c
 10221  00094E  5037               	movf	??_mktime+5,w,c
 10222  000950  203F               	addwfc	??_mktime+13,w,c
 10223  000952  6E43               	movwf	mktime@tt+3,c
 10224  000954                     l6406:
 10225  000954  FFFF               	dw	65535	; assembler added errata NOP
 10226  000956  C040  F02E         	movff	mktime@tt,?_mktime
 10227  00095A  C041  F02F         	movff	mktime@tt+1,?_mktime+1
 10228  00095E  C042  F030         	movff	mktime@tt+2,?_mktime+2
 10229  000962  C043  F031         	movff	mktime@tt+3,?_mktime+3
 10230  000966  0012               	return		;funcret
 10231  000968  FFFF               	dw	65535	; errata NOP
 10232  00096A                     __end_of_mktime:
 10233                           	opt stack 0
 10234                           tblptru	equ	0xFF8
 10235                           tblptrh	equ	0xFF7
 10236                           tblptrl	equ	0xFF6
 10237                           tablat	equ	0xFF5
 10238                           prodh	equ	0xFF4
 10239                           prodl	equ	0xFF3
 10240                           intcon	equ	0xFF2
 10241                           postinc0	equ	0xFEE
 10242                           wreg	equ	0xFE8
 10243                           indf1	equ	0xFE7
 10244                           postinc1	equ	0xFE6
 10245                           postdec1	equ	0xFE5
 10246                           fsr1h	equ	0xFE2
 10247                           fsr1l	equ	0xFE1
 10248                           indf2	equ	0xFDF
 10249                           postinc2	equ	0xFDE
 10250                           postdec2	equ	0xFDD
 10251                           plusw2	equ	0xFDB
 10252                           fsr2h	equ	0xFDA
 10253                           fsr2l	equ	0xFD9
 10254                           status	equ	0xFD8
 10255                           
 10256 ;; *************** function _ymd_to_scalar *****************
 10257 ;; Defined at:
 10258 ;;		line 40 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
 10259 ;; Parameters:    Size  Location     Type
 10260 ;;  yr              2   29[COMRAM] unsigned int 
 10261 ;;  mo              2   31[COMRAM] unsigned int 
 10262 ;;  day             2   33[COMRAM] unsigned int 
 10263 ;; Auto vars:     Size  Location     Type
 10264 ;;  scalar          4   41[COMRAM] long 
 10265 ;; Return value:  Size  Location     Type
 10266 ;;                  4   29[COMRAM] long 
 10267 ;; Registers used:
 10268 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 10269 ;; Tracked objects:
 10270 ;;		On entry : 0/1
 10271 ;;		On exit  : 0/0
 10272 ;;		Unchanged: 0/0
 10273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10274 ;;      Params:         6       0       0       0       0       0       0
 10275 ;;      Locals:         6       0       0       0       0       0       0
 10276 ;;      Temps:          4       0       0       0       0       0       0
 10277 ;;      Totals:        16       0       0       0       0       0       0
 10278 ;;Total ram usage:       16 bytes
 10279 ;; Hardware stack levels used:    1
 10280 ;; Hardware stack levels required when called:    4
 10281 ;; This function calls:
 10282 ;;		_isleap
 10283 ;;		_months_to_days
 10284 ;;		_years_to_days
 10285 ;; This function is called by:
 10286 ;;		_mktime
 10287 ;; This function uses a non-reentrant model
 10288 ;;
 10289                           
 10290                           	psect	text51
 10291  0023C2                     __ptext51:
 10292                           	opt stack 0
 10293  0023C2                     _ymd_to_scalar:
 10294                           	opt stack 23
 10295                           
 10296                           ;incstack = 0
 10297  0023C2  FFFF               	dw	65535
 10298  0023C4  C020  F00E         	movff	ymd_to_scalar@mo,months_to_days@month
 10299  0023C8  C021  F00F         	movff	ymd_to_scalar@mo+1,months_to_days@month+1
 10300  0023CC  ECC7  F015         	call	_months_to_days	;wreg free
 10301  0023D0  5022               	movf	ymd_to_scalar@day,w,c
 10302  0023D2  260E               	addwf	?_months_to_days,f,c
 10303  0023D4  5023               	movf	ymd_to_scalar@day+1,w,c
 10304  0023D6  220F               	addwfc	?_months_to_days+1,f,c
 10305  0023D8  C00E  F02A         	movff	?_months_to_days,ymd_to_scalar@scalar
 10306  0023DC  C00F  F02B         	movff	?_months_to_days+1,ymd_to_scalar@scalar+1
 10307  0023E0  6A2C               	clrf	ymd_to_scalar@scalar+2,c
 10308  0023E2  6A2D               	clrf	ymd_to_scalar@scalar+3,c
 10309  0023E4  5021               	movf	ymd_to_scalar@mo+1,w,c
 10310  0023E6  E103               	bnz	u5240
 10311  0023E8  0E03               	movlw	3
 10312  0023EA  5C20               	subwf	ymd_to_scalar@mo,w,c
 10313  0023EC  E321               	bnc	l6160
 10314  0023EE                     u5240:
 10315  0023EE  C01E  F00C         	movff	ymd_to_scalar@yr,isleap@yr
 10316  0023F2  C01F  F00D         	movff	ymd_to_scalar@yr+1,isleap@yr+1
 10317  0023F6  EC0E  F015         	call	_isleap	;wreg free
 10318  0023FA  500C               	movf	?_isleap,w,c
 10319  0023FC  100D               	iorwf	?_isleap+1,w,c
 10320  0023FE  E103               	bnz	l6156
 10321  002400  6A29               	clrf	_ymd_to_scalar$2294+1,c
 10322  002402  0E02               	movlw	2
 10323  002404  D002               	goto	L13
 10324  002406                     l6156:
 10325  002406  6A29               	clrf	_ymd_to_scalar$2294+1,c
 10326  002408  0E01               	movlw	1
 10327  00240A                     L13:
 10328  00240A  FFFF               	dw	65535	; assembler added errata NOP
 10329  00240C  6E28               	movwf	_ymd_to_scalar$2294,c
 10330  00240E  C028  F024         	movff	_ymd_to_scalar$2294,??_ymd_to_scalar
 10331  002412  C029  F025         	movff	_ymd_to_scalar$2294+1,??_ymd_to_scalar+1
 10332  002416  0E00               	movlw	0
 10333  002418  BE25               	btfsc	(??_ymd_to_scalar+1)& (0+255),7,c
 10334  00241A  0EFF               	movlw	255
 10335  00241C  6E26               	movwf	(??_ymd_to_scalar+2)& (0+255),c
 10336  00241E  6E27               	movwf	(??_ymd_to_scalar+3)& (0+255),c
 10337  002420  5024               	movf	??_ymd_to_scalar,w,c
 10338  002422  5E2A               	subwf	ymd_to_scalar@scalar,f,c
 10339  002424  5025               	movf	??_ymd_to_scalar+1,w,c
 10340  002426  5A2B               	subwfb	ymd_to_scalar@scalar+1,f,c
 10341  002428  5026               	movf	??_ymd_to_scalar+2,w,c
 10342  00242A  5A2C               	subwfb	ymd_to_scalar@scalar+2,f,c
 10343  00242C  5027               	movf	??_ymd_to_scalar+3,w,c
 10344  00242E  5A2D               	subwfb	ymd_to_scalar@scalar+3,f,c
 10345  002430                     l6160:
 10346  002430  061E               	decf	ymd_to_scalar@yr,f,c
 10347  002432  A0D8               	btfss	status,0,c
 10348  002434  061F               	decf	ymd_to_scalar@yr+1,f,c
 10349  002436  C01E  F00E         	movff	ymd_to_scalar@yr,years_to_days@yr
 10350  00243A  C01F  F00F         	movff	ymd_to_scalar@yr+1,years_to_days@yr+1
 10351  00243E  ECE5  F00D         	call	_years_to_days	;wreg free
 10352  002442  500E               	movf	?_years_to_days,w,c
 10353  002444  262A               	addwf	ymd_to_scalar@scalar,f,c
 10354  002446  500F               	movf	?_years_to_days+1,w,c
 10355  002448  222B               	addwfc	ymd_to_scalar@scalar+1,f,c
 10356  00244A  5010               	movf	?_years_to_days+2,w,c
 10357  00244C  222C               	addwfc	ymd_to_scalar@scalar+2,f,c
 10358  00244E  5011               	movf	?_years_to_days+3,w,c
 10359  002450  222D               	addwfc	ymd_to_scalar@scalar+3,f,c
 10360  002452  C02A  F01E         	movff	ymd_to_scalar@scalar,?_ymd_to_scalar
 10361  002456  C02B  F01F         	movff	ymd_to_scalar@scalar+1,?_ymd_to_scalar+1
 10362  00245A  C02C  F020         	movff	ymd_to_scalar@scalar+2,?_ymd_to_scalar+2
 10363  00245E  C02D  F021         	movff	ymd_to_scalar@scalar+3,?_ymd_to_scalar+3
 10364  002462  0012               	return		;funcret
 10365  002464  FFFF               	dw	65535	; errata NOP
 10366  002466                     __end_of_ymd_to_scalar:
 10367                           	opt stack 0
 10368                           tblptru	equ	0xFF8
 10369                           tblptrh	equ	0xFF7
 10370                           tblptrl	equ	0xFF6
 10371                           tablat	equ	0xFF5
 10372                           prodh	equ	0xFF4
 10373                           prodl	equ	0xFF3
 10374                           intcon	equ	0xFF2
 10375                           postinc0	equ	0xFEE
 10376                           wreg	equ	0xFE8
 10377                           indf1	equ	0xFE7
 10378                           postinc1	equ	0xFE6
 10379                           postdec1	equ	0xFE5
 10380                           fsr1h	equ	0xFE2
 10381                           fsr1l	equ	0xFE1
 10382                           indf2	equ	0xFDF
 10383                           postinc2	equ	0xFDE
 10384                           postdec2	equ	0xFDD
 10385                           plusw2	equ	0xFDB
 10386                           fsr2h	equ	0xFDA
 10387                           fsr2l	equ	0xFD9
 10388                           status	equ	0xFD8
 10389                           
 10390 ;; *************** function _years_to_days *****************
 10391 ;; Defined at:
 10392 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
 10393 ;; Parameters:    Size  Location     Type
 10394 ;;  yr              2   13[COMRAM] unsigned int 
 10395 ;; Auto vars:     Size  Location     Type
 10396 ;;  ret             4   25[COMRAM] long 
 10397 ;; Return value:  Size  Location     Type
 10398 ;;                  4   13[COMRAM] long 
 10399 ;; Registers used:
 10400 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 10401 ;; Tracked objects:
 10402 ;;		On entry : 0/1
 10403 ;;		On exit  : 0/0
 10404 ;;		Unchanged: 0/0
 10405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10406 ;;      Params:         4       0       0       0       0       0       0
 10407 ;;      Locals:         4       0       0       0       0       0       0
 10408 ;;      Temps:          8       0       0       0       0       0       0
 10409 ;;      Totals:        16       0       0       0       0       0       0
 10410 ;;Total ram usage:       16 bytes
 10411 ;; Hardware stack levels used:    1
 10412 ;; Hardware stack levels required when called:    3
 10413 ;; This function calls:
 10414 ;;		___lwdiv
 10415 ;; This function is called by:
 10416 ;;		_ymd_to_scalar
 10417 ;; This function uses a non-reentrant model
 10418 ;;
 10419                           
 10420                           	psect	text52
 10421  001BCA                     __ptext52:
 10422                           	opt stack 0
 10423  001BCA                     _years_to_days:
 10424                           	opt stack 23
 10425                           
 10426                           ;incstack = 0
 10427  001BCA  FFFF               	dw	65535
 10428  001BCC  500E               	movf	years_to_days@yr,w,c
 10429  001BCE  6E12               	movwf	??_years_to_days& (0+255),c
 10430  001BD0  500F               	movf	years_to_days@yr+1,w,c
 10431  001BD2  6E13               	movwf	(??_years_to_days+1)& (0+255),c
 10432  001BD4  6A14               	clrf	(??_years_to_days+2)& (0+255),c
 10433  001BD6  6A15               	clrf	(??_years_to_days+3)& (0+255),c
 10434  001BD8  0E6D               	movlw	109
 10435  001BDA  0212               	mulwf	??_years_to_days& (0+255),c
 10436  001BDC  CFF3 F016          	movff	prodl,??_years_to_days+4
 10437  001BE0  CFF4 F017          	movff	prodh,??_years_to_days+5
 10438  001BE4  6A18               	clrf	(??_years_to_days+6)& (0+255),c
 10439  001BE6  6A19               	clrf	(??_years_to_days+7)& (0+255),c
 10440  001BE8  0213               	mulwf	(??_years_to_days+1)& (0+255),c
 10441  001BEA  50F3               	movf	prodl,w,c
 10442  001BEC  2617               	addwf	(??_years_to_days+5)& (0+255),f,c
 10443  001BEE  50F4               	movf	prodh,w,c
 10444  001BF0  2218               	addwfc	(??_years_to_days+6)& (0+255),f,c
 10445  001BF2  0E00               	movlw	0
 10446  001BF4  2219               	addwfc	(??_years_to_days+7)& (0+255),f,c
 10447  001BF6  0E01               	movlw	1
 10448  001BF8  0212               	mulwf	??_years_to_days& (0+255),c
 10449  001BFA  50F3               	movf	prodl,w,c
 10450  001BFC  2617               	addwf	(??_years_to_days+5)& (0+255),f,c
 10451  001BFE  50F4               	movf	prodh,w,c
 10452  001C00  2218               	addwfc	(??_years_to_days+6)& (0+255),f,c
 10453  001C02  0E00               	movlw	0
 10454  001C04  2219               	addwfc	(??_years_to_days+7)& (0+255),f,c
 10455  001C06  0E6D               	movlw	109
 10456  001C08  0214               	mulwf	(??_years_to_days+2)& (0+255),c
 10457  001C0A  50F3               	movf	prodl,w,c
 10458  001C0C  2618               	addwf	(??_years_to_days+6)& (0+255),f,c
 10459  001C0E  50F4               	movf	prodh,w,c
 10460  001C10  2219               	addwfc	(??_years_to_days+7)& (0+255),f,c
 10461  001C12  0E01               	movlw	1
 10462  001C14  0213               	mulwf	(??_years_to_days+1)& (0+255),c
 10463  001C16  50F3               	movf	prodl,w,c
 10464  001C18  2618               	addwf	(??_years_to_days+6)& (0+255),f,c
 10465  001C1A  50F4               	movf	prodh,w,c
 10466  001C1C  2219               	addwfc	(??_years_to_days+7)& (0+255),f,c
 10467  001C1E  0E00               	movlw	0
 10468  001C20  0212               	mulwf	??_years_to_days& (0+255),c
 10469  001C22  50F3               	movf	prodl,w,c
 10470  001C24  2618               	addwf	(??_years_to_days+6)& (0+255),f,c
 10471  001C26  50F4               	movf	prodh,w,c
 10472  001C28  2219               	addwfc	(??_years_to_days+7)& (0+255),f,c
 10473  001C2A  0E6D               	movlw	109
 10474  001C2C  0215               	mulwf	(??_years_to_days+3)& (0+255),c
 10475  001C2E  50F3               	movf	prodl,w,c
 10476  001C30  2619               	addwf	(??_years_to_days+7)& (0+255),f,c
 10477  001C32  0E01               	movlw	1
 10478  001C34  0214               	mulwf	(??_years_to_days+2)& (0+255),c
 10479  001C36  50F3               	movf	prodl,w,c
 10480  001C38  2619               	addwf	(??_years_to_days+7)& (0+255),f,c
 10481  001C3A  0E00               	movlw	0
 10482  001C3C  0213               	mulwf	(??_years_to_days+1)& (0+255),c
 10483  001C3E  50F3               	movf	prodl,w,c
 10484  001C40  2619               	addwf	(??_years_to_days+7)& (0+255),f,c
 10485  001C42  0E00               	movlw	0
 10486  001C44  0212               	mulwf	??_years_to_days& (0+255),c
 10487  001C46  50F3               	movf	prodl,w,c
 10488  001C48  2619               	addwf	(??_years_to_days+7)& (0+255),f,c
 10489  001C4A  C016  F01A         	movff	??_years_to_days+4,years_to_days@ret
 10490  001C4E  C017  F01B         	movff	??_years_to_days+5,years_to_days@ret+1
 10491  001C52  C018  F01C         	movff	??_years_to_days+6,years_to_days@ret+2
 10492  001C56  C019  F01D         	movff	??_years_to_days+7,years_to_days@ret+3
 10493  001C5A  C00E  F007         	movff	years_to_days@yr,___lwdiv@dividend
 10494  001C5E  C00F  F008         	movff	years_to_days@yr+1,___lwdiv@dividend+1
 10495  001C62  6A0A               	clrf	___lwdiv@divisor+1,c
 10496  001C64  0E64               	movlw	100
 10497  001C66  6E09               	movwf	___lwdiv@divisor,c
 10498  001C68  ECBD  F014         	call	___lwdiv	;wreg free
 10499  001C6C  C00E  F012         	movff	years_to_days@yr,??_years_to_days
 10500  001C70  C00F  F013         	movff	years_to_days@yr+1,??_years_to_days+1
 10501  001C74  90D8               	bcf	status,0,c
 10502  001C76  3213               	rrcf	??_years_to_days+1,f,c
 10503  001C78  3212               	rrcf	??_years_to_days,f,c
 10504  001C7A  90D8               	bcf	status,0,c
 10505  001C7C  3213               	rrcf	??_years_to_days+1,f,c
 10506  001C7E  3212               	rrcf	??_years_to_days,f,c
 10507  001C80  5007               	movf	?___lwdiv,w,c
 10508  001C82  5E12               	subwf	??_years_to_days,f,c
 10509  001C84  5008               	movf	?___lwdiv+1,w,c
 10510  001C86  5A13               	subwfb	??_years_to_days+1,f,c
 10511  001C88  5012               	movf	??_years_to_days,w,c
 10512  001C8A  261A               	addwf	years_to_days@ret,f,c
 10513  001C8C  5013               	movf	??_years_to_days+1,w,c
 10514  001C8E  221B               	addwfc	years_to_days@ret+1,f,c
 10515  001C90  0E00               	movlw	0
 10516  001C92  221C               	addwfc	years_to_days@ret+2,f,c
 10517  001C94  221D               	addwfc	years_to_days@ret+3,f,c
 10518  001C96  C00E  F007         	movff	years_to_days@yr,___lwdiv@dividend
 10519  001C9A  C00F  F008         	movff	years_to_days@yr+1,___lwdiv@dividend+1
 10520  001C9E  0E01               	movlw	1
 10521  001CA0  6E0A               	movwf	___lwdiv@divisor+1,c
 10522  001CA2  0E90               	movlw	144
 10523  001CA4  6E09               	movwf	___lwdiv@divisor,c
 10524  001CA6  ECBD  F014         	call	___lwdiv	;wreg free
 10525  001CAA  5007               	movf	?___lwdiv,w,c
 10526  001CAC  261A               	addwf	years_to_days@ret,f,c
 10527  001CAE  5008               	movf	?___lwdiv+1,w,c
 10528  001CB0  221B               	addwfc	years_to_days@ret+1,f,c
 10529  001CB2  0E00               	movlw	0
 10530  001CB4  221C               	addwfc	years_to_days@ret+2,f,c
 10531  001CB6  221D               	addwfc	years_to_days@ret+3,f,c
 10532  001CB8  C01A  F00E         	movff	years_to_days@ret,?_years_to_days
 10533  001CBC  C01B  F00F         	movff	years_to_days@ret+1,?_years_to_days+1
 10534  001CC0  C01C  F010         	movff	years_to_days@ret+2,?_years_to_days+2
 10535  001CC4  C01D  F011         	movff	years_to_days@ret+3,?_years_to_days+3
 10536  001CC8  0C00               	retlw	0	;funcret
 10537  001CCA  FFFF               	dw	65535	; errata NOP
 10538  001CCC                     __end_of_years_to_days:
 10539                           	opt stack 0
 10540                           tblptru	equ	0xFF8
 10541                           tblptrh	equ	0xFF7
 10542                           tblptrl	equ	0xFF6
 10543                           tablat	equ	0xFF5
 10544                           prodh	equ	0xFF4
 10545                           prodl	equ	0xFF3
 10546                           intcon	equ	0xFF2
 10547                           postinc0	equ	0xFEE
 10548                           wreg	equ	0xFE8
 10549                           indf1	equ	0xFE7
 10550                           postinc1	equ	0xFE6
 10551                           postdec1	equ	0xFE5
 10552                           fsr1h	equ	0xFE2
 10553                           fsr1l	equ	0xFE1
 10554                           indf2	equ	0xFDF
 10555                           postinc2	equ	0xFDE
 10556                           postdec2	equ	0xFDD
 10557                           plusw2	equ	0xFDB
 10558                           fsr2h	equ	0xFDA
 10559                           fsr2l	equ	0xFD9
 10560                           status	equ	0xFD8
 10561                           
 10562 ;; *************** function _months_to_days *****************
 10563 ;; Defined at:
 10564 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
 10565 ;; Parameters:    Size  Location     Type
 10566 ;;  month           2   13[COMRAM] unsigned int 
 10567 ;; Auto vars:     Size  Location     Type
 10568 ;;		None
 10569 ;; Return value:  Size  Location     Type
 10570 ;;                  2   13[COMRAM] unsigned int 
 10571 ;; Registers used:
 10572 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 10573 ;; Tracked objects:
 10574 ;;		On entry : 0/1
 10575 ;;		On exit  : 0/0
 10576 ;;		Unchanged: 0/0
 10577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10578 ;;      Params:         2       0       0       0       0       0       0
 10579 ;;      Locals:         0       0       0       0       0       0       0
 10580 ;;      Temps:          4       0       0       0       0       0       0
 10581 ;;      Totals:         6       0       0       0       0       0       0
 10582 ;;Total ram usage:        6 bytes
 10583 ;; Hardware stack levels used:    1
 10584 ;; Hardware stack levels required when called:    3
 10585 ;; This function calls:
 10586 ;;		___lwdiv
 10587 ;; This function is called by:
 10588 ;;		_ymd_to_scalar
 10589 ;; This function uses a non-reentrant model
 10590 ;;
 10591                           
 10592                           	psect	text53
 10593  002B8E                     __ptext53:
 10594                           	opt stack 0
 10595  002B8E                     _months_to_days:
 10596                           	opt stack 23
 10597                           
 10598                           ;incstack = 0
 10599  002B8E  FFFF               	dw	65535
 10600  002B90  0EF1               	movlw	241
 10601  002B92  6E10               	movwf	??_months_to_days& (0+255),c
 10602  002B94  0E0B               	movlw	11
 10603  002B96  6E11               	movwf	(??_months_to_days+1)& (0+255),c
 10604  002B98  5010               	movf	??_months_to_days& (0+255),w,c
 10605  002B9A  020E               	mulwf	months_to_days@month,c
 10606  002B9C  CFF3 F012          	movff	prodl,??_months_to_days+2
 10607  002BA0  CFF4 F013          	movff	prodh,??_months_to_days+3
 10608  002BA4  020F               	mulwf	months_to_days@month+1,c
 10609  002BA6  50F3               	movf	prodl,w,c
 10610  002BA8  2613               	addwf	(??_months_to_days+3)& (0+255),f,c
 10611  002BAA  5011               	movf	(??_months_to_days+1)& (0+255),w,c
 10612  002BAC  020E               	mulwf	months_to_days@month,c
 10613  002BAE  50F3               	movf	prodl,w,c
 10614  002BB0  2613               	addwf	(??_months_to_days+3)& (0+255),f,c
 10615  002BB2  0E41               	movlw	65
 10616  002BB4  2412               	addwf	??_months_to_days+2,w,c
 10617  002BB6  6E07               	movwf	___lwdiv@dividend,c
 10618  002BB8  0EF4               	movlw	244
 10619  002BBA  2013               	addwfc	??_months_to_days+3,w,c
 10620  002BBC  6E08               	movwf	___lwdiv@dividend+1,c
 10621  002BBE  6A0A               	clrf	___lwdiv@divisor+1,c
 10622  002BC0  0E64               	movlw	100
 10623  002BC2  6E09               	movwf	___lwdiv@divisor,c
 10624  002BC4  ECBD  F014         	call	___lwdiv	;wreg free
 10625  002BC8  C007  F00E         	movff	?___lwdiv,?_months_to_days
 10626  002BCC  C008  F00F         	movff	?___lwdiv+1,?_months_to_days+1
 10627  002BD0  0012               	return		;funcret
 10628  002BD2  FFFF               	dw	65535	; errata NOP
 10629  002BD4                     __end_of_months_to_days:
 10630                           	opt stack 0
 10631                           tblptru	equ	0xFF8
 10632                           tblptrh	equ	0xFF7
 10633                           tblptrl	equ	0xFF6
 10634                           tablat	equ	0xFF5
 10635                           prodh	equ	0xFF4
 10636                           prodl	equ	0xFF3
 10637                           intcon	equ	0xFF2
 10638                           postinc0	equ	0xFEE
 10639                           wreg	equ	0xFE8
 10640                           indf1	equ	0xFE7
 10641                           postinc1	equ	0xFE6
 10642                           postdec1	equ	0xFE5
 10643                           fsr1h	equ	0xFE2
 10644                           fsr1l	equ	0xFE1
 10645                           indf2	equ	0xFDF
 10646                           postinc2	equ	0xFDE
 10647                           postdec2	equ	0xFDD
 10648                           plusw2	equ	0xFDB
 10649                           fsr2h	equ	0xFDA
 10650                           fsr2l	equ	0xFD9
 10651                           status	equ	0xFD8
 10652                           
 10653 ;; *************** function ___lwdiv *****************
 10654 ;; Defined at:
 10655 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwdiv.c"
 10656 ;; Parameters:    Size  Location     Type
 10657 ;;  dividend        2    6[COMRAM] unsigned int 
 10658 ;;  divisor         2    8[COMRAM] unsigned int 
 10659 ;; Auto vars:     Size  Location     Type
 10660 ;;  quotient        2   11[COMRAM] unsigned int 
 10661 ;;  counter         1   10[COMRAM] unsigned char 
 10662 ;; Return value:  Size  Location     Type
 10663 ;;                  2    6[COMRAM] unsigned int 
 10664 ;; Registers used:
 10665 ;;		wreg, status,2, status,0
 10666 ;; Tracked objects:
 10667 ;;		On entry : 0/1
 10668 ;;		On exit  : 0/0
 10669 ;;		Unchanged: 0/0
 10670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10671 ;;      Params:         4       0       0       0       0       0       0
 10672 ;;      Locals:         3       0       0       0       0       0       0
 10673 ;;      Temps:          0       0       0       0       0       0       0
 10674 ;;      Totals:         7       0       0       0       0       0       0
 10675 ;;Total ram usage:        7 bytes
 10676 ;; Hardware stack levels used:    1
 10677 ;; Hardware stack levels required when called:    2
 10678 ;; This function calls:
 10679 ;;		Nothing
 10680 ;; This function is called by:
 10681 ;;		_months_to_days
 10682 ;;		_years_to_days
 10683 ;; This function uses a non-reentrant model
 10684 ;;
 10685                           
 10686                           	psect	text54
 10687  00297A                     __ptext54:
 10688                           	opt stack 0
 10689  00297A                     ___lwdiv:
 10690                           	opt stack 23
 10691                           
 10692                           ;incstack = 0
 10693  00297A  FFFF               	dw	65535
 10694  00297C  6A0C               	clrf	___lwdiv@quotient,c
 10695  00297E  6A0D               	clrf	___lwdiv@quotient+1,c
 10696  002980  5009               	movf	___lwdiv@divisor,w,c
 10697  002982  100A               	iorwf	___lwdiv@divisor+1,w,c
 10698  002984  E01E               	bz	l1383
 10699  002986  0E01               	movlw	1
 10700  002988  6E0B               	movwf	___lwdiv@counter,c
 10701  00298A  D005               	goto	l5810
 10702  00298C                     l5808:
 10703  00298C  FFFF               	dw	65535	; assembler added errata NOP
 10704  00298E  90D8               	bcf	status,0,c
 10705  002990  3609               	rlcf	___lwdiv@divisor,f,c
 10706  002992  360A               	rlcf	___lwdiv@divisor+1,f,c
 10707  002994  2A0B               	incf	___lwdiv@counter,f,c
 10708  002996                     l5810:
 10709  002996  FFFF               	dw	65535	; assembler added errata NOP
 10710  002998  AE0A               	btfss	___lwdiv@divisor+1,7,c
 10711  00299A  D7F8               	goto	l5808
 10712  00299C                     l5812:
 10713  00299C  FFFF               	dw	65535	; assembler added errata NOP
 10714  00299E  90D8               	bcf	status,0,c
 10715  0029A0  360C               	rlcf	___lwdiv@quotient,f,c
 10716  0029A2  360D               	rlcf	___lwdiv@quotient+1,f,c
 10717  0029A4  5009               	movf	___lwdiv@divisor,w,c
 10718  0029A6  5C07               	subwf	___lwdiv@dividend,w,c
 10719  0029A8  500A               	movf	___lwdiv@divisor+1,w,c
 10720  0029AA  5808               	subwfb	___lwdiv@dividend+1,w,c
 10721  0029AC  E305               	bnc	l5820
 10722  0029AE  5009               	movf	___lwdiv@divisor,w,c
 10723  0029B0  5E07               	subwf	___lwdiv@dividend,f,c
 10724  0029B2  500A               	movf	___lwdiv@divisor+1,w,c
 10725  0029B4  5A08               	subwfb	___lwdiv@dividend+1,f,c
 10726  0029B6  800C               	bsf	___lwdiv@quotient,0,c
 10727  0029B8                     l5820:
 10728  0029B8  90D8               	bcf	status,0,c
 10729  0029BA  320A               	rrcf	___lwdiv@divisor+1,f,c
 10730  0029BC  3209               	rrcf	___lwdiv@divisor,f,c
 10731  0029BE  2E0B               	decfsz	___lwdiv@counter,f,c
 10732  0029C0  D7ED               	goto	l5812
 10733  0029C2                     l1383:
 10734  0029C2  C00C  F007         	movff	___lwdiv@quotient,?___lwdiv
 10735  0029C6  C00D  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
 10736  0029CA  0012               	return		;funcret
 10737  0029CC  FFFF               	dw	65535	; errata NOP
 10738  0029CE                     __end_of___lwdiv:
 10739                           	opt stack 0
 10740                           tblptru	equ	0xFF8
 10741                           tblptrh	equ	0xFF7
 10742                           tblptrl	equ	0xFF6
 10743                           tablat	equ	0xFF5
 10744                           prodh	equ	0xFF4
 10745                           prodl	equ	0xFF3
 10746                           intcon	equ	0xFF2
 10747                           postinc0	equ	0xFEE
 10748                           wreg	equ	0xFE8
 10749                           indf1	equ	0xFE7
 10750                           postinc1	equ	0xFE6
 10751                           postdec1	equ	0xFE5
 10752                           fsr1h	equ	0xFE2
 10753                           fsr1l	equ	0xFE1
 10754                           indf2	equ	0xFDF
 10755                           postinc2	equ	0xFDE
 10756                           postdec2	equ	0xFDD
 10757                           plusw2	equ	0xFDB
 10758                           fsr2h	equ	0xFDA
 10759                           fsr2l	equ	0xFD9
 10760                           status	equ	0xFD8
 10761                           
 10762 ;; *************** function _isleap *****************
 10763 ;; Defined at:
 10764 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\mktime.c"
 10765 ;; Parameters:    Size  Location     Type
 10766 ;;  yr              2   11[COMRAM] unsigned int 
 10767 ;; Auto vars:     Size  Location     Type
 10768 ;;		None
 10769 ;; Return value:  Size  Location     Type
 10770 ;;                  2   11[COMRAM] int 
 10771 ;; Registers used:
 10772 ;;		wreg, status,2, status,0, cstack
 10773 ;; Tracked objects:
 10774 ;;		On entry : 0/1
 10775 ;;		On exit  : 0/0
 10776 ;;		Unchanged: 0/0
 10777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10778 ;;      Params:         2       0       0       0       0       0       0
 10779 ;;      Locals:         1       0       0       0       0       0       0
 10780 ;;      Temps:          1       0       0       0       0       0       0
 10781 ;;      Totals:         4       0       0       0       0       0       0
 10782 ;;Total ram usage:        4 bytes
 10783 ;; Hardware stack levels used:    1
 10784 ;; Hardware stack levels required when called:    3
 10785 ;; This function calls:
 10786 ;;		___lwmod
 10787 ;; This function is called by:
 10788 ;;		_ymd_to_scalar
 10789 ;; This function uses a non-reentrant model
 10790 ;;
 10791                           
 10792                           	psect	text55
 10793  002A1C                     __ptext55:
 10794                           	opt stack 0
 10795  002A1C                     _isleap:
 10796                           	opt stack 23
 10797                           
 10798                           ;incstack = 0
 10799  002A1C  FFFF               	dw	65535
 10800  002A1E  0E01               	movlw	1
 10801  002A20  6E0F               	movwf	_isleap$2281,c
 10802  002A22  C00C  F007         	movff	isleap@yr,___lwmod@dividend
 10803  002A26  C00D  F008         	movff	isleap@yr+1,___lwmod@dividend+1
 10804  002A2A  6E0A               	movwf	___lwmod@divisor+1,c
 10805  002A2C  0E90               	movlw	144
 10806  002A2E  6E09               	movwf	___lwmod@divisor,c
 10807  002A30  EC80  F015         	call	___lwmod	;wreg free
 10808  002A34  5007               	movf	?___lwmod,w,c
 10809  002A36  1008               	iorwf	?___lwmod+1,w,c
 10810  002A38  E012               	bz	l1409
 10811  002A3A  C00C  F00E         	movff	isleap@yr,??_isleap
 10812  002A3E  0E03               	movlw	3
 10813  002A40  160E               	andwf	??_isleap,f,c
 10814  002A42  E10C               	bnz	l5790
 10815  002A44  C00C  F007         	movff	isleap@yr,___lwmod@dividend
 10816  002A48  C00D  F008         	movff	isleap@yr+1,___lwmod@dividend+1
 10817  002A4C  6A0A               	clrf	___lwmod@divisor+1,c
 10818  002A4E  0E64               	movlw	100
 10819  002A50  6E09               	movwf	___lwmod@divisor,c
 10820  002A52  EC80  F015         	call	___lwmod	;wreg free
 10821  002A56  5007               	movf	?___lwmod,w,c
 10822  002A58  1008               	iorwf	?___lwmod+1,w,c
 10823  002A5A  E101               	bnz	l1409
 10824  002A5C                     l5790:
 10825  002A5C  6A0F               	clrf	_isleap$2281,c
 10826  002A5E                     l1409:
 10827  002A5E  C00F  F00C         	movff	_isleap$2281,?_isleap
 10828  002A62  6A0D               	clrf	?_isleap+1,c
 10829  002A64  0012               	return		;funcret
 10830  002A66  FFFF               	dw	65535	; errata NOP
 10831  002A68                     __end_of_isleap:
 10832                           	opt stack 0
 10833                           tblptru	equ	0xFF8
 10834                           tblptrh	equ	0xFF7
 10835                           tblptrl	equ	0xFF6
 10836                           tablat	equ	0xFF5
 10837                           prodh	equ	0xFF4
 10838                           prodl	equ	0xFF3
 10839                           intcon	equ	0xFF2
 10840                           postinc0	equ	0xFEE
 10841                           wreg	equ	0xFE8
 10842                           indf1	equ	0xFE7
 10843                           postinc1	equ	0xFE6
 10844                           postdec1	equ	0xFE5
 10845                           fsr1h	equ	0xFE2
 10846                           fsr1l	equ	0xFE1
 10847                           indf2	equ	0xFDF
 10848                           postinc2	equ	0xFDE
 10849                           postdec2	equ	0xFDD
 10850                           plusw2	equ	0xFDB
 10851                           fsr2h	equ	0xFDA
 10852                           fsr2l	equ	0xFD9
 10853                           status	equ	0xFD8
 10854                           
 10855 ;; *************** function ___lwmod *****************
 10856 ;; Defined at:
 10857 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwmod.c"
 10858 ;; Parameters:    Size  Location     Type
 10859 ;;  dividend        2    6[COMRAM] unsigned int 
 10860 ;;  divisor         2    8[COMRAM] unsigned int 
 10861 ;; Auto vars:     Size  Location     Type
 10862 ;;  counter         1   10[COMRAM] unsigned char 
 10863 ;; Return value:  Size  Location     Type
 10864 ;;                  2    6[COMRAM] unsigned int 
 10865 ;; Registers used:
 10866 ;;		wreg, status,2, status,0
 10867 ;; Tracked objects:
 10868 ;;		On entry : 0/1
 10869 ;;		On exit  : 0/0
 10870 ;;		Unchanged: 0/0
 10871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10872 ;;      Params:         4       0       0       0       0       0       0
 10873 ;;      Locals:         1       0       0       0       0       0       0
 10874 ;;      Temps:          0       0       0       0       0       0       0
 10875 ;;      Totals:         5       0       0       0       0       0       0
 10876 ;;Total ram usage:        5 bytes
 10877 ;; Hardware stack levels used:    1
 10878 ;; Hardware stack levels required when called:    2
 10879 ;; This function calls:
 10880 ;;		Nothing
 10881 ;; This function is called by:
 10882 ;;		_isleap
 10883 ;; This function uses a non-reentrant model
 10884 ;;
 10885                           
 10886                           	psect	text56
 10887  002B00                     __ptext56:
 10888                           	opt stack 0
 10889  002B00                     ___lwmod:
 10890                           	opt stack 23
 10891                           
 10892                           ;incstack = 0
 10893  002B00  FFFF               	dw	65535
 10894  002B02  5009               	movf	___lwmod@divisor,w,c
 10895  002B04  100A               	iorwf	___lwmod@divisor+1,w,c
 10896  002B06  E01A               	bz	l1393
 10897  002B08  0E01               	movlw	1
 10898  002B0A  6E0B               	movwf	___lwmod@counter,c
 10899  002B0C  D005               	goto	l5830
 10900  002B0E                     l5828:
 10901  002B0E  FFFF               	dw	65535	; assembler added errata NOP
 10902  002B10  90D8               	bcf	status,0,c
 10903  002B12  3609               	rlcf	___lwmod@divisor,f,c
 10904  002B14  360A               	rlcf	___lwmod@divisor+1,f,c
 10905  002B16  2A0B               	incf	___lwmod@counter,f,c
 10906  002B18                     l5830:
 10907  002B18  FFFF               	dw	65535	; assembler added errata NOP
 10908  002B1A  AE0A               	btfss	___lwmod@divisor+1,7,c
 10909  002B1C  D7F8               	goto	l5828
 10910  002B1E                     l5832:
 10911  002B1E  FFFF               	dw	65535	; assembler added errata NOP
 10912  002B20  5009               	movf	___lwmod@divisor,w,c
 10913  002B22  5C07               	subwf	___lwmod@dividend,w,c
 10914  002B24  500A               	movf	___lwmod@divisor+1,w,c
 10915  002B26  5808               	subwfb	___lwmod@dividend+1,w,c
 10916  002B28  E304               	bnc	l5836
 10917  002B2A  5009               	movf	___lwmod@divisor,w,c
 10918  002B2C  5E07               	subwf	___lwmod@dividend,f,c
 10919  002B2E  500A               	movf	___lwmod@divisor+1,w,c
 10920  002B30  5A08               	subwfb	___lwmod@dividend+1,f,c
 10921  002B32                     l5836:
 10922  002B32  90D8               	bcf	status,0,c
 10923  002B34  320A               	rrcf	___lwmod@divisor+1,f,c
 10924  002B36  3209               	rrcf	___lwmod@divisor,f,c
 10925  002B38  2E0B               	decfsz	___lwmod@counter,f,c
 10926  002B3A  D7F1               	goto	l5832
 10927  002B3C                     l1393:
 10928  002B3C  C007  F007         	movff	___lwmod@dividend,?___lwmod
 10929  002B40  C008  F008         	movff	___lwmod@dividend+1,?___lwmod+1
 10930  002B44  0012               	return		;funcret
 10931  002B46  FFFF               	dw	65535	; errata NOP
 10932  002B48                     __end_of___lwmod:
 10933                           	opt stack 0
 10934                           tblptru	equ	0xFF8
 10935                           tblptrh	equ	0xFF7
 10936                           tblptrl	equ	0xFF6
 10937                           tablat	equ	0xFF5
 10938                           prodh	equ	0xFF4
 10939                           prodl	equ	0xFF3
 10940                           intcon	equ	0xFF2
 10941                           postinc0	equ	0xFEE
 10942                           wreg	equ	0xFE8
 10943                           indf1	equ	0xFE7
 10944                           postinc1	equ	0xFE6
 10945                           postdec1	equ	0xFE5
 10946                           fsr1h	equ	0xFE2
 10947                           fsr1l	equ	0xFE1
 10948                           indf2	equ	0xFDF
 10949                           postinc2	equ	0xFDE
 10950                           postdec2	equ	0xFDD
 10951                           plusw2	equ	0xFDB
 10952                           fsr2h	equ	0xFDA
 10953                           fsr2l	equ	0xFD9
 10954                           status	equ	0xFD8
 10955                           
 10956 ;; *************** function _SetTime *****************
 10957 ;; Defined at:
 10958 ;;		line 169 in file "user.c"
 10959 ;; Parameters:    Size  Location     Type
 10960 ;;  newTime         1    wreg     PTR long 
 10961 ;;		 -> ModbusProcess_FC100@newRawTime(4), 
 10962 ;; Auto vars:     Size  Location     Type
 10963 ;;  newTime         1    6[COMRAM] PTR long 
 10964 ;;		 -> ModbusProcess_FC100@newRawTime(4), 
 10965 ;; Return value:  Size  Location     Type
 10966 ;;                  1    wreg      void 
 10967 ;; Registers used:
 10968 ;;		wreg, fsr2l, fsr2h, status,2
 10969 ;; Tracked objects:
 10970 ;;		On entry : 0/1
 10971 ;;		On exit  : 0/0
 10972 ;;		Unchanged: 0/0
 10973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10974 ;;      Params:         0       0       0       0       0       0       0
 10975 ;;      Locals:         1       0       0       0       0       0       0
 10976 ;;      Temps:          0       0       0       0       0       0       0
 10977 ;;      Totals:         1       0       0       0       0       0       0
 10978 ;;Total ram usage:        1 bytes
 10979 ;; Hardware stack levels used:    1
 10980 ;; Hardware stack levels required when called:    2
 10981 ;; This function calls:
 10982 ;;		Nothing
 10983 ;; This function is called by:
 10984 ;;		_ModbusProcess_FC100
 10985 ;; This function uses a non-reentrant model
 10986 ;;
 10987                           
 10988                           	psect	text57
 10989  002F20                     __ptext57:
 10990                           	opt stack 0
 10991  002F20                     _SetTime:
 10992                           	opt stack 26
 10993                           
 10994                           ;incstack = 0
 10995  002F20  FFFF               	dw	65535
 10996                           
 10997                           ;SetTime@newTime stored from wreg
 10998  002F22  6E07               	movwf	SetTime@newTime,c
 10999                           
 11000                           ;user.c: 171: currentTime = *newTime;
 11001  002F24  5007               	movf	SetTime@newTime,w,c
 11002  002F26  6ED9               	movwf	fsr2l,c
 11003  002F28  6ADA               	clrf	fsr2h,c
 11004  002F2A  CFDE F0E4          	movff	postinc2,_currentTime
 11005  002F2E  CFDE F0E5          	movff	postinc2,_currentTime+1
 11006  002F32  CFDE F0E6          	movff	postinc2,_currentTime+2
 11007  002F36  CFDE F0E7          	movff	postinc2,_currentTime+3
 11008  002F3A  0012               	return		;funcret
 11009  002F3C  FFFF               	dw	65535	; errata NOP
 11010  002F3E                     __end_of_SetTime:
 11011                           	opt stack 0
 11012                           tblptru	equ	0xFF8
 11013                           tblptrh	equ	0xFF7
 11014                           tblptrl	equ	0xFF6
 11015                           tablat	equ	0xFF5
 11016                           prodh	equ	0xFF4
 11017                           prodl	equ	0xFF3
 11018                           intcon	equ	0xFF2
 11019                           postinc0	equ	0xFEE
 11020                           wreg	equ	0xFE8
 11021                           indf1	equ	0xFE7
 11022                           postinc1	equ	0xFE6
 11023                           postdec1	equ	0xFE5
 11024                           fsr1h	equ	0xFE2
 11025                           fsr1l	equ	0xFE1
 11026                           indf2	equ	0xFDF
 11027                           postinc2	equ	0xFDE
 11028                           postdec2	equ	0xFDD
 11029                           plusw2	equ	0xFDB
 11030                           fsr2h	equ	0xFDA
 11031                           fsr2l	equ	0xFD9
 11032                           status	equ	0xFD8
 11033                           
 11034 ;; *************** function _SetHourMin *****************
 11035 ;; Defined at:
 11036 ;;		line 277 in file "interrupts.c"
 11037 ;; Parameters:    Size  Location     Type
 11038 ;;  newHour         2   10[COMRAM] PTR unsigned char 
 11039 ;;		 -> _au8Buffer(140), 
 11040 ;;  newMin          2   12[COMRAM] PTR unsigned char 
 11041 ;;		 -> _au8Buffer(140), 
 11042 ;;  sec             2   14[COMRAM] PTR unsigned char 
 11043 ;;		 -> _au8Buffer(140), 
 11044 ;; Auto vars:     Size  Location     Type
 11045 ;;  secToNext6Se    1   29[COMRAM] unsigned char 
 11046 ;;  tmpSec          1   28[COMRAM] unsigned char 
 11047 ;; Return value:  Size  Location     Type
 11048 ;;                  1    wreg      void 
 11049 ;; Registers used:
 11050 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11051 ;; Tracked objects:
 11052 ;;		On entry : E/0
 11053 ;;		On exit  : 0/0
 11054 ;;		Unchanged: 0/0
 11055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11056 ;;      Params:         6       0       0       0       0       0       0
 11057 ;;      Locals:         2       0       0       0       0       0       0
 11058 ;;      Temps:         12       0       0       0       0       0       0
 11059 ;;      Totals:        20       0       0       0       0       0       0
 11060 ;;Total ram usage:       20 bytes
 11061 ;; Hardware stack levels used:    1
 11062 ;; Hardware stack levels required when called:    3
 11063 ;; This function calls:
 11064 ;;		___lbdiv
 11065 ;;		___lbmod
 11066 ;; This function is called by:
 11067 ;;		_ModbusProcess_FC100
 11068 ;; This function uses a non-reentrant model
 11069 ;;
 11070                           
 11071                           	psect	text58
 11072  0019AE                     __ptext58:
 11073                           	opt stack 0
 11074  0019AE                     _SetHourMin:
 11075                           	opt stack 25
 11076                           
 11077                           ;incstack = 0
 11078  0019AE  FFFF               	dw	65535
 11079                           
 11080                           ;interrupts.c: 279: T0CONbits.TMR0ON = 0;
 11081  0019B0  9ED5               	bcf	4053,7,c	;volatile
 11082                           
 11083                           ;interrupts.c: 281: globalHours = *newHour;
 11084  0019B2  C00B  FFD9         	movff	SetHourMin@newHour,fsr2l
 11085  0019B6  C00C  FFDA         	movff	SetHourMin@newHour+1,fsr2h
 11086  0019BA  50DF               	movf	indf2,w,c
 11087  0019BC  6E72               	movwf	_globalHours,c	;volatile
 11088                           
 11089                           ;interrupts.c: 282: globalMinutes = *newMin;
 11090  0019BE  C00D  FFD9         	movff	SetHourMin@newMin,fsr2l
 11091  0019C2  C00E  FFDA         	movff	SetHourMin@newMin+1,fsr2h
 11092  0019C6  50DF               	movf	indf2,w,c
 11093  0019C8  6E71               	movwf	_globalMinutes,c	;volatile
 11094                           
 11095                           ;interrupts.c: 283: _totalMinutesFromDayStart = globalHours * 60 + globalMinutes;
 11096  0019CA  5072               	movf	_globalHours,w,c	;volatile
 11097  0019CC  0D3C               	mullw	60
 11098  0019CE  5071               	movf	_globalMinutes,w,c	;volatile
 11099  0019D0  24F3               	addwf	prodl,w,c
 11100  0019D2  0100               	movlb	0	; () banked
 11101  0019D4  6FCD               	movwf	__totalMinutesFromDayStart& (0+255),b	;volatile
 11102  0019D6  0E00               	movlw	0
 11103  0019D8  20F4               	addwfc	prodh,w,c
 11104  0019DA  6FCE               	movwf	(__totalMinutesFromDayStart+1)& (0+255),b	;volatile
 11105                           
 11106                           ; BSR set to: 0
 11107                           ;interrupts.c: 285: uint8_t tmpSec = *sec;
 11108  0019DC  C00F  FFD9         	movff	SetHourMin@sec,fsr2l
 11109  0019E0  C010  FFDA         	movff	SetHourMin@sec+1,fsr2h
 11110  0019E4  50DF               	movf	indf2,w,c
 11111  0019E6  6E1D               	movwf	SetHourMin@tmpSec,c
 11112                           
 11113                           ; BSR set to: 0
 11114                           ;interrupts.c: 286: _6sCounter = tmpSec / 6;
 11115  0019E8  0E06               	movlw	6
 11116  0019EA  6E07               	movwf	___lbdiv@divisor,c
 11117  0019EC  501D               	movf	SetHourMin@tmpSec,w,c
 11118  0019EE  EC2E  F016         	call	___lbdiv
 11119  0019F2  0100               	movlb	0	; () banked
 11120  0019F4  6FD2               	movwf	__6sCounter& (0+255),b	;volatile
 11121                           
 11122                           ; BSR set to: 0
 11123                           ;interrupts.c: 287: uint8_t secToNext6Sec = 6 - (tmpSec % 6);
 11124  0019F6  0E06               	movlw	6
 11125  0019F8  6E07               	movwf	___lbmod@divisor,c
 11126  0019FA  501D               	movf	SetHourMin@tmpSec,w,c
 11127  0019FC  ECF7  F016         	call	___lbmod
 11128  001A00  6E11               	movwf	??_SetHourMin& (0+255),c
 11129  001A02  5011               	movf	??_SetHourMin,w,c
 11130  001A04  0806               	sublw	6
 11131  001A06  6E1E               	movwf	SetHourMin@secToNext6Sec,c
 11132                           
 11133                           ;interrupts.c: 288: ((void)(TMR0H=((0x10000 - (10000000L/4 / 256 + -1) * secToNext6Sec)>
      +                          >8),TMR0L=((0x10000 - (10000000L/4 / 256 + -1) * secToNext6Sec)&0xFF)));
 11134  001A08  C01E  F011         	movff	SetHourMin@secToNext6Sec,??_SetHourMin
 11135  001A0C  6A12               	clrf	(??_SetHourMin+1)& (0+255),c
 11136  001A0E  6A13               	clrf	(??_SetHourMin+2)& (0+255),c
 11137  001A10  6A14               	clrf	(??_SetHourMin+3)& (0+255),c
 11138  001A12  0EDC               	movlw	220
 11139  001A14  0211               	mulwf	??_SetHourMin& (0+255),c
 11140  001A16  CFF3 F015          	movff	prodl,??_SetHourMin+4
 11141  001A1A  CFF4 F016          	movff	prodh,??_SetHourMin+5
 11142  001A1E  6A17               	clrf	(??_SetHourMin+6)& (0+255),c
 11143  001A20  6A18               	clrf	(??_SetHourMin+7)& (0+255),c
 11144  001A22  0212               	mulwf	(??_SetHourMin+1)& (0+255),c
 11145  001A24  50F3               	movf	prodl,w,c
 11146  001A26  2616               	addwf	(??_SetHourMin+5)& (0+255),f,c
 11147  001A28  50F4               	movf	prodh,w,c
 11148  001A2A  2217               	addwfc	(??_SetHourMin+6)& (0+255),f,c
 11149  001A2C  0E00               	movlw	0
 11150  001A2E  2218               	addwfc	(??_SetHourMin+7)& (0+255),f,c
 11151  001A30  0ED9               	movlw	217
 11152  001A32  0211               	mulwf	??_SetHourMin& (0+255),c
 11153  001A34  50F3               	movf	prodl,w,c
 11154  001A36  2616               	addwf	(??_SetHourMin+5)& (0+255),f,c
 11155  001A38  50F4               	movf	prodh,w,c
 11156  001A3A  2217               	addwfc	(??_SetHourMin+6)& (0+255),f,c
 11157  001A3C  0E00               	movlw	0
 11158  001A3E  2218               	addwfc	(??_SetHourMin+7)& (0+255),f,c
 11159  001A40  0EDC               	movlw	220
 11160  001A42  0213               	mulwf	(??_SetHourMin+2)& (0+255),c
 11161  001A44  50F3               	movf	prodl,w,c
 11162  001A46  2617               	addwf	(??_SetHourMin+6)& (0+255),f,c
 11163  001A48  50F4               	movf	prodh,w,c
 11164  001A4A  2218               	addwfc	(??_SetHourMin+7)& (0+255),f,c
 11165  001A4C  0ED9               	movlw	217
 11166  001A4E  0212               	mulwf	(??_SetHourMin+1)& (0+255),c
 11167  001A50  50F3               	movf	prodl,w,c
 11168  001A52  2617               	addwf	(??_SetHourMin+6)& (0+255),f,c
 11169  001A54  50F4               	movf	prodh,w,c
 11170  001A56  2218               	addwfc	(??_SetHourMin+7)& (0+255),f,c
 11171  001A58  0EFF               	movlw	255
 11172  001A5A  0211               	mulwf	??_SetHourMin& (0+255),c
 11173  001A5C  50F3               	movf	prodl,w,c
 11174  001A5E  2617               	addwf	(??_SetHourMin+6)& (0+255),f,c
 11175  001A60  50F4               	movf	prodh,w,c
 11176  001A62  2218               	addwfc	(??_SetHourMin+7)& (0+255),f,c
 11177  001A64  0EDC               	movlw	220
 11178  001A66  0214               	mulwf	(??_SetHourMin+3)& (0+255),c
 11179  001A68  50F3               	movf	prodl,w,c
 11180  001A6A  2618               	addwf	(??_SetHourMin+7)& (0+255),f,c
 11181  001A6C  0ED9               	movlw	217
 11182  001A6E  0213               	mulwf	(??_SetHourMin+2)& (0+255),c
 11183  001A70  50F3               	movf	prodl,w,c
 11184  001A72  2618               	addwf	(??_SetHourMin+7)& (0+255),f,c
 11185  001A74  0EFF               	movlw	255
 11186  001A76  0212               	mulwf	(??_SetHourMin+1)& (0+255),c
 11187  001A78  50F3               	movf	prodl,w,c
 11188  001A7A  2618               	addwf	(??_SetHourMin+7)& (0+255),f,c
 11189  001A7C  0EFF               	movlw	255
 11190  001A7E  0211               	mulwf	??_SetHourMin& (0+255),c
 11191  001A80  50F3               	movf	prodl,w,c
 11192  001A82  2618               	addwf	(??_SetHourMin+7)& (0+255),f,c
 11193  001A84  0E00               	movlw	0
 11194  001A86  2415               	addwf	??_SetHourMin+4,w,c
 11195  001A88  6E19               	movwf	(??_SetHourMin+8)& (0+255),c
 11196  001A8A  0E00               	movlw	0
 11197  001A8C  2016               	addwfc	??_SetHourMin+5,w,c
 11198  001A8E  6E1A               	movwf	(??_SetHourMin+9)& (0+255),c
 11199  001A90  0E01               	movlw	1
 11200  001A92  2017               	addwfc	??_SetHourMin+6,w,c
 11201  001A94  6E1B               	movwf	(??_SetHourMin+10)& (0+255),c
 11202  001A96  0E00               	movlw	0
 11203  001A98  2018               	addwfc	??_SetHourMin+7,w,c
 11204  001A9A  6E1C               	movwf	(??_SetHourMin+11)& (0+255),c
 11205  001A9C  C01A  F019         	movff	??_SetHourMin+9,??_SetHourMin+8
 11206  001AA0  C01B  F01A         	movff	??_SetHourMin+10,??_SetHourMin+9
 11207  001AA4  C01C  F01B         	movff	??_SetHourMin+11,??_SetHourMin+10
 11208  001AA8  6A1C               	clrf	??_SetHourMin+11,c
 11209  001AAA  BE1B               	btfsc	??_SetHourMin+10,7,c
 11210  001AAC  681C               	setf	??_SetHourMin+11,c
 11211  001AAE  5019               	movf	??_SetHourMin+8,w,c
 11212  001AB0  6ED7               	movwf	4055,c	;volatile
 11213  001AB2  501E               	movf	SetHourMin@secToNext6Sec,w,c
 11214  001AB4  0DDC               	mullw	220
 11215  001AB6  CFF3 FFD6          	movff	prodl,4054	;volatile
 11216                           
 11217                           ;interrupts.c: 290: T0CONbits.TMR0ON = 1;
 11218  001ABA  8ED5               	bsf	4053,7,c	;volatile
 11219  001ABC  0012               	return		;funcret
 11220  001ABE  FFFF               	dw	65535	; errata NOP
 11221  001AC0                     __end_of_SetHourMin:
 11222                           	opt stack 0
 11223                           tblptru	equ	0xFF8
 11224                           tblptrh	equ	0xFF7
 11225                           tblptrl	equ	0xFF6
 11226                           tablat	equ	0xFF5
 11227                           prodh	equ	0xFF4
 11228                           prodl	equ	0xFF3
 11229                           intcon	equ	0xFF2
 11230                           postinc0	equ	0xFEE
 11231                           wreg	equ	0xFE8
 11232                           indf1	equ	0xFE7
 11233                           postinc1	equ	0xFE6
 11234                           postdec1	equ	0xFE5
 11235                           fsr1h	equ	0xFE2
 11236                           fsr1l	equ	0xFE1
 11237                           indf2	equ	0xFDF
 11238                           postinc2	equ	0xFDE
 11239                           postdec2	equ	0xFDD
 11240                           plusw2	equ	0xFDB
 11241                           fsr2h	equ	0xFDA
 11242                           fsr2l	equ	0xFD9
 11243                           status	equ	0xFD8
 11244                           
 11245 ;; *************** function ___lbmod *****************
 11246 ;; Defined at:
 11247 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lbmod.c"
 11248 ;; Parameters:    Size  Location     Type
 11249 ;;  dividend        1    wreg     unsigned char 
 11250 ;;  divisor         1    6[COMRAM] unsigned char 
 11251 ;; Auto vars:     Size  Location     Type
 11252 ;;  dividend        1    7[COMRAM] unsigned char 
 11253 ;;  rem             1    9[COMRAM] unsigned char 
 11254 ;;  counter         1    8[COMRAM] unsigned char 
 11255 ;; Return value:  Size  Location     Type
 11256 ;;                  1    wreg      unsigned char 
 11257 ;; Registers used:
 11258 ;;		wreg, status,2, status,0
 11259 ;; Tracked objects:
 11260 ;;		On entry : F/0
 11261 ;;		On exit  : 0/0
 11262 ;;		Unchanged: 0/0
 11263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11264 ;;      Params:         1       0       0       0       0       0       0
 11265 ;;      Locals:         3       0       0       0       0       0       0
 11266 ;;      Temps:          0       0       0       0       0       0       0
 11267 ;;      Totals:         4       0       0       0       0       0       0
 11268 ;;Total ram usage:        4 bytes
 11269 ;; Hardware stack levels used:    1
 11270 ;; Hardware stack levels required when called:    2
 11271 ;; This function calls:
 11272 ;;		Nothing
 11273 ;; This function is called by:
 11274 ;;		_SetHourMin
 11275 ;; This function uses a non-reentrant model
 11276 ;;
 11277                           
 11278                           	psect	text59
 11279  002DEE                     __ptext59:
 11280                           	opt stack 0
 11281  002DEE                     ___lbmod:
 11282                           	opt stack 25
 11283                           
 11284                           ;incstack = 0
 11285  002DEE  FFFF               	dw	65535
 11286                           
 11287                           ;___lbmod@dividend stored from wreg
 11288  002DF0  6E08               	movwf	___lbmod@dividend,c
 11289  002DF2  0E08               	movlw	8
 11290  002DF4  6E09               	movwf	___lbmod@counter,c
 11291  002DF6  6A0A               	clrf	___lbmod@rem,c
 11292  002DF8                     l6134:
 11293  002DF8  FFFF               	dw	65535	; assembler added errata NOP
 11294  002DFA  90D8               	bcf	status,0,c
 11295  002DFC  3408               	rlcf	___lbmod@dividend,w,c
 11296  002DFE  340A               	rlcf	___lbmod@rem,w,c
 11297  002E00  6E0A               	movwf	___lbmod@rem,c
 11298  002E02  90D8               	bcf	status,0,c
 11299  002E04  3608               	rlcf	___lbmod@dividend,f,c
 11300  002E06  5007               	movf	___lbmod@divisor,w,c
 11301  002E08  5C0A               	subwf	___lbmod@rem,w,c
 11302  002E0A  E302               	bnc	l6142
 11303  002E0C  5007               	movf	___lbmod@divisor,w,c
 11304  002E0E  5E0A               	subwf	___lbmod@rem,f,c
 11305  002E10                     l6142:
 11306  002E10  2E09               	decfsz	___lbmod@counter,f,c
 11307  002E12  D7F2               	goto	l6134
 11308  002E14  500A               	movf	___lbmod@rem,w,c
 11309  002E16  0012               	return		;funcret
 11310  002E18  FFFF               	dw	65535	; errata NOP
 11311  002E1A                     __end_of___lbmod:
 11312                           	opt stack 0
 11313                           tblptru	equ	0xFF8
 11314                           tblptrh	equ	0xFF7
 11315                           tblptrl	equ	0xFF6
 11316                           tablat	equ	0xFF5
 11317                           prodh	equ	0xFF4
 11318                           prodl	equ	0xFF3
 11319                           intcon	equ	0xFF2
 11320                           postinc0	equ	0xFEE
 11321                           wreg	equ	0xFE8
 11322                           indf1	equ	0xFE7
 11323                           postinc1	equ	0xFE6
 11324                           postdec1	equ	0xFE5
 11325                           fsr1h	equ	0xFE2
 11326                           fsr1l	equ	0xFE1
 11327                           indf2	equ	0xFDF
 11328                           postinc2	equ	0xFDE
 11329                           postdec2	equ	0xFDD
 11330                           plusw2	equ	0xFDB
 11331                           fsr2h	equ	0xFDA
 11332                           fsr2l	equ	0xFD9
 11333                           status	equ	0xFD8
 11334                           
 11335 ;; *************** function ___lbdiv *****************
 11336 ;; Defined at:
 11337 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lbdiv.c"
 11338 ;; Parameters:    Size  Location     Type
 11339 ;;  dividend        1    wreg     unsigned char 
 11340 ;;  divisor         1    6[COMRAM] unsigned char 
 11341 ;; Auto vars:     Size  Location     Type
 11342 ;;  dividend        1    7[COMRAM] unsigned char 
 11343 ;;  quotient        1    9[COMRAM] unsigned char 
 11344 ;;  counter         1    8[COMRAM] unsigned char 
 11345 ;; Return value:  Size  Location     Type
 11346 ;;                  1    wreg      unsigned char 
 11347 ;; Registers used:
 11348 ;;		wreg, status,2, status,0
 11349 ;; Tracked objects:
 11350 ;;		On entry : F/0
 11351 ;;		On exit  : 0/0
 11352 ;;		Unchanged: 0/0
 11353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11354 ;;      Params:         1       0       0       0       0       0       0
 11355 ;;      Locals:         3       0       0       0       0       0       0
 11356 ;;      Temps:          0       0       0       0       0       0       0
 11357 ;;      Totals:         4       0       0       0       0       0       0
 11358 ;;Total ram usage:        4 bytes
 11359 ;; Hardware stack levels used:    1
 11360 ;; Hardware stack levels required when called:    2
 11361 ;; This function calls:
 11362 ;;		Nothing
 11363 ;; This function is called by:
 11364 ;;		_SetHourMin
 11365 ;; This function uses a non-reentrant model
 11366 ;;
 11367                           
 11368                           	psect	text60
 11369  002C5C                     __ptext60:
 11370                           	opt stack 0
 11371  002C5C                     ___lbdiv:
 11372                           	opt stack 25
 11373                           
 11374                           ;incstack = 0
 11375  002C5C  FFFF               	dw	65535
 11376                           
 11377                           ;___lbdiv@dividend stored from wreg
 11378  002C5E  6E08               	movwf	___lbdiv@dividend,c
 11379  002C60  6A0A               	clrf	___lbdiv@quotient,c
 11380  002C62  5007               	movf	___lbdiv@divisor,w,c
 11381  002C64  E017               	bz	l6126
 11382  002C66  0E01               	movlw	1
 11383  002C68  6E09               	movwf	___lbdiv@counter,c
 11384  002C6A  D004               	goto	l6114
 11385  002C6C                     l6110:
 11386  002C6C  FFFF               	dw	65535	; assembler added errata NOP
 11387  002C6E  90D8               	bcf	status,0,c
 11388  002C70  3607               	rlcf	___lbdiv@divisor,f,c
 11389  002C72  2A09               	incf	___lbdiv@counter,f,c
 11390  002C74                     l6114:
 11391  002C74  FFFF               	dw	65535	; assembler added errata NOP
 11392  002C76  AE07               	btfss	___lbdiv@divisor,7,c
 11393  002C78  D7F9               	goto	l6110
 11394  002C7A                     l6116:
 11395  002C7A  FFFF               	dw	65535	; assembler added errata NOP
 11396  002C7C  90D8               	bcf	status,0,c
 11397  002C7E  360A               	rlcf	___lbdiv@quotient,f,c
 11398  002C80  5007               	movf	___lbdiv@divisor,w,c
 11399  002C82  5C08               	subwf	___lbdiv@dividend,w,c
 11400  002C84  E303               	bnc	l6122
 11401  002C86  5007               	movf	___lbdiv@divisor,w,c
 11402  002C88  5E08               	subwf	___lbdiv@dividend,f,c
 11403  002C8A  800A               	bsf	___lbdiv@quotient,0,c
 11404  002C8C                     l6122:
 11405  002C8C  90D8               	bcf	status,0,c
 11406  002C8E  3207               	rrcf	___lbdiv@divisor,f,c
 11407  002C90  2E09               	decfsz	___lbdiv@counter,f,c
 11408  002C92  D7F3               	goto	l6116
 11409  002C94                     l6126:
 11410  002C94  500A               	movf	___lbdiv@quotient,w,c
 11411  002C96  0012               	return		;funcret
 11412  002C98  FFFF               	dw	65535	; errata NOP
 11413  002C9A                     __end_of___lbdiv:
 11414                           	opt stack 0
 11415                           tblptru	equ	0xFF8
 11416                           tblptrh	equ	0xFF7
 11417                           tblptrl	equ	0xFF6
 11418                           tablat	equ	0xFF5
 11419                           prodh	equ	0xFF4
 11420                           prodl	equ	0xFF3
 11421                           intcon	equ	0xFF2
 11422                           postinc0	equ	0xFEE
 11423                           wreg	equ	0xFE8
 11424                           indf1	equ	0xFE7
 11425                           postinc1	equ	0xFE6
 11426                           postdec1	equ	0xFE5
 11427                           fsr1h	equ	0xFE2
 11428                           fsr1l	equ	0xFE1
 11429                           indf2	equ	0xFDF
 11430                           postinc2	equ	0xFDE
 11431                           postdec2	equ	0xFDD
 11432                           plusw2	equ	0xFDB
 11433                           fsr2h	equ	0xFDA
 11434                           fsr2l	equ	0xFD9
 11435                           status	equ	0xFD8
 11436                           
 11437 ;; *************** function _ModbusSetExceptionStatusBit *****************
 11438 ;; Defined at:
 11439 ;;		line 232 in file "ModbusRtu.c"
 11440 ;; Parameters:    Size  Location     Type
 11441 ;;  bitNum          1    wreg     unsigned char 
 11442 ;;  value           1    6[COMRAM] unsigned char 
 11443 ;; Auto vars:     Size  Location     Type
 11444 ;;  bitNum          1    9[COMRAM] unsigned char 
 11445 ;; Return value:  Size  Location     Type
 11446 ;;                  1    wreg      void 
 11447 ;; Registers used:
 11448 ;;		wreg, status,2, status,0
 11449 ;; Tracked objects:
 11450 ;;		On entry : 0/0
 11451 ;;		On exit  : F/0
 11452 ;;		Unchanged: 0/0
 11453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11454 ;;      Params:         1       0       0       0       0       0       0
 11455 ;;      Locals:         1       0       0       0       0       0       0
 11456 ;;      Temps:          2       0       0       0       0       0       0
 11457 ;;      Totals:         4       0       0       0       0       0       0
 11458 ;;Total ram usage:        4 bytes
 11459 ;; Hardware stack levels used:    1
 11460 ;; Hardware stack levels required when called:    2
 11461 ;; This function calls:
 11462 ;;		Nothing
 11463 ;; This function is called by:
 11464 ;;		_main
 11465 ;;		_CommandSetLed
 11466 ;;		_CommandSetStatusLed
 11467 ;;		_ProcessUserCommands
 11468 ;;		_io_poll
 11469 ;;		_ModbusPoll
 11470 ;;		_ModbusProcess_FC100
 11471 ;; This function uses a non-reentrant model
 11472 ;;
 11473                           
 11474                           	psect	text61
 11475  002A68                     __ptext61:
 11476                           	opt stack 0
 11477  002A68                     _ModbusSetExceptionStatusBit:
 11478                           	opt stack 26
 11479                           
 11480                           ;incstack = 0
 11481  002A68  FFFF               	dw	65535
 11482                           
 11483                           ;ModbusSetExceptionStatusBit@bitNum stored from wreg
 11484  002A6A  6E0A               	movwf	ModbusSetExceptionStatusBit@bitNum,c
 11485                           
 11486                           ;ModbusRtu.c: 234: (value ? ((_exceptionStatus) |= ((unsigned short)1 << (bitNum))) : ((
      +                          _exceptionStatus) &= ~((unsigned short)1 << (bitNum))));
 11487  002A6C  5007               	movf	ModbusSetExceptionStatusBit@value,w,c
 11488  002A6E  E010               	bz	l6046
 11489  002A70  C00A  F008         	movff	ModbusSetExceptionStatusBit@bitNum,??_ModbusSetExceptionStatusBit
 11490  002A74  0E01               	movlw	1
 11491  002A76  6E09               	movwf	(??_ModbusSetExceptionStatusBit+1)& (0+255),c
 11492  002A78  2A08               	incf	??_ModbusSetExceptionStatusBit,f,c
 11493  002A7A  D003               	goto	u5144
 11494  002A7C                     u5145:
 11495  002A7C  FFFF               	dw	65535	; assembler added errata NOP
 11496  002A7E  90D8               	bcf	status,0,c
 11497  002A80  3609               	rlcf	??_ModbusSetExceptionStatusBit+1,f,c
 11498  002A82                     u5144:
 11499  002A82  FFFF               	dw	65535	; assembler added errata NOP
 11500  002A84  2E08               	decfsz	??_ModbusSetExceptionStatusBit,f,c
 11501  002A86  D7FA               	goto	u5145
 11502  002A88  5009               	movf	??_ModbusSetExceptionStatusBit+1,w,c
 11503  002A8A  0100               	movlb	0	; () banked
 11504  002A8C  13D6               	iorwf	__exceptionStatus& (0+255),f,b
 11505  002A8E  D00F               	goto	l763
 11506  002A90                     l6046:
 11507  002A90  C00A  F008         	movff	ModbusSetExceptionStatusBit@bitNum,??_ModbusSetExceptionStatusBit
 11508  002A94  0E01               	movlw	1
 11509  002A96  6E09               	movwf	(??_ModbusSetExceptionStatusBit+1)& (0+255),c
 11510  002A98  2A08               	incf	??_ModbusSetExceptionStatusBit,f,c
 11511  002A9A  D003               	goto	u5154
 11512  002A9C                     u5155:
 11513  002A9C  FFFF               	dw	65535	; assembler added errata NOP
 11514  002A9E  90D8               	bcf	status,0,c
 11515  002AA0  3609               	rlcf	??_ModbusSetExceptionStatusBit+1,f,c
 11516  002AA2                     u5154:
 11517  002AA2  FFFF               	dw	65535	; assembler added errata NOP
 11518  002AA4  2E08               	decfsz	??_ModbusSetExceptionStatusBit,f,c
 11519  002AA6  D7FA               	goto	u5155
 11520  002AA8  1C09               	comf	??_ModbusSetExceptionStatusBit+1,w,c
 11521  002AAA  0100               	movlb	0	; () banked
 11522  002AAC  17D6               	andwf	__exceptionStatus& (0+255),f,b
 11523  002AAE                     l763:
 11524  002AAE  FFFF               	dw	65535	; assembler added errata NOP
 11525                           
 11526                           ; BSR set to: 0
 11527  002AB0  0012               	return		;funcret
 11528  002AB2  FFFF               	dw	65535	; errata NOP
 11529  002AB4                     __end_of_ModbusSetExceptionStatusBit:
 11530                           	opt stack 0
 11531                           tblptru	equ	0xFF8
 11532                           tblptrh	equ	0xFF7
 11533                           tblptrl	equ	0xFF6
 11534                           tablat	equ	0xFF5
 11535                           prodh	equ	0xFF4
 11536                           prodl	equ	0xFF3
 11537                           intcon	equ	0xFF2
 11538                           postinc0	equ	0xFEE
 11539                           wreg	equ	0xFE8
 11540                           indf1	equ	0xFE7
 11541                           postinc1	equ	0xFE6
 11542                           postdec1	equ	0xFE5
 11543                           fsr1h	equ	0xFE2
 11544                           fsr1l	equ	0xFE1
 11545                           indf2	equ	0xFDF
 11546                           postinc2	equ	0xFDE
 11547                           postdec2	equ	0xFDD
 11548                           plusw2	equ	0xFDB
 11549                           fsr2h	equ	0xFDA
 11550                           fsr2l	equ	0xFD9
 11551                           status	equ	0xFD8
 11552                           
 11553 ;; *************** function _ModbusProcess_FC1 *****************
 11554 ;; Defined at:
 11555 ;;		line 926 in file "ModbusRtu.c"
 11556 ;; Parameters:    Size  Location     Type
 11557 ;;  regs            2   21[COMRAM] unsigned short 
 11558 ;; Auto vars:     Size  Location     Type
 11559 ;;  u16Coilno       2   36[COMRAM] unsigned short 
 11560 ;;  u16currentCo    2   33[COMRAM] unsigned short 
 11561 ;;  u16StartCoil    2   31[COMRAM] unsigned short 
 11562 ;;  u16coil         2   26[COMRAM] unsigned short 
 11563 ;;  u8bitsno        1   35[COMRAM] unsigned char 
 11564 ;;  u8bytesno       1   30[COMRAM] unsigned char 
 11565 ;;  u8CopyBuffer    1   29[COMRAM] unsigned char 
 11566 ;;  u8currentBit    1   28[COMRAM] unsigned char 
 11567 ;; Return value:  Size  Location     Type
 11568 ;;                  1    wreg      unsigned char 
 11569 ;; Registers used:
 11570 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11571 ;; Tracked objects:
 11572 ;;		On entry : 0/1
 11573 ;;		On exit  : 0/0
 11574 ;;		Unchanged: 0/0
 11575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11576 ;;      Params:         2       0       0       0       0       0       0
 11577 ;;      Locals:        12       0       0       0       0       0       0
 11578 ;;      Temps:          3       0       0       0       0       0       0
 11579 ;;      Totals:        17       0       0       0       0       0       0
 11580 ;;Total ram usage:       17 bytes
 11581 ;; Hardware stack levels used:    1
 11582 ;; Hardware stack levels required when called:    4
 11583 ;; This function calls:
 11584 ;;		_ModbusSendTxBuffer
 11585 ;; This function is called by:
 11586 ;;		_ModbusPoll
 11587 ;; This function uses a non-reentrant model
 11588 ;;
 11589                           
 11590                           	psect	text62
 11591  001648                     __ptext62:
 11592                           	opt stack 0
 11593  001648                     _ModbusProcess_FC1:
 11594                           	opt stack 25
 11595                           
 11596                           ; BSR set to: 0
 11597                           ;incstack = 0
 11598  001648  FFFF               	dw	65535
 11599                           
 11600                           ;ModbusRtu.c: 929: uint8_t u8currentBit, u8bytesno, u8bitsno;
 11601                           ;ModbusRtu.c: 930: uint8_t u8CopyBufferSize;
 11602                           ;ModbusRtu.c: 931: uint16_t u16currentCoil, u16coil;
 11603                           ;ModbusRtu.c: 934: uint16_t u16StartCoil = (((uint16_t)_au8Buffer[ ADD_HI ]<<8)|_au8Buff
      +                          er[ ADD_LO ]);
 11604  00164A  0101               	movlb	1	; () banked
 11605  00164C  5102               	movf	(__au8Buffer+2)& (0+255),w,b
 11606  00164E  6E18               	movwf	??_ModbusProcess_FC1& (0+255),c
 11607  001650  5103               	movf	(__au8Buffer+3)& (0+255),w,b
 11608  001652  6E20               	movwf	ModbusProcess_FC1@u16StartCoil,c
 11609  001654  C018  F021         	movff	??_ModbusProcess_FC1,ModbusProcess_FC1@u16StartCoil+1
 11610                           
 11611                           ; BSR set to: 1
 11612                           ;ModbusRtu.c: 935: _lastAddress = u16StartCoil;
 11613  001658  C020  F0C7         	movff	ModbusProcess_FC1@u16StartCoil,__lastAddress
 11614  00165C  C021  F0C8         	movff	ModbusProcess_FC1@u16StartCoil+1,__lastAddress+1
 11615                           
 11616                           ;ModbusRtu.c: 936: uint16_t u16Coilno = (((uint16_t)_au8Buffer[ NB_HI ]<<8)|_au8Buffer[ 
      +                          NB_LO ]);
 11617  001660  5104               	movf	(__au8Buffer+4)& (0+255),w,b
 11618  001662  6E18               	movwf	??_ModbusProcess_FC1& (0+255),c
 11619  001664  5105               	movf	(__au8Buffer+5)& (0+255),w,b
 11620  001666  6E25               	movwf	ModbusProcess_FC1@u16Coilno,c
 11621  001668  C018  F026         	movff	??_ModbusProcess_FC1,ModbusProcess_FC1@u16Coilno+1
 11622                           
 11623                           ; BSR set to: 1
 11624                           ;ModbusRtu.c: 937: _lastCount = u16Coilno;
 11625  00166C  C025  F0C9         	movff	ModbusProcess_FC1@u16Coilno,__lastCount
 11626  001670  C026  F0CA         	movff	ModbusProcess_FC1@u16Coilno+1,__lastCount+1
 11627                           
 11628                           ; BSR set to: 1
 11629                           ;ModbusRtu.c: 939: u8bytesno = (uint8_t) (u16Coilno / 8);
 11630  001674  C025  F018         	movff	ModbusProcess_FC1@u16Coilno,??_ModbusProcess_FC1
 11631  001678  C026  F019         	movff	ModbusProcess_FC1@u16Coilno+1,??_ModbusProcess_FC1+1
 11632  00167C  90D8               	bcf	status,0,c
 11633  00167E  3219               	rrcf	??_ModbusProcess_FC1+1,f,c
 11634  001680  3218               	rrcf	??_ModbusProcess_FC1,f,c
 11635  001682  90D8               	bcf	status,0,c
 11636  001684  3219               	rrcf	??_ModbusProcess_FC1+1,f,c
 11637  001686  3218               	rrcf	??_ModbusProcess_FC1,f,c
 11638  001688  90D8               	bcf	status,0,c
 11639  00168A  3219               	rrcf	??_ModbusProcess_FC1+1,f,c
 11640  00168C  3218               	rrcf	??_ModbusProcess_FC1,f,c
 11641  00168E  5018               	movf	??_ModbusProcess_FC1,w,c
 11642  001690  6E1F               	movwf	ModbusProcess_FC1@u8bytesno,c
 11643                           
 11644                           ; BSR set to: 1
 11645                           ;ModbusRtu.c: 940: if (u16Coilno % 8 != 0)
 11646  001692  C025  F018         	movff	ModbusProcess_FC1@u16Coilno,??_ModbusProcess_FC1
 11647  001696  0E07               	movlw	7
 11648  001698  1618               	andwf	??_ModbusProcess_FC1,f,c
 11649  00169A  E001               	bz	l6796
 11650                           
 11651                           ; BSR set to: 1
 11652                           ;ModbusRtu.c: 941: u8bytesno++;
 11653  00169C  2A1F               	incf	ModbusProcess_FC1@u8bytesno,f,c
 11654  00169E                     l6796:
 11655                           
 11656                           ; BSR set to: 1
 11657                           ;ModbusRtu.c: 942: _au8Buffer[ ADD_HI ] = u8bytesno;
 11658  00169E  C01F  F102         	movff	ModbusProcess_FC1@u8bytesno,__au8Buffer+2
 11659                           
 11660                           ; BSR set to: 1
 11661                           ;ModbusRtu.c: 943: _u8BufferSize = ADD_LO;
 11662  0016A2  0E03               	movlw	3
 11663  0016A4  6E6E               	movwf	__u8BufferSize,c
 11664                           
 11665                           ; BSR set to: 1
 11666                           ;ModbusRtu.c: 946: u8bitsno = 0;
 11667  0016A6  6A24               	clrf	ModbusProcess_FC1@u8bitsno,c
 11668                           
 11669                           ; BSR set to: 1
 11670                           ;ModbusRtu.c: 948: for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++
      +                          )
 11671  0016A8  6A22               	clrf	ModbusProcess_FC1@u16currentCoil,c
 11672  0016AA  6A23               	clrf	ModbusProcess_FC1@u16currentCoil+1,c
 11673  0016AC  D04F               	goto	l6822
 11674  0016AE                     l6804:
 11675                           
 11676                           ;ModbusRtu.c: 949: {
 11677                           ;ModbusRtu.c: 950: u16coil = u16StartCoil + u16currentCoil;
 11678  0016AE  5022               	movf	ModbusProcess_FC1@u16currentCoil,w,c
 11679  0016B0  2420               	addwf	ModbusProcess_FC1@u16StartCoil,w,c
 11680  0016B2  6E1B               	movwf	ModbusProcess_FC1@u16coil,c
 11681  0016B4  5023               	movf	ModbusProcess_FC1@u16currentCoil+1,w,c
 11682  0016B6  2021               	addwfc	ModbusProcess_FC1@u16StartCoil+1,w,c
 11683  0016B8  6E1C               	movwf	ModbusProcess_FC1@u16coil+1,c
 11684                           
 11685                           ;ModbusRtu.c: 952: u8currentBit = (uint8_t) u16coil;
 11686  0016BA  C01B  F01D         	movff	ModbusProcess_FC1@u16coil,ModbusProcess_FC1@u8currentBit
 11687                           
 11688                           ;ModbusRtu.c: 954: ((((regs) >> (u8currentBit)) & 0x01) ? ((_au8Buffer[ _u8BufferSize ])
      +                           |= ((unsigned short)1 << (u8bitsno))) : ((_au8Buffer[ _u8BufferSize ]) &= ~((unsigned s
      +                          hort)1 << (u8bitsno))));
 11689  0016BE  C01D  F018         	movff	ModbusProcess_FC1@u8currentBit,??_ModbusProcess_FC1
 11690  0016C2  C016  F019         	movff	ModbusProcess_FC1@regs,??_ModbusProcess_FC1+1
 11691  0016C6  C017  F01A         	movff	ModbusProcess_FC1@regs+1,??_ModbusProcess_FC1+2
 11692  0016CA  2A18               	incf	??_ModbusProcess_FC1,f,c
 11693  0016CC  D004               	goto	u5924
 11694  0016CE                     u5925:
 11695  0016CE  FFFF               	dw	65535	; assembler added errata NOP
 11696  0016D0  90D8               	bcf	status,0,c
 11697  0016D2  321A               	rrcf	??_ModbusProcess_FC1+2,f,c
 11698  0016D4  3219               	rrcf	??_ModbusProcess_FC1+1,f,c
 11699  0016D6                     u5924:
 11700  0016D6  FFFF               	dw	65535	; assembler added errata NOP
 11701  0016D8  2E18               	decfsz	??_ModbusProcess_FC1,f,c
 11702  0016DA  D7F9               	goto	u5925
 11703  0016DC  A019               	btfss	??_ModbusProcess_FC1+1,0,c
 11704  0016DE  D015               	goto	l6812
 11705  0016E0  C024  F018         	movff	ModbusProcess_FC1@u8bitsno,??_ModbusProcess_FC1
 11706  0016E4  0E01               	movlw	1
 11707  0016E6  6E19               	movwf	(??_ModbusProcess_FC1+1)& (0+255),c
 11708  0016E8  2A18               	incf	??_ModbusProcess_FC1,f,c
 11709  0016EA  D003               	goto	u5944
 11710  0016EC                     u5945:
 11711  0016EC  FFFF               	dw	65535	; assembler added errata NOP
 11712  0016EE  90D8               	bcf	status,0,c
 11713  0016F0  3619               	rlcf	??_ModbusProcess_FC1+1,f,c
 11714  0016F2                     u5944:
 11715  0016F2  FFFF               	dw	65535	; assembler added errata NOP
 11716  0016F4  2E18               	decfsz	??_ModbusProcess_FC1,f,c
 11717  0016F6  D7FA               	goto	u5945
 11718  0016F8  0E00               	movlw	low __au8Buffer
 11719  0016FA  246E               	addwf	__u8BufferSize,w,c
 11720  0016FC  6ED9               	movwf	fsr2l,c
 11721  0016FE  6ADA               	clrf	fsr2h,c
 11722  001700  0E01               	movlw	high __au8Buffer
 11723  001702  22DA               	addwfc	fsr2h,f,c
 11724  001704  5019               	movf	??_ModbusProcess_FC1+1,w,c
 11725  001706  12DF               	iorwf	indf2,f,c
 11726  001708  D017               	goto	l6814
 11727  00170A                     l6812:
 11728  00170A  FFFF               	dw	65535	; assembler added errata NOP
 11729  00170C  C024  F018         	movff	ModbusProcess_FC1@u8bitsno,??_ModbusProcess_FC1
 11730  001710  0E01               	movlw	1
 11731  001712  6E19               	movwf	(??_ModbusProcess_FC1+1)& (0+255),c
 11732  001714  2A18               	incf	??_ModbusProcess_FC1,f,c
 11733  001716  D003               	goto	u5954
 11734  001718                     u5955:
 11735  001718  FFFF               	dw	65535	; assembler added errata NOP
 11736  00171A  90D8               	bcf	status,0,c
 11737  00171C  3619               	rlcf	??_ModbusProcess_FC1+1,f,c
 11738  00171E                     u5954:
 11739  00171E  FFFF               	dw	65535	; assembler added errata NOP
 11740  001720  2E18               	decfsz	??_ModbusProcess_FC1,f,c
 11741  001722  D7FA               	goto	u5955
 11742  001724  1C19               	comf	??_ModbusProcess_FC1+1,w,c
 11743  001726  6E1A               	movwf	(??_ModbusProcess_FC1+2)& (0+255),c
 11744  001728  0E00               	movlw	low __au8Buffer
 11745  00172A  246E               	addwf	__u8BufferSize,w,c
 11746  00172C  6ED9               	movwf	fsr2l,c
 11747  00172E  6ADA               	clrf	fsr2h,c
 11748  001730  0E01               	movlw	high __au8Buffer
 11749  001732  22DA               	addwfc	fsr2h,f,c
 11750  001734  501A               	movf	??_ModbusProcess_FC1+2,w,c
 11751  001736  16DF               	andwf	indf2,f,c
 11752  001738                     l6814:
 11753  001738  FFFF               	dw	65535	; assembler added errata NOP
 11754                           
 11755                           ;ModbusRtu.c: 958: u8bitsno++;
 11756  00173A  2A24               	incf	ModbusProcess_FC1@u8bitsno,f,c
 11757                           
 11758                           ;ModbusRtu.c: 960: if (u8bitsno > 7)
 11759  00173C  0E07               	movlw	7
 11760  00173E  6424               	cpfsgt	ModbusProcess_FC1@u8bitsno,c
 11761  001740  D002               	goto	l885
 11762                           
 11763                           ;ModbusRtu.c: 961: {
 11764                           ;ModbusRtu.c: 962: u8bitsno = 0;
 11765  001742  6A24               	clrf	ModbusProcess_FC1@u8bitsno,c
 11766                           
 11767                           ;ModbusRtu.c: 963: _u8BufferSize++;
 11768  001744  2A6E               	incf	__u8BufferSize,f,c
 11769  001746                     l885:
 11770  001746  FFFF               	dw	65535	; assembler added errata NOP
 11771  001748  4A22               	infsnz	ModbusProcess_FC1@u16currentCoil,f,c
 11772  00174A  2A23               	incf	ModbusProcess_FC1@u16currentCoil+1,f,c
 11773  00174C                     l6822:
 11774  00174C  FFFF               	dw	65535	; assembler added errata NOP
 11775  00174E  5025               	movf	ModbusProcess_FC1@u16Coilno,w,c
 11776  001750  5C22               	subwf	ModbusProcess_FC1@u16currentCoil,w,c
 11777  001752  5026               	movf	ModbusProcess_FC1@u16Coilno+1,w,c
 11778  001754  5823               	subwfb	ModbusProcess_FC1@u16currentCoil+1,w,c
 11779  001756  E3AB               	bnc	l6804
 11780                           
 11781                           ;ModbusRtu.c: 964: }
 11782                           ;ModbusRtu.c: 965: }
 11783                           ;ModbusRtu.c: 968: if (u16Coilno % 8 != 0)
 11784  001758  C025  F018         	movff	ModbusProcess_FC1@u16Coilno,??_ModbusProcess_FC1
 11785  00175C  0E07               	movlw	7
 11786  00175E  1618               	andwf	??_ModbusProcess_FC1,f,c
 11787  001760  E001               	bz	l6828
 11788                           
 11789                           ;ModbusRtu.c: 969: _u8BufferSize++;
 11790  001762  2A6E               	incf	__u8BufferSize,f,c
 11791  001764                     l6828:
 11792                           
 11793                           ;ModbusRtu.c: 970: u8CopyBufferSize = _u8BufferSize + 2;
 11794  001764  506E               	movf	__u8BufferSize,w,c
 11795  001766  0F02               	addlw	2
 11796  001768  6E1E               	movwf	ModbusProcess_FC1@u8CopyBufferSize,c
 11797                           
 11798                           ;ModbusRtu.c: 971: ModbusSendTxBuffer();
 11799  00176A  EC5A  F015         	call	_ModbusSendTxBuffer	;wreg free
 11800                           
 11801                           ;ModbusRtu.c: 972: return u8CopyBufferSize;
 11802  00176E  501E               	movf	ModbusProcess_FC1@u8CopyBufferSize,w,c
 11803  001770  0012               	return		;funcret
 11804  001772  FFFF               	dw	65535	; errata NOP
 11805  001774                     __end_of_ModbusProcess_FC1:
 11806                           	opt stack 0
 11807                           tblptru	equ	0xFF8
 11808                           tblptrh	equ	0xFF7
 11809                           tblptrl	equ	0xFF6
 11810                           tablat	equ	0xFF5
 11811                           prodh	equ	0xFF4
 11812                           prodl	equ	0xFF3
 11813                           intcon	equ	0xFF2
 11814                           postinc0	equ	0xFEE
 11815                           wreg	equ	0xFE8
 11816                           indf1	equ	0xFE7
 11817                           postinc1	equ	0xFE6
 11818                           postdec1	equ	0xFE5
 11819                           fsr1h	equ	0xFE2
 11820                           fsr1l	equ	0xFE1
 11821                           indf2	equ	0xFDF
 11822                           postinc2	equ	0xFDE
 11823                           postdec2	equ	0xFDD
 11824                           plusw2	equ	0xFDB
 11825                           fsr2h	equ	0xFDA
 11826                           fsr2l	equ	0xFD9
 11827                           status	equ	0xFD8
 11828                           
 11829 ;; *************** function _ModbusSendTxBuffer *****************
 11830 ;; Defined at:
 11831 ;;		line 634 in file "ModbusRtu.c"
 11832 ;; Parameters:    Size  Location     Type
 11833 ;;		None
 11834 ;; Auto vars:     Size  Location     Type
 11835 ;;  u16crc          2   19[COMRAM] unsigned short 
 11836 ;; Return value:  Size  Location     Type
 11837 ;;                  1    wreg      void 
 11838 ;; Registers used:
 11839 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11840 ;; Tracked objects:
 11841 ;;		On entry : 0/1
 11842 ;;		On exit  : 0/0
 11843 ;;		Unchanged: 0/0
 11844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11845 ;;      Params:         0       0       0       0       0       0       0
 11846 ;;      Locals:         2       0       0       0       0       0       0
 11847 ;;      Temps:          0       0       0       0       0       0       0
 11848 ;;      Totals:         2       0       0       0       0       0       0
 11849 ;;Total ram usage:        2 bytes
 11850 ;; Hardware stack levels used:    1
 11851 ;; Hardware stack levels required when called:    3
 11852 ;; This function calls:
 11853 ;;		_ModbusCalcCRC
 11854 ;;		_PortWrite
 11855 ;;		_millis
 11856 ;; This function is called by:
 11857 ;;		_ModbusPoll
 11858 ;;		_ModbusProcess_FC1
 11859 ;;		_ModbusProcess_FC3
 11860 ;;		_ModbusProcess_FC5
 11861 ;;		_ModbusProcess_FC6
 11862 ;;		_ModbusProcess_FC7
 11863 ;;		_ModbusProcess_FC15
 11864 ;;		_ModbusProcess_FC16
 11865 ;;		_ModbusProcess_FC17
 11866 ;;		_ModbusProcess_FC21
 11867 ;;		_ModbusProcess_FC43
 11868 ;;		_ModbusProcess_FC100
 11869 ;;		_ModbusProcess_FC101
 11870 ;;		_ModbusProcess_FC102
 11871 ;; This function uses a non-reentrant model
 11872 ;;
 11873                           
 11874                           	psect	text63
 11875  002AB4                     __ptext63:
 11876                           	opt stack 0
 11877  002AB4                     _ModbusSendTxBuffer:
 11878                           	opt stack 26
 11879                           
 11880                           ;incstack = 0
 11881  002AB4  FFFF               	dw	65535
 11882                           
 11883                           ;ModbusRtu.c: 639: uint16_t u16crc = ModbusCalcCRC(_u8BufferSize);
 11884  002AB6  506E               	movf	__u8BufferSize,w,c
 11885  002AB8  EC92  F013         	call	_ModbusCalcCRC
 11886  002ABC  C007  F014         	movff	?_ModbusCalcCRC,ModbusSendTxBuffer@u16crc
 11887  002AC0  C008  F015         	movff	?_ModbusCalcCRC+1,ModbusSendTxBuffer@u16crc+1
 11888                           
 11889                           ;ModbusRtu.c: 640: _au8Buffer[ _u8BufferSize ] = u16crc >> 8;
 11890  002AC4  0E00               	movlw	low __au8Buffer
 11891  002AC6  246E               	addwf	__u8BufferSize,w,c
 11892  002AC8  6ED9               	movwf	fsr2l,c
 11893  002ACA  6ADA               	clrf	fsr2h,c
 11894  002ACC  0E01               	movlw	high __au8Buffer
 11895  002ACE  22DA               	addwfc	fsr2h,f,c
 11896  002AD0  C015  FFDF         	movff	ModbusSendTxBuffer@u16crc+1,indf2
 11897                           
 11898                           ;ModbusRtu.c: 641: _u8BufferSize++;
 11899  002AD4  2A6E               	incf	__u8BufferSize,f,c
 11900                           
 11901                           ;ModbusRtu.c: 642: _au8Buffer[ _u8BufferSize ] = u16crc & 0x00ff;
 11902  002AD6  0E00               	movlw	low __au8Buffer
 11903  002AD8  246E               	addwf	__u8BufferSize,w,c
 11904  002ADA  6ED9               	movwf	fsr2l,c
 11905  002ADC  6ADA               	clrf	fsr2h,c
 11906  002ADE  0E01               	movlw	high __au8Buffer
 11907  002AE0  22DA               	addwfc	fsr2h,f,c
 11908  002AE2  C014  FFDF         	movff	ModbusSendTxBuffer@u16crc,indf2
 11909                           
 11910                           ;ModbusRtu.c: 643: _u8BufferSize++;
 11911  002AE6  2A6E               	incf	__u8BufferSize,f,c
 11912                           
 11913                           ;ModbusRtu.c: 647: PortWrite(_au8Buffer, _u8BufferSize);
 11914  002AE8  0E00               	movlw	low __au8Buffer
 11915  002AEA  6E07               	movwf	PortWrite@buf,c
 11916  002AEC  0E01               	movlw	high __au8Buffer
 11917  002AEE  6E08               	movwf	PortWrite@buf+1,c
 11918  002AF0  C06E  F009         	movff	__u8BufferSize,PortWrite@buflen
 11919  002AF4  EC4D  F016         	call	_PortWrite	;wreg free
 11920                           
 11921                           ;ModbusRtu.c: 653: _u8BufferSize = 0;
 11922  002AF8  6A6E               	clrf	__u8BufferSize,c
 11923                           
 11924                           ;ModbusRtu.c: 659: _u16OutCnt++;
 11925  002AFA  EF22  F017         	goto	_millis	;wreg free
 11926  002AFE  FFFF               	dw	65535	; errata NOP
 11927  002B00                     __end_of_ModbusSendTxBuffer:
 11928                           	opt stack 0
 11929                           tblptru	equ	0xFF8
 11930                           tblptrh	equ	0xFF7
 11931                           tblptrl	equ	0xFF6
 11932                           tablat	equ	0xFF5
 11933                           prodh	equ	0xFF4
 11934                           prodl	equ	0xFF3
 11935                           intcon	equ	0xFF2
 11936                           postinc0	equ	0xFEE
 11937                           wreg	equ	0xFE8
 11938                           indf1	equ	0xFE7
 11939                           postinc1	equ	0xFE6
 11940                           postdec1	equ	0xFE5
 11941                           fsr1h	equ	0xFE2
 11942                           fsr1l	equ	0xFE1
 11943                           indf2	equ	0xFDF
 11944                           postinc2	equ	0xFDE
 11945                           postdec2	equ	0xFDD
 11946                           plusw2	equ	0xFDB
 11947                           fsr2h	equ	0xFDA
 11948                           fsr2l	equ	0xFD9
 11949                           status	equ	0xFD8
 11950                           
 11951 ;; *************** function _millis *****************
 11952 ;; Defined at:
 11953 ;;		line 247 in file "interrupts.c"
 11954 ;; Parameters:    Size  Location     Type
 11955 ;;		None
 11956 ;; Auto vars:     Size  Location     Type
 11957 ;;  ret             4   10[COMRAM] unsigned long 
 11958 ;; Return value:  Size  Location     Type
 11959 ;;                  4    6[COMRAM] unsigned long 
 11960 ;; Registers used:
 11961 ;;		None
 11962 ;; Tracked objects:
 11963 ;;		On entry : 0/0
 11964 ;;		On exit  : 0/0
 11965 ;;		Unchanged: 0/0
 11966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11967 ;;      Params:         4       0       0       0       0       0       0
 11968 ;;      Locals:         4       0       0       0       0       0       0
 11969 ;;      Temps:          0       0       0       0       0       0       0
 11970 ;;      Totals:         8       0       0       0       0       0       0
 11971 ;;Total ram usage:        8 bytes
 11972 ;; Hardware stack levels used:    1
 11973 ;; Hardware stack levels required when called:    2
 11974 ;; This function calls:
 11975 ;;		Nothing
 11976 ;; This function is called by:
 11977 ;;		_SoundPlayNextStep
 11978 ;;		_main
 11979 ;;		_ModbusPoll
 11980 ;;		_ModbusSendTxBuffer
 11981 ;; This function uses a non-reentrant model
 11982 ;;
 11983                           
 11984                           	psect	text64
 11985  002E44                     __ptext64:
 11986                           	opt stack 0
 11987  002E44                     _millis:
 11988                           	opt stack 28
 11989                           
 11990                           ;incstack = 0
 11991  002E44  FFFF               	dw	65535
 11992                           
 11993                           ;interrupts.c: 250: (INTCONbits.GIE = 0);
 11994  002E46  9EF2               	bcf	intcon,7,c	;volatile
 11995                           
 11996                           ;interrupts.c: 251: unsigned long ret = millisecondsFromStart;
 11997  002E48  C0BB  F00B         	movff	_millisecondsFromStart,millis@ret	;volatile
 11998  002E4C  C0BC  F00C         	movff	_millisecondsFromStart+1,millis@ret+1	;volatile
 11999  002E50  C0BD  F00D         	movff	_millisecondsFromStart+2,millis@ret+2	;volatile
 12000  002E54  C0BE  F00E         	movff	_millisecondsFromStart+3,millis@ret+3	;volatile
 12001                           
 12002                           ;interrupts.c: 252: (INTCONbits.GIE = 1);
 12003  002E58  8EF2               	bsf	intcon,7,c	;volatile
 12004                           
 12005                           ;interrupts.c: 253: return ret;
 12006  002E5A  C00B  F007         	movff	millis@ret,?_millis
 12007  002E5E  C00C  F008         	movff	millis@ret+1,?_millis+1
 12008  002E62  C00D  F009         	movff	millis@ret+2,?_millis+2
 12009  002E66  C00E  F00A         	movff	millis@ret+3,?_millis+3
 12010  002E6A  0012               	return		;funcret
 12011  002E6C  FFFF               	dw	65535	; errata NOP
 12012  002E6E                     __end_of_millis:
 12013                           	opt stack 0
 12014                           tblptru	equ	0xFF8
 12015                           tblptrh	equ	0xFF7
 12016                           tblptrl	equ	0xFF6
 12017                           tablat	equ	0xFF5
 12018                           prodh	equ	0xFF4
 12019                           prodl	equ	0xFF3
 12020                           intcon	equ	0xFF2
 12021                           postinc0	equ	0xFEE
 12022                           wreg	equ	0xFE8
 12023                           indf1	equ	0xFE7
 12024                           postinc1	equ	0xFE6
 12025                           postdec1	equ	0xFE5
 12026                           fsr1h	equ	0xFE2
 12027                           fsr1l	equ	0xFE1
 12028                           indf2	equ	0xFDF
 12029                           postinc2	equ	0xFDE
 12030                           postdec2	equ	0xFDD
 12031                           plusw2	equ	0xFDB
 12032                           fsr2h	equ	0xFDA
 12033                           fsr2l	equ	0xFD9
 12034                           status	equ	0xFD8
 12035                           
 12036 ;; *************** function _PortWrite *****************
 12037 ;; Defined at:
 12038 ;;		line 101 in file "interrupts.c"
 12039 ;; Parameters:    Size  Location     Type
 12040 ;;  buf             2    6[COMRAM] PTR unsigned char 
 12041 ;;		 -> _au8Buffer(140), 
 12042 ;;  buflen          1    8[COMRAM] unsigned char 
 12043 ;; Auto vars:     Size  Location     Type
 12044 ;;  i               1    9[COMRAM] unsigned char 
 12045 ;; Return value:  Size  Location     Type
 12046 ;;                  1    wreg      void 
 12047 ;; Registers used:
 12048 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12049 ;; Tracked objects:
 12050 ;;		On entry : 0/1
 12051 ;;		On exit  : 0/0
 12052 ;;		Unchanged: 0/0
 12053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12054 ;;      Params:         3       0       0       0       0       0       0
 12055 ;;      Locals:         1       0       0       0       0       0       0
 12056 ;;      Temps:          0       0       0       0       0       0       0
 12057 ;;      Totals:         4       0       0       0       0       0       0
 12058 ;;Total ram usage:        4 bytes
 12059 ;; Hardware stack levels used:    1
 12060 ;; Hardware stack levels required when called:    2
 12061 ;; This function calls:
 12062 ;;		Nothing
 12063 ;; This function is called by:
 12064 ;;		_ModbusSendTxBuffer
 12065 ;; This function uses a non-reentrant model
 12066 ;;
 12067                           
 12068                           	psect	text65
 12069  002C9A                     __ptext65:
 12070                           	opt stack 0
 12071  002C9A                     _PortWrite:
 12072                           	opt stack 26
 12073                           
 12074                           ;incstack = 0
 12075  002C9A  FFFF               	dw	65535
 12076                           
 12077                           ;interrupts.c: 103: LATCbits.LATC5 = 1;
 12078  002C9C  8A8B               	bsf	3979,5,c	;volatile
 12079                           
 12080                           ;interrupts.c: 104: _delay((unsigned long)((10)*(10000000L/4000000.0)));
 12081  002C9E  0E06               	movlw	6
 12082  002CA0                     u7297:
 12083  002CA0  FFFF               	dw	65535	; errata NOP
 12084  002CA2  2EE8               	decfsz	wreg,f,c
 12085  002CA4  D7FD               	goto	u7297
 12086  002CA6  F000               	nop	
 12087                           
 12088                           ;interrupts.c: 105: for(uint8_t i = 0; i < buflen; i++)
 12089  002CA8  6A0A               	clrf	PortWrite@i,c
 12090  002CAA  D00C               	goto	l5916
 12091  002CAC                     l74:
 12092  002CAC  FFFF               	dw	65535	; assembler added errata NOP
 12093  002CAE  A2AC               	btfss	4012,1,c	;volatile
 12094  002CB0  D7FD               	goto	l74
 12095                           
 12096                           ;interrupts.c: 108: TXREG = buf[i];
 12097  002CB2  500A               	movf	PortWrite@i,w,c
 12098  002CB4  2407               	addwf	PortWrite@buf,w,c
 12099  002CB6  6ED9               	movwf	fsr2l,c
 12100  002CB8  0E00               	movlw	0
 12101  002CBA  2008               	addwfc	PortWrite@buf+1,w,c
 12102  002CBC  6EDA               	movwf	fsr2h,c
 12103  002CBE  50DF               	movf	indf2,w,c
 12104  002CC0  6EAD               	movwf	4013,c	;volatile
 12105  002CC2  2A0A               	incf	PortWrite@i,f,c
 12106  002CC4                     l5916:
 12107  002CC4  FFFF               	dw	65535	; assembler added errata NOP
 12108  002CC6  5009               	movf	PortWrite@buflen,w,c
 12109  002CC8  5C0A               	subwf	PortWrite@i,w,c
 12110  002CCA  E3F0               	bnc	l74
 12111  002CCC                     l78:
 12112  002CCC  FFFF               	dw	65535	; assembler added errata NOP
 12113  002CCE  A2AC               	btfss	4012,1,c	;volatile
 12114  002CD0  D7FD               	goto	l78
 12115                           
 12116                           ;interrupts.c: 111: LATCbits.LATC5 = 0;
 12117  002CD2  9A8B               	bcf	3979,5,c	;volatile
 12118  002CD4  0012               	return		;funcret
 12119  002CD6  FFFF               	dw	65535	; errata NOP
 12120  002CD8                     __end_of_PortWrite:
 12121                           	opt stack 0
 12122                           tblptru	equ	0xFF8
 12123                           tblptrh	equ	0xFF7
 12124                           tblptrl	equ	0xFF6
 12125                           tablat	equ	0xFF5
 12126                           prodh	equ	0xFF4
 12127                           prodl	equ	0xFF3
 12128                           intcon	equ	0xFF2
 12129                           postinc0	equ	0xFEE
 12130                           wreg	equ	0xFE8
 12131                           indf1	equ	0xFE7
 12132                           postinc1	equ	0xFE6
 12133                           postdec1	equ	0xFE5
 12134                           fsr1h	equ	0xFE2
 12135                           fsr1l	equ	0xFE1
 12136                           indf2	equ	0xFDF
 12137                           postinc2	equ	0xFDE
 12138                           postdec2	equ	0xFDD
 12139                           plusw2	equ	0xFDB
 12140                           fsr2h	equ	0xFDA
 12141                           fsr2l	equ	0xFD9
 12142                           status	equ	0xFD8
 12143                           
 12144 ;; *************** function _ModbusCalcCRC *****************
 12145 ;; Defined at:
 12146 ;;		line 744 in file "ModbusRtu.c"
 12147 ;; Parameters:    Size  Location     Type
 12148 ;;  u8length        1    wreg     unsigned char 
 12149 ;; Auto vars:     Size  Location     Type
 12150 ;;  u8length        1   10[COMRAM] unsigned char 
 12151 ;;  j               1   16[COMRAM] unsigned char 
 12152 ;;  i               1   15[COMRAM] unsigned char 
 12153 ;;  temp            2   17[COMRAM] unsigned int 
 12154 ;;  flag            2   13[COMRAM] unsigned int 
 12155 ;;  temp2           2   11[COMRAM] unsigned int 
 12156 ;; Return value:  Size  Location     Type
 12157 ;;                  2    6[COMRAM] unsigned short 
 12158 ;; Registers used:
 12159 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12160 ;; Tracked objects:
 12161 ;;		On entry : 0/0
 12162 ;;		On exit  : 0/0
 12163 ;;		Unchanged: 0/0
 12164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12165 ;;      Params:         2       0       0       0       0       0       0
 12166 ;;      Locals:         9       0       0       0       0       0       0
 12167 ;;      Temps:          2       0       0       0       0       0       0
 12168 ;;      Totals:        13       0       0       0       0       0       0
 12169 ;;Total ram usage:       13 bytes
 12170 ;; Hardware stack levels used:    1
 12171 ;; Hardware stack levels required when called:    2
 12172 ;; This function calls:
 12173 ;;		Nothing
 12174 ;; This function is called by:
 12175 ;;		_ModbusSendTxBuffer
 12176 ;;		_ModbusValidateRequest
 12177 ;; This function uses a non-reentrant model
 12178 ;;
 12179                           
 12180                           	psect	text66
 12181  002724                     __ptext66:
 12182                           	opt stack 0
 12183  002724                     _ModbusCalcCRC:
 12184                           	opt stack 26
 12185                           
 12186                           ;incstack = 0
 12187  002724  FFFF               	dw	65535
 12188                           
 12189                           ;ModbusCalcCRC@u8length stored from wreg
 12190  002726  6E0B               	movwf	ModbusCalcCRC@u8length,c
 12191                           
 12192                           ;ModbusRtu.c: 746: unsigned int temp, temp2, flag;
 12193                           ;ModbusRtu.c: 747: temp = 0xFFFF;
 12194  002728  6812               	setf	ModbusCalcCRC@temp,c
 12195  00272A  6813               	setf	ModbusCalcCRC@temp+1,c
 12196                           
 12197                           ;ModbusRtu.c: 748: for (uint8_t i = 0; i < u8length; i++)
 12198  00272C  6A10               	clrf	ModbusCalcCRC@i,c
 12199  00272E  D01E               	goto	l6096
 12200  002730                     l6074:
 12201                           
 12202                           ;ModbusRtu.c: 749: {
 12203                           ;ModbusRtu.c: 750: temp = temp ^ _au8Buffer[i];
 12204  002730  0E00               	movlw	low __au8Buffer
 12205  002732  2410               	addwf	ModbusCalcCRC@i,w,c
 12206  002734  6ED9               	movwf	fsr2l,c
 12207  002736  6ADA               	clrf	fsr2h,c
 12208  002738  0E01               	movlw	high __au8Buffer
 12209  00273A  22DA               	addwfc	fsr2h,f,c
 12210  00273C  50DF               	movf	indf2,w,c
 12211  00273E  1A12               	xorwf	ModbusCalcCRC@temp,f,c
 12212                           
 12213                           ;ModbusRtu.c: 751: for (uint8_t j = 1; j <= 8; j++)
 12214  002740  0E01               	movlw	1
 12215  002742  6E11               	movwf	ModbusCalcCRC@j,c
 12216  002744                     l6082:
 12217  002744  FFFF               	dw	65535	; assembler added errata NOP
 12218                           
 12219                           ;ModbusRtu.c: 752: {
 12220                           ;ModbusRtu.c: 753: flag = temp & 0x0001;
 12221  002746  0E01               	movlw	1
 12222  002748  1412               	andwf	ModbusCalcCRC@temp,w,c
 12223  00274A  6E0E               	movwf	ModbusCalcCRC@flag,c
 12224  00274C  6A0F               	clrf	ModbusCalcCRC@flag+1,c
 12225                           
 12226                           ;ModbusRtu.c: 754: temp >>= 1;
 12227  00274E  90D8               	bcf	status,0,c
 12228  002750  3213               	rrcf	ModbusCalcCRC@temp+1,f,c
 12229  002752  3212               	rrcf	ModbusCalcCRC@temp,f,c
 12230                           
 12231                           ;ModbusRtu.c: 755: if (flag)
 12232  002754  500E               	movf	ModbusCalcCRC@flag,w,c
 12233  002756  100F               	iorwf	ModbusCalcCRC@flag+1,w,c
 12234  002758  E004               	bz	l6090
 12235                           
 12236                           ;ModbusRtu.c: 756: temp ^= 0xA001;
 12237  00275A  0E01               	movlw	1
 12238  00275C  1A12               	xorwf	ModbusCalcCRC@temp,f,c
 12239  00275E  0EA0               	movlw	160
 12240  002760  1A13               	xorwf	ModbusCalcCRC@temp+1,f,c
 12241  002762                     l6090:
 12242  002762  2A11               	incf	ModbusCalcCRC@j,f,c
 12243  002764  0E08               	movlw	8
 12244  002766  6411               	cpfsgt	ModbusCalcCRC@j,c
 12245  002768  D7ED               	goto	l6082
 12246  00276A  2A10               	incf	ModbusCalcCRC@i,f,c
 12247  00276C                     l6096:
 12248  00276C  FFFF               	dw	65535	; assembler added errata NOP
 12249  00276E  500B               	movf	ModbusCalcCRC@u8length,w,c
 12250  002770  5C10               	subwf	ModbusCalcCRC@i,w,c
 12251  002772  E3DE               	bnc	l6074
 12252                           
 12253                           ;ModbusRtu.c: 757: }
 12254                           ;ModbusRtu.c: 758: }
 12255                           ;ModbusRtu.c: 760: temp2 = temp >> 8;
 12256  002774  C013  F00C         	movff	ModbusCalcCRC@temp+1,ModbusCalcCRC@temp2
 12257  002778  6A0D               	clrf	ModbusCalcCRC@temp2+1,c
 12258                           
 12259                           ;ModbusRtu.c: 761: temp = (temp << 8) | temp2;
 12260  00277A  5012               	movf	ModbusCalcCRC@temp,w,c
 12261  00277C  6E0A               	movwf	(??_ModbusCalcCRC+1)& (0+255),c
 12262  00277E  6A09               	clrf	??_ModbusCalcCRC& (0+255),c
 12263  002780  500C               	movf	ModbusCalcCRC@temp2,w,c
 12264  002782  1009               	iorwf	??_ModbusCalcCRC,w,c
 12265  002784  6E12               	movwf	ModbusCalcCRC@temp,c
 12266  002786  500D               	movf	ModbusCalcCRC@temp2+1,w,c
 12267  002788  100A               	iorwf	??_ModbusCalcCRC+1,w,c
 12268  00278A  6E13               	movwf	ModbusCalcCRC@temp+1,c
 12269                           
 12270                           ;ModbusRtu.c: 765: return temp;
 12271  00278C  C012  F007         	movff	ModbusCalcCRC@temp,?_ModbusCalcCRC
 12272  002790  C013  F008         	movff	ModbusCalcCRC@temp+1,?_ModbusCalcCRC+1
 12273  002794  0012               	return		;funcret
 12274  002796  FFFF               	dw	65535	; errata NOP
 12275  002798                     __end_of_ModbusCalcCRC:
 12276                           	opt stack 0
 12277                           tblptru	equ	0xFF8
 12278                           tblptrh	equ	0xFF7
 12279                           tblptrl	equ	0xFF6
 12280                           tablat	equ	0xFF5
 12281                           prodh	equ	0xFF4
 12282                           prodl	equ	0xFF3
 12283                           intcon	equ	0xFF2
 12284                           postinc0	equ	0xFEE
 12285                           wreg	equ	0xFE8
 12286                           indf1	equ	0xFE7
 12287                           postinc1	equ	0xFE6
 12288                           postdec1	equ	0xFE5
 12289                           fsr1h	equ	0xFE2
 12290                           fsr1l	equ	0xFE1
 12291                           indf2	equ	0xFDF
 12292                           postinc2	equ	0xFDE
 12293                           postdec2	equ	0xFDD
 12294                           plusw2	equ	0xFDB
 12295                           fsr2h	equ	0xFDA
 12296                           fsr2l	equ	0xFD9
 12297                           status	equ	0xFD8
 12298                           
 12299 ;; *************** function _ModbusGetRxBufferHeader *****************
 12300 ;; Defined at:
 12301 ;;		line 577 in file "ModbusRtu.c"
 12302 ;; Parameters:    Size  Location     Type
 12303 ;;		None
 12304 ;; Auto vars:     Size  Location     Type
 12305 ;;  i               1    8[COMRAM] unsigned char 
 12306 ;; Return value:  Size  Location     Type
 12307 ;;                  1    wreg      unsigned char 
 12308 ;; Registers used:
 12309 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12310 ;; Tracked objects:
 12311 ;;		On entry : F/0
 12312 ;;		On exit  : F/0
 12313 ;;		Unchanged: 0/0
 12314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12315 ;;      Params:         0       0       0       0       0       0       0
 12316 ;;      Locals:         1       0       0       0       0       0       0
 12317 ;;      Temps:          1       0       0       0       0       0       0
 12318 ;;      Totals:         2       0       0       0       0       0       0
 12319 ;;Total ram usage:        2 bytes
 12320 ;; Hardware stack levels used:    1
 12321 ;; Hardware stack levels required when called:    3
 12322 ;; This function calls:
 12323 ;;		_PortAvailable
 12324 ;;		_PortRead
 12325 ;; This function is called by:
 12326 ;;		_ModbusPoll
 12327 ;; This function uses a non-reentrant model
 12328 ;;
 12329                           
 12330                           	psect	text67
 12331  002D14                     __ptext67:
 12332                           	opt stack 0
 12333  002D14                     _ModbusGetRxBufferHeader:
 12334                           	opt stack 26
 12335                           
 12336                           ;incstack = 0
 12337  002D14  FFFF               	dw	65535
 12338                           
 12339                           ; BSR set to: 0
 12340                           ;ModbusRtu.c: 579: _u8BufferSize = 0;
 12341  002D16  6A6E               	clrf	__u8BufferSize,c
 12342                           
 12343                           ;ModbusRtu.c: 580: for(uint8_t i = 0; i < 4; i++)
 12344  002D18  6A09               	clrf	ModbusGetRxBufferHeader@i,c
 12345  002D1A                     l6580:
 12346  002D1A  FFFF               	dw	65535	; assembler added errata NOP
 12347                           
 12348                           ; BSR set to: 0
 12349                           ;ModbusRtu.c: 581: {
 12350                           ;ModbusRtu.c: 582: if(!PortAvailable())
 12351  002D1C  EC20  F018         	call	_PortAvailable	;wreg free
 12352  002D20  0900               	iorlw	0
 12353  002D22  E102               	bnz	l6586
 12354                           
 12355                           ; BSR set to: 0
 12356                           ;ModbusRtu.c: 583: return ERR_EXCEPTION;
 12357  002D24  0EFB               	movlw	251
 12358  002D26  D011               	goto	l804
 12359  002D28                     l6586:
 12360                           
 12361                           ; BSR set to: 0
 12362                           ;ModbusRtu.c: 584: _au8Buffer[ _u8BufferSize ] = PortRead();
 12363  002D28  ECC3  F016         	call	_PortRead	;wreg free
 12364  002D2C  6E08               	movwf	??_ModbusGetRxBufferHeader& (0+255),c
 12365  002D2E  0E00               	movlw	low __au8Buffer
 12366  002D30  246E               	addwf	__u8BufferSize,w,c
 12367  002D32  6ED9               	movwf	fsr2l,c
 12368  002D34  6ADA               	clrf	fsr2h,c
 12369  002D36  0E01               	movlw	high __au8Buffer
 12370  002D38  22DA               	addwfc	fsr2h,f,c
 12371  002D3A  C008  FFDF         	movff	??_ModbusGetRxBufferHeader,indf2
 12372                           
 12373                           ; BSR set to: 0
 12374                           ;ModbusRtu.c: 585: _u8BufferSize++;
 12375  002D3E  2A6E               	incf	__u8BufferSize,f,c
 12376                           
 12377                           ; BSR set to: 0
 12378  002D40  2A09               	incf	ModbusGetRxBufferHeader@i,f,c
 12379                           
 12380                           ; BSR set to: 0
 12381  002D42  0E03               	movlw	3
 12382  002D44  6409               	cpfsgt	ModbusGetRxBufferHeader@i,c
 12383  002D46  D7E9               	goto	l6580
 12384                           
 12385                           ; BSR set to: 0
 12386                           ;ModbusRtu.c: 586: }
 12387                           ;ModbusRtu.c: 587: return _u8BufferSize;
 12388  002D48  506E               	movf	__u8BufferSize,w,c
 12389  002D4A                     l804:
 12390  002D4A  FFFF               	dw	65535	; assembler added errata NOP
 12391                           
 12392                           ; BSR set to: 0
 12393  002D4C  0012               	return		;funcret
 12394  002D4E  FFFF               	dw	65535	; errata NOP
 12395  002D50                     __end_of_ModbusGetRxBufferHeader:
 12396                           	opt stack 0
 12397                           tblptru	equ	0xFF8
 12398                           tblptrh	equ	0xFF7
 12399                           tblptrl	equ	0xFF6
 12400                           tablat	equ	0xFF5
 12401                           prodh	equ	0xFF4
 12402                           prodl	equ	0xFF3
 12403                           intcon	equ	0xFF2
 12404                           postinc0	equ	0xFEE
 12405                           wreg	equ	0xFE8
 12406                           indf1	equ	0xFE7
 12407                           postinc1	equ	0xFE6
 12408                           postdec1	equ	0xFE5
 12409                           fsr1h	equ	0xFE2
 12410                           fsr1l	equ	0xFE1
 12411                           indf2	equ	0xFDF
 12412                           postinc2	equ	0xFDE
 12413                           postdec2	equ	0xFDD
 12414                           plusw2	equ	0xFDB
 12415                           fsr2h	equ	0xFDA
 12416                           fsr2l	equ	0xFD9
 12417                           status	equ	0xFD8
 12418                           
 12419 ;; *************** function _ModbusGetRxBuffer *****************
 12420 ;; Defined at:
 12421 ;;		line 597 in file "ModbusRtu.c"
 12422 ;; Parameters:    Size  Location     Type
 12423 ;;		None
 12424 ;; Auto vars:     Size  Location     Type
 12425 ;;  bBuffOverflo    1    8[COMRAM] unsigned char 
 12426 ;; Return value:  Size  Location     Type
 12427 ;;                  1    wreg      unsigned char 
 12428 ;; Registers used:
 12429 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12430 ;; Tracked objects:
 12431 ;;		On entry : F/0
 12432 ;;		On exit  : F/0
 12433 ;;		Unchanged: 0/0
 12434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12435 ;;      Params:         0       0       0       0       0       0       0
 12436 ;;      Locals:         1       0       0       0       0       0       0
 12437 ;;      Temps:          1       0       0       0       0       0       0
 12438 ;;      Totals:         2       0       0       0       0       0       0
 12439 ;;Total ram usage:        2 bytes
 12440 ;; Hardware stack levels used:    1
 12441 ;; Hardware stack levels required when called:    3
 12442 ;; This function calls:
 12443 ;;		_PortAvailable
 12444 ;;		_PortRead
 12445 ;; This function is called by:
 12446 ;;		_ModbusPoll
 12447 ;; This function uses a non-reentrant model
 12448 ;;
 12449                           
 12450                           	psect	text68
 12451  002BD4                     __ptext68:
 12452                           	opt stack 0
 12453  002BD4                     _ModbusGetRxBuffer:
 12454                           	opt stack 26
 12455                           
 12456                           ; BSR set to: 0
 12457                           ;incstack = 0
 12458  002BD4  FFFF               	dw	65535
 12459                           
 12460                           ; BSR set to: 0
 12461                           ;ModbusRtu.c: 599: bool bBuffOverflow = 0;
 12462  002BD6  6A09               	clrf	ModbusGetRxBuffer@bBuffOverflow,c
 12463                           
 12464                           ; BSR set to: 0
 12465                           ;ModbusRtu.c: 604: _u8BufferSize = 4;
 12466  002BD8  0E04               	movlw	4
 12467  002BDA  6E6E               	movwf	__u8BufferSize,c
 12468                           
 12469                           ;ModbusRtu.c: 606: while (PortAvailable())
 12470  002BDC  D011               	goto	l6610
 12471  002BDE                     l6602:
 12472                           
 12473                           ; BSR set to: 0
 12474                           ;ModbusRtu.c: 607: {
 12475                           ;ModbusRtu.c: 608: _au8Buffer[ _u8BufferSize ] = PortRead();
 12476  002BDE  ECC3  F016         	call	_PortRead	;wreg free
 12477  002BE2  6E08               	movwf	??_ModbusGetRxBuffer& (0+255),c
 12478  002BE4  0E00               	movlw	low __au8Buffer
 12479  002BE6  246E               	addwf	__u8BufferSize,w,c
 12480  002BE8  6ED9               	movwf	fsr2l,c
 12481  002BEA  6ADA               	clrf	fsr2h,c
 12482  002BEC  0E01               	movlw	high __au8Buffer
 12483  002BEE  22DA               	addwfc	fsr2h,f,c
 12484  002BF0  C008  FFDF         	movff	??_ModbusGetRxBuffer,indf2
 12485                           
 12486                           ; BSR set to: 0
 12487                           ;ModbusRtu.c: 609: _u8BufferSize++;
 12488  002BF4  2A6E               	incf	__u8BufferSize,f,c
 12489                           
 12490                           ; BSR set to: 0
 12491                           ;ModbusRtu.c: 610: if (_u8BufferSize >= 140)
 12492  002BF6  0E8B               	movlw	139
 12493  002BF8  646E               	cpfsgt	__u8BufferSize,c
 12494  002BFA  D002               	goto	l6610
 12495                           
 12496                           ; BSR set to: 0
 12497                           ;ModbusRtu.c: 611: bBuffOverflow = 1;
 12498  002BFC  0E01               	movlw	1
 12499  002BFE  6E09               	movwf	ModbusGetRxBuffer@bBuffOverflow,c
 12500  002C00                     l6610:
 12501  002C00  FFFF               	dw	65535	; assembler added errata NOP
 12502                           
 12503                           ; BSR set to: 0
 12504  002C02  EC20  F018         	call	_PortAvailable	;wreg free
 12505  002C06  0900               	iorlw	0
 12506  002C08  E1EA               	bnz	l6602
 12507                           
 12508                           ; BSR set to: 0
 12509                           ;ModbusRtu.c: 615: {
 12510                           ;ModbusRtu.c: 616: _u16errCnt++;
 12511  002C0A  5009               	movf	ModbusGetRxBuffer@bBuffOverflow,w,c
 12512  002C0C  E002               	bz	l6618
 12513                           
 12514                           ; BSR set to: 0
 12515                           ;ModbusRtu.c: 617: return ERR_BUFF_OVERFLOW;
 12516  002C0E  0EFD               	movlw	253
 12517  002C10  D001               	goto	l812
 12518  002C12                     l6618:
 12519                           
 12520                           ; BSR set to: 0
 12521                           ;ModbusRtu.c: 618: }
 12522                           ;ModbusRtu.c: 619: return _u8BufferSize;
 12523  002C12  506E               	movf	__u8BufferSize,w,c
 12524  002C14                     l812:
 12525  002C14  FFFF               	dw	65535	; assembler added errata NOP
 12526                           
 12527                           ; BSR set to: 0
 12528  002C16  0012               	return		;funcret
 12529  002C18  FFFF               	dw	65535	; errata NOP
 12530  002C1A                     __end_of_ModbusGetRxBuffer:
 12531                           	opt stack 0
 12532                           tblptru	equ	0xFF8
 12533                           tblptrh	equ	0xFF7
 12534                           tblptrl	equ	0xFF6
 12535                           tablat	equ	0xFF5
 12536                           prodh	equ	0xFF4
 12537                           prodl	equ	0xFF3
 12538                           intcon	equ	0xFF2
 12539                           postinc0	equ	0xFEE
 12540                           wreg	equ	0xFE8
 12541                           indf1	equ	0xFE7
 12542                           postinc1	equ	0xFE6
 12543                           postdec1	equ	0xFE5
 12544                           fsr1h	equ	0xFE2
 12545                           fsr1l	equ	0xFE1
 12546                           indf2	equ	0xFDF
 12547                           postinc2	equ	0xFDE
 12548                           postdec2	equ	0xFDD
 12549                           plusw2	equ	0xFDB
 12550                           fsr2h	equ	0xFDA
 12551                           fsr2l	equ	0xFD9
 12552                           status	equ	0xFD8
 12553                           
 12554 ;; *************** function _PortRead *****************
 12555 ;; Defined at:
 12556 ;;		line 57 in file "interrupts.c"
 12557 ;; Parameters:    Size  Location     Type
 12558 ;;		None
 12559 ;; Auto vars:     Size  Location     Type
 12560 ;;  ret             1    6[COMRAM] unsigned char 
 12561 ;; Return value:  Size  Location     Type
 12562 ;;                  1    wreg      unsigned char 
 12563 ;; Registers used:
 12564 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12565 ;; Tracked objects:
 12566 ;;		On entry : F/0
 12567 ;;		On exit  : F/0
 12568 ;;		Unchanged: 0/0
 12569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12570 ;;      Params:         0       0       0       0       0       0       0
 12571 ;;      Locals:         1       0       0       0       0       0       0
 12572 ;;      Temps:          0       0       0       0       0       0       0
 12573 ;;      Totals:         1       0       0       0       0       0       0
 12574 ;;Total ram usage:        1 bytes
 12575 ;; Hardware stack levels used:    1
 12576 ;; Hardware stack levels required when called:    2
 12577 ;; This function calls:
 12578 ;;		Nothing
 12579 ;; This function is called by:
 12580 ;;		_ModbusGetRxBufferHeader
 12581 ;;		_ModbusGetRxBuffer
 12582 ;; This function uses a non-reentrant model
 12583 ;;
 12584                           
 12585                           	psect	text69
 12586  002D86                     __ptext69:
 12587                           	opt stack 0
 12588  002D86                     _PortRead:
 12589                           	opt stack 26
 12590                           
 12591                           ; BSR set to: 0
 12592                           ;incstack = 0
 12593  002D86  FFFF               	dw	65535
 12594                           
 12595                           ; BSR set to: 0
 12596                           ;interrupts.c: 59: (INTCONbits.GIE = 0);
 12597  002D88  9EF2               	bcf	intcon,7,c	;volatile
 12598                           
 12599                           ; BSR set to: 0
 12600                           ;interrupts.c: 60: if(UartBufferLen > 0)
 12601  002D8A  51D0               	movf	_UartBufferLen& (0+255),w,b	;volatile
 12602  002D8C  E012               	bz	l63
 12603                           
 12604                           ; BSR set to: 0
 12605                           ;interrupts.c: 61: {
 12606                           ;interrupts.c: 63: uint8_t ret = UartRingBuffer[UartBufferTail];
 12607  002D8E  0E00               	movlw	low _UartRingBuffer
 12608  002D90  25D1               	addwf	_UartBufferTail& (0+255),w,b	;volatile
 12609  002D92  6ED9               	movwf	fsr2l,c
 12610  002D94  6ADA               	clrf	fsr2h,c
 12611  002D96  0E02               	movlw	high _UartRingBuffer
 12612  002D98  22DA               	addwfc	fsr2h,f,c
 12613  002D9A  50DF               	movf	indf2,w,c
 12614  002D9C  6E07               	movwf	PortRead@ret,c
 12615                           
 12616                           ; BSR set to: 0
 12617                           ;interrupts.c: 64: UartBufferLen--;
 12618  002D9E  07D0               	decf	_UartBufferLen& (0+255),f,b	;volatile
 12619                           
 12620                           ; BSR set to: 0
 12621                           ;interrupts.c: 65: if(UartBufferTail == 256u - 1)
 12622  002DA0  29D1               	incf	_UartBufferTail& (0+255),w,b
 12623  002DA2  E102               	bnz	l6186
 12624                           
 12625                           ; BSR set to: 0
 12626                           ;interrupts.c: 66: UartBufferTail = 0;
 12627  002DA4  6BD1               	clrf	_UartBufferTail& (0+255),b	;volatile
 12628  002DA6  D001               	goto	l6188
 12629  002DA8                     l6186:
 12630                           
 12631                           ; BSR set to: 0
 12632                           ;interrupts.c: 67: else
 12633                           ;interrupts.c: 68: UartBufferTail++;
 12634  002DA8  2BD1               	incf	_UartBufferTail& (0+255),f,b	;volatile
 12635  002DAA                     l6188:
 12636  002DAA  FFFF               	dw	65535	; assembler added errata NOP
 12637                           
 12638                           ; BSR set to: 0
 12639                           ;interrupts.c: 69: (INTCONbits.GIE = 1);
 12640  002DAC  8EF2               	bsf	intcon,7,c	;volatile
 12641                           
 12642                           ; BSR set to: 0
 12643                           ;interrupts.c: 70: return ret;
 12644  002DAE  5007               	movf	PortRead@ret,w,c
 12645  002DB0  D002               	goto	l66
 12646  002DB2                     l63:
 12647                           
 12648                           ; BSR set to: 0
 12649                           ;interrupts.c: 71: }
 12650                           ;interrupts.c: 72: (INTCONbits.GIE = 1);
 12651  002DB2  8EF2               	bsf	intcon,7,c	;volatile
 12652                           
 12653                           ; BSR set to: 0
 12654                           ;interrupts.c: 73: return 0;
 12655  002DB4  0E00               	movlw	0
 12656  002DB6                     l66:
 12657  002DB6  FFFF               	dw	65535	; assembler added errata NOP
 12658                           
 12659                           ; BSR set to: 0
 12660  002DB8  0012               	return		;funcret
 12661  002DBA  FFFF               	dw	65535	; errata NOP
 12662  002DBC                     __end_of_PortRead:
 12663                           	opt stack 0
 12664                           tblptru	equ	0xFF8
 12665                           tblptrh	equ	0xFF7
 12666                           tblptrl	equ	0xFF6
 12667                           tablat	equ	0xFF5
 12668                           prodh	equ	0xFF4
 12669                           prodl	equ	0xFF3
 12670                           intcon	equ	0xFF2
 12671                           postinc0	equ	0xFEE
 12672                           wreg	equ	0xFE8
 12673                           indf1	equ	0xFE7
 12674                           postinc1	equ	0xFE6
 12675                           postdec1	equ	0xFE5
 12676                           fsr1h	equ	0xFE2
 12677                           fsr1l	equ	0xFE1
 12678                           indf2	equ	0xFDF
 12679                           postinc2	equ	0xFDE
 12680                           postdec2	equ	0xFDD
 12681                           plusw2	equ	0xFDB
 12682                           fsr2h	equ	0xFDA
 12683                           fsr2l	equ	0xFD9
 12684                           status	equ	0xFD8
 12685                           
 12686 ;; *************** function _PortAvailable *****************
 12687 ;; Defined at:
 12688 ;;		line 52 in file "interrupts.c"
 12689 ;; Parameters:    Size  Location     Type
 12690 ;;		None
 12691 ;; Auto vars:     Size  Location     Type
 12692 ;;		None
 12693 ;; Return value:  Size  Location     Type
 12694 ;;                  1    wreg      unsigned char 
 12695 ;; Registers used:
 12696 ;;		wreg, status,2
 12697 ;; Tracked objects:
 12698 ;;		On entry : F/0
 12699 ;;		On exit  : F/0
 12700 ;;		Unchanged: 0/0
 12701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12702 ;;      Params:         0       0       0       0       0       0       0
 12703 ;;      Locals:         0       0       0       0       0       0       0
 12704 ;;      Temps:          0       0       0       0       0       0       0
 12705 ;;      Totals:         0       0       0       0       0       0       0
 12706 ;;Total ram usage:        0 bytes
 12707 ;; Hardware stack levels used:    1
 12708 ;; Hardware stack levels required when called:    2
 12709 ;; This function calls:
 12710 ;;		Nothing
 12711 ;; This function is called by:
 12712 ;;		_ModbusPoll
 12713 ;;		_ModbusGetRxBufferHeader
 12714 ;;		_ModbusGetRxBuffer
 12715 ;; This function uses a non-reentrant model
 12716 ;;
 12717                           
 12718                           	psect	text70
 12719  003040                     __ptext70:
 12720                           	opt stack 0
 12721  003040                     _PortAvailable:
 12722                           	opt stack 27
 12723                           
 12724                           ; BSR set to: 0
 12725                           ;incstack = 0
 12726  003040  FFFF               	dw	65535
 12727                           
 12728                           ; BSR set to: 0
 12729                           ;interrupts.c: 54: return UartBufferLen;
 12730  003042  51D0               	movf	_UartBufferLen& (0+255),w,b	;volatile
 12731                           
 12732                           ; BSR set to: 0
 12733  003044  0012               	return		;funcret
 12734  003046  FFFF               	dw	65535	; errata NOP
 12735  003048                     __end_of_PortAvailable:
 12736                           	opt stack 0
 12737                           tblptru	equ	0xFF8
 12738                           tblptrh	equ	0xFF7
 12739                           tblptrl	equ	0xFF6
 12740                           tablat	equ	0xFF5
 12741                           prodh	equ	0xFF4
 12742                           prodl	equ	0xFF3
 12743                           intcon	equ	0xFF2
 12744                           postinc0	equ	0xFEE
 12745                           wreg	equ	0xFE8
 12746                           indf1	equ	0xFE7
 12747                           postinc1	equ	0xFE6
 12748                           postdec1	equ	0xFE5
 12749                           fsr1h	equ	0xFE2
 12750                           fsr1l	equ	0xFE1
 12751                           indf2	equ	0xFDF
 12752                           postinc2	equ	0xFDE
 12753                           postdec2	equ	0xFDD
 12754                           plusw2	equ	0xFDB
 12755                           fsr2h	equ	0xFDA
 12756                           fsr2l	equ	0xFD9
 12757                           status	equ	0xFD8
 12758                           
 12759 ;; *************** function _ModbusBuildException *****************
 12760 ;; Defined at:
 12761 ;;		line 896 in file "ModbusRtu.c"
 12762 ;; Parameters:    Size  Location     Type
 12763 ;;  u8exception     1    wreg     unsigned char 
 12764 ;; Auto vars:     Size  Location     Type
 12765 ;;  u8exception     1    6[COMRAM] unsigned char 
 12766 ;;  u8func          1    7[COMRAM] unsigned char 
 12767 ;; Return value:  Size  Location     Type
 12768 ;;                  1    wreg      void 
 12769 ;; Registers used:
 12770 ;;		wreg, status,2, status,0
 12771 ;; Tracked objects:
 12772 ;;		On entry : 0/0
 12773 ;;		On exit  : F/1
 12774 ;;		Unchanged: 0/0
 12775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12776 ;;      Params:         0       0       0       0       0       0       0
 12777 ;;      Locals:         2       0       0       0       0       0       0
 12778 ;;      Temps:          0       0       0       0       0       0       0
 12779 ;;      Totals:         2       0       0       0       0       0       0
 12780 ;;Total ram usage:        2 bytes
 12781 ;; Hardware stack levels used:    1
 12782 ;; Hardware stack levels required when called:    2
 12783 ;; This function calls:
 12784 ;;		Nothing
 12785 ;; This function is called by:
 12786 ;;		_ModbusPoll
 12787 ;; This function uses a non-reentrant model
 12788 ;;
 12789                           
 12790                           	psect	text71
 12791  002F00                     __ptext71:
 12792                           	opt stack 0
 12793  002F00                     _ModbusBuildException:
 12794                           	opt stack 27
 12795                           
 12796                           ; BSR set to: 0
 12797                           ;incstack = 0
 12798  002F00  FFFF               	dw	65535
 12799                           
 12800                           ;ModbusBuildException@u8exception stored from wreg
 12801  002F02  6E07               	movwf	ModbusBuildException@u8exception,c
 12802                           
 12803                           ;ModbusRtu.c: 898: uint8_t u8func = _au8Buffer[ FUNC ];
 12804  002F04  C101  F008         	movff	__au8Buffer+1,ModbusBuildException@u8func
 12805                           
 12806                           ;ModbusRtu.c: 900: _au8Buffer[ ID ] = _u8id;
 12807  002F08  C0E0  F100         	movff	__u8id,__au8Buffer
 12808                           
 12809                           ;ModbusRtu.c: 901: _au8Buffer[ FUNC ] = u8func + 0x80;
 12810  002F0C  5008               	movf	ModbusBuildException@u8func,w,c
 12811  002F0E  0F80               	addlw	128
 12812  002F10  0101               	movlb	1	; () banked
 12813  002F12  6F01               	movwf	(__au8Buffer+1)& (0+255),b
 12814                           
 12815                           ; BSR set to: 1
 12816                           ;ModbusRtu.c: 902: _au8Buffer[ 2 ] = u8exception;
 12817  002F14  C007  F102         	movff	ModbusBuildException@u8exception,__au8Buffer+2
 12818                           
 12819                           ; BSR set to: 1
 12820                           ;ModbusRtu.c: 903: _u8BufferSize = EXCEPTION_SIZE;
 12821  002F18  0E03               	movlw	3
 12822  002F1A  6E6E               	movwf	__u8BufferSize,c
 12823                           
 12824                           ; BSR set to: 1
 12825  002F1C  0C03               	retlw	3	;funcret
 12826  002F1E  FFFF               	dw	65535	; errata NOP
 12827  002F20                     __end_of_ModbusBuildException:
 12828                           	opt stack 0
 12829                           tblptru	equ	0xFF8
 12830                           tblptrh	equ	0xFF7
 12831                           tblptrl	equ	0xFF6
 12832                           tablat	equ	0xFF5
 12833                           prodh	equ	0xFF4
 12834                           prodl	equ	0xFF3
 12835                           intcon	equ	0xFF2
 12836                           postinc0	equ	0xFEE
 12837                           wreg	equ	0xFE8
 12838                           indf1	equ	0xFE7
 12839                           postinc1	equ	0xFE6
 12840                           postdec1	equ	0xFE5
 12841                           fsr1h	equ	0xFE2
 12842                           fsr1l	equ	0xFE1
 12843                           indf2	equ	0xFDF
 12844                           postinc2	equ	0xFDE
 12845                           postdec2	equ	0xFDD
 12846                           plusw2	equ	0xFDB
 12847                           fsr2h	equ	0xFDA
 12848                           fsr2l	equ	0xFD9
 12849                           status	equ	0xFD8
 12850                           
 12851 ;; *************** function _InitApp *****************
 12852 ;; Defined at:
 12853 ;;		line 66 in file "user.c"
 12854 ;; Parameters:    Size  Location     Type
 12855 ;;		None
 12856 ;; Auto vars:     Size  Location     Type
 12857 ;;  i               1    6[COMRAM] unsigned char 
 12858 ;; Return value:  Size  Location     Type
 12859 ;;                  1    wreg      void 
 12860 ;; Registers used:
 12861 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12862 ;; Tracked objects:
 12863 ;;		On entry : 0/0
 12864 ;;		On exit  : 0/0
 12865 ;;		Unchanged: 0/0
 12866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12867 ;;      Params:         0       0       0       0       0       0       0
 12868 ;;      Locals:         1       0       0       0       0       0       0
 12869 ;;      Temps:          0       0       0       0       0       0       0
 12870 ;;      Totals:         1       0       0       0       0       0       0
 12871 ;;Total ram usage:        1 bytes
 12872 ;; Hardware stack levels used:    1
 12873 ;; Hardware stack levels required when called:    3
 12874 ;; This function calls:
 12875 ;;		_InitUartBuffer
 12876 ;;		_PortBegin
 12877 ;; This function is called by:
 12878 ;;		_main
 12879 ;; This function uses a non-reentrant model
 12880 ;;
 12881                           
 12882                           	psect	text72
 12883  0026A0                     __ptext72:
 12884                           	opt stack 0
 12885  0026A0                     _InitApp:
 12886                           	opt stack 27
 12887                           
 12888                           ; BSR set to: 1
 12889                           ;incstack = 0
 12890  0026A0  FFFF               	dw	65535
 12891                           
 12892                           ;user.c: 77: INTCONbits.PEIE = 1;
 12893  0026A2  8CF2               	bsf	intcon,6,c	;volatile
 12894                           
 12895                           ;user.c: 78: (INTCONbits.GIE = 1);
 12896  0026A4  8EF2               	bsf	intcon,7,c	;volatile
 12897                           
 12898                           ;user.c: 79: RCONbits.IPEN = 1;
 12899  0026A6  8ED0               	bsf	4048,7,c	;volatile
 12900                           
 12901                           ;user.c: 84: T1CONbits.RD16 = 1;
 12902  0026A8  8ECD               	bsf	4045,7,c	;volatile
 12903                           
 12904                           ;user.c: 85: T1CONbits.T1SYNC = 0;
 12905  0026AA  94CD               	bcf	4045,2,c	;volatile
 12906                           
 12907                           ;user.c: 86: T1CONbits.TMR1CS = 0;
 12908  0026AC  92CD               	bcf	4045,1,c	;volatile
 12909                           
 12910                           ;user.c: 88: T1CONbits.T1CKPS = 0;
 12911  0026AE  0ECF               	movlw	-49
 12912  0026B0  16CD               	andwf	4045,f,c	;volatile
 12913                           
 12914                           ;user.c: 92: PIE1bits.TMR1IE = 1;
 12915  0026B2  809D               	bsf	3997,0,c	;volatile
 12916                           
 12917                           ;user.c: 93: IPR1bits.TMR1IP = 1;
 12918  0026B4  809F               	bsf	3999,0,c	;volatile
 12919                           
 12920                           ;user.c: 94: ((void)(TMR1H=((0x10000 - 10000000L/4 / 1000)>>8),TMR1L=((0x10000 - 1000000
      +                          0L/4 / 1000)&0xFF)));
 12921  0026B6  0EF6               	movlw	246
 12922  0026B8  6ECF               	movwf	4047,c	;volatile
 12923  0026BA  0E3C               	movlw	60
 12924  0026BC  6ECE               	movwf	4046,c	;volatile
 12925                           
 12926                           ;user.c: 97: PIR1bits.TMR1IF = 0;
 12927  0026BE  909E               	bcf	3998,0,c	;volatile
 12928                           
 12929                           ;user.c: 99: T1CONbits.TMR1ON = 1;
 12930  0026C0  80CD               	bsf	4045,0,c	;volatile
 12931                           
 12932                           ;user.c: 103: T0CONbits.T08BIT = 0;
 12933  0026C2  9CD5               	bcf	4053,6,c	;volatile
 12934                           
 12935                           ;user.c: 104: T0CONbits.T0CS = 0;
 12936  0026C4  9AD5               	bcf	4053,5,c	;volatile
 12937                           
 12938                           ;user.c: 106: T0CONbits.PSA = 0;
 12939  0026C6  96D5               	bcf	4053,3,c	;volatile
 12940                           
 12941                           ;user.c: 117: T0CONbits.T0PS = 7;
 12942  0026C8  0E07               	movlw	7
 12943  0026CA  12D5               	iorwf	4053,f,c	;volatile
 12944                           
 12945                           ;user.c: 121: INTCONbits.TMR0IE = 1;
 12946  0026CC  8AF2               	bsf	intcon,5,c	;volatile
 12947                           
 12948                           ;user.c: 122: INTCON2bits.TMR0IP = 1;
 12949  0026CE  84F1               	bsf	intcon2,2,c	;volatile
 12950                           
 12951                           ;user.c: 123: ((void)(TMR0H=((0x10000 - (10000000L/4 / 256 + -1) * 6)>>8),TMR0L=((0x1000
      +                          0 - (10000000L/4 / 256 + -1) * 6)&0xFF)));
 12952  0026D0  0E1B               	movlw	27
 12953  0026D2  6ED7               	movwf	4055,c	;volatile
 12954  0026D4  0E28               	movlw	40
 12955  0026D6  6ED6               	movwf	4054,c	;volatile
 12956                           
 12957                           ;user.c: 126: INTCONbits.TMR0IF = 0;
 12958  0026D8  94F2               	bcf	intcon,2,c	;volatile
 12959                           
 12960                           ;user.c: 133: InitUartBuffer();
 12961  0026DA  ECFB  F017         	call	_InitUartBuffer	;wreg free
 12962                           
 12963                           ;user.c: 135: PortBegin();
 12964  0026DE  ECAC  F017         	call	_PortBegin	;wreg free
 12965                           
 12966                           ; BSR set to: 0
 12967                           ;user.c: 136: PIE1bits.RCIE = 1;
 12968  0026E2  8A9D               	bsf	3997,5,c	;volatile
 12969                           
 12970                           ; BSR set to: 0
 12971                           ;user.c: 138: IPR1bits.RCIP = 0;
 12972  0026E4  9A9F               	bcf	3999,5,c	;volatile
 12973                           
 12974                           ; BSR set to: 0
 12975                           ;user.c: 142: for (unsigned char i = 0; i < 15; i++)
 12976  0026E6  6A07               	clrf	InitApp@i,c
 12977  0026E8                     l7522:
 12978  0026E8  FFFF               	dw	65535	; assembler added errata NOP
 12979                           
 12980                           ;user.c: 143: _MODBUSInputRegs[i] = 0;
 12981  0026EA  5007               	movf	InitApp@i,w,c
 12982  0026EC  0D02               	mullw	2
 12983  0026EE  0EAA               	movlw	low __MODBUSInputRegs
 12984  0026F0  24F3               	addwf	prodl,w,c
 12985  0026F2  6ED9               	movwf	fsr2l,c
 12986  0026F4  0E01               	movlw	high __MODBUSInputRegs
 12987  0026F6  20F4               	addwfc	prodh,w,c
 12988  0026F8  6EDA               	movwf	fsr2h,c
 12989  0026FA  6ADE               	clrf	postinc2,c
 12990  0026FC  6ADD               	clrf	postdec2,c
 12991  0026FE  2A07               	incf	InitApp@i,f,c
 12992  002700  0E0E               	movlw	14
 12993  002702  6407               	cpfsgt	InitApp@i,c
 12994  002704  D7F1               	goto	l7522
 12995                           
 12996                           ;user.c: 149: TRISB = 0;
 12997  002706  6A93               	clrf	3987,c	;volatile
 12998                           
 12999                           ;user.c: 152: LATAbits.LATA0 = 0;
 13000  002708  9089               	bcf	3977,0,c	;volatile
 13001                           
 13002                           ;user.c: 153: LATAbits.LATA1 = 0;
 13003  00270A  9289               	bcf	3977,1,c	;volatile
 13004                           
 13005                           ;user.c: 154: LATAbits.LATA2 = 0;
 13006  00270C  9489               	bcf	3977,2,c	;volatile
 13007                           
 13008                           ;user.c: 155: LATAbits.LATA3 = 0;
 13009  00270E  9689               	bcf	3977,3,c	;volatile
 13010                           
 13011                           ;user.c: 156: TRISAbits.RA0 = 0;
 13012  002710  9092               	bcf	3986,0,c	;volatile
 13013                           
 13014                           ;user.c: 157: TRISAbits.RA1 = 0;
 13015  002712  9292               	bcf	3986,1,c	;volatile
 13016                           
 13017                           ;user.c: 158: TRISAbits.RA2 = 0;
 13018  002714  9492               	bcf	3986,2,c	;volatile
 13019                           
 13020                           ;user.c: 159: TRISAbits.RA3 = 0;
 13021  002716  9692               	bcf	3986,3,c	;volatile
 13022                           
 13023                           ;user.c: 161: TRISCbits.RC3 = 1;
 13024  002718  8694               	bsf	3988,3,c	;volatile
 13025                           
 13026                           ;user.c: 162: TRISCbits.RC1 = 1;
 13027  00271A  8294               	bsf	3988,1,c	;volatile
 13028                           
 13029                           ;user.c: 163: TRISCbits.RC0 = 0;
 13030  00271C  9094               	bcf	3988,0,c	;volatile
 13031                           
 13032                           ;user.c: 165: LATCbits.LATC2 = 0;
 13033  00271E  948B               	bcf	3979,2,c	;volatile
 13034  002720  0012               	return		;funcret
 13035  002722  FFFF               	dw	65535	; errata NOP
 13036  002724                     __end_of_InitApp:
 13037                           	opt stack 0
 13038                           tblptru	equ	0xFF8
 13039                           tblptrh	equ	0xFF7
 13040                           tblptrl	equ	0xFF6
 13041                           tablat	equ	0xFF5
 13042                           prodh	equ	0xFF4
 13043                           prodl	equ	0xFF3
 13044                           intcon	equ	0xFF2
 13045                           intcon2	equ	0xFF1
 13046                           postinc0	equ	0xFEE
 13047                           wreg	equ	0xFE8
 13048                           indf1	equ	0xFE7
 13049                           postinc1	equ	0xFE6
 13050                           postdec1	equ	0xFE5
 13051                           fsr1h	equ	0xFE2
 13052                           fsr1l	equ	0xFE1
 13053                           indf2	equ	0xFDF
 13054                           postinc2	equ	0xFDE
 13055                           postdec2	equ	0xFDD
 13056                           plusw2	equ	0xFDB
 13057                           fsr2h	equ	0xFDA
 13058                           fsr2l	equ	0xFD9
 13059                           status	equ	0xFD8
 13060                           
 13061 ;; *************** function _PortBegin *****************
 13062 ;; Defined at:
 13063 ;;		line 48 in file "user.c"
 13064 ;; Parameters:    Size  Location     Type
 13065 ;;		None
 13066 ;; Auto vars:     Size  Location     Type
 13067 ;;		None
 13068 ;; Return value:  Size  Location     Type
 13069 ;;                  1    wreg      void 
 13070 ;; Registers used:
 13071 ;;		wreg, status,2
 13072 ;; Tracked objects:
 13073 ;;		On entry : F/0
 13074 ;;		On exit  : F/0
 13075 ;;		Unchanged: F/0
 13076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13077 ;;      Params:         0       0       0       0       0       0       0
 13078 ;;      Locals:         0       0       0       0       0       0       0
 13079 ;;      Temps:          0       0       0       0       0       0       0
 13080 ;;      Totals:         0       0       0       0       0       0       0
 13081 ;;Total ram usage:        0 bytes
 13082 ;; Hardware stack levels used:    1
 13083 ;; Hardware stack levels required when called:    2
 13084 ;; This function calls:
 13085 ;;		Nothing
 13086 ;; This function is called by:
 13087 ;;		_InitApp
 13088 ;; This function uses a non-reentrant model
 13089 ;;
 13090                           
 13091                           	psect	text73
 13092  002F58                     __ptext73:
 13093                           	opt stack 0
 13094  002F58                     _PortBegin:
 13095                           	opt stack 27
 13096                           
 13097                           ;incstack = 0
 13098  002F58  FFFF               	dw	65535
 13099                           
 13100                           ; BSR set to: 0
 13101                           ;user.c: 50: TXSTA = 0;
 13102  002F5A  6AAC               	clrf	4012,c	;volatile
 13103                           
 13104                           ;user.c: 51: TXSTAbits.TXEN = 1;
 13105  002F5C  8AAC               	bsf	4012,5,c	;volatile
 13106                           
 13107                           ;user.c: 52: TXSTAbits.BRGH = 1;
 13108  002F5E  84AC               	bsf	4012,2,c	;volatile
 13109                           
 13110                           ; BSR set to: 0
 13111                           ;user.c: 54: SPBRG = ( (((10000000L / 9600) / 8) - 1) / 2 );
 13112  002F60  0E40               	movlw	64
 13113  002F62  6EAF               	movwf	4015,c	;volatile
 13114                           
 13115                           ; BSR set to: 0
 13116                           ;user.c: 55: RCSTA = 0;
 13117  002F64  6AAB               	clrf	4011,c	;volatile
 13118                           
 13119                           ; BSR set to: 0
 13120                           ;user.c: 56: RCSTAbits.SPEN = 1;
 13121  002F66  8EAB               	bsf	4011,7,c	;volatile
 13122                           
 13123                           ; BSR set to: 0
 13124                           ;user.c: 57: RCSTAbits.CREN = 1;
 13125  002F68  88AB               	bsf	4011,4,c	;volatile
 13126                           
 13127                           ; BSR set to: 0
 13128                           ;user.c: 59: TRISCbits.RC5 = 0;
 13129  002F6A  9A94               	bcf	3988,5,c	;volatile
 13130                           
 13131                           ; BSR set to: 0
 13132                           ;user.c: 60: LATCbits.LATC5 = 0;
 13133  002F6C  9A8B               	bcf	3979,5,c	;volatile
 13134                           
 13135                           ; BSR set to: 0
 13136  002F6E  0012               	return		;funcret
 13137  002F70  FFFF               	dw	65535	; errata NOP
 13138  002F72                     __end_of_PortBegin:
 13139                           	opt stack 0
 13140                           tblptru	equ	0xFF8
 13141                           tblptrh	equ	0xFF7
 13142                           tblptrl	equ	0xFF6
 13143                           tablat	equ	0xFF5
 13144                           prodh	equ	0xFF4
 13145                           prodl	equ	0xFF3
 13146                           intcon	equ	0xFF2
 13147                           intcon2	equ	0xFF1
 13148                           postinc0	equ	0xFEE
 13149                           wreg	equ	0xFE8
 13150                           indf1	equ	0xFE7
 13151                           postinc1	equ	0xFE6
 13152                           postdec1	equ	0xFE5
 13153                           fsr1h	equ	0xFE2
 13154                           fsr1l	equ	0xFE1
 13155                           indf2	equ	0xFDF
 13156                           postinc2	equ	0xFDE
 13157                           postdec2	equ	0xFDD
 13158                           plusw2	equ	0xFDB
 13159                           fsr2h	equ	0xFDA
 13160                           fsr2l	equ	0xFD9
 13161                           status	equ	0xFD8
 13162                           
 13163 ;; *************** function _InitUartBuffer *****************
 13164 ;; Defined at:
 13165 ;;		line 44 in file "interrupts.c"
 13166 ;; Parameters:    Size  Location     Type
 13167 ;;		None
 13168 ;; Auto vars:     Size  Location     Type
 13169 ;;		None
 13170 ;; Return value:  Size  Location     Type
 13171 ;;                  1    wreg      void 
 13172 ;; Registers used:
 13173 ;;		None
 13174 ;; Tracked objects:
 13175 ;;		On entry : 0/0
 13176 ;;		On exit  : F/0
 13177 ;;		Unchanged: 0/0
 13178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13179 ;;      Params:         0       0       0       0       0       0       0
 13180 ;;      Locals:         0       0       0       0       0       0       0
 13181 ;;      Temps:          0       0       0       0       0       0       0
 13182 ;;      Totals:         0       0       0       0       0       0       0
 13183 ;;Total ram usage:        0 bytes
 13184 ;; Hardware stack levels used:    1
 13185 ;; Hardware stack levels required when called:    2
 13186 ;; This function calls:
 13187 ;;		Nothing
 13188 ;; This function is called by:
 13189 ;;		_PortClearReadBuffer
 13190 ;;		_InitApp
 13191 ;; This function uses a non-reentrant model
 13192 ;;
 13193                           
 13194                           	psect	text74
 13195  002FF6                     __ptext74:
 13196                           	opt stack 0
 13197  002FF6                     _InitUartBuffer:
 13198                           	opt stack 26
 13199                           
 13200                           ; BSR set to: 0
 13201                           ;incstack = 0
 13202  002FF6  FFFF               	dw	65535
 13203                           
 13204                           ;interrupts.c: 46: UartBufferHead = 0;
 13205  002FF8  0100               	movlb	0	; () banked
 13206  002FFA  6BCF               	clrf	_UartBufferHead& (0+255),b	;volatile
 13207                           
 13208                           ;interrupts.c: 47: UartBufferTail = 0;
 13209  002FFC  6BD1               	clrf	_UartBufferTail& (0+255),b	;volatile
 13210                           
 13211                           ;interrupts.c: 48: UartBufferLen = 0;
 13212  002FFE  6BD0               	clrf	_UartBufferLen& (0+255),b	;volatile
 13213                           
 13214                           ; BSR set to: 0
 13215  003000  0012               	return		;funcret
 13216  003002  FFFF               	dw	65535	; errata NOP
 13217  003004                     __end_of_InitUartBuffer:
 13218                           	opt stack 0
 13219                           tblptru	equ	0xFF8
 13220                           tblptrh	equ	0xFF7
 13221                           tblptrl	equ	0xFF6
 13222                           tablat	equ	0xFF5
 13223                           prodh	equ	0xFF4
 13224                           prodl	equ	0xFF3
 13225                           intcon	equ	0xFF2
 13226                           intcon2	equ	0xFF1
 13227                           postinc0	equ	0xFEE
 13228                           wreg	equ	0xFE8
 13229                           indf1	equ	0xFE7
 13230                           postinc1	equ	0xFE6
 13231                           postdec1	equ	0xFE5
 13232                           fsr1h	equ	0xFE2
 13233                           fsr1l	equ	0xFE1
 13234                           indf2	equ	0xFDF
 13235                           postinc2	equ	0xFDE
 13236                           postdec2	equ	0xFDD
 13237                           plusw2	equ	0xFDB
 13238                           fsr2h	equ	0xFDA
 13239                           fsr2l	equ	0xFD9
 13240                           status	equ	0xFD8
 13241                           
 13242 ;; *************** function _ConfigureOscillator *****************
 13243 ;; Defined at:
 13244 ;;		line 86 in file "system.c"
 13245 ;; Parameters:    Size  Location     Type
 13246 ;;		None
 13247 ;; Auto vars:     Size  Location     Type
 13248 ;;		None
 13249 ;; Return value:  Size  Location     Type
 13250 ;;                  1    wreg      void 
 13251 ;; Registers used:
 13252 ;;		None
 13253 ;; Tracked objects:
 13254 ;;		On entry : 0/0
 13255 ;;		On exit  : 0/0
 13256 ;;		Unchanged: 0/0
 13257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13258 ;;      Params:         0       0       0       0       0       0       0
 13259 ;;      Locals:         0       0       0       0       0       0       0
 13260 ;;      Temps:          0       0       0       0       0       0       0
 13261 ;;      Totals:         0       0       0       0       0       0       0
 13262 ;;Total ram usage:        0 bytes
 13263 ;; Hardware stack levels used:    1
 13264 ;; Hardware stack levels required when called:    2
 13265 ;; This function calls:
 13266 ;;		Nothing
 13267 ;; This function is called by:
 13268 ;;		_main
 13269 ;; This function uses a non-reentrant model
 13270 ;;
 13271                           
 13272                           	psect	text75
 13273  003048                     __ptext75:
 13274                           	opt stack 0
 13275  003048                     _ConfigureOscillator:
 13276                           	opt stack 28
 13277                           
 13278                           ; BSR set to: 0
 13279                           ;incstack = 0
 13280  003048  FFFF               	dw	65535
 13281  00304A  0012               	return		;funcret
 13282  00304C  FFFF               	dw	65535	; errata NOP
 13283  00304E                     __end_of_ConfigureOscillator:
 13284                           	opt stack 0
 13285                           tblptru	equ	0xFF8
 13286                           tblptrh	equ	0xFF7
 13287                           tblptrl	equ	0xFF6
 13288                           tablat	equ	0xFF5
 13289                           prodh	equ	0xFF4
 13290                           prodl	equ	0xFF3
 13291                           intcon	equ	0xFF2
 13292                           intcon2	equ	0xFF1
 13293                           postinc0	equ	0xFEE
 13294                           wreg	equ	0xFE8
 13295                           indf1	equ	0xFE7
 13296                           postinc1	equ	0xFE6
 13297                           postdec1	equ	0xFE5
 13298                           fsr1h	equ	0xFE2
 13299                           fsr1l	equ	0xFE1
 13300                           indf2	equ	0xFDF
 13301                           postinc2	equ	0xFDE
 13302                           postdec2	equ	0xFDD
 13303                           plusw2	equ	0xFDB
 13304                           fsr2h	equ	0xFDA
 13305                           fsr2l	equ	0xFD9
 13306                           status	equ	0xFD8
 13307                           
 13308 ;; *************** function _AddSecond *****************
 13309 ;; Defined at:
 13310 ;;		line 180 in file "user.c"
 13311 ;; Parameters:    Size  Location     Type
 13312 ;;		None
 13313 ;; Auto vars:     Size  Location     Type
 13314 ;;		None
 13315 ;; Return value:  Size  Location     Type
 13316 ;;                  1    wreg      void 
 13317 ;; Registers used:
 13318 ;;		wreg, status,2, status,0
 13319 ;; Tracked objects:
 13320 ;;		On entry : F/1
 13321 ;;		On exit  : F/0
 13322 ;;		Unchanged: 0/0
 13323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13324 ;;      Params:         0       0       0       0       0       0       0
 13325 ;;      Locals:         0       0       0       0       0       0       0
 13326 ;;      Temps:          0       0       0       0       0       0       0
 13327 ;;      Totals:         0       0       0       0       0       0       0
 13328 ;;Total ram usage:        0 bytes
 13329 ;; Hardware stack levels used:    1
 13330 ;; Hardware stack levels required when called:    2
 13331 ;; This function calls:
 13332 ;;		Nothing
 13333 ;; This function is called by:
 13334 ;;		_main
 13335 ;; This function uses a non-reentrant model
 13336 ;;
 13337                           
 13338                           	psect	text76
 13339  002FC8                     __ptext76:
 13340                           	opt stack 0
 13341  002FC8                     _AddSecond:
 13342                           	opt stack 28
 13343                           
 13344                           ;incstack = 0
 13345  002FC8  FFFF               	dw	65535
 13346                           
 13347                           ; BSR set to: 1
 13348                           ;user.c: 182: currentTime++;
 13349  002FCA  0100               	movlb	0	; () banked
 13350  002FCC  2BE4               	incf	_currentTime& (0+255),f,b
 13351  002FCE  0E00               	movlw	0
 13352  002FD0  23E5               	addwfc	(_currentTime+1)& (0+255),f,b
 13353  002FD2  23E6               	addwfc	(_currentTime+2)& (0+255),f,b
 13354  002FD4  23E7               	addwfc	(_currentTime+3)& (0+255),f,b
 13355                           
 13356                           ; BSR set to: 0
 13357  002FD6  0C00               	retlw	0	;funcret
 13358  002FD8  FFFF               	dw	65535	; errata NOP
 13359  002FDA                     __end_of_AddSecond:
 13360                           	opt stack 0
 13361                           tblptru	equ	0xFF8
 13362                           tblptrh	equ	0xFF7
 13363                           tblptrl	equ	0xFF6
 13364                           tablat	equ	0xFF5
 13365                           prodh	equ	0xFF4
 13366                           prodl	equ	0xFF3
 13367                           intcon	equ	0xFF2
 13368                           intcon2	equ	0xFF1
 13369                           postinc0	equ	0xFEE
 13370                           wreg	equ	0xFE8
 13371                           indf1	equ	0xFE7
 13372                           postinc1	equ	0xFE6
 13373                           postdec1	equ	0xFE5
 13374                           fsr1h	equ	0xFE2
 13375                           fsr1l	equ	0xFE1
 13376                           indf2	equ	0xFDF
 13377                           postinc2	equ	0xFDE
 13378                           postdec2	equ	0xFDD
 13379                           plusw2	equ	0xFDB
 13380                           fsr2h	equ	0xFDA
 13381                           fsr2l	equ	0xFD9
 13382                           status	equ	0xFD8
 13383                           
 13384 ;; *************** function _low_isr *****************
 13385 ;; Defined at:
 13386 ;;		line 183 in file "interrupts.c"
 13387 ;; Parameters:    Size  Location     Type
 13388 ;;		None
 13389 ;; Auto vars:     Size  Location     Type
 13390 ;;  c               1    5[COMRAM] unsigned char 
 13391 ;; Return value:  Size  Location     Type
 13392 ;;                  1    wreg      void 
 13393 ;; Registers used:
 13394 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13395 ;; Tracked objects:
 13396 ;;		On entry : 0/0
 13397 ;;		On exit  : 0/0
 13398 ;;		Unchanged: 0/0
 13399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13400 ;;      Params:         0       0       0       0       0       0       0
 13401 ;;      Locals:         1       0       0       0       0       0       0
 13402 ;;      Temps:          5       0       0       0       0       0       0
 13403 ;;      Totals:         6       0       0       0       0       0       0
 13404 ;;Total ram usage:        6 bytes
 13405 ;; Hardware stack levels used:    1
 13406 ;; Hardware stack levels required when called:    1
 13407 ;; This function calls:
 13408 ;;		Nothing
 13409 ;; This function is called by:
 13410 ;;		Interrupt level 1
 13411 ;; This function uses a non-reentrant model
 13412 ;;
 13413                           
 13414                           	psect	intcodelo
 13415  000018                     __pintcodelo:
 13416                           	opt stack 0
 13417  000018                     _low_isr:
 13418                           	opt stack 0
 13419  000018  FFFF               	dw	65535	; assembler added errata NOP
 13420                           
 13421                           ; BSR set to: 0
 13422                           ;incstack = 0
 13423  00001A  8073               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
 13424  00001C  FFFF               	dw	65535	; errata NOP
 13425  00001E  CFD8 F001          	movff	status,??_low_isr
 13426  000022  CFE8 F002          	movff	wreg,??_low_isr+1
 13427  000026  CFE0 F003          	movff	bsr,??_low_isr+2
 13428  00002A  CFD9 F004          	movff	fsr2l,??_low_isr+3
 13429  00002E  CFDA F005          	movff	fsr2h,??_low_isr+4
 13430                           
 13431                           ;interrupts.c: 197: if (PIR1bits.RCIF && PIE1bits.RCIE)
 13432  000032  BA9E               	btfsc	3998,5,c	;volatile
 13433  000034  AA9D               	btfss	3997,5,c	;volatile
 13434  000036  D016               	goto	i1l97
 13435  000038                     i1l98:
 13436  000038  FFFF               	dw	65535	; assembler added errata NOP
 13437  00003A  AA9E               	btfss	3998,5,c	;volatile
 13438  00003C  D7FD               	goto	i1l98
 13439                           
 13440                           ;interrupts.c: 211: uint8_t c = RCREG;
 13441  00003E  CFAE F006          	movff	4014,low_isr@c	;volatile
 13442                           
 13443                           ;interrupts.c: 214: UartRingBuffer[UartBufferHead] = c;
 13444  000042  0E00               	movlw	low _UartRingBuffer
 13445  000044  0100               	movlb	0	; () banked
 13446  000046  25CF               	addwf	_UartBufferHead& (0+255),w,b	;volatile
 13447  000048  6ED9               	movwf	fsr2l,c
 13448  00004A  6ADA               	clrf	fsr2h,c
 13449  00004C  0E02               	movlw	high _UartRingBuffer
 13450  00004E  22DA               	addwfc	fsr2h,f,c
 13451  000050  C006  FFDF         	movff	low_isr@c,indf2
 13452                           
 13453                           ; BSR set to: 0
 13454                           ;interrupts.c: 215: UartBufferLen++;
 13455  000054  2BD0               	incf	_UartBufferLen& (0+255),f,b	;volatile
 13456                           
 13457                           ; BSR set to: 0
 13458                           ;interrupts.c: 216: if(UartBufferHead == 256u - 1)
 13459  000056  29CF               	incf	_UartBufferHead& (0+255),w,b
 13460  000058  E102               	bnz	i1l5676
 13461                           
 13462                           ; BSR set to: 0
 13463                           ;interrupts.c: 217: UartBufferHead = 0;
 13464  00005A  6BCF               	clrf	_UartBufferHead& (0+255),b	;volatile
 13465  00005C  D001               	goto	i1l5678
 13466  00005E                     i1l5676:
 13467                           
 13468                           ; BSR set to: 0
 13469                           ;interrupts.c: 218: else
 13470                           ;interrupts.c: 219: UartBufferHead++;
 13471  00005E  2BCF               	incf	_UartBufferHead& (0+255),f,b	;volatile
 13472  000060                     i1l5678:
 13473  000060  FFFF               	dw	65535	; assembler added errata NOP
 13474                           
 13475                           ; BSR set to: 0
 13476                           ;interrupts.c: 222: PIR1bits.RCIF = 0;
 13477  000062  9A9E               	bcf	3998,5,c	;volatile
 13478  000064                     i1l97:
 13479  000064  FFFF               	dw	65535	; assembler added errata NOP
 13480  000066  C005  FFDA         	movff	??_low_isr+4,fsr2h
 13481  00006A  C004  FFD9         	movff	??_low_isr+3,fsr2l
 13482  00006E  C003  FFE0         	movff	??_low_isr+2,bsr
 13483  000072  C002  FFE8         	movff	??_low_isr+1,wreg
 13484  000076  C001  FFD8         	movff	??_low_isr,status
 13485  00007A  9073               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
 13486  00007C  0010               	retfie	
 13487  00007E  FFFF               	dw	65535	; errata NOP
 13488  000080                     __end_of_low_isr:
 13489                           	opt stack 0
 13490                           tblptru	equ	0xFF8
 13491                           tblptrh	equ	0xFF7
 13492                           tblptrl	equ	0xFF6
 13493                           tablat	equ	0xFF5
 13494                           prodh	equ	0xFF4
 13495                           prodl	equ	0xFF3
 13496                           intcon	equ	0xFF2
 13497                           intcon2	equ	0xFF1
 13498                           postinc0	equ	0xFEE
 13499                           wreg	equ	0xFE8
 13500                           indf1	equ	0xFE7
 13501                           postinc1	equ	0xFE6
 13502                           postdec1	equ	0xFE5
 13503                           fsr1h	equ	0xFE2
 13504                           fsr1l	equ	0xFE1
 13505                           bsr	equ	0xFE0
 13506                           indf2	equ	0xFDF
 13507                           postinc2	equ	0xFDE
 13508                           postdec2	equ	0xFDD
 13509                           plusw2	equ	0xFDB
 13510                           fsr2h	equ	0xFDA
 13511                           fsr2l	equ	0xFD9
 13512                           status	equ	0xFD8
 13513                           
 13514 ;; *************** function _high_isr *****************
 13515 ;; Defined at:
 13516 ;;		line 122 in file "interrupts.c"
 13517 ;; Parameters:    Size  Location     Type
 13518 ;;		None
 13519 ;; Auto vars:     Size  Location     Type
 13520 ;;		None
 13521 ;; Return value:  Size  Location     Type
 13522 ;;                  1    wreg      void 
 13523 ;; Registers used:
 13524 ;;		wreg, status,2, status,0
 13525 ;; Tracked objects:
 13526 ;;		On entry : 0/0
 13527 ;;		On exit  : 0/0
 13528 ;;		Unchanged: 0/0
 13529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13530 ;;      Params:         0       0       0       0       0       0       0
 13531 ;;      Locals:         0       0       0       0       0       0       0
 13532 ;;      Temps:          0       0       0       0       0       0       0
 13533 ;;      Totals:         0       0       0       0       0       0       0
 13534 ;;Total ram usage:        0 bytes
 13535 ;; Hardware stack levels used:    1
 13536 ;; This function calls:
 13537 ;;		Nothing
 13538 ;; This function is called by:
 13539 ;;		Interrupt level 2
 13540 ;; This function uses a non-reentrant model
 13541 ;;
 13542                           
 13543                           	psect	intcode
 13544  000008                     __pintcode:
 13545                           	opt stack 0
 13546  000008                     _high_isr:
 13547                           	opt stack 0
 13548  000008  FFFF               	dw	65535	; assembler added errata NOP
 13549                           
 13550                           ;incstack = 0
 13551  00000A  8273               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 13552  00000C  FFFF               	dw	65535	; errata NOP
 13553  00000E  EF34  F014         	goto	int_func
 13554                           tblptru	equ	0xFF8
 13555                           tblptrh	equ	0xFF7
 13556                           tblptrl	equ	0xFF6
 13557                           tablat	equ	0xFF5
 13558                           prodh	equ	0xFF4
 13559                           prodl	equ	0xFF3
 13560                           intcon	equ	0xFF2
 13561                           intcon2	equ	0xFF1
 13562                           postinc0	equ	0xFEE
 13563                           wreg	equ	0xFE8
 13564                           indf1	equ	0xFE7
 13565                           postinc1	equ	0xFE6
 13566                           postdec1	equ	0xFE5
 13567                           fsr1h	equ	0xFE2
 13568                           fsr1l	equ	0xFE1
 13569                           bsr	equ	0xFE0
 13570                           indf2	equ	0xFDF
 13571                           postinc2	equ	0xFDE
 13572                           postdec2	equ	0xFDD
 13573                           plusw2	equ	0xFDB
 13574                           fsr2h	equ	0xFDA
 13575                           fsr2l	equ	0xFD9
 13576                           status	equ	0xFD8
 13577                           
 13578                           	psect	intcode_body
 13579  002868                     __pintcode_body:
 13580                           	opt stack 23
 13581  002868                     int_func:
 13582                           	opt stack 23
 13583  002868  FFFF               	dw	65535	; errata NOP
 13584                           
 13585                           ;interrupts.c: 143: if(PIR1bits.TMR1IF && PIE1bits.TMR1IE)
 13586  00286A  B09E               	btfsc	3998,0,c	;volatile
 13587  00286C  A09D               	btfss	3997,0,c	;volatile
 13588  00286E  D00C               	goto	i2l84
 13589                           
 13590                           ;interrupts.c: 144: {
 13591                           ;interrupts.c: 145: PIR1bits.TMR1IF = 0;
 13592  002870  909E               	bcf	3998,0,c	;volatile
 13593                           
 13594                           ;interrupts.c: 146: millisecondsFromStart++;
 13595  002872  0100               	movlb	0	; () banked
 13596  002874  2BBB               	incf	_millisecondsFromStart& (0+255),f,b	;volatile
 13597  002876  0E00               	movlw	0
 13598  002878  23BC               	addwfc	(_millisecondsFromStart+1)& (0+255),f,b	;volatile
 13599  00287A  23BD               	addwfc	(_millisecondsFromStart+2)& (0+255),f,b	;volatile
 13600  00287C  23BE               	addwfc	(_millisecondsFromStart+3)& (0+255),f,b	;volatile
 13601                           
 13602                           ; BSR set to: 0
 13603                           ;interrupts.c: 147: ((void)(TMR1H=((0x10000 - 10000000L/4 / 1000)>>8),TMR1L=((0x10000 - 
      +                          10000000L/4 / 1000)&0xFF)));
 13604  00287E  0EF6               	movlw	246
 13605  002880  6ECF               	movwf	4047,c	;volatile
 13606                           
 13607                           ; BSR set to: 0
 13608  002882  0E3C               	movlw	60
 13609  002884  6ECE               	movwf	4046,c	;volatile
 13610  002886  D01C               	goto	i2l85
 13611  002888                     i2l84:
 13612  002888  FFFF               	dw	65535	; assembler added errata NOP
 13613                           
 13614                           ;interrupts.c: 149: }
 13615                           ;interrupts.c: 151: if(INTCONbits.TMR0IF)
 13616  00288A  A4F2               	btfss	intcon,2,c	;volatile
 13617  00288C  D019               	goto	i2l85
 13618                           
 13619                           ;interrupts.c: 152: {
 13620                           ;interrupts.c: 153: INTCONbits.TMR0IF = 0;
 13621  00288E  94F2               	bcf	intcon,2,c	;volatile
 13622                           
 13623                           ;interrupts.c: 154: _6sCounter++;
 13624  002890  0100               	movlb	0	; () banked
 13625  002892  2BD2               	incf	__6sCounter& (0+255),f,b	;volatile
 13626                           
 13627                           ; BSR set to: 0
 13628                           ;interrupts.c: 155: if(_6sCounter == 10)
 13629  002894  0E0A               	movlw	10
 13630  002896  19D2               	xorwf	__6sCounter& (0+255),w,b	;volatile
 13631  002898  E10F               	bnz	i2l5656
 13632                           
 13633                           ; BSR set to: 0
 13634                           ;interrupts.c: 156: {
 13635                           ;interrupts.c: 157: _6sCounter = 0;
 13636  00289A  6BD2               	clrf	__6sCounter& (0+255),b	;volatile
 13637                           
 13638                           ; BSR set to: 0
 13639                           ;interrupts.c: 158: globalMinutes++;
 13640  00289C  2A71               	incf	_globalMinutes,f,c	;volatile
 13641                           
 13642                           ;interrupts.c: 159: _totalMinutesFromDayStart++;
 13643  00289E  4BCD               	infsnz	__totalMinutesFromDayStart& (0+255),f,b	;volatile
 13644  0028A0  2BCE               	incf	(__totalMinutesFromDayStart+1)& (0+255),f,b	;volatile
 13645                           
 13646                           ; BSR set to: 0
 13647                           ;interrupts.c: 160: if(globalMinutes == 60)
 13648  0028A2  0E3C               	movlw	60
 13649  0028A4  1871               	xorwf	_globalMinutes,w,c	;volatile
 13650  0028A6  E108               	bnz	i2l5656
 13651                           
 13652                           ; BSR set to: 0
 13653                           ;interrupts.c: 161: {
 13654                           ;interrupts.c: 162: globalMinutes = 0;
 13655  0028A8  6A71               	clrf	_globalMinutes,c	;volatile
 13656                           
 13657                           ; BSR set to: 0
 13658                           ;interrupts.c: 163: globalHours++;
 13659  0028AA  2A72               	incf	_globalHours,f,c	;volatile
 13660                           
 13661                           ; BSR set to: 0
 13662                           ;interrupts.c: 164: if(globalHours == 24)
 13663  0028AC  0E18               	movlw	24
 13664  0028AE  1872               	xorwf	_globalHours,w,c	;volatile
 13665  0028B0  E103               	bnz	i2l5656
 13666                           
 13667                           ; BSR set to: 0
 13668                           ;interrupts.c: 165: {
 13669                           ;interrupts.c: 166: _totalMinutesFromDayStart = 0;
 13670  0028B2  6BCD               	clrf	__totalMinutesFromDayStart& (0+255),b	;volatile
 13671  0028B4  6BCE               	clrf	(__totalMinutesFromDayStart+1)& (0+255),b	;volatile
 13672                           
 13673                           ;interrupts.c: 167: globalHours = 0;
 13674  0028B6  6A72               	clrf	_globalHours,c	;volatile
 13675  0028B8                     i2l5656:
 13676                           
 13677                           ; BSR set to: 0
 13678                           ;interrupts.c: 168: }
 13679                           ;interrupts.c: 169: }
 13680                           ;interrupts.c: 170: }
 13681                           ;interrupts.c: 171: ((void)(TMR0H=((0x10000 - (10000000L/4 / 256 + -1) * 6)>>8),TMR0L=((
      +                          0x10000 - (10000000L/4 / 256 + -1) * 6)&0xFF)));
 13682  0028B8  0E1B               	movlw	27
 13683  0028BA  6ED7               	movwf	4055,c	;volatile
 13684  0028BC  0E28               	movlw	40
 13685  0028BE  6ED6               	movwf	4054,c	;volatile
 13686  0028C0                     i2l85:
 13687  0028C0  FFFF               	dw	65535	; assembler added errata NOP
 13688  0028C2  9273               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 13689  0028C4  0011               	retfie		f
 13690  0028C6  FFFF               	dw	65535	; errata NOP
 13691  0028C8                     __end_of_high_isr:
 13692                           	opt stack 0
 13693                           tblptru	equ	0xFF8
 13694                           tblptrh	equ	0xFF7
 13695                           tblptrl	equ	0xFF6
 13696                           tablat	equ	0xFF5
 13697                           prodh	equ	0xFF4
 13698                           prodl	equ	0xFF3
 13699                           intcon	equ	0xFF2
 13700                           intcon2	equ	0xFF1
 13701                           postinc0	equ	0xFEE
 13702                           wreg	equ	0xFE8
 13703                           indf1	equ	0xFE7
 13704                           postinc1	equ	0xFE6
 13705                           postdec1	equ	0xFE5
 13706                           fsr1h	equ	0xFE2
 13707                           fsr1l	equ	0xFE1
 13708                           bsr	equ	0xFE0
 13709                           indf2	equ	0xFDF
 13710                           postinc2	equ	0xFDE
 13711                           postdec2	equ	0xFDD
 13712                           plusw2	equ	0xFDB
 13713                           fsr2h	equ	0xFDA
 13714                           fsr2l	equ	0xFD9
 13715                           status	equ	0xFD8
 13716                           tblptru	equ	0xFF8
 13717                           tblptrh	equ	0xFF7
 13718                           tblptrl	equ	0xFF6
 13719                           tablat	equ	0xFF5
 13720                           prodh	equ	0xFF4
 13721                           prodl	equ	0xFF3
 13722                           intcon	equ	0xFF2
 13723                           intcon2	equ	0xFF1
 13724                           postinc0	equ	0xFEE
 13725                           wreg	equ	0xFE8
 13726                           indf1	equ	0xFE7
 13727                           postinc1	equ	0xFE6
 13728                           postdec1	equ	0xFE5
 13729                           fsr1h	equ	0xFE2
 13730                           fsr1l	equ	0xFE1
 13731                           bsr	equ	0xFE0
 13732                           indf2	equ	0xFDF
 13733                           postinc2	equ	0xFDE
 13734                           postdec2	equ	0xFDD
 13735                           plusw2	equ	0xFDB
 13736                           fsr2h	equ	0xFDA
 13737                           fsr2l	equ	0xFD9
 13738                           status	equ	0xFD8
 13739                           
 13740                           	psect	rparam
 13741  0000                     tblptru	equ	0xFF8
 13742                           tblptrh	equ	0xFF7
 13743                           tblptrl	equ	0xFF6
 13744                           tablat	equ	0xFF5
 13745                           prodh	equ	0xFF4
 13746                           prodl	equ	0xFF3
 13747                           intcon	equ	0xFF2
 13748                           intcon2	equ	0xFF1
 13749                           postinc0	equ	0xFEE
 13750                           wreg	equ	0xFE8
 13751                           indf1	equ	0xFE7
 13752                           postinc1	equ	0xFE6
 13753                           postdec1	equ	0xFE5
 13754                           fsr1h	equ	0xFE2
 13755                           fsr1l	equ	0xFE1
 13756                           bsr	equ	0xFE0
 13757                           indf2	equ	0xFDF
 13758                           postinc2	equ	0xFDE
 13759                           postdec2	equ	0xFDD
 13760                           plusw2	equ	0xFDB
 13761                           fsr2h	equ	0xFDA
 13762                           fsr2l	equ	0xFD9
 13763                           status	equ	0xFD8
 13764                           
 13765                           	psect	temp
 13766  000073                     btemp:
 13767                           	opt stack 0
 13768  000073                     	ds	1
 13769  0000                     int$flags	set	btemp
 13770                           tblptru	equ	0xFF8
 13771                           tblptrh	equ	0xFF7
 13772                           tblptrl	equ	0xFF6
 13773                           tablat	equ	0xFF5
 13774                           prodh	equ	0xFF4
 13775                           prodl	equ	0xFF3
 13776                           intcon	equ	0xFF2
 13777                           intcon2	equ	0xFF1
 13778                           postinc0	equ	0xFEE
 13779                           wreg	equ	0xFE8
 13780                           indf1	equ	0xFE7
 13781                           postinc1	equ	0xFE6
 13782                           postdec1	equ	0xFE5
 13783                           fsr1h	equ	0xFE2
 13784                           fsr1l	equ	0xFE1
 13785                           bsr	equ	0xFE0
 13786                           indf2	equ	0xFDF
 13787                           postinc2	equ	0xFDE
 13788                           postdec2	equ	0xFDD
 13789                           plusw2	equ	0xFDB
 13790                           fsr2h	equ	0xFDA
 13791                           fsr2l	equ	0xFD9
 13792                           status	equ	0xFD8


Data Sizes:
    Strings     71
    Constant    15
    Data        1
    BSS         576
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    108     114
    BANK0           128      0     115
    BANK1           256     14     214
    BANK2           256      0     256
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    mktime@timeptr	PTR struct tm size(1) Largest target is 18
		 -> ModbusProcess_FC100@newTime(COMRAM[18]), 

    CopyStringToBuffer@src	PTR const unsigned char  size(1) Largest target is 20
		 -> STR_27(CODE[11]), STR_25(CODE[4]), STR_23(CODE[20]), STR_21(CODE[16]), 
		 -> STR_19(CODE[5]), STR_17(CODE[9]), STR_15(CODE[6]), STR_13(CODE[11]), 
		 -> STR_11(CODE[4]), STR_9(CODE[20]), STR_7(CODE[16]), STR_5(CODE[5]), 
		 -> STR_3(CODE[9]), STR_1(CODE[6]), 

    ModbusProcess_FC16@regs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSHoldingRegs(BANK1[30]), 

    ModbusProcess_FC15@regs	PTR unsigned short  size(1) Largest target is 2
		 -> _MODBUSCoils(BANK0[2]), 

    ModbusProcess_FC6@regs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSHoldingRegs(BANK1[30]), 

    ModbusProcess_FC5@regs	PTR unsigned short  size(1) Largest target is 2
		 -> _MODBUSCoils(BANK0[2]), 

    ModbusProcess_FC3@regs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSHoldingRegs(BANK1[30]), _MODBUSInputRegs(BANK1[30]), 

    ModbusGetLastCommand@command	PTR unsigned char  size(1) Largest target is 1
		 -> io_poll@lastCommand(COMRAM[1]), 

    ModbusGetLastCommand@count	PTR unsigned short  size(1) Largest target is 2
		 -> io_poll@lastEndAddress(COMRAM[2]), 

    ModbusGetLastCommand@address	PTR unsigned short  size(1) Largest target is 2
		 -> io_poll@lastAddress(COMRAM[2]), 

    ModbusPoll@inputRegs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSInputRegs(BANK1[30]), 

    ModbusPoll@holdingRegs	PTR unsigned short  size(2) Largest target is 30
		 -> _MODBUSHoldingRegs(BANK1[30]), 

    ModbusPoll@coils	PTR unsigned short  size(1) Largest target is 2
		 -> _MODBUSCoils(BANK0[2]), 

    sp__ModbusGetUserCommandAdditional3Lo	PTR unsigned char  size(1) Largest target is 1
		 -> ModbusUserCommandAdditional3Lo(BANK0[1]), 

    sp__ModbusGetUserCommandAdditional3Hi	PTR unsigned char  size(1) Largest target is 1
		 -> ModbusUserCommandAdditional3Hi(BANK0[1]), 

    sp__ModbusGetUserCommandAdditional2Lo	PTR unsigned char  size(1) Largest target is 1
		 -> ModbusUserCommandAdditional2Lo(BANK0[1]), 

    SetTime@newTime	PTR long  size(1) Largest target is 4
		 -> ModbusProcess_FC100@newRawTime(COMRAM[4]), 

    sp__ModbusGetLastCommand	PTR unsigned char  size(1) Largest target is 1
		 -> _lastFunction(BANK0[1]), 

    io_poll@lastFunction	PTR unsigned char  size(1) Largest target is 1
		 -> _lastFunction(BANK0[1]), 

    sp__ModbusGetUserCommandId	PTR unsigned char  size(1) Largest target is 1
		 -> ModbusUserCommandId(BANK0[1]), 

    sp__ModbusGetUserCommandAdditional1Lo	PTR unsigned char  size(1) Largest target is 1
		 -> ModbusUserCommandAdditional1Lo(BANK0[1]), 

    sp__ModbusGetUserCommandAdditional2Hi	PTR unsigned char  size(1) Largest target is 1
		 -> ModbusUserCommandAdditional2Hi(BANK0[1]), 

    sp__ModbusGetUserCommandAdditional1Hi	PTR unsigned char  size(1) Largest target is 1
		 -> ModbusUserCommandAdditional1Hi(BANK0[1]), 

    sp__ModbusGetUserCommandData	PTR unsigned char  size(1) Largest target is 1
		 -> ModbusUserCommandData(BANK0[1]), 

    sp__GetTime	PTR long  size(1) Largest target is 4
		 -> currentTime(BANK0[4]), 

    ProcessLightBlock@curMs	PTR unsigned long  size(2) Largest target is 4
		 -> main@curMs(BANK1[4]), 

    SetHourMin@sec	PTR unsigned char  size(2) Largest target is 140
		 -> _au8Buffer(BANK1[140]), 

    SetHourMin@newMin	PTR unsigned char  size(2) Largest target is 140
		 -> _au8Buffer(BANK1[140]), 

    SetHourMin@newHour	PTR unsigned char  size(2) Largest target is 140
		 -> _au8Buffer(BANK1[140]), 

    getTotalMinutes@totalMinutes	PTR unsigned int  size(2) Largest target is 2
		 -> main@totalMinutes(BANK1[2]), ProcessDiary@totalMinutes(COMRAM[2]), LoadNextEvent@totalMinutes(COMRAM[2]), 

    getHourMin@min	PTR unsigned char  size(2) Largest target is 1
		 -> main@minute(BANK1[1]), 

    getHourMin@hour	PTR unsigned char  size(2) Largest target is 1
		 -> main@hour(BANK1[1]), 

    PortWrite@buf	PTR unsigned char  size(2) Largest target is 140
		 -> _au8Buffer(BANK1[140]), 


Critical Paths under _main in COMRAM

    _main->_ModbusPoll
    _ProcessUserCommands->_CommandSetLed
    _CommandSetStatusLed->_PlaySound
    _CommandSetLed->_PlaySound
    _InitFromEeprom->_ShowFailure
    _ShowFailure->_LightLed
    _ShowFailure->_LightStatusLed
    _Modbus->_ModbusInit
    _SwitchOffAllDiaryLeds->_LightLed
    _ResetEventFromCommand->_LightLed
    _ResetEvent->_LightLed
    _ProcessLightBlock->_UpdateLedRegister
    _ProcessDiary->_PlaySound
    _PlaySound->_SoundPlayNextStep
    _SoundPlayNextStep->_millis
    _LoadNextEvent->_getTotalMinutes
    _ModbusPoll->_ModbusProcess_FC100
    _ModbusValidateRequest->_ModbusCalcCRC
    _ModbusProcess_FC7->_ModbusSendTxBuffer
    _ModbusProcess_FC6->_ModbusSendTxBuffer
    _ModbusProcess_FC5->_ModbusSendTxBuffer
    _ModbusProcess_FC43->_ModbusSendTxBuffer
    _ModbusProcess_FC3->_ModbusSendTxBuffer
    _ModbusProcess_FC21->_ModbusSendTxBuffer
    _ModbusProcess_FC17->_ModbusSendTxBuffer
    _ModbusProcess_FC16->_ModbusSendTxBuffer
    _ModbusProcess_FC15->_ModbusSendTxBuffer
    _ModbusProcess_FC102->_ModbusSendTxBuffer
    _ModbusProcess_FC101->_ModbusSendTxBuffer
    _ModbusProcess_FC100->_mktime
    _mktime->_ymd_to_scalar
    _ymd_to_scalar->_years_to_days
    _years_to_days->___lwdiv
    _months_to_days->___lwdiv
    _isleap->___lwmod
    _SetHourMin->___lbdiv
    _SetHourMin->___lbmod
    _ModbusProcess_FC1->_ModbusSendTxBuffer
    _ModbusSendTxBuffer->_ModbusCalcCRC
    _ModbusGetRxBufferHeader->_PortRead
    _ModbusGetRxBuffer->_PortRead

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                19    19      0   67181
                                            103 COMRAM     5     5      0
                                              0 BANK1     14    14      0
                          _AddSecond
                _ConfigureOscillator
                            _GetTime
                            _InitApp
                     _InitFromEeprom
                     _LightStatusLed
                      _LoadNextEvent
                         _ModbusPoll
        _ModbusSetExceptionStatusBit
                       _ProcessDiary
                  _ProcessLightBlock
                         _ResetEvent
              _ResetEventFromCommand
                  _SoundPlayNextStep
                        _StopPlaying
              _SwitchOffAllDiaryLeds
                         _getHourMin
                    _getTotalMinutes
                            _io_poll
                             _millis
                           _pwm_init
 ---------------------------------------------------------------------------------
 (1) _pwm_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _io_poll                                             11    11      0   18268
                                             40 COMRAM    10    10      0
                     _InitFromEeprom
                     _LightStatusLed
                      _LoadNextEvent
               _ModbusGetLastCommand
        _ModbusSetExceptionStatusBit
                _ProcessUserCommands
 ---------------------------------------------------------------------------------
 (2) _ProcessUserCommands                                  1     1      0    9545
                      _CommandSetLed
                _CommandSetStatusLed
  _ModbusGetUserCommandAdditional1Lo
           _ModbusGetUserCommandData
             _ModbusGetUserCommandId
        _ModbusSetExceptionStatusBit
                          _PlaySound
 ---------------------------------------------------------------------------------
 (3) _ModbusGetUserCommandId                               2     0      2       0
                                              6 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _CommandSetStatusLed                                  4     4      0    3034
                                             30 COMRAM     4     4      0
                     _LightStatusLed
  _ModbusGetUserCommandAdditional1Hi
  _ModbusGetUserCommandAdditional1Lo
           _ModbusGetUserCommandData
        _ModbusSetExceptionStatusBit
                          _PlaySound
                        _StopPlaying
 ---------------------------------------------------------------------------------
 (3) _CommandSetLed                                       10    10      0    4968
                                             30 COMRAM    10    10      0
                            _GetTime
                           _LightLed
  _ModbusGetUserCommandAdditional1Hi
  _ModbusGetUserCommandAdditional1Lo
  _ModbusGetUserCommandAdditional2Hi
           _ModbusGetUserCommandData
        _ModbusSetExceptionStatusBit
                          _PlaySound
                        _StopPlaying
 ---------------------------------------------------------------------------------
 (3) _ModbusGetUserCommandData                             2     0      2       0
                                              6 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) _ModbusGetUserCommandAdditional2Hi                    2     0      2       0
                                              6 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _ModbusGetUserCommandAdditional1Lo                    2     0      2       0
                                              6 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) _ModbusGetUserCommandAdditional1Hi                    2     0      2       0
                                              6 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _ModbusGetLastCommand                                 3     1      2     373
                                              6 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _InitFromEeprom                                       4     4      0    5459
                                             15 COMRAM     4     4      0
                      _LoadNextEvent
                             _Modbus
                        _ShowFailure
                   _SwitchOffAllLeds
 ---------------------------------------------------------------------------------
 (3) _SwitchOffAllLeds                                     1     1      0     130
                                              6 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _ShowFailure                                          1     1      0    4179
                                             14 COMRAM     1     1      0
                           _LightLed
                     _LightStatusLed
 ---------------------------------------------------------------------------------
 (4) _LightStatusLed                                       8     6      2    1234
                                              6 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (3) _Modbus                                               3     1      2     526
                                             11 COMRAM     3     1      2
                         _ModbusInit
 ---------------------------------------------------------------------------------
 (4) _ModbusInit                                           5     3      2     279
                                              6 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _getHourMin                                           4     0      4     173
                                              6 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (1) _SwitchOffAllDiaryLeds                                1     1      0    3013
                                             14 COMRAM     1     1      0
                           _LightLed
 ---------------------------------------------------------------------------------
 (1) _ResetEventFromCommand                                3     3      0    2982
                                             14 COMRAM     3     3      0
                           _LightLed
                        _StopPlaying
 ---------------------------------------------------------------------------------
 (1) _ResetEvent                                           5     5      0    2982
                                             14 COMRAM     5     5      0
            _GetCurrentEventDiodeNum
                           _LightLed
                        _StopPlaying
 ---------------------------------------------------------------------------------
 (1) _ProcessLightBlock                                    6     4      2     155
                                              7 COMRAM     6     4      2
                  _UpdateLedRegister
 ---------------------------------------------------------------------------------
 (2) _UpdateLedRegister                                    1     1      0      31
                                              6 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ProcessDiary                                         6     6      0    4444
                                             30 COMRAM     6     6      0
            _GetCurrentEventDiodeNum
                            _GetTime
                           _LightLed
                      _LoadNextEvent
                          _PlaySound
                    _getTotalMinutes
 ---------------------------------------------------------------------------------
 (3) _PlaySound                                            8     6      2     834
                                             22 COMRAM     8     6      2
                            _GetTime
  _ModbusGetUserCommandAdditional1Lo (ARG)
           _ModbusGetUserCommandData (ARG)
                  _SoundPlayNextStep
 ---------------------------------------------------------------------------------
 (4) _SoundPlayNextStep                                    8     8      0     275
                                             14 COMRAM     8     8      0
                            _GetTime
                      _SetBuzzerDuty
                        _StopPlaying
                             _millis
 ---------------------------------------------------------------------------------
 (5) _StopPlaying                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _SetBuzzerDuty                                        4     2      2     139
                                              6 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (5) _GetTime                                              2     0      2       0
                                              6 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _LoadNextEvent                                        5     5      0     438
                                              8 COMRAM     5     5      0
                    _getTotalMinutes
 ---------------------------------------------------------------------------------
 (3) _getTotalMinutes                                      2     0      2     162
                                              6 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) _LightLed                                             8     6      2    2914
                                              6 COMRAM     8     6      2
            _GetCurrentEventDiodeNum (ARG)
 ---------------------------------------------------------------------------------
 (2) _GetCurrentEventDiodeNum                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ModbusPoll                                          12     3      9   26034
                                             91 COMRAM    12     3      9
               _ModbusBuildException
                  _ModbusGetRxBuffer
            _ModbusGetRxBufferHeader
                  _ModbusProcess_FC1
                _ModbusProcess_FC100
                _ModbusProcess_FC101
                _ModbusProcess_FC102
                 _ModbusProcess_FC15
                 _ModbusProcess_FC16
                 _ModbusProcess_FC17
                 _ModbusProcess_FC21
                  _ModbusProcess_FC3
                 _ModbusProcess_FC43
                  _ModbusProcess_FC5
                  _ModbusProcess_FC6
                  _ModbusProcess_FC7
                 _ModbusSendTxBuffer
        _ModbusSetExceptionStatusBit
              _ModbusValidateRequest
                      _PortAvailable
                _PortClearReadBuffer
                             _millis
 ---------------------------------------------------------------------------------
 (2) _PortClearReadBuffer                                  0     0      0       0
                     _InitUartBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusValidateRequest                               22    22      0    1187
                                             19 COMRAM    22    22      0
                      _ModbusCalcCRC
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC7                                    1     1      0     797
                                             21 COMRAM     1     1      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC6                                   10     7      3    1041
                                             21 COMRAM    10     7      3
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC5                                   10    10      0    1022
                                             21 COMRAM    10    10      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC43                                   3     3      0    3433
                                             21 COMRAM     3     3      0
                 _CopyStringToBuffer
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (3) _CopyStringToBuffer                                   5     3      2    2351
                                              6 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC3                                   12     9      3    1378
                                             21 COMRAM    12     9      3
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC21                                   9     9      0    1060
                                             21 COMRAM     9     9      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC17                                   1     1      0     797
                                             21 COMRAM     1     1      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC16                                  14    11      3    1360
                                             21 COMRAM    14    11      3
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC15                                  19    19      0    1331
                                             21 COMRAM    19    19      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC102                                  1     1      0     797
                                             21 COMRAM     1     1      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC101                                  1     1      0     797
                                             21 COMRAM     1     1      0
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC100                                 23    23      0    6553
                                             68 COMRAM    23    23      0
                 _ModbusSendTxBuffer
        _ModbusSetExceptionStatusBit
                         _SetHourMin
                            _SetTime
                             _mktime
 ---------------------------------------------------------------------------------
 (3) _mktime                                              23    19      4    3622
                                             45 COMRAM    23    19      4
                      _ymd_to_scalar
 ---------------------------------------------------------------------------------
 (4) _ymd_to_scalar                                       16    10      6    3199
                                             29 COMRAM    16    10      6
                             _isleap
                     _months_to_days
                      _years_to_days
 ---------------------------------------------------------------------------------
 (5) _years_to_days                                       16    12      4     944
                                             13 COMRAM    16    12      4
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (5) _months_to_days                                       6     4      2     811
                                             13 COMRAM     6     4      2
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              7     3      4     703
                                              6 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) _isleap                                               4     2      2     747
                                             11 COMRAM     4     2      2
                            ___lwmod
 ---------------------------------------------------------------------------------
 (6) ___lwmod                                              5     1      4     540
                                              6 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (3) _SetTime                                              1     1      0      64
                                              6 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _SetHourMin                                          20    14      6    1081
                                             10 COMRAM    20    14      6
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (4) ___lbmod                                              4     3      1     309
                                              6 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (4) ___lbdiv                                              4     3      1     318
                                              6 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (3) _ModbusSetExceptionStatusBit                          4     3      1     709
                                              6 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _ModbusProcess_FC1                                   17    15      2    1480
                                             21 COMRAM    17    15      2
                 _ModbusSendTxBuffer
 ---------------------------------------------------------------------------------
 (2) _ModbusSendTxBuffer                                   2     2      0     763
                                             19 COMRAM     2     2      0
                      _ModbusCalcCRC
                          _PortWrite
                             _millis
 ---------------------------------------------------------------------------------
 (1) _millis                                               8     4      4      34
                                              6 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _PortWrite                                            4     1      3     284
                                              6 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (3) _ModbusCalcCRC                                       13    11      2     377
                                              6 COMRAM    13    11      2
 ---------------------------------------------------------------------------------
 (2) _ModbusGetRxBufferHeader                              2     2      0     102
                                              7 COMRAM     2     2      0
                      _PortAvailable
                           _PortRead
 ---------------------------------------------------------------------------------
 (2) _ModbusGetRxBuffer                                    2     2      0      71
                                              7 COMRAM     2     2      0
                      _PortAvailable
                           _PortRead
 ---------------------------------------------------------------------------------
 (3) _PortRead                                             1     1      0      34
                                              6 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _PortAvailable                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ModbusBuildException                                 2     2      0      65
                                              6 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              1     1      0      99
                                              6 COMRAM     1     1      0
                     _InitUartBuffer
                          _PortBegin
 ---------------------------------------------------------------------------------
 (2) _PortBegin                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _InitUartBuffer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _AddSecond                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _low_isr                                              6     6      0      23
                                              0 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _high_isr                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AddSecond
   _ConfigureOscillator
   _GetTime
   _InitApp
     _InitUartBuffer
     _PortBegin
   _InitFromEeprom
     _LoadNextEvent
       _getTotalMinutes
     _Modbus
       _ModbusInit
     _ShowFailure
       _LightLed
         _GetCurrentEventDiodeNum (ARG)
       _LightStatusLed
     _SwitchOffAllLeds
   _LightStatusLed
   _LoadNextEvent
     _getTotalMinutes
   _ModbusPoll
     _ModbusBuildException
     _ModbusGetRxBuffer
       _PortAvailable
       _PortRead
     _ModbusGetRxBufferHeader
       _PortAvailable
       _PortRead
     _ModbusProcess_FC1
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC100
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
       _ModbusSetExceptionStatusBit
       _SetHourMin
         ___lbdiv
         ___lbmod
       _SetTime
       _mktime
         _ymd_to_scalar
           _isleap
             ___lwmod
           _months_to_days
             ___lwdiv
           _years_to_days
             ___lwdiv
     _ModbusProcess_FC101
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC102
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC15
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC16
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC17
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC21
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC3
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC43
       _CopyStringToBuffer
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC5
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC6
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusProcess_FC7
       _ModbusSendTxBuffer
         _ModbusCalcCRC
         _PortWrite
         _millis
     _ModbusSendTxBuffer
       _ModbusCalcCRC
       _PortWrite
       _millis
     _ModbusSetExceptionStatusBit
     _ModbusValidateRequest
       _ModbusCalcCRC
     _PortAvailable
     _PortClearReadBuffer
       _InitUartBuffer
     _millis
   _ModbusSetExceptionStatusBit
   _ProcessDiary
     _GetCurrentEventDiodeNum
     _GetTime
     _LightLed
       _GetCurrentEventDiodeNum (ARG)
     _LoadNextEvent
       _getTotalMinutes
     _PlaySound
       _GetTime
       _ModbusGetUserCommandAdditional1Lo (ARG)
       _ModbusGetUserCommandData (ARG)
       _SoundPlayNextStep (ARG)
         _GetTime
         _SetBuzzerDuty
         _StopPlaying
         _millis
     _getTotalMinutes
   _ProcessLightBlock
     _UpdateLedRegister
   _ResetEvent
     _GetCurrentEventDiodeNum
     _LightLed
       _GetCurrentEventDiodeNum (ARG)
     _StopPlaying
   _ResetEventFromCommand
     _LightLed
       _GetCurrentEventDiodeNum (ARG)
     _StopPlaying
   _SoundPlayNextStep
     _GetTime
     _SetBuzzerDuty
     _StopPlaying
     _millis
   _StopPlaying
   _SwitchOffAllDiaryLeds
     _LightLed
       _GetCurrentEventDiodeNum (ARG)
   _getHourMin
   _getTotalMinutes
   _io_poll
     _InitFromEeprom
       _LoadNextEvent
         _getTotalMinutes
       _Modbus
         _ModbusInit
       _ShowFailure
         _LightLed
           _GetCurrentEventDiodeNum (ARG)
         _LightStatusLed
       _SwitchOffAllLeds
     _LightStatusLed
     _LoadNextEvent
       _getTotalMinutes
     _ModbusGetLastCommand
     _ModbusSetExceptionStatusBit
     _ProcessUserCommands
       _CommandSetLed
         _GetTime
         _LightLed
           _GetCurrentEventDiodeNum (ARG)
         _ModbusGetUserCommandAdditional1Hi
         _ModbusGetUserCommandAdditional1Lo
         _ModbusGetUserCommandAdditional2Hi
         _ModbusGetUserCommandData
         _ModbusSetExceptionStatusBit
         _PlaySound
           _GetTime
           _ModbusGetUserCommandAdditional1Lo (ARG)
           _ModbusGetUserCommandData (ARG)
           _SoundPlayNextStep (ARG)
             _GetTime
             _SetBuzzerDuty
             _StopPlaying
             _millis
         _StopPlaying
       _CommandSetStatusLed
         _LightStatusLed
         _ModbusGetUserCommandAdditional1Hi
         _ModbusGetUserCommandAdditional1Lo
         _ModbusGetUserCommandData
         _ModbusSetExceptionStatusBit
         _PlaySound
           _GetTime
           _ModbusGetUserCommandAdditional1Lo (ARG)
           _ModbusGetUserCommandData (ARG)
           _SoundPlayNextStep (ARG)
             _GetTime
             _SetBuzzerDuty
             _StopPlaying
             _millis
         _StopPlaying
       _ModbusGetUserCommandAdditional1Lo
       _ModbusGetUserCommandData
       _ModbusGetUserCommandId
       _ModbusSetExceptionStatusBit
       _PlaySound
         _GetTime
         _ModbusGetUserCommandAdditional1Lo (ARG)
         _ModbusGetUserCommandData (ARG)
         _SoundPlayNextStep (ARG)
           _GetTime
           _SetBuzzerDuty
           _StopPlaying
           _millis
   _millis
   _pwm_init

 _low_isr (ROOT)

 _high_isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0     100       9      100.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      E      D6       7       83.6%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      73       5       89.8%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     6C      72       1       90.5%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2BB      15        0.0%
DATA                 0      0     2BB       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Sat Jun 04 16:44:18 2016

                                   LoadNextEvent@totalMinutes 000B  
                                               _years_to_days 1BCA  
                          ModbusProcess_FC15@u8CopyBufferSize 001D  
                                              _ResetEvent$909 0012  
                                 __end_of_CommandSetStatusLed 261C  
                                  ModbusProcess_FC16@u8regsno 0022  
                                                          l63 2DB2  
                                                          l66 2DB6  
                                                          l74 2CAC  
                                                          l78 2CCC  
                                                          _RD 007D30  
                                                          _WR 007D31  
                                         months_to_days@month 000E  
                                                 __CFG_BOR$ON 000000  
                                                          bsr 000FE0  
                               ModbusProcess_FC5@u8currentBit 001F  
                              ModbusProcess_FC15@u16StartCoil 0020  
                                                __CFG_CP0$OFF 000000  
                                                __CFG_CP1$OFF 000000  
                                                __CFG_CP2$OFF 000000  
                                                __CFG_CP3$OFF 000000  
                                                 __CFG_OSC$HS 000000  
                                                         l112 2EC4  
                                                         l113 2EDA  
                                         ModbusPoll@inputRegs 005F  
                                                         l109 2EB6  
                                                         l242 2B4E  
                                                         l403 2A18  
                                                         l411 2C58  
                                                         l244 2B58  
                                                         l316 21AC  
                                                         l245 2B62  
                                                         l246 2B6C  
                                                         l247 2B88  
                                                         l433 1826  
                                                         l266 0AD2  
                                                         l258 0C56  
                                                         l419 188E  
                                                         l285 2E3E  
                                                         l438 2312  
                                                         l470 1938  
                                                         l393 1F6E  
                                                         l289 1DBC  
                                                         l465 19A8  
                                                         l481 2620  
                                                         l386 20F4  
                                                         l475 2616  
                                                         l483 2622  
                                                         l812 2C14  
                                                         l804 2D4A  
                                                         l389 20E0  
                                                         l493 269A  
                                                         l399 1F62  
                                                         l832 0CD6  
                                                         l841 0ECC  
                                                         l497 2590  
                                                         l763 2AAE  
                                                         l827 0C9E  
                                                         l916 1BA4  
                                                         l828 0ED4  
                                                         l935 236A  
                                                         l767 14E0  
                                                         l953 1638  
                                                         l971 1DD2  
                                                         l885 1746  
                                                         l973 1DD6  
                                                         l798 2F84  
                                                         l969 1DCE  
                                                         _GIE 007F97  
                                                __CFG_CPB$OFF 000000  
                                                         _PR2 000FCB  
                                                __CFG_CPD$OFF 000000  
                                    __end_of_SwitchOffAllLeds 2E94  
                            ModbusValidateRequest@recLenBytes 001C  
                                       ModbusPoll@holdingRegs 0062  
                                                __CFG_BORV$42 000000  
                                                __CFG_IDLOC0$ 000000  
                                                __CFG_IDLOC1$ 000001  
                                                __CFG_IDLOC2$ 000000  
                                                         prod 000FF3  
                                          _CopyStringToBuffer 2808  
                                                         wreg 000FE8  
                                    __size_of_getTotalMinutes 0026  
                            ModbusValidateRequest@isSupported 0022  
                                  CommandSetStatusLed@soundId 0020  
                                               _LoadNextEvent 1774  
                                               _globalMinutes 0071  
                                                __CFG_WDT$OFF 000000  
                                                        l1409 2A5E  
                                                        l1429 0690  
                                                        l1383 29C2  
                                                        l1393 2B3C  
                                                        l6012 1ED0  
                                                        l6110 2C6C  
                                                        l6014 1F02  
                                                        l6024 1F26  
                                                        l6008 1EBE  
                                                        l6122 2C8C  
                                                        l6114 2C74  
                                                        l6116 2C7A  
                                                        l7100 15C8  
                                                        l6046 2A90  
                                                        l6126 2C94  
                                                        l6142 2E10  
                                                        l6134 2DF8  
                                                        l6160 2430  
                                                        l7104 15DC  
                                                        l8000 0F86  
                                                        l6090 2762  
                                                        l6082 2744  
                                                        l6074 2730  
                                                        l7050 23A0  
                                                        l7114 1604  
                                                        l6218 2E72  
                                                        l6314 1912  
                                                        l6306 18FA  
                                                        l6156 2406  
                                                        l7052 23A2  
                                                        l7108 15F0  
                                                        l6420 2B76  
                                                        l8100 10B6  
                                                        l8020 0FC6  
                                                        l6406 0954  
                                                        l7150 1DFE  
                                                        l7118 1624  
                                                        l8014 0FB2  
                                                        l8006 0F98  
                                                        l6326 1988  
                                                        l6096 276C  
                                                        l7152 1E0A  
                                                        l7072 1530  
                                                        l7064 14FC  
                                                        l8016 0FBA  
                                                        l8008 0FA0  
                                                        l6186 2DA8  
                                                        l6602 2BDE  
                                                        l6610 2C00  
                                                        l5810 2996  
                                                        l7082 1572  
                                                        l8122 10FC  
                                                        l8114 10E2  
                                                        l8106 10C8  
                                                        l8050 1020  
                                                        l8042 1006  
                                                        l8034 0FEC  
                                                        l8026 0FD4  
                                                        l8130 1110  
                                                        l6338 25BE  
                                                        l6188 2DAA  
                                                        l5820 29B8  
                                                        l5812 299C  
                                                        l7092 15A0  
                                                        l7084 1578  
                                                        l8124 1104  
                                                        l8116 10EA  
                                                        l8108 10D0  
                                                        l8052 1028  
                                                        l8044 100E  
                                                        l8036 0FF4  
                                                        l8028 0FDA  
                                                        l8132 1126  
                                                        l6348 25E2  
                                                        l6532 2648  
                                                        l5830 2B18  
                                                        l6390 285C  
                                                        l6702 0D9C  
                                                        l8070 105A  
                                                        l8062 1042  
                                                        l7238 2E2C  
                                                        l6534 2654  
                                                        l6542 267E  
                                                        l5832 2B1E  
                                                        l5808 298C  
                                                        l7176 1E7E  
                                                        l6384 2836  
                                                        l7096 15B4  
                                                        l7088 158C  
                                                        l7600 140C  
                                                        l8080 107C  
                                                        l8072 1062  
                                                        l8064 1048  
                                                        l8056 1034  
                                                        l6552 2D00  
                                                        l6536 265A  
                                                        l8232 11DE  
                                                        l8216 1182  
                                                        l7522 26E8  
                                                        l6618 2C12  
                                                        l7178 1E90  
                                                        l6714 0DC2  
                                                        l6642 0CCC  
                                                        l6634 0CA2  
                                                        l5850 2072  
                                                        l7426 29E2  
                                                        l6538 2678  
                                                        l8226 11CC  
                                                        l6580 2D1A  
                                                        l5916 2CC4  
                                                        l6812 170A  
                                                        l6804 16AE  
                                                        l5836 2B32  
                                                        l5828 2B0E  
                                                        l6396 069C  
                                                        l6660 0D26  
                                                        l6652 0CFE  
                                                        l6644 0CD2  
                                                        l7620 1458  
                                                        l7612 143E  
                                                        l7604 141A  
                                                        l7540 135A  
                                                        l8156 22CC  
                                                        l8148 229E  
                                                        l8092 10A2  
                                                        l6556 2D0E  
                                                        l6548 2CEE  
                                                        l8180 2564  
                                                        l8236 11EA  
                                                        l6814 1738  
                                                        l6822 174C  
                                                        l5790 2A5C  
                                                        l6750 0E62  
                                                        l6734 0E44  
                                                        l6638 0CC4  
                                                        l7550 1384  
                                                        l5950 0AA8  
                                                        l5942 0998  
                                                        l8086 108E  
                                                        l8078 1074  
                                                        l8190 2576  
                                                        l8254 127A  
                                                        l8238 11EE  
                                                        l6680 0D4E  
                                                        l6664 0D2C  
                                                        l6656 0D02  
                                                        l6648 0CDC  
                                                        l7640 1484  
                                                        l7632 1478  
                                                        l7624 145E  
                                                        l7616 1446  
                                                        l7608 142C  
                                                        l7536 1354  
                                                        l5960 0BA4  
                                                        l5952 0B00  
                                                        l5944 0A2E  
                                                        l5936 097C  
                                                        l8088 1096  
                                                        l7448 2C30  
                                                        l8280 1302  
                                                        l8248 124C  
                                                        l6586 2D28  
                                                        l6690 0D6C  
                                                        l6682 0D5A  
                                                        l6674 0D44  
                                                        l6770 0E84  
                                                        l7562 13AE  
                                                        l8098 10B0  
                                                        l8282 1312  
                                                        l6828 1764  
                                                        l6924 1AFA  
                                                        l7652 1496  
                                                        l7644 148A  
                                                        l7636 147E  
                                                        l7628 1466  
                                                        l5956 0B7E  
                                                        l8276 12F6  
                                                        l6934 1B64  
                                                        l6854 223A  
                                                        l6758 0E70  
                                                        l7590 13EE  
                                                        l7574 13C4  
                                                        l7566 13B4  
                                                        l5966 0C1A  
                                                        l7830 178C  
                                                        l5878 20E6  
                                                        l5982 1CD8  
                                                        l6936 1B96  
                                                        l6944 1BAA  
                                                        l6848 21E6  
                                                        l7648 1490  
                                                        l5968 0C36  
                                                        l5976 0C3E  
                                                        l5992 1D42  
                                                        l7904 211C  
                                                        l6874 24C0  
                                                        l7658 149C  
                                                        l7594 13F2  
                                                        l7834 1796  
                                                        l5994 1D60  
                                                        l5986 1CFE  
                                                        l7922 2144  
                                                        l6796 169E  
                                                        l6972 1FB0  
                                                        l6876 24F2  
                                                        l7596 13F8  
                                                        l7860 180A  
                                                        l7836 1798  
                                                        l5988 1D1C  
                                                        l7932 2156  
                                                        l7916 2136  
                                                        l6982 202C  
                                                        l7862 1812  
                                                        l7870 1858  
                                                        l7854 17F8  
                                                        l7846 17CE  
                                                        l5998 1D8E  
                                                        l7950 2180  
                                                        l7864 181A  
                                                        l7856 17FE  
                                                        l6978 2008  
                                                        l7858 1804  
                                                        l7938 2164  
                                                        l7868 182C  
                                                        l7956 218A  
                                                        l7990 0F66  
                                                        l7992 0F6C  
                                                        l7984 0F58  
                                                        l7978 0F3C  
                                                        l7998 0F7E  
                                                        STR_1 0648  
                                                        STR_3 063F  
                                                        STR_5 064E  
                                                        STR_7 0624  
                                                        STR_9 0610  
                                           _UpdateLedRegister 2B48  
                                                        _LATA 000F89  
                                                        _LATB 000F8A  
                                                        u5004 1CF0  
                                                        u5005 1CEA  
                                                        u5014 1D10  
                                                        u5015 1D0A  
                                                        u5034 1D34  
                                                        u5035 1D2E  
                                                        u5044 1D54  
                                                        u5045 1D4E  
                                                        u6014 24AA  
                                                        u6015 24A2  
                                                        u5144 2A82  
                                                        u5240 23EE  
                                                        u6024 24D6  
                                                        u5064 1D7C  
                                                        u5145 2A7C  
                                                        u6025 24CE  
                                                        u5065 1D74  
                                                        u5154 2AA2  
                                                        u6034 1B28  
                                                        u5074 1DA4  
                                                        u5155 2A9C  
                                                        u6035 1B22  
                                                        u5075 1D9C  
                                                        u6054 1B4E  
                                                        u6055 1B46  
                                                        u6064 1B7A  
                                                        u6065 1B72  
                                                        u5425 25C8  
                                         ?_CopyStringToBuffer 0007  
                                                        u7210 121A  
                                                        u5460 0676  
                                                        u4804 0A26  
                                                        _RCIF 007CF5  
                                                        u4805 0A20  
                                                        u5365 18F2  
                                                        u5470 0690  
                                                        u5710 0D26  
                                                        u4814 0A42  
                                                        u4815 0A3C  
                                                        u4655 2086  
                                                        u4824 0A66  
                                                        u4825 0A60  
                                                        u5810 0E42  
                                                        u5650 0C9A  
                                                        u4914 0B90  
                                                        u4915 0B8A  
                                                        u4924 0BB8  
                                                        u4844 0A94  
                                                        u4925 0BB2  
                                                        u4845 0A8E  
                                                        u4934 0BDC  
                                                        u4854 0ABC  
                                                        u4774 09AC  
                                                        u7270 12A8  
                                                        u4935 0BD6  
                                                        u4855 0AB6  
                                                        u4775 09A6  
                                                        u4864 0AE6  
                                                        u4784 09D4  
                                                        i1l97 0064  
                                                        u4865 0AE0  
                                                        u4785 09CE  
                                                        i1l98 0038  
                                                        u5690 0CFE  
                                                        u4954 0C06  
                                                        u4874 0B14  
                                                        u4794 09FE  
                                                        u4955 0C00  
                                                        u4875 0B0E  
                                                        u4795 09F8  
                                                        i2l84 2888  
                                                        u5924 16D6  
                                                        u4964 0C2E  
                                                        u4884 0B3C  
                                                        i2l85 28C0  
                                                        u5925 16CE  
                                                        u4965 0C28  
                                                        u4885 0B36  
                                                        u4894 0B62  
                                                        u4895 0B5C  
                                                        u5944 16F2  
                                                        u7297 2CA0  
                                                        u5945 16EC  
                                                        u5954 171E  
                                                        u5955 1718  
                                                        u6870 0F1E  
                                                        u6890 0F54  
                                      ??_ModbusGetLastCommand 0009  
                                                        _TRMT 007D61  
                                                        _WREN 007D32  
                               ModbusValidateRequest@u16count 0023  
                        __size_of_ModbusSetExceptionStatusBit 004C  
                                          ?_UpdateLedRegister 0001  
                                                        _main 1132  
                                                        fsr1h 000FE2  
                                                        fsr2h 000FDA  
                                                        indf1 000FE7  
                                                        fsr1l 000FE1  
                                                        indf2 000FDF  
                                                        fsr2l 000FD9  
                                                        btemp 0073  
                                                        prodh 000FF4  
                                                        prodl 000FF3  
                                                        start 0080  
                                             __end_of_GetTime 3040  
                                                ___param_bank 000010  
                                         ??_UpdateLedRegister 0007  
                                              ?_years_to_days 000E  
                                             __end_of_InitApp 2724  
                                                _soundTestEnd 00C3  
                                                  __6sCounter 00D2  
                                        ??_CopyStringToBuffer 0009  
                                             __end_of_SetTime 2F3E  
                            __size_of_GetCurrentEventDiodeNum 000C  
                                 getTotalMinutes@totalMinutes 0007  
                                                       ?_main 0001  
                                      __size_of_ymd_to_scalar 00A4  
                                             __end_of___lbdiv 2C9A  
                                                       _EEADR 000FA9  
                                                       STR_11 0653  
                                                       STR_21 0624  
                                                       STR_13 0634  
                                                       STR_15 0648  
                                                       STR_23 0610  
                                                       STR_17 063F  
                                                       STR_25 0653  
                                                       STR_19 064E  
                                                       STR_27 0634  
                                             __end_of___lbmod 2E1A  
                                                       _CARRY 007EC0  
                                               SetHourMin@sec 000F  
                                             __end_of___lwdiv 29CE  
                                             __end_of___lwmod 2B48  
                                  __end_of_ModbusSendTxBuffer 2B00  
                                                       _RCREG 000FAE  
                                                       _RCSTA 000FAB  
                                                       _TMR0H 000FD7  
                                                       _TMR1H 000FCF  
                                                       _TMR0L 000FD6  
                                                       _TMR1L 000FCE  
                                                       _SPBRG 000FAF  
                                                       _TRISB 000F93  
                                         _ModbusProcess_FC100 1DC2  
                                         _ModbusProcess_FC101 2D50  
                                         _ModbusProcess_FC102 2F3E  
                                                       _TXREG 000FAD  
                                                       _TXSTA 000FAC  
                                         _ConfigureOscillator 3048  
                                 ModbusProcess_FC3@u8StartAdd 0020  
                                               __CFG_WRT0$OFF 000000  
                                               __CFG_WRT1$OFF 000000  
                                               __CFG_WRT2$OFF 000000  
                                               __CFG_WRT3$OFF 000000  
                                              __CFG_EBTR0$OFF 000000  
                                              __CFG_EBTR1$OFF 000000  
                                              __CFG_EBTR2$OFF 000000  
                                              __CFG_EBTR3$OFF 000000  
                                              _InitFromEeprom 20FA  
                                              ?_LoadNextEvent 0001  
                                                  Modbus@u8id 000E  
                                                       __u8id 00E0  
                                               __CFG_WRTB$OFF 000000  
                                               __CFG_WRTC$OFF 000000  
                                               __CFG_WRTD$OFF 000000  
                              __size_of_ResetEventFromCommand 0042  
                                   __end_of_UpdateLedRegister 2B8E  
                                  ModbusBuildException@u8func 0008  
                                              __CFG_EBTRB$OFF 000000  
                               __end_of_ResetEventFromCommand 2C5C  
                                             __end_of_io_poll 2596  
                                             __end_of_low_isr 0080  
                                          __size_of_AddSecond 0012  
                                                       tablat 000FF5  
                                            ymd_to_scalar@day 0022  
                                              _UartBufferHead 00CF  
                                              _UartBufferTail 00D1  
                                                       plusw2 000FDB  
                                   ModbusProcess_FC1@u8bitsno 0024  
                                                       status 000FD8  
                                             ___lbdiv@divisor 0007  
                                             years_to_days@yr 000E  
                                  __size_of_ProcessLightBlock 0258  
                                             ___lbdiv@counter 0009  
                                        ?_ModbusProcess_FC100 0001  
                                        ?_ModbusProcess_FC101 0001  
                                        ?_ModbusProcess_FC102 0001  
                                        ?_ConfigureOscillator 0001  
                                __end_of_ModbusBuildException 2F20  
                                             __initialization 2924  
                                                __end_of_main 133C  
                                        __eeFirstSoundAddress 00D4  
                           __size_of_ModbusGetUserCommandData 0008  
                         ModbusProcess_FC100@u8CopyBufferSize 0049  
                                            __end_of_LightLed 0C5C  
                                   ?_ModbusGetUserCommandData 0007  
                           ModbusProcess_FC5@u8CopyBufferSize 001B  
                                    ??_ModbusGetUserCommandId 0009  
                                  ModbusProcess_FC1@u16Coilno 0025  
                                                      ??_main 0068  
                                             ResetEvent@state 0011  
                                               __activetblptr 000002  
                                      __end_of_InitFromEeprom 21B2  
                                                  _ModbusInit 2F72  
                                                  _ModbusPoll 133C  
                                            __end_of_PortRead 2DBC  
                                       _ModbusUserCommandData 00F0  
                                              _InitUartBuffer 2FF6  
                                         _ProcessUserCommands 261C  
                                      __size_of_ModbusCalcCRC 0074  
                          ModbusProcess_FC16@u8CopyBufferSize 001F  
                                    ModbusSendTxBuffer@u16crc 0014  
                                                      _EEDATA 000FA8  
                                                      _CCPR1L 000FBE  
                                                      _EECON2 000FA7  
                                                  _SetHourMin 19AE  
                                              _LightStatusLed 1CCC  
                                                      i1l5676 005E  
                                                      i1l5678 0060  
                                                      i2l5656 28B8  
                                           ??_getTotalMinutes 0009  
                                               _ymd_to_scalar 23C2  
                                                   ??_GetTime 0009  
                                           LightStatusLed@row 000E  
                                                  _ResetEvent 29CE  
                                               main@oldMinute 01CC  
                                       CommandSetLed@ledColor 0025  
                            ModbusProcess_FC15@u16currentCoil 0026  
                               ModbusProcess_FC100@newRawTime 0045  
                                       ??_ModbusProcess_FC100 0045  
                                       ??_ModbusProcess_FC101 0016  
                                       ??_ModbusProcess_FC102 0016  
                                                   ??_InitApp 0007  
                                       ??_ConfigureOscillator 0007  
                                             _currentLedBlock 00E2  
                                             ??_years_to_days 0012  
                                                      _Modbus 2FA2  
                                                   ??_SetTime 0007  
                                            __end_of_high_isr 28C8  
                                   __playingSoundStartPosInEe 00DD  
                                               ??_ShowFailure 000F  
                                        ?_ProcessUserCommands 0001  
                                              _UartRingBuffer 0200  
                                      SwitchOffAllDiaryLeds@i 000F  
                                                   ??___lbdiv 0008  
                                                __lastAddress 00C7  
                                                   ??___lbmod 0008  
                                  ModbusProcess_FC3@u16regsno 001E  
                                          __size_of_PlaySound 00D0  
                                    ModbusProcess_FC16@u8size 0018  
                                                   ??___lwdiv 000B  
                                                   ??___lwmod 000B  
                                                      _isleap 2A1C  
                                                      _millis 2E44  
                                                      clear_0 292C  
                                                      clear_1 293E  
                                                      clear_2 294A  
                                           __end_of_AddSecond 2FDA  
                                                      _mktime 0658  
                                                __lastCommand 00DA  
                                  ResetEventFromCommand@state 000F  
                                       __end_of_PortAvailable 3048  
                                                  __au8Buffer 0100  
                                          __size_of_PortBegin 001A  
                                                   ??_io_poll 0029  
                                             ?_InitFromEeprom 0001  
                                             ??_LoadNextEvent 0009  
                                                __pdataCOMRAM 0072  
                                      __end_of_InitUartBuffer 3004  
                                                __MODBUSCoils 00E8  
                                                  PortWrite@i 000A  
                                         _PortClearReadBuffer 2FE8  
                                          __size_of_PortWrite 003E  
                                                __mediumconst 0000  
                                       _SwitchOffAllDiaryLeds 2E1A  
                                          __playingSoundSteps 00DE  
                             ModbusBuildException@u8exception 0007  
                                                   ??_low_isr 0001  
                                                      tblptrh 000FF7  
                                                      tblptrl 000FF6  
                                                      tblptru 000FF8  
                              _ModbusUserCommandAdditional1Hi 00EA  
                              _ModbusUserCommandAdditional2Hi 00EC  
                              _ModbusUserCommandAdditional3Hi 00EE  
                                  __size_of_UpdateLedRegister 0046  
                              _ModbusUserCommandAdditional1Lo 00EB  
                                            __end_of_pwm_init 2FC8  
                              _ModbusUserCommandAdditional2Lo 00ED  
                              _ModbusUserCommandAdditional3Lo 00EF  
                                      __end_of_LightStatusLed 1DC2  
                                  ModbusProcess_FC1@u8bytesno 001F  
                                            ___lbdiv@dividend 0008  
                                            years_to_days@ret 001A  
                                    ModbusProcess_FC1@u16coil 001B  
                                              ?_ymd_to_scalar 001E  
                                                  __u8lastRec 00E1  
                                             ___lbmod@divisor 0007  
                                                  __accesstop 0080  
                                     __end_of__initialization 296C  
                                             ___lbmod@counter 0009  
                                               __deviceStatus 00D3  
                                  __end_of_ModbusProcess_FC21 23C2  
                                  __end_of_ModbusProcess_FC15 1BCA  
                                  __end_of_ModbusProcess_FC16 203C  
                                  __end_of_ModbusProcess_FC17 2808  
                                  __end_of_ModbusProcess_FC43 1648  
                                             Modbus@u8txenpin 000D  
                                               ___rparam_used 000001  
                                        ?_PortClearReadBuffer 0001  
                                    ModbusProcess_FC5@u16coil 001C  
                              __size_of_ModbusValidateRequest 027E  
                                       ??_ProcessUserCommands 0029  
                           ModbusProcess_FC21@startAddrsBytes 001A  
                               __end_of_ModbusValidateRequest 0EDA  
                         ModbusValidateRequest@startAddrBytes 0018  
                                              __pcstackCOMRAM 0001  
                                               _ModbusCalcCRC 2724  
                                     _GetCurrentEventDiodeNum 3004  
                                        __end_of_fctsupported 0610  
                               ModbusProcess_FC16@u16StartAdd 0020  
                                     SetHourMin@secToNext6Sec 001E  
                                            ___lbdiv@quotient 000A  
                             __size_of_ModbusGetUserCommandId 0008  
                                         __end_of_ShowFailure 2F00  
                                ?_ModbusSetExceptionStatusBit 0007  
                                         _ModbusUserCommandId 00F1  
                                           ?_SwitchOffAllLeds 0001  
                                   InitFromEeprom@tmpModbusId 0013  
                                                 ?_ModbusInit 0007  
                                                 ?_ModbusPoll 005C  
                                             ?_InitUartBuffer 0001  
                                     __size_of_months_to_days 0046  
                                        _ModbusBuildException 2F00  
                                          ??_SwitchOffAllLeds 0007  
                                       __end_of_CommandSetLed 19AE  
                                               ??_StopPlaying 0007  
                                                  __lastCount 00C9  
                                             ?_LightStatusLed 0007  
                                    ?_ModbusGetRxBufferHeader 0001  
                                                 ?_SetHourMin 000B  
                                           __end_of_PlaySound 1F72  
                         ModbusProcess_FC101@u8CopyBufferSize 0016  
                                    ModbusGetRxBufferHeader@i 0009  
                                                  __pbssBANK0 0080  
                                                  __pbssBANK1 0100  
                                                  __pbssBANK2 0200  
                           ModbusProcess_FC6@u8CopyBufferSize 001D  
                                                   ?_LightLed 0007  
                                      __size_of_SetBuzzerDuty 0032  
                                                 ?_ResetEvent 0001  
                                           __end_of_PortBegin 2F72  
                                       ??_PortClearReadBuffer 0007  
                                                     ?_Modbus 000C  
                                       __eeSoundAddressesList 00D5  
                                           __end_of_PortWrite 2CD8  
                                              ?_ModbusCalcCRC 0007  
                                             PortWrite@buflen 0009  
                                                   ?_PortRead 0001  
                          ModbusProcess_FC17@u8CopyBufferSize 0016  
                                       _millisecondsFromStart 00BB  
                                              SetTime@newTime 0007  
                                                  _getHourMin 2E94  
                                                     ?_isleap 000C  
                                                     ?_millis 0007  
                                                     ?_mktime 002E  
                            ModbusProcess_FC21@requestDataLen 0018  
                                      ?_SwitchOffAllDiaryLeds 0001  
                                               LightLed@blink 0008  
                                __size_of_CommandSetStatusLed 0086  
                               ??_ModbusSetExceptionStatusBit 0008  
                                       ?_ModbusBuildException 0001  
                                             ??_ymd_to_scalar 0024  
                                             LoadNextEvent@v1 000D  
                                                   ?_high_isr 0001  
                                              _oldBlinkOnTime 00BF  
                              ModbusGetRxBuffer@bBuffOverflow 0009  
                                                  ??_LightLed 0009  
                                      _ModbusGetUserCommandId 3010  
                                          _ModbusSendTxBuffer 2AB4  
                            __end_of_ModbusGetUserCommandData 3020  
                                                     _GetTime 3038  
                               __size_of_ModbusGetLastCommand 003C  
                                             __inputRegsCount 00D8  
                                         __end_of_StopPlaying 2FE8  
                                                     _InitApp 26A0  
                                         LightLed@statusShift 000E  
                                                     __Hparam 0000  
                                                     _SetTime 2F20  
                                                     __Lparam 0000  
                                   ??_GetCurrentEventDiodeNum 0007  
                                         __size_of_ModbusInit 0018  
                                         ?_ModbusSendTxBuffer 0001  
                                         __size_of_ModbusPoll 01AA  
                                             __size_of_Modbus 0014  
                                                  _eventCount 0070  
                                         CopyStringToBuffer@i 000B  
                                               ?_ProcessDiary 0001  
                                                  ??_PortRead 0007  
                                                 _ShowFailure 2EE0  
                                                     ___lbdiv 2C5C  
                                                     ___lbmod 2DEE  
                                                   ?_pwm_init 0001  
                                                     ___lwdiv 297A  
                                                     ___lwmod 2B00  
                                             SetBuzzerDuty@dc 0007  
                                                __psmallconst 0600  
                             ModbusProcess_FC1@u16currentCoil 0022  
                                 __size_of_CopyStringToBuffer 0060  
                                         __size_of_SetHourMin 0112  
                                                     __pcinit 2924  
                                             __size_of_isleap 004C  
                                               _SetBuzzerDuty 2DBC  
                                             __size_of_millis 002A  
                                                     __ramtop 0600  
                                                     _blinkOn 006F  
                                             __size_of_mktime 0312  
                                                     __ptext0 1132  
                                                     __ptext1 2FB6  
                                                     __ptext2 2508  
                                                     __ptext3 261C  
                                                     __ptext4 3010  
                                                     __ptext5 2596  
                                                     __ptext6 1894  
                                                     __ptext7 3018  
                                                     __ptext8 3020  
                                                     __ptext9 3028  
                                                   _T0CONbits 000FD5  
                                                   _T1CONbits 000FCD  
                                                 PortRead@ret 0007  
                                                     _io_poll 2508  
                                                   _T2CONbits 000FCA  
                                           SetHourMin@newHour 000B  
                                         __size_of_ResetEvent 004E  
                             __end_of_ModbusGetRxBufferHeader 2D50  
                                             _getTotalMinutes 2EBA  
                                               mktime@timeptr 0044  
                                        ??_ModbusSendTxBuffer 0014  
                                                     _low_isr 0018  
                                             ModbusPoll@coils 005E  
                                     CopyStringToBuffer@objId 000A  
                                                  ??_high_isr 0001  
                                              __pintcode_body 2868  
                                        end_of_initialization 296C  
                                               __lastFunction 00F2  
                                       _ResetEventFromCommand 2C1A  
                                               __Lmediumconst 0000  
                                                     int_func 2868  
                                         __playingSoundCurPos 00DC  
                                   UpdateLedRegister@regIndex 0007  
                                             ??_ModbusCalcCRC 0009  
                                   __totalMinutesFromDayStart 00CD  
                                              ??_ProcessDiary 001F  
                                         LightLed@ststusIndex 000D  
                                                   _RCSTAbits 000FAB  
                                                     postdec1 000FE5  
                                                     postdec2 000FDD  
                                                     postinc0 000FEE  
                                                     postinc1 000FE6  
                                                     postinc2 000FDE  
                               ModbusProcess_FC1@u8currentBit 001D  
                                         ModbusProcess_FC21@i 001E  
                                         ModbusProcess_FC16@i 0023  
                                                  ??_pwm_init 0007  
                         ModbusProcess_FC102@u8CopyBufferSize 0016  
                                           SwitchOffAllLeds@i 0007  
                                            ??_InitFromEeprom 0010  
                                                 ?_getHourMin 0007  
                                              ?_SetBuzzerDuty 0007  
                           InitFromEeprom@eeSoundCountAddress 0012  
                           ModbusProcess_FC1@u8CopyBufferSize 001E  
                           ModbusProcess_FC7@u8CopyBufferSize 0016  
                                                   _PORTCbits 000F82  
                            ModbusSetExceptionStatusBit@value 0007  
                                      ??_ModbusBuildException 0007  
                                           ModbusInit@u8serno 0007  
                                                   _AddSecond 2FC8  
                                              _months_to_days 2B8E  
                                             __maxDiaryEvents 006D  
                                            ___lbmod@dividend 0008  
                                           _ModbusGetRxBuffer 2BD4  
                                                   _TRISAbits 000F92  
                                                   _TRISCbits 000F94  
                                 ModbusProcess_FC15@u16Coilno 0022  
                                           _SoundPlayNextStep 203C  
                                          ?_ModbusGetRxBuffer 0001  
                                                 _StopPlaying 2FDA  
                                 __end_of_ModbusProcess_FC100 1EA2  
                                 __end_of_ModbusProcess_FC101 2D86  
                                 __end_of_ModbusProcess_FC102 2F58  
                                 __end_of_ConfigureOscillator 304E  
                                          ?_SoundPlayNextStep 0001  
                                                _fctsupported 0601  
                                                 ___lbmod@rem 000A  
                                           __eventFromCommand 00A9  
                                                 _CCP1CONbits 000FBD  
                               ModbusProcess_FC15@u8frameByte 001F  
                                         ??_ModbusGetRxBuffer 0008  
                                                   _TXSTAbits 000FAC  
                                                  main@lastMs 01C8  
                                ModbusValidateRequest@u16regs 0028  
                                                  main@minute 01CF  
                                         ??_SoundPlayNextStep 000F  
                                   ModbusGetLastCommand@count 0007  
                                    _ModbusGetUserCommandData 3018  
                                       __end_of_years_to_days 1CCC  
                                            CommandSetLed@led 0028  
                                              __end_of_Modbus 2FB6  
                                     __end_of_getTotalMinutes 2EE0  
                                            ??_InitUartBuffer 0007  
                                          _ModbusProcess_FC21 2316  
                                          _ModbusProcess_FC15 1AC0  
                                          _ModbusProcess_FC16 1F72  
                                          _ModbusProcess_FC17 2798  
                                          _ModbusProcess_FC43 14E6  
                                               __pidataCOMRAM 3050  
                                    ModbusPoll@discreteInputs 005C  
                                              __end_of_isleap 2A68  
                                              __end_of_millis 2E6E  
                                      __end_of_months_to_days 2BD4  
                                   __end_of_ModbusGetRxBuffer 2C1A  
                                              __end_of_mktime 096A  
                                            ??_LightStatusLed 0009  
                                             ymd_to_scalar@mo 0020  
                                    CommandSetLed@commandData 0027  
                                               _UartBufferLen 00D0  
                                             ymd_to_scalar@yr 001E  
                           ModbusSetExceptionStatusBit@bitNum 000A  
                                                ??_ModbusInit 0009  
                                                ??_ModbusPoll 0065  
                                   __end_of_SoundPlayNextStep 20FA  
                                                  ?_AddSecond 0001  
                                         start_initialization 2924  
                                         ?_ModbusProcess_FC21 0001  
                                         ?_ModbusProcess_FC15 0001  
                                         ?_ModbusProcess_FC16 0016  
                                         ?_ModbusProcess_FC17 0001  
                                         ?_ModbusProcess_FC43 0001  
                                       __end_of_LoadNextEvent 1894  
                                      ?_ResetEventFromCommand 0001  
                                                ??_SetHourMin 0011  
                                         __size_of_getHourMin 0026  
                                 __end_of_ProcessUserCommands 26A0  
                                                ??_ResetEvent 000F  
                                                   _PlaySound 1EA2  
                                   __size_of_SwitchOffAllLeds 0026  
                                      __size_of_PortAvailable 0008  
                                           __size_of_LightLed 02F2  
                                            LightStatusLed@on 0007  
                                   CommandSetLed@blinkSeconds 0026  
                                         _CommandSetStatusLed 2596  
                                              getHourMin@hour 0007  
                                        ??_ModbusProcess_FC21 0016  
                                        ??_ModbusProcess_FC15 0016  
                                        ??_ModbusProcess_FC16 0019  
                                        ??_ModbusProcess_FC17 0016  
                                        ??_ModbusProcess_FC43 0016  
                                                    ??_Modbus 000E  
                                     ModbusProcess_FC15@bTemp 001E  
                            __size_of_ModbusGetRxBufferHeader 003C  
                                          __end_of_ModbusInit 2F8A  
                                          __end_of_ModbusPoll 14E6  
                                                   _PortBegin 2F58  
                                             ??_SetBuzzerDuty 0009  
                                     ModbusProcess_FC43@objId 0018  
                                       _ModbusValidateRequest 0C5C  
                                       CopyStringToBuffer@len 0008  
                                       CopyStringToBuffer@src 0007  
                                                   _PortWrite 2C9A  
                                           __size_of_PortRead 0036  
                                                    ??_isleap 000E  
                                                    ??_millis 000B  
                                     ??_SwitchOffAllDiaryLeds 000F  
                                                    ??_mktime 0032  
                                        CommandSetLed@soundId 0024  
                                          __end_of_SetHourMin 1AC0  
                                           __holdingRegsCount 00D7  
                                             ?_months_to_days 000E  
                                              ModbusCalcCRC@i 0010  
                                              ModbusCalcCRC@j 0011  
                               ModbusProcess_FC21@recLenBytes 001C  
                                        ?_CommandSetStatusLed 0001  
                                                 __pbssCOMRAM 006D  
                                          __end_of_ResetEvent 2A1C  
                                               __pcstackBANK1 01C8  
                                     ModbusProcess_FC6@u16add 001E  
                                     ModbusProcess_FC6@u16val 001B  
                                        __end_of_ProcessDiary 2316  
                                     ModbusProcess_FC3@u8size 0018  
                                     ?_ModbusGetUserCommandId 0007  
                                 __end_of_PortClearReadBuffer 2FF6  
                                     ModbusProcess_FC6@u8size 0018  
                                           __size_of_high_isr 28C0  
                                                    ?_GetTime 0007  
                                                  ?_PlaySound 0017  
                                                    ?_InitApp 0001  
                                          PlaySound@soundAddr 001E  
                                                    ?_SetTime 0001  
                                            ___lwdiv@dividend 0007  
                                 ModbusProcess_FC43@devIdCode 0016  
                              ModbusProcess_FC15@u8currentBit 0025  
                              ModbusValidateRequest@u16MsgCRC 0020  
                                                   __pintcode 0008  
                                                  ?_PortBegin 0001  
                                                ?_ShowFailure 0001  
                          ModbusProcess_FC21@u8CopyBufferSize 0019  
                          ModbusProcess_FC43@u8CopyBufferSize 0017  
                                                    ?___lbdiv 0007  
                                                    ?___lbmod 0007  
                                      __size_of_CommandSetLed 011A  
                                                    ?___lwdiv 0007  
                                                    ?___lwmod 0007  
                                                  ?_PortWrite 0007  
                                            ?_getTotalMinutes 0007  
                                                 __pintcodelo 0018  
                                __end_of_ModbusGetLastCommand 2D14  
                                           __size_of_pwm_init 0012  
                                              ModbusInit@u8id 000B  
                                    ModbusPoll@inputRegsCount 0061  
                                  __size_of_ModbusGetRxBuffer 0046  
                                 ModbusGetLastCommand@address 0009  
                                               _PortAvailable 3040  
                                               __playingEndMs 00AF  
                                            __MODBUSInputRegs 01AA  
                                                 __smallconst 0600  
                                       ??_CommandSetStatusLed 001F  
                                                    ?_io_poll 0001  
                                               __u8BufferSize 006E  
                                                 ??_AddSecond 0007  
                                  __size_of_SoundPlayNextStep 00BE  
                                 ModbusGetLastCommand@command 0008  
                                          __MODBUSHoldingRegs 018C  
                              __end_of_ModbusGetUserCommandId 3018  
                                                    ?_low_isr 0001  
                                         io_poll@lastFunction 0032  
                                       io_poll@lastEndAddress 002D  
                                            ___lwdiv@quotient 000C  
                                            SetHourMin@newMin 000D  
                                   _ResetEventFromCommand$912 0010  
                                       __end_of_ymd_to_scalar 2466  
                                            SetHourMin@tmpSec 001D  
                                    ProcessDiary@totalMinutes 0023  
                                      ModbusValidateRequest@i 0025  
                                                    _LATAbits 000F89  
                                                    _LATCbits 000F8B  
                                             _eventAcceptTime 00E3  
                                              LightLed@ledNum 000C  
                                                    _IPR1bits 000F9F  
                                                    _PIE1bits 000F9D  
                                           ModbusPoll@i8state 0066  
                                                 __soundCount 00DF  
                                                    _PIR1bits 000F9E  
                                                 _ledStatuses 0090  
                                                    _RCONbits 000FD0  
                                  __end_of_CopyStringToBuffer 2868  
                                      ?_ModbusValidateRequest 0001  
                                          ModbusProcess_FC3@i 0021  
                                       ModbusCalcCRC@u8length 000B  
                                                ??_getHourMin 000B  
                                         LightStatusLed@blink 0008  
                                             __isSoundPlaying 00D9  
                                              ?_PortAvailable 0001  
                         __end_of_ModbusSetExceptionStatusBit 2AB4  
                                 _ModbusSetExceptionStatusBit 2A68  
                                      __nextEventPlayDuration 00CB  
                                                    InitApp@i 0007  
                                                 _globalHours 0072  
                                                   main@curMs 01D0  
                                 __size_of_ModbusSendTxBuffer 004C  
                                                ?_StopPlaying 0001  
                                               _CommandSetLed 1894  
                                           _ModbusProcess_FC1 1648  
                                           _ModbusProcess_FC3 21B2  
                                           _ModbusProcess_FC5 2466  
                                           _ModbusProcess_FC6 28C8  
                                           _ModbusProcess_FC7 2F8A  
                                                 _INTCON2bits 000FF1  
                                  ??_ModbusGetUserCommandData 0009  
                              CommandSetStatusLed@commandData 0021  
                                          ?_ModbusProcess_FC1 0016  
                                          ?_ModbusProcess_FC3 0016  
                                          ?_ModbusProcess_FC5 0001  
                                          ?_ModbusProcess_FC6 0016  
                                          ?_ModbusProcess_FC7 0001  
                                                    _LightLed 096A  
                                    ?_GetCurrentEventDiodeNum 0001  
                                          __end_of_getHourMin 2EBA  
                                                 ??_PlaySound 0019  
                                       ModbusPoll@u8exception 0067  
                                            _SwitchOffAllLeds 2E6E  
                                            __size_of_GetTime 0008  
                                            __size_of_InitApp 0084  
                                                    __Hrparam 0000  
                                                    __u32time 00B3  
                                     _ModbusGetRxBufferHeader 2D14  
                                               getHourMin@min 0009  
                                         ??_ModbusProcess_FC1 0018  
                                         ??_ModbusProcess_FC3 0019  
                                         ??_ModbusProcess_FC5 0016  
                                         ??_ModbusProcess_FC6 0019  
                                         ??_ModbusProcess_FC7 0016  
                                       __end_of_ModbusCalcCRC 2798  
                                                    __Lrparam 0000  
                                      CommandSetStatusLed@led 0022  
                                            __size_of_SetTime 001E  
                                                 ??_PortBegin 0007  
                                      ModbusProcess_FC15@regs 0024  
                                                    _PortRead 2D86  
                                      ModbusProcess_FC16@regs 0016  
                                      ModbusProcess_FC16@temp 001D  
                                                 ??_PortWrite 000A  
                                            __size_of___lbdiv 003E  
                                               Modbus@u8serno 000C  
                                            __size_of___lbmod 002C  
                                            __size_of___lwdiv 0054  
                                            __size_of___lwmod 0048  
                           ModbusProcess_FC3@u8CopyBufferSize 001D  
                              ModbusValidateRequest@readDevId 0026  
                                                   millis@ret 000B  
                               ModbusProcess_FC1@u16StartCoil 0020  
                                       __size_of_ProcessDiary 00AE  
                                                 _isleap$2281 000F  
                                                 _currentTime 00E4  
                                     ??_ResetEventFromCommand 000F  
                                            __size_of_io_poll 008E  
                                                    _diffTime 00B7  
                                  ModbusProcess_FC100@newTime 004A  
                                   __end_of_ModbusProcess_FC1 1774  
                                   __end_of_ModbusProcess_FC3 2268  
                                   __end_of_ModbusProcess_FC5 2508  
                                   __end_of_ModbusProcess_FC6 2924  
                                   __end_of_ModbusProcess_FC7 2FA2  
                               __size_of_ModbusBuildException 0020  
                                             ___lwdiv@divisor 0009  
                                          io_poll@lastAddress 002F  
                                             ___lwdiv@counter 000B  
                                                    _ledBlink 0080  
                                              ?_CommandSetLed 0001  
                                            __size_of_low_isr 0068  
                                                    __ptext10 3030  
                                                    __ptext11 2CD8  
                                                    __ptext20 2C1A  
                                                    __ptext12 20FA  
                                                    __ptext21 29CE  
                                                    __ptext13 2E6E  
                                                    __ptext30 1774  
                                                    __ptext22 0EDA  
                                                    __ptext14 2EE0  
                                                    __ptext31 2EBA  
                                                    __ptext23 2B48  
                                                    __ptext15 1CCC  
                                                    __ptext40 14E6  
                                                    __ptext32 096A  
                                                    __ptext24 2268  
                                                    __ptext16 2FA2  
                                                    __ptext41 2808  
                                                    __ptext33 3004  
                                                    __ptext25 1EA2  
                                                    __ptext17 2F72  
                                                    __ptext50 0658  
                                                    __ptext42 21B2  
                                                    __ptext34 133C  
                                                    __ptext26 203C  
                                                    __ptext18 2E94  
                                                    __ptext51 23C2  
                                                    __ptext43 2316  
                                                    __ptext35 2FE8  
                                                    __ptext27 2FDA  
                                                    __ptext19 2E1A  
                                                    __ptext60 2C5C  
                                                    __ptext52 1BCA  
                                                    __ptext44 2798  
                                                    __ptext36 0C5C  
                                                    __ptext28 2DBC  
                                                    __ptext61 2A68  
                                                    __ptext53 2B8E  
                                                    __ptext45 1F72  
                                                    __ptext37 2F8A  
                                                    __ptext29 3038  
                                                    __ptext70 3040  
                                                    __ptext62 1648  
                                                    __ptext54 297A  
                                                    __ptext46 1AC0  
                                                    __ptext38 28C8  
                                                    __ptext71 2F00  
                                                    __ptext63 2AB4  
                                                    __ptext55 2A1C  
                                                    __ptext47 2F3E  
                                                    __ptext39 2466  
                                                    __ptext72 26A0  
                                                    __ptext64 2E44  
                                                    __ptext56 2B00  
                                                    __ptext48 2D50  
                                                    __ptext73 2F58  
                                                    __ptext65 2C9A  
                                                    __ptext57 2F20  
                                                    __ptext49 1DC2  
                                                    __ptext74 2FF6  
                                                    __ptext66 2724  
                                                    __ptext58 19AE  
                                                    __ptext75 3048  
                                                    __ptext67 2D14  
                                                    __ptext59 2DEE  
                                                    __ptext76 2FC8  
                                                    __ptext68 2BD4  
                                                    __ptext69 2D86  
                                                    _high_isr 0008  
                                          io_poll@lastCommand 0031  
                                               __size_of_main 020A  
                                        _ModbusGetLastCommand 2CD8  
                                    ShowFailure@additionalLed 000F  
                                __size_of_ModbusProcess_FC100 00E0  
                                __size_of_ModbusProcess_FC101 0036  
                                __size_of_ModbusProcess_FC102 001A  
                                __size_of_ConfigureOscillator 0006  
                                                _ProcessDiary 2268  
                                                    int$flags 0073  
                                            ??_months_to_days 0010  
                                                    _pwm_init 2FB6  
                                             ??_PortAvailable 0007  
                                        __size_of_ShowFailure 0020  
                                                    main@hour 01CE  
                                            __exceptionStatus 00D6  
                                            LightLed@ledState 0007  
                              __size_of_SwitchOffAllDiaryLeds 002A  
                               __end_of_SwitchOffAllDiaryLeds 2E44  
                                          _ymd_to_scalar$2294 0028  
                                                  _INTCONbits 000FF2  
                   __end_of_ModbusGetUserCommandAdditional1Hi 3038  
                  __size_of_ModbusGetUserCommandAdditional1Hi 0008  
                         ??_ModbusGetUserCommandAdditional1Hi 0009  
                          ?_ModbusGetUserCommandAdditional1Hi 0007  
                           _ModbusGetUserCommandAdditional1Hi 3030  
                   __end_of_ModbusGetUserCommandAdditional2Hi 3028  
                  __size_of_ModbusGetUserCommandAdditional2Hi 0008  
                         ??_ModbusGetUserCommandAdditional2Hi 0009  
                          ?_ModbusGetUserCommandAdditional2Hi 0007  
                           _ModbusGetUserCommandAdditional2Hi 3020  
                   __end_of_ModbusGetUserCommandAdditional1Lo 3030  
                  __size_of_ModbusGetUserCommandAdditional1Lo 0008  
                         ??_ModbusGetUserCommandAdditional1Lo 0009  
                          ?_ModbusGetUserCommandAdditional1Lo 0007  
                           _ModbusGetUserCommandAdditional1Lo 3028  
                                     __size_of_InitFromEeprom 00B8  
                                      ProcessLightBlock@curMs 0008  
                                   SoundPlayNextStep@duration 0016  
                             __end_of_GetCurrentEventDiodeNum 3010  
                                      __size_of_years_to_days 0102  
                                           __nextEventSoundId 00DB  
                                                    isleap@yr 000C  
                                       ModbusProcess_FC1@regs 0016  
                                       ModbusProcess_FC3@regs 0016  
                                                    intlevel1 304E  
                                                    intlevel2 304E  
                                       ModbusProcess_FC5@regs 001E  
                                       ModbusProcess_FC6@regs 0016  
                                            PlaySound@soundId 001D  
                                                PortWrite@buf 0007  
                                            ___lwmod@dividend 0007  
                                       ?_ModbusGetLastCommand 0007  
                                   ??_ModbusGetRxBufferHeader 0008  
                                                    mktime@tt 0040  
                                            main@totalMinutes 01D4  
                                                    low_isr@c 0006  
                                         ymd_to_scalar@scalar 002A  
                                   SoundPlayNextStep@stepDuty 0014  
                                 __size_of_ModbusProcess_FC21 00AC  
                                 __size_of_ModbusProcess_FC15 010A  
                                 __size_of_ModbusProcess_FC16 00CA  
                                 __size_of_ModbusProcess_FC17 0070  
                                 __size_of_ModbusProcess_FC43 0162  
                                           _ProcessLightBlock 0EDA  
                                __size_of_ProcessUserCommands 0084  
                                      __size_of_LoadNextEvent 0120  
                                          ?_ProcessLightBlock 0008  
                                       __end_of_SetBuzzerDuty 2DEE  
                                         ModbusPoll@u8current 0065  
                                         ??_ProcessLightBlock 000A  
                                             ___lwmod@divisor 0009  
                                             ??_CommandSetLed 001F  
                                             ___lwmod@counter 000B  
                                  __size_of_ModbusProcess_FC1 012C  
                                  __size_of_ModbusProcess_FC3 00B6  
                                  __size_of_ModbusProcess_FC5 00A2  
                                  __size_of_ModbusProcess_FC6 005C  
                                  __size_of_ModbusProcess_FC7 0018  
                                           __currenDiaryEvent 00A0  
                                     __size_of_InitUartBuffer 000E  
                                          ModbusCalcCRC@temp2 000C  
                                 ModbusValidateRequest@u8regs 0027  
                                   ModbusProcess_FC15@u16coil 001B  
                                     __size_of_LightStatusLed 00F6  
                                       PlaySound@playDuration 0017  
                                        __size_of_StopPlaying 000E  
                                         ModbusInit@u8txenpin 0008  
                                           ModbusCalcCRC@flag 000E  
                                           ModbusCalcCRC@temp 0012  
                                   __end_of_ProcessLightBlock 1132  
                                     ??_ModbusValidateRequest 0014  
                                  ModbusPoll@holdingRegsCount 0064  
                                __size_of_PortClearReadBuffer 000E  
                                  ModbusProcess_FC15@u8bitsno 0028  
